===== general idea  ================================================
Acceptance is basic information about the detector. Running simulation is usually the only way to have it accurately when there's field and complicated geometry involved. But once the simulation is done and the info stored in some format. You don't need to run simulation again to obtain it. 

In general, a particle accepted or not by a detector somewhere is determined by the particle type, momentum, angle and vertex position.
We can run simulation with a single particle type with various mom and angle from a fixed vertex and summarize the acceptance as histogram with value 0 or 1 in dimension of mom, theta, phi angle of this kind of particle at this vertex
Assuming physics reaction is not vertex dependent, we can run the above simulation with the particles evenly distributed within a known target length and raster size, and the resulting 3D acceptance  histogram can have values between 0 and 1 as averaging effect over vertex
If an experiment setup have azimuthal symmetry, the result can be summarized in mom and theta only.

===== How we do it for SoLID =====================================================
Here we try to do it for SoLID to study acceptance and record the results in some histograms

shoot particles from target position over target length into the detector and look for the hits on various detectors, if there is a hit, this event is considered detected and the generated particle P and theta, phi are recorded.

geantino can be used to test neutron particle
chargedgeantino(+1 particle) can be used to test positive particle
chargedgeantino(+1 particle) and flip field by gemc option SCALE_FIELD="field_name, -1" can be used to test negative particle
Use real particle to include decay effect

In "simple geometry", use only vacuum and "Kryptonite" as material to make sure particles can get blocked.
In "full geometry", use all real materials, then the results would include material effects

We use virtualplane in front of detectors to see particle hits by GEMC built-in flux bank with "true info" turned on
When analyzing results, include cuts to choose good detector areas because flux detector

==== how to run it ====================================================================

"simple geometry"
1. run simulation with the gcard included like "gemc acceptance_solid_SIDIS_He3.gcard"
2. convert output from evio to root like "evio2root -INPUTF=acceptance_solid_SIDIS_He3_electron_1e7.evio"
3. analyze results by "root 'acceptance.C+("acceptance_solid_SIDIS_He3_electron_1e7.root")'" (the script runs much faster when compiled)
4. there are many histograms in a root file acceptance_solid_SIDIS_He3_electron_1e7_output.root
5. there are a few histograms in another root file acceptance_solid_SIDIS_He3_electron_1e7_output_final.root which is only some histograms for late use and some picture file output 

"full geometry"
need to run full simulation with evenly distributed particles

A good acceptance needs large enough statistics like 1e7 to prevents any artificial structures like holes.

= result ===================================================

We have png and root output files containing acceptance histograms.
acceptance in P, theta, phi histograms are stored.
By definition, acceptance of a particle should be 0 or 1 if all degree of freedom are taken into consideration, including particle 3 momentum and particle 3 vertex.
Here we only record results in 3 momentum and integral over 3 vertex with a assumption that particles are evenly distributed over their 3 vertex, thus we have acceptance value between 0 and 1

The histograms are
* For solid_PVDIS, histogram "acceptance_ThetaP_forwardangle" is in Theta and P
* For solid_SIDIS_He3 and solid_JPsi, histogram "acceptance_ThetaP_forwardangle" and "acceptance_ThetaP_largeangle" is in Theta and P
* For solid_SIDIS_NH3, histogram "acceptance_ThetaPhiP_largeangle" and "acceptance_ThetaPhiP_forwardangle" are in Theta, Phi and P

"simple geometry" results are 
* result_PVDIS/201503, with baffle "babarmore1_block" babarmore1 and photon blocker before EC
* result_SIDIS_He3/201402, with target window collimator, both downstream and upstream blocking forward angle
* result_SIDIS_He3/201701, with target window collimator, downstream blocking forward angle, upstream block both forward and large angle
* result_SIDIS_He3/201701_24GeV, like 201701 with 24GeV beam
* result_SIDIS_NH3/201503, with wrong ptarget field and the sheet of flame cut is NOT applied
* result_SIDIS_NH3/201710, with oxford ptarget field and gemc handling cylindircal-x field wrong and the 201710 sheet of flame cut is applied
* result_SIDIS_NH3/202012, with oxford ptarget field and gemc handling cylindircal-x field correctly and the 202012 sheet of flame cut is applied
* result_SIDIS_NH3/202012_24GeV, like 202012 with 24GeV beam
* result_JPsi/201501, with target position at z=-315cm
* result_JPsi/201501_24GeV,  like 201501 with 24GeV beam

"full geometry" results are 
* result_SIDIS_NH3/202012_full, like 202012 but using full geometry with data at /cache/halla/solid/sim/solid_gemc/SIDIS_NH3_JLAB_VERSION_1.3/pass6/solid_SIDIS_NH3_even_*_1e7.root

== how to use result in histogram ======================

All histogram are defined in certain range of XYZ and bin size.
You can read acceptance without knowing range or bin size this way.

  int bin,binx,biny,binz;
  bin=h_2D->FindBin(theta,p);
  h_2D->GetBinXYZ(bin,binx,biny,binz);
  acceptance = h_2D->GetBinContent(binx,biny);  
  bin=h_3D->FindBin(theta,phi,p);
  h_3D->GetBinXYZ(bin,binx,biny,binz);
  acceptance = h_3D->GetBinContent(binx,biny,binz);  
  
see a complete example using solid_JPsi acceptance to add entries in JPsi generator output root tree for every final particles  
https://jlabsvn.jlab.org/svnroot/solid/evgen/JPsi/accep.C 

= log ================================
updated 2021_09_28 by Zhiwen Zhao 
updated 2017_11_14 by Zhiwen Zhao 
created 2014_08_14 by Zhiwen Zhao 
previous version at solid_gemc/analysistool/acceptance