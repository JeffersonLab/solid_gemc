#include "CaloSimDetectorConstruction.hh"

#include "G4Material.hh"
#include "G4Box.hh"
#include "G4Tubs.hh"
#include "G4LogicalVolume.hh"
#include "G4ThreeVector.hh"
#include "G4PVPlacement.hh"
#include "globals.hh"

CaloSimDetectorConstruction::CaloSimDetectorConstruction()
 :  experimentalHall_log(0), tracker_log(0),
    calorimeterBlock_log(0), calorimeterLayer_log(0),
    experimentalHall_phys(0), calorimeterLayer_phys(0),
    calorimeterBlock_phys(0), tracker_phys(0)
{;}

CaloSimDetectorConstruction::~CaloSimDetectorConstruction()
{
}

G4VPhysicalVolume* CaloSimDetectorConstruction::Construct()
{

  //------------------------------------------------------ materials

  G4double a;  // atomic mass
  G4double z;  // atomic number
  G4double density;


  G4String name;

  a = 39.95*g/mole;
  density = 1.782e-03*g/cm3;
  G4Material* Ar = new G4Material(name="ArgonGas", z=18., a, density);

  a = 26.98*g/mole;
  density = 2.7*g/cm3;
  G4Material* Al = new G4Material(name="Aluminum", z=13., a, density);

  a = 207.19*g/mole;
  density = 11.35*g/cm3;
  G4Material* Pb = new G4Material(name="Lead", z=82., a, density);


  //  buildMaterials();

  //------------------------------------------------------ volumes

  //------------------------------ experimental hall (world volume)
  //------------------------------ beam line along x axis

  G4double expHall_x = 3.0*m;
  G4double expHall_y = 1.0*m;
  G4double expHall_z = 1.0*m;
  G4Box* experimentalHall_box
    = new G4Box("expHall_box",expHall_x,expHall_y,expHall_z);
  experimentalHall_log = new G4LogicalVolume(experimentalHall_box,
                                             Ar,"expHall_log",0,0,0);
  experimentalHall_phys = new G4PVPlacement(0,G4ThreeVector(),
                                      experimentalHall_log,"expHall",0,false,0);

  //------------------------------ a tracker tube

  G4double innerRadiusOfTheTube = 0.*cm;
  G4double outerRadiusOfTheTube = 60.*cm;
  G4double hightOfTheTube = 50.*cm;
  G4double startAngleOfTheTube = 0.*deg;
  G4double spanningAngleOfTheTube = 360.*deg;
  G4Tubs* tracker_tube = new G4Tubs("tracker_tube",innerRadiusOfTheTube,
                                    outerRadiusOfTheTube,hightOfTheTube,
                                    startAngleOfTheTube,spanningAngleOfTheTube);
  tracker_log = new G4LogicalVolume(tracker_tube,Aluminum,"tracker_log",0,0,0);
  G4double trackerPos_x = -1.0*m;
  G4double trackerPos_y = 0.*m;
  G4double trackerPos_z = 0.*m;
  tracker_phys = new G4PVPlacement(0,
             G4ThreeVector(trackerPos_x,trackerPos_y,trackerPos_z),
             tracker_log,"tracker",experimentalHall_log,false,0);

  //------------------------------ a calorimeter block

  G4double block_x = 1.0*m;
  G4double block_y = 50.0*cm;
  G4double block_z = 50.0*cm;
  G4Box* calorimeterBlock_box = new G4Box("calBlock_box",block_x,
                                          block_y,block_z);
  calorimeterBlock_log = new G4LogicalVolume(calorimeterBlock_box,
                                             Lead,"caloBlock_log",0,0,0);
  G4double blockPos_x = 1.0*m;
  G4double blockPos_y = 0.0*m;
  G4double blockPos_z = 0.0*m;
  calorimeterBlock_phys = new G4PVPlacement(0,
             G4ThreeVector(blockPos_x,blockPos_y,blockPos_z),
             calorimeterBlock_log,"caloBlock",experimentalHall_log,false,0);

  //------------------------------ calorimeter layers

  G4double calo_x = 1.*cm;
  G4double calo_y = 40.*cm;
  G4double calo_z = 40.*cm;
  G4Box* calorimeterLayer_box = new G4Box("caloLayer_box",
                                          calo_x,calo_y,calo_z);
  calorimeterLayer_log = new G4LogicalVolume(calorimeterLayer_box,
                                             Aluminum,"caloLayer_log",0,0,0);
  for(G4int i=0;i<19;i++) // loop for 19 layers
  {
    G4double caloPos_x = (i-9)*10.*cm;
    G4double caloPos_y = 0.0*m;
    G4double caloPos_z = 0.0*m;
    calorimeterLayer_phys = new G4PVPlacement(0,
               G4ThreeVector(caloPos_x,caloPos_y,caloPos_z),
               calorimeterLayer_log,"caloLayer",calorimeterBlock_log,false,i);
  }

  //------------------------------------------------------------------

  return experimentalHall_phys;
}



/*
// This function is a private member of class CaloSimDetectorConstruction
void CaloSimDetectorConstruction::buildMaterials()
{
  G4double a, z, density;
  G4String name, symbol;
  G4double temperature, pressure;

  // Elements
  G4double aH = 1.00794*g/mole;
  elH = new G4Element("Hydrogen",   symbol="H",  1, aH);
  G4double aC = 12.0107*g/mole;
  elC = new G4Element("Carbon",     symbol="C",  6, aC);
  G4double aN = 14.01*g/mole;
  elN = new G4Element("Nitrogen",   symbol="N",  7, aN);
  G4double aO = 16.00*g/mole;
  elO = new G4Element("Oxygen",     symbol="O",  8, aO);
  G4double aF = 18.9984032*g/mole;
  elF = new G4Element("Flourine",   symbol="F",  9, aF);
  G4double aSi = 28.0855*g/mole;
  elSi = new G4Element("Silicon",   symbol="Si", 14, aSi);
  G4double aS = 32.066*g/mole;
  elS = new G4Element("Sulfur",     symbol="S",  16, aS);
  G4double aCl = 35.4527*g/mole;
  elCl = new G4Element("Chlorine",  symbol="Cl", 17, aCl);
  G4double aCr = 51.9961*g/mole;
  elCr = new G4Element("Chromium",  symbol="Cr", 24, aCr);
  G4double aMn = 54.938049*g/mole;
  elMn = new G4Element("Manganese", symbol="Mn", 25, aMn);
  G4double aFe = 55.845*g/mole;
  elFe = new G4Element("Iron",      symbol="Fe", 26, aFe);
  G4double aCo = 58.933*g/mole;
  elCo = new G4Element("Cobalt",    symbol="Co", 27, aCo);
  G4double aNi = 58.6934*g/mole;
  elNi = new G4Element("Nickel",    symbol="Ni", 28, aNi);
  G4double aW = 183.84*g/mole;
  elW = new G4Element("Tungsten",   symbol="W",  74, aW);
  G4double aSn = 118.710*g/mole;
  elSn = new G4Element("Tin",       symbol="Sn", 50, aSn);
  G4double aAu = 196.967*g/mole;
  elAu = new G4Element("Gold",      symbol="Au", 79, aAu);

  //
  // Bulk Solids
  //

  //Aluminum
  z = 13.0;
  a = 26.98*g/mole;
  density = 2.7*g/cm3;
  Aluminum = new G4Material("Aluminum", z, a, density); 


  //BC404 Scintillator
  density = 1.032*g/cm3;
  BC404 = new G4Material("BC404", density, 2);
  G4double HCRatioBC404 = 1.100;
  G4double HWeightBC404 = HCRatioBC404*aH/(HCRatioBC404*aH +aC);
  BC404->AddElement(elH, HWeightBC404);
  BC404->AddElement(elC, 1-HWeightBC404);

  //BC408 Scintillator
  density = 1.032*g/cm3;
  BC408 = new G4Material("BC408", density, 2);
  G4double HCRatioBC408 = 1.104;
  G4double HWeightBC408 = HCRatioBC408*aH/(HCRatioBC408*aH +aC);
  BC408->AddElement(elH, HWeightBC408);
  BC408->AddElement(elC, 1-HWeightBC408);
  
  //Iron
  z = 26.0;
  a = 55.845*g/mole;
  density = 7.874*g/cm3;
  Iron = new G4Material("Iron", z, a, density);

  //Lead
  z = 82.0;
  a = 207.19*g/mole;
  density = 11.35*g/cm3;
  Lead = new G4Material("Lead", z, a, density);

  //Mylar
  density = 1.39*g/cm3;
  Mylar = new G4Material("Mylar", density, 3);
  Mylar->AddElement(elC, 5);
  Mylar->AddElement(elH, 4);
  Mylar->AddElement(elO, 2);

  //Stainless Steel
  density = 7.9*g/cm3;
  SSteel = new G4Material("SSteel", density, 5, kStateSolid);
  SSteel->AddElement(elCr,.19);
  SSteel->AddElement(elFe,.6875);
  SSteel->AddElement(elMn,.02);
  SSteel->AddElement(elNi,.0925);
  SSteel->AddElement(elSi,.01);
  
  //Sulfur
  z = 16.0;
  a = 32.006*g/mole;
  //   density = 2.06860*g/cm3;
  density = 1.58*g/cm3;  //this is target made and spec'd by Bernhard
  Sulfur = new G4Material("Sulfur", z, a, density);
  
  //Tin
  z = 50.0;
  a = 118.710*g/mole;
  density = 7.310*g/cm3;
  Tin = new G4Material("Tin", z, a, density);
  
  //Tungsten
  z = 74.0;
  a = 183.84*g/mole;
  density = 19.250*g/cm3;
  Tungsten = new G4Material("Tungsten", z, a, density);
  
  //
  // Gases
  //

  //Air
  density = 1.2931*mg/cm3;
  Air = new G4Material("Air", density, 2);
  Air->AddElement(elN, .7);
  Air->AddElement(elO, .3);


  //Vacuum (Galactic)
  density     = 1.e-25*g/cm3;
  pressure    = 1.e-25*atmosphere;
  temperature = pressure/(density*k_Boltzmann);
  
  //Vacuum (beam)
  //   density     = 1.e-7*mg/cm3;
  //   pressure    = 2.e-2*atmosphere;
  //   temperature = pressure/(density*k_Boltzmann);
  Vacuum = new G4Material("Vacuum", density, 1, kStateGas,
			  temperature, pressure);
  Vacuum->AddMaterial(Air, 1.);
  
}

*/
