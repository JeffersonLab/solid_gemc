 ALV_minus_lab   = outgoing lepton (mu- or e-). format is 0=E, 1=px, 2= py, 3= pz (same for all 4-vectors arrays).
 ALV_plus_lab    = outgoing antilepton (mu+ or e+)
 ALV_gamma_in    = incoming photon
 ALV_el_in       = electron beam in case we are working in quasi-real photoproduction
 ALV_Recoil_lab  = recoil proton
 ALV_el_out      = scattered electron bean in case we are working in quasi-real photoproduction
 AV_PolTarget    = target polarization vector => not fixed !
 AV_PolBeam      = beam polarization vector (circular component) => not fixed !
 AV_PolBeam_Lin  = beam polarization vector (linear component) => not fixed !
 Q2              = virtuality of incoming photon in case we are working in quasi-real photoproduction 
 theta_beam      = scattering angle of beam electron in case we are working in quasi-real photoproduction
 phi_beam        = azimuthal angle of beam electron in case we are working in quasi-real photoproduction
 yy              = y=Egamma/Eelectron= inelasticity in case we are working in quasi-real photoproduction
 Qp2             = Q'2 = invariant mass of the emitted virtual photon and of the lepton pair 
 tt              = momentum transfert = Mandelstam variable
 RotAxis         = arbitrary rotation of the reaction plane (radians)
 Psi_p           = polarization angle of the target (see scheme, there are 3 arrows)
 Psi_g           = polarization angle of the incoming photon (see scheme, there are 2 arrows)
 ttmin           = minimal value of -t at this kinematic
 Phi_CMV         = azimuthal angle between lepton decay plane and reaction plane (see scheme)
 Theta_CMV       = angle between lepton direction in the frame of CM of the virtual photon and the boost direction (photon direction in gamma-P CM frame)  (see scheme)
 Egamma          = energy of incoming photon
 cross_tot       = total cross section taking acount polarization effects => not fixed !
 cross_tot_unpol = total cross section
 cross_BH        = cross section if there were only BH
 cross_TCS       = cross section if there were only TCS
 W_tot           = total cross section taking account connexion to the photon flux and polarization effects => not fixed !
 W_tot_unpol     = total cross section taking account connexion to the photon flux
 W_BH            = BH cross section taking account connexion to the photon flux
 W_TCS           = TCS cross section taking account connexion to the photon flux
 DeltaBin        =  => not fixed !
 LinPol          =  => not fixed !
 CircPol         = Polarization of the beam
 TargetPol       =  => not fixed !
 VirtualFlag     = if 0, the incoming photon comes from bremsstrahlung in the target, if 1, it is a quasi-real photon from interaction with low Q2
 Flux_qr         = quasi-real photon flux = probability of photon emission at this kinematic
 Flux_bmr        = bremsstrahlung photon flux = probability of photon emission at this kinematic
 epsilon         = sigmaL/sigmaT (quasi-real only) => not fixed !
 Abeam_polcirc   = Circularly polarized beam spin asymmetry
 Abeam_pollin    = linearly polarized beam spin asymmetry
 Atarget_long    = longitudinnaly polarized target spin asymmetry
 Atarget_trans   = transversally polarized target spin asymmetry (in reaction plane= along px)
 Atarget_trans_2 = transversally polarized target spin asymmetry (perpendicular to the reaction plane = along py)
 A_circ_long     = double spin asymmetry with Circularly polarized beam and longitudinnaly polarized target
 A_circ_trans    = double spin asymmetry with Circularly polarized beam and  transversally polarized target (in reaction plane= along px)
 A_circ_trans_2  = double spin asymmetry with Circularly polarized beam and  transversally polarized target (perpendicular to the reaction plane = along py)
 A_lin_long      = double spin asymmetry with linearly polarized beam and longitudinnaly polarized target
 A_lin_trans     = double spin asymmetry with linearly polarized beam and transversally polarized target (in reaction plane= along px)
 A_lin_trans_2   = double spin asymmetry with linearly polarized beam and transversally polarized target (perpendicular to the reaction plane = along py
 EventNumber     = arbitrary number to recognize the event
 TrueEventNumber = number of the event in the process. the last one gives the total number of events which were initially processed (not saved if there are out from the 'physical' phase space). The generation phase space is constant.

 ========================= tree structure ====================================
 The file will contain 3 Tree:
DebugTree: for the first 1000 entries, I save all 4-vectors in different frames
TCS_Tree: is filled only if one run TCS. For Vardan, the angle that you requested is Psi_g.
DDVCS_Tree: is filled only if one run DDVCS. 

Simulations are now running for a first DDVCS file. After it is complete, I will run a TCS file. I will send you directly the files and check it also by myself. If all is working well, I will run the full production tonight. I think that we need 2 hours for the production of the first DDVCS and TCS set of events that are running. The limitation in time is the load of the cross section tables, it is not the production of events itself. After that, it will be faster.
For TCS, I have to run 2 times for the tests: for photoproduction and for quasireal. 
 
     // for debug:

    Debug_Tree->Branch("ALV_minus_lab",&ALV_minus_lab,"ALV_minus_lab[4]/D");
    Debug_Tree->Branch("ALV_plus_lab",&ALV_plus_lab,"ALV_plus_lab[4]/D");
    Debug_Tree->Branch("ALV_gamma_in",&ALV_gamma_in,"ALV_gamma_in[4]/D");
    Debug_Tree->Branch("ALV_el_in",&ALV_el_in,"ALV_el_in[4]/D");
    Debug_Tree->Branch("ALV_Recoil_lab",&ALV_Recoil_lab,"ALV_Recoil_lab[4]/D");
    Debug_Tree->Branch("ALV_el_out",&ALV_el_out,"ALV_el_out[4]/D");
    Debug_Tree->Branch("ALV_minus_CMV",&ALV_minus_CMV,"ALV_minus_CMV[4]/D");
    Debug_Tree->Branch("ALV_plus_CMV",&ALV_plus_CMV,"ALV_plus_CMV[4]/D");
    Debug_Tree->Branch("ALV_minus_CMeP",&ALV_minus_CMeP,"ALV_minus_CMeP[4]/D");
    Debug_Tree->Branch("ALV_plus_CMeP",&ALV_plus_CMeP,"ALV_plus_CMeP[4]/D");
    Debug_Tree->Branch("ALV_gamma_CMeP",&ALV_gamma_CMeP, "ALV_gamma_CMeP[4]/D");
    Debug_Tree->Branch("ALV_Recoil_CMeP",&ALV_Recoil_CMeP,"ALV_Recoil_CMeP[4]/D");
    Debug_Tree->Branch("ALV_Virtual_CMeP",&ALV_Virtual_CMeP, "ALV_Virtual_CMeP[4]/D");
    Debug_Tree->Branch("ALV_Virtual",&ALV_Virtual, "ALV_Virtual[4]/D");
    Debug_Tree->Branch("ALV_Target_CMeP",&ALV_Target_CMeP,"ALV_Target_CMeP[4]/D");
    Debug_Tree->Branch("Q2",&Q2,"Q2/D");
    Debug_Tree->Branch("RotAxis",&RotAxis,"RotAxis/D");
    Debug_Tree->Branch("theta_beam",&theta_beam ,"theta_beam/D");
    Debug_Tree->Branch("phi_beam",&phi_beam ,"phi_beam/D");
    Debug_Tree->Branch("yy",&yy ,"yy/D");
    Debug_Tree->Branch("Xbj",&Xbj ,"Xbj/D");
    Debug_Tree->Branch("Qp2",&Qp2,"Qp2/D");
    Debug_Tree->Branch("Q2",&Q2,"Q2/D");
    Debug_Tree->Branch("tt",&tt,"tt/D");
    Debug_Tree->Branch("ttmin",&ttmin,"ttmin/D");
    Debug_Tree->Branch("Phi_CMV",&Phi_CMV,"Phi_CMV/D");
    Debug_Tree->Branch("Phi_LH",&Phi_LH,"Phi_LH/D");
    Debug_Tree->Branch("Theta_CMV",&Theta_CMV,"Theta_CMV/D");
    Debug_Tree->Branch("EventNumber", &EventNumber , "EventNumber/L");
      /////////////////////////////////////////////////////////////////////////


    TCS_Tree->Branch("ALV_minus_lab",&ALV_minus_lab,"ALV_minus_lab[4]/D");
    TCS_Tree->Branch("ALV_plus_lab",&ALV_plus_lab,"ALV_plus_lab[4]/D");
    TCS_Tree->Branch("ALV_gamma_in",&ALV_gamma_in,"ALV_gamma_in[4]/D");
    TCS_Tree->Branch("ALV_el_in",&ALV_el_in,"ALV_el_in[4]/D");
    TCS_Tree->Branch("ALV_Recoil_lab",&ALV_Recoil_lab,"ALV_Recoil_lab[4]/D");
    TCS_Tree->Branch("ALV_el_out",&ALV_el_out,"ALV_el_out[4]/D");
    TCS_Tree->Branch("AV_PolTarget",&AV_PolTarget,"AV_PolTarget[3]/D");
    TCS_Tree->Branch("AV_PolBeam",&AV_PolBeam,"AV_PolBeam[3]/D");
    TCS_Tree->Branch("AV_PolBeam_Lin",&AV_PolBeam_Lin,"AV_PolBeam_Lin[3]/D");
    TCS_Tree->Branch("Q2",&Q2,"Q2/D");
    TCS_Tree->Branch("theta_beam",&theta_beam ,"theta_beam/D");
    TCS_Tree->Branch("phi_beam",&phi_beam ,"phi_beam/D");
    TCS_Tree->Branch("yy",&yy ,"yy/D");
    TCS_Tree->Branch("Qp2",&Qp2,"Qp2/D");
    TCS_Tree->Branch("tt",&tt,"tt/D");
    TCS_Tree->Branch("RotAxis",&RotAxis,"RotAxis/D");
    TCS_Tree->Branch("Psi_p",&Psi_p,"Psi_p/D");
    TCS_Tree->Branch("Psi_g",&Psi_g,"Psi_g/D");
    TCS_Tree->Branch("ttmin",&ttmin,"ttmin/D");
    TCS_Tree->Branch("Phi_CMV",&Phi_CMV,"Phi_CMV/D");
    TCS_Tree->Branch("Theta_CMV",&Theta_CMV,"Theta_CMV/D");
    TCS_Tree->Branch("Egamma",&Egamma,"Egamma/D");
    TCS_Tree->Branch("cross_tot",&cross_tot ,"cross_tot/D");
    TCS_Tree->Branch("cross_tot_unpol",&cross_tot_unpol ,"cross_tot_unpol/D");
    TCS_Tree->Branch("cross_BH",&cross_BH ,"cross_BH/D");
    TCS_Tree->Branch("cross_TCS",&cross_TCS ,"cross_TCS/D");
    TCS_Tree->Branch("W_tot",&W_tot ,"W_tot/D");
    TCS_Tree->Branch("W_tot_unpol",&W_tot_unpol ,"W_tot_unpol/D");
    TCS_Tree->Branch("W_BH",&W_BH ,"W_BH/D");
    TCS_Tree->Branch("W_TCS",&W_TCS ,"W_TCS/D");
    TCS_Tree->Branch("DeltaBin",&DeltaBin ,"DeltaBin/D");
    TCS_Tree->Branch("LinPol",&LinPol ,"LinPol/D");
    TCS_Tree->Branch("CircPol",&CircPol ,"CircPol/D");
    TCS_Tree->Branch("TargetPol",&TargetPol, "TargetPol/D");
    TCS_Tree->Branch("VirtualFlag",&VirtualFlag,"VirtualFlag/I");
    TCS_Tree->Branch("Flux_qr",&Flux_qr,"Flux_qr/D");
    TCS_Tree->Branch("Flux_bmr",&Flux_bmr ,"Flux_bmr/D");
    TCS_Tree->Branch("epsilon",&epsilon,"epsilon/D");
    TCS_Tree->Branch("Abeam_polcirc",&Abeam_polcirc,"Abeam_polcirc/D");
    TCS_Tree->Branch("Abeam_pollin",&Abeam_pollin,"Abeam_pollin/D");
    TCS_Tree->Branch("Atarget_long",&Atarget_long,"Atarget_long/D");
    TCS_Tree->Branch("Atarget_trans",&Atarget_trans,"Atarget_trans/D");
    TCS_Tree->Branch("Atarget_trans_2",&Atarget_trans_2,"Atarget_trans_2/D");
    TCS_Tree->Branch("A_circ_long",&A_circ_long,"A_circ_long/D");
    TCS_Tree->Branch("A_circ_trans",&A_circ_trans,"A_circ_trans/D");
    TCS_Tree->Branch("A_circ_trans_2",&A_circ_trans_2,"A_circ_trans_2/D");
    TCS_Tree->Branch("A_lin_long",&A_lin_long,"A_lin_long/D");
    TCS_Tree->Branch("A_lin_trans",&A_lin_trans,"A_lin_trans/D");
    TCS_Tree->Branch("A_lin_trans_2",&A_lin_trans_2,"A_lin_trans_2/D");
    TCS_Tree->Branch("EventNumber", &EventNumber , "EventNumber/L");


      /////////////////////////////////////////////////////////////////////////
    DDVCS_Tree->Branch("ALV_minus_lab",&ALV_minus_lab,"ALV_minus_lab[4]/D");
    DDVCS_Tree->Branch("ALV_plus_lab",&ALV_plus_lab,"ALV_plus_lab[4]/D");
    DDVCS_Tree->Branch("ALV_gamma_in",&ALV_gamma_in,"ALV_gamma_in[4]/D");
    DDVCS_Tree->Branch("ALV_el_in",&ALV_el_in,"ALV_el_in[4]/D");
    DDVCS_Tree->Branch("ALV_Recoil_lab",&ALV_Recoil_lab,"ALV_Recoil_lab[4]/D");
    DDVCS_Tree->Branch("ALV_el_out",&ALV_el_out,"ALV_el_out[4]/D");
    DDVCS_Tree->Branch("Q2",&Q2,"Q2/D");
    DDVCS_Tree->Branch("theta_beam",&theta_beam ,"theta_beam/D");
    DDVCS_Tree->Branch("phi_beam",&phi_beam ,"phi_beam/D");
    DDVCS_Tree->Branch("yy",&yy ,"yy/D");
    DDVCS_Tree->Branch("Xbj",&Xbj ,"Xbj/D");
    DDVCS_Tree->Branch("Qp2",&Qp2,"Qp2/D");
    DDVCS_Tree->Branch("Q2",&Q2,"Q2/D");
    DDVCS_Tree->Branch("tt",&tt,"tt/D");
    DDVCS_Tree->Branch("ttmin",&ttmin,"ttmin/D");
    DDVCS_Tree->Branch("Phi_CMV",&Phi_CMV,"Phi_CMV/D");
    DDVCS_Tree->Branch("Phi_LH",&Phi_LH,"Phi_LH/D");
    DDVCS_Tree->Branch("RotAxis",&RotAxis,"RotAxis/D");
    DDVCS_Tree->Branch("Theta_CMV",&Theta_CMV,"Theta_CMV/D");
    DDVCS_Tree->Branch("W_tot_unpol",&W_tot_unpol ,"W_tot_unpol/D");
    DDVCS_Tree->Branch("W_BH",&W_BH ,"W_BH/D");
    DDVCS_Tree->Branch("W_DDVCS",&W_DDVCS ,"W_DDVCS/D");
    DDVCS_Tree->Branch("DeltaBin",&DeltaBin ,"DeltaBin/D");
    DDVCS_Tree->Branch("epsilon",&epsilon,"epsilon/D");
    DDVCS_Tree->Branch("Abeam_pollin",&Abeam_pollin,"Abeam_pollin/D");
    DDVCS_Tree->Branch("LinPol",&LinPol ,"LinPol/D");
    DDVCS_Tree->Branch("EventNumber", &EventNumber , "EventNumber/L");

