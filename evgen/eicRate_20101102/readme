========= What it does  ================
An inclusive event generator from source e- and ion interaction

Estimate "e- DIS, elastic, moller rate" and "hadron rate by Wiser fit"

Generate events distributed according to crossection or uniformly distributed with weight factor

Works for both collider and fixed target model

========= How to use it  ================

It requires g++ and gfortran (for other configurations, modify the Makefile) and the CTEQ pdf libraries (for convenience a copy is in https://jlabsvn.jlab.org/svnroot/solid/evgen/cteq-pdf-1.0.4/

1) first you need a working version of cteq C interface library 
   orginal at http://desy.de/~znagy/hep-programs/cteq-pdf/
   local copy in evgen/cteq-pdf-1.0.4/

cd cteq-pdf-1.0.4/
./configure
make
make install

by default is going to write the desired library in /home/${user}/lib and  /home/${user}/share

2) The Generator itself (by Seamus Riordan)
Lorenzo Zana added the possibility to specify the input file and output file
Modified the random number generator to TRandom2 class (chosen for period and speed, see http://root.cern.ch/root/html/TRandom.html). The seed now is randomly generated too, so that different parallel simulation could point to the same input file (easier for scripting and parallel processing)

i) setup env (do this before compilation and running the code)


setenv LD_LIBRARY_PATH /home/${USER}/lib
setenv LIBRARY_PATH /home/${USER}/lib
source your_root_env_script
(
In general, it can be root_version/bin/thisroot.csh
on ifarm, it can be /apps/root/5.34.36/setroot_CUE which has content as follows

setenv ROOTSYS /apps/root/5.34.36/root
setenv PATH ${ROOTSYS}/bin:${PATH}
if (!($?LD_LIBRARY_PATH)) then
  setenv LD_LIBRARY_PATH ${ROOTSYS}/lib
else
  setenv LD_LIBRARY_PATH ${ROOTSYS}/lib:${LD_LIBRARY_PATH}
endif
)

ii) compile it 

cd eicRate_20101102/
make

this will create the binary eicRate

iii) run it

The code requires the file "PolQuarkDist_fine.txt" and "PolPdf_Linear.txt" in the running directory.

enter output directory, then run an example below
../eicRate -i input_solid_PVDIS_LD2.dat -o output.root -n 1000 -m 0

see detailed explaination below
    -i (or -input)    input file name
    -o (or -output)   output file name
    -n (or -nevent)   number of events will be produced
    -m (or -model)    which physics model will be used, see below
    -h (or -help) print this message     
    
    # models
    # 0  pi+		(uniformly distributed with weight)
    # 1  pi-		(uniformly distributed with weight)
    # 2  pi0		(uniformly distributed with weight)
    # 3  K+			(uniformly distributed with weight)
    # 4  K-			(uniformly distributed with weight)
    # 5  Ks			(uniformly distributed with weight)
    # 6  Kl			(uniformly distributed with weight)
    # 7  p			(uniformly distributed with weight)
    # 8  pbar		(uniformly distributed with weight)
    # 10  pi+		(distributed according to crossection)
    # 11  pi-		(distributed according to crossection)
    # 12  pi0		(distributed according to crossection)
    # 13  K+		(distributed according to crossection)
    # 14  K-		(distributed according to crossection)
    # 15  Ks		(distributed according to crossection)
    # 16  Kl		(distributed according to crossection)
    # 17  p			(distributed according to crossection)
    # 18  pbar		(distributed according to crossection)
    # 20  e- Deep Inelastic (uniformly distributed with weight)
    # 21  e- Elastic  	(uniformly distributed with weight)
    # 22  Moller  		(uniformly distributed with weight)
    # 23  P.Bosted      (uniformly distributed with weight)    

Besides root tree output, it can produce text output files at the same time which can be used as direct input for later detector simulation. There are two type of text files
1. lund format for GEMC to use as input
2. solund format for solgemc use as input

The output root tree structure is described in output/README

The LUND format is defined as 
      OUT << "1" << " \t " << Wprate  << " \t " << Wmrate  << " \t " << "0"  << " \t " << "0" << " \t "  << x << " \t " << y  << " \t " << W  << " \t " << Q2  << " \t " << rate << endl;
      OUT << " \t " << "1" << " \t " << charge << " \t " << "1" << " \t " << particle_id << " \t " << "0" << " \t " << "0" << " \t " << px << " \t " << py << " \t " << pz << " \t " << Ef << " \t " << mass << " \t " << p_vertex.X()  << " \t " << p_vertex.Y() << " \t " << p_vertex.Z() << endl;

iv) analysis result

.x plot.C("output.root")

there are some root script under output dir for use to anylysis the resulting root file
open them to see how to use

############(outdated, need to update LUND format) #############################
3) Changing output from root format to lund format 

If you have root tree output, but no lund/solund output. No need to rerun eicRate, just do the conversion with root_to_lund below

cd root_to_lund/
make

ENVIRONMENT VARIABLES FOR COMPILING (example in bash):
If you are using root 5.28 like me seems you need to put some extra environment for your compiler for the "include" 
LD_LIBRARY_PATH=/home/${USER}/lib:$LD_LIBRARY_PATH; export LD_LIBRARY_PATH
LIBRARY_PATH=/home/${USER}/lib:${ROOTSYS}/lib:$LIBRARY_PATH; export LIBRARY_PATH
C_INCLUDE_PATH=/home/${USER}/include:${ROOTSYS}/include:$C_INCLUDE_PATH; export C_INCLUDE_PATH
CPLUS_INCLUDE_PATH=/home/${USER}/include:${ROOTSYS}/include:$CPLUS_INCLUDE_PATH; export CPLUS_INCLUDE_PATH

(csh example)
setenv LD_LIBRARY_PATH ${ROOTSYS}/lib:/home/${USER}/lib:${LD_LIBRARY_PATH}
setenv CPLUS_INCLUDE_PATH /home/${USER}/include:${ROOTSYS}/include 
setenv LIBRARY_PATH /home/${USER}/lib:${ROOTSYS}/lib


 root2lund : This Program translate the output from eicRate in LUND format and Filter the scattered electron angles
 Usage: root2lund -o outputfile -i inputfile [-th_min theta_min] [-th_max theta_max] [-ph_min phi_min] [-ph_max phi_max] [-l 1-0] [-g 1-0]
     -o outputfile     : output file name (example pluto.lund)  
     -i inputfile      : input file name (example pluto.root)  
     -h help, print this message 
   [optional] 
     -th_min theta_min : specify theta minimum for scattered electron 
     -th_max theta_max : specify theta maximum for scattered electron 
     -ph_min phi_min   : specify phi minimum for scattered electron 
     -ph_max phi_max   : specify phi maximum for scattered electron 
     -l 1-0            : specify format input file ( lund-> 1 (just angle filtering); root->0 (default) )
     -g 2-1-0          : specify if particle in output is a geantino ( geantino-> 1 ; charged geantino-> 2 ; normal->0 (default) )
 --- 

========= change log  ================

2010    created by Seamus Riordan
2011    hadron with Wiser and LUND format added Lorenzo Zana
2014/01 events distributed by crossection added by Seamus Riordan
2014/07 fix collider mode by Zhiwen Zhao


