%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: xsec_phidep.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 26/02/13
%%BoundingBox: 0 0 473 291
%%HiResBoundingBox: 0 0 472.7432 290.1870
%%CropBox: 0 0 472.7432 290.1870
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2013-02-26T11:55:10+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-26T11:55:10+01:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-26T11:55:09+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqgdUgjnlsI5E&#xA;R0NwSySLzBAgl7HFULPpFtaySXEVjbzwuwaaAQqJRQBeSHo1Av2ab9jXrCRkN+YSETFpGhS2qCOy&#xA;tntnQBKRoVKEbU26UyQN7oXto2kOKNY25FQaGJOoNR28RhVzaNpDFSbG3JU1U+kmxoR4eBxVx0XR&#xA;zIshsoOagqD6adGIJ7f5IxVw0bSA5f6jb8iACfSStBWnb3xVy6NpCliLG3BY1Y+km5oB4eAxVy6N&#xA;pCCi2NuBUmgiTqTU9vE4qtOhaKYDAbC39Irw4CNAONKU2Hhiq5tG0hxRrG3IqDQxJ1BqO3iMVc2j&#xA;aQxUmxtyVNVPpJsaEeHgcVcNG0gOX+o2/IgAn0krQVp298VcujaQpYixtwWNWPpJuaAeHgMVdHou&#xA;jxqVSygAJZj+7TqxLHt4nFWv0Ho3pej9Qt/S48OHpJTjSlOnhirbaNpDijWNuRUGhiTqDUdvEYq5&#xA;tG0hipNjbkqaqfSTY0I8PA4q46Lo5kWQ2UHNQVB9NOjEE9v8kYq4aNpAcv8AUbfkQAT6SVoK07e+&#xA;KuXRtIUsRY24LGrH0k3NAPDwGKuXRtIQUWxtwKk0ESdSant4nFVp0LRTGsf1C39NOJVRGgA4EFeg&#xA;7EYqubRtIYqTY25Kmqn0k2NCPDwOKuOjaQXD/UbfkAQD6SVoaV7e2KuGjaQHL/UbfkQAT6SVoK07&#xA;e+KuXRtIUsRY24LGrH0k3NAPDwGKoefT9HtVWOHT4HnmZvRh4KKsSWZmNDxUVqT929BkZSr3pAQt&#xA;/oVmmhX0cltaFvq0ioFt1VFAjIpxqSfvxiD1Qn2SV2Kpfr2uWmiac+oXkcz20VTKYI2lKIFLM7Be&#xA;iqqkn7hUkDFUBbeY9F1k2tzY3Ky21vfyWxmDgKZY4ZVK7NXr05D4hQioIOKp/iqCg/0a+e2/3TcB&#xA;prceDVHqp97Bh8z2GVjY13pRuWIdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdiqCsAJ5Hv239X4bb2hB2I/wCMh+L5U8Mrhv6vxSS1rrRLot+ZX9OP6vIGctwpVCPtVFMs&#xA;QjsVdiqX65odnrVmtpdvMkKypMPQleFi8Z5JVkIJ4tRh7gHtiqBsvL+laG9pDpsLJHNcjkC7SEKl&#xA;q8aKDIxIREUBVHTFU+xVC6lG5txNGC01swmiUdSVBDKP9dCy/TkJja+5IREciSRrIjBkcBlYdCCK&#xA;g5IG0LsKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVCamxaBbVSQ923og&#xA;jYhSCZCD2IjVqe9Mhk5V3pCKVVVQqgKqigA2AAyaEJrLFdIviFLEW8tFFKn4D4kDFUZirsVdiqEv&#xA;uX1nT+JA/wBINaiu3oS+4xVF4q7FUHpv7tZrQ/8AHtIVj/4xt8cdPZQ3D/Y5CG23ckozJodirsVd&#xA;irsVdirsVdirsVdirTOqirEKPEmmKt4q7FXYq7FXYq7FXYq7FXYq7FXYqg4/32pyyfsWqCFP9eSk&#xA;j/8AC8KfTkBvL3fj9SeiMyaEHrIc6RfcCA31eWhIqK8D2qMVY1561PVbXVNBtljhi0i9vEgutQk1&#xA;CSyKEpI7pwjEbOTHH+6pJu+zLTfFWRWei29ndCeG4uiODRtDNczXEbcipDUmaQhl40HEjqa12oqj&#xA;8VQl8CbnT6MVpcE7U3/cS7bg4qi8VdiqEl/danDJ+zcoYX/1krJH/wAL6mQO0h5/j9aeiLyaHYq7&#xA;FXYq7FXYq7FXYq7FWnbitaVPQDxJxVbHEF+JqNKR8T0p9A60G+wwkqtYCKrrsnV1qKAd2FelKfr7&#xA;481VcCuxV2KuxV2KuxV2KuxV2KrZJEjjaR2CogLMx6AAVJwE0qH0yN1s0aReMs1ZpV7hpCXK/wCx&#xA;rx+jI4xskorJoQesqW0i+AYqTby0YUqPgPiCMVQHm/Tb+/0kpZ31xZeiWluBZxQS3E8QidWt4vrK&#xA;yRK0hYfEVPhtWoVSv8rE0tPKcS6ZZXdjb+oWaG9knlb1XRHl4NcBTxV2KEIqoHDcR3xVOPNWsX2j&#xA;6NNf2VrHe3EX2LWSYweoaGkcbBJayO1ERadTiqWaX5jm1e7dbywNmdP1M28KVNwZIzavJDcco19O&#xA;kkcit8LNx6E1xVlWKuxVC6nG7WbvGOUsJWaNR1LREPx/2VOP05DINkhExukiLIhDI4DKw6EHcHJA&#xA;2hvCrsVdirsVdirsVdirsVWAB35dQtQvz6E9fo6YVX4FdiqxKKfT2FPsAU+z8qDp0wqvwK7FXYq7&#xA;FXYq7FXYq7FUHqfxwx2v/LXIImHYpQvIPpjVhkMnKu9IRmTQ7FUDrpjGi3/qLzj+ryBlCl6goR9k&#xA;Ak4qkn5hKRp1jdC0hv2sbxLpbO5jlaBykci/HLFDcmDhz5rIUpyUAkA1xVZ+WmlwWOgzPbizjgvb&#xA;p7mO30+5N7BFVEjKi4ZU9RmaMu54j4mIGwrirI9R0vTNSt/q+o2kN7bhg4huI0lTkNg3FwwrviqG&#xA;extLJ7CGxtoreE3TM0cSrEtWhlLNRRSpxVHejR2dWYMxBYciVNBSlG5BR/q0xVuCRpI1LqEloPVj&#xA;BDcGIBKkjwriq/FUJpfwQNbdPqrtCB4IPijH/ItlyGPlXckovJodirsVdirsVdirsVWykhDQ0Y7L&#xA;8z07N+rCFdVI0UHZRRR9JoMCqSRyyxq1xWNyFLRRueKsCT9pQjN13rt7YquJmjkFTzhNatQlwzOO&#xA;IAVaFaHr2pvXchVdKStHH7P2hv8AZ7/d1whV+BXYq7FXYq7FXYq7FXYqhB+91Qn9m1i4g/5cxqR8&#xA;1VB/wWQ5y9yeiLyaFJ5JDKIolqKH1JaghCOJCla8uTBqjt49qqobVY/T0e/9KrM0MzUd2IqUJpU8&#xA;uI9hsMVQ3my81mz0K6n0gWq3SRyE3N9Mbe3t1WNm9eRhHMSqFRVeO/iMVSn8vf8ASbK41K8igGqS&#xA;StFJKAxuxEoUiO5eW1sJuXIllDRD4StK9cVZbiqEvgTc6fRitLgnam/7iXbcHFUXiqlMViJuHfjG&#xA;in1KtRAo3LEHban3Yqq4qg6+lqtP2bqKvtzhP62WT/hchyl709EZk0OxV2KuxV2KuxV2KrCOUoNd&#xA;krUf5R+nsPbvhVTjaOeT1kbkkZeNSrGhcMUfktKVUpT78Cq+KuIDAgioOxB6EYqowLHGPqgBKxIo&#xA;UHk3wGqrVmryPwmu+KqkZPHieqfDXx8D0HbCVXYFdirsVdirsVdirsVQml/Hbtc97t2mB8UO0e3b&#xA;92q5DHyvvSUS7hFqdz+ytQCx60FSBXJoaijKIAzc3/bcgAsfHbFUNrKltIvgGKk28tGFKj4D4gjF&#xA;VLXtIfVrCSxNx6VtcJJDdxGNZFmilQoyNy3Gx/ZIxVKvLXkXT9A1Oa/s2SNriH0Z4oYY4lkowZHc&#xA;irEpQgb/ALRrXairJsVQWocPrGnc15f6SeO3Kh9CWh9vniqLYyDcAMP5eh6dq7YVb+F1IIqpqCCP&#xA;oOxwKtiZzzVg3wNxDtT4hQHkKU8aYqh9TqkKXI62siyknoE3SQ/RGzHIZOV9yQi8mh2KuxV2KuxV&#xA;2KuxVR5OsPNF5SSFTxrxPxEAn4h+yu/TthKqqjioFSaClT1PzwK3irsVUrglUEgpVGBPJiqha0cn&#xA;tstTviq40WUGtOYp8yNxTfwr2wqvwK7FXYq7FXYq7FULqjsLJ0RuMk5EKMOoMpCch/q15fRkMnJI&#xA;RKIqKEUUVQAoHYDJhCmOMs26f3DfCWX9oqPiQn/JYio9xiq9pADxA5PseI7AmlT4YaVB61xOi3/r&#xA;KGX6vLyQKW24HalDX7sCo7FXlX5g+fdW0lNN+oa9ZWkyxLJc2kxtoJHkaJXQzS3RdWt96yiBBIAR&#xA;8SirBVmPnHUtbs/LqT2Ymt9TaWNAlnbvqADNUfEEiZvRX7TtwDFRxWjsMVQnl3VPNN/LI+tabJYT&#xA;R6nS0gn9JQLd7EPxV4WnEhR2cFq0J8N1VVl+KqZHCTmBs9A4AJ36Bv4H+zCrTqVmWVaUI4SfDViK&#xA;/BuN/hJP31wKvkjSSNo3UMjgqynoQRQjARaofTJHeyjWRi0sNYZWPUtEShb/AGXHl9ORxnZJRWTQ&#xA;7FXYq7FXYqslINI9iX6qafZH2qg9u2EK0A7TFm2RNkUgbsRu1ansadu/XAqpirsVdirsVUVVuDRc&#xA;izoeSliASK8l3Xen7NTvt3xCqykEAjod9xQ/ccVdirsVdirsVdiqEm/e6lBH+zbK07+IZwY4/oKm&#xA;T7sgd5Dy/H609ETI4RC30CvidgNq98mhZHWKFRIQZDu1K0Lnc8akmlemKr0UgGpJLGpqa09h02xV&#xA;C60ZBo96Y1DP6ElAxKj7B7gN+rFUDZ+cNCuvMN95fjlkXU7CQRSo8Uixs5t4rnjHMV9J2EU6sUDc&#xA;gNyKb4q81/MzVruOLTbZ9Oa5s4tNaRDwvkZyqxG4/fWBlZ7f02X1Y5I0WoB51pxVeyYqhL4E3On0&#xA;YrS4J2pv+4l23BxVF4q0yqylWAZWFCDuCDiqm0aSRSW8h5BlKtvQlWBHjX6cJVdDKJE3pzX4ZFU1&#xA;CsOoqQD+GBUNFSHU5oui3KCdPdkpHJ+Hp5AbSI7/AMfqT0RmTQ7FXYq7FXYqpvKqc3ckIlFGxJJN&#xA;OgBNa1AG1cKtwxCOMKAASSzUrTkxLMd/FicCr8VdirsVdiqlLxjdZQu7FY3KrViCaL0PQFvo3xVd&#xA;HtySlAmyjb7NNth92EqvwK7FXYq7FXYqg9OrIbi6O/rykR+0cf7taexKlx/rZCG9lJRD/FMihiDH&#xA;8bBSN6gqAw60NSfmMmhv4jLXoqincVJ3/DCq/AqD1lS2kXwDFSbeWjClR8B8QRirC9E8ha9pvn46&#xA;xNe/XtOSL04rq5Nu126GFECSlLWKRmWRWYOZT8JC7AUKqVXl/p8/nTR9F8wanZtphitrq10nUE06&#xA;SJ2+qtHGsQkY3ST+vVwxWjAcVIoeSr1RWVlDKQysKqw3BB7jFUHqHD6xp3NeX+knjtyofQlofb54&#xA;qjcVdiqyTakn8vX5Hr2PzwhXVYTgAEo6kltqAqQPnVgfwwKh9R/diG7Gwt3BkP8AxW/wPU+C15n/&#xA;AFchPaj3JCLyaHYq7FXYq07cULeA6b/wriqmAwkjjAqFBd35AHkdhVQBXlVj9GKquKuxV2KuxV2K&#xA;tOodGU1AYEGhKnfwIoRiqkjuQhenqKeEoU1UMQD4j2ptXfCqtgV2KuxV2KofUJnhs5Gi2makcPf9&#xA;5IQiV9uTb5GZoJCrBDHBDHDGKRxKEQddlFBhAoUhTgb9yJQpWSejlWUK9WGwcVG6rQHfthVWRFRQ&#xA;q9B/mTireKoLXPT/AENf+ovNPq8vJeJao4H9kA1xVG4q8P8AzPutc0ywkt7cm30fzFYJDdmWO3mV&#xA;pordAZbVpLuzeO5EYUJHSQOU5BRxYlV7Ppem2el6dbadZRiKzs4kht4x+yiDio+4YqtvuX1nT+IB&#xA;/wBINamm3oS+xxVF4q7FXEV2PTFVBo3aJolIWVB+5cjkBseJ3JrTod8JVUZYriAq68opVoyMCKqw&#xA;3BBoRtkSL2VR02SR7RVlPKaEmGVj1LRnjy/2Q+L6cjA7bpKJyaHYq7FVjUZwnWnxMNvo7+PT5YVa&#xA;gVuBd68nPKhABAPRTT+UbdcCqmKoS5upTN9UtaG4IDO7AlI0JpyalKk/srXfISkboc000mk2P2po&#xA;xcyn7U04Ejn7xQD2UAe2AYx13W1r6e1v+803jC43NsaiB/biK8D/AJSj5g9MTCvp/Yt96ItLpLmH&#xA;1FBRgeMkT7OjjqrDx/X1G2SjKwghWySqLj96QzELKnAfZ4hhXoDvybl4EbYqqo3JanY9GG+xHXqB&#xA;ireKuxV2KoOX99qcMXVbVTO/+u9Y4/w9T8MrO8q7vx+tPRXn5MViXj8f2wwJ+AfapSm+4GWIXCjS&#xA;cuoXYH379u3zwqvwK7FUHrJcaRfcAC31eWgJoK8D3ocVRmKrWijZQrICqkFQQCAVNQR8sVSDz5p2&#xA;paj5dms9OgknupWCp6VwbVowwKmVZAR8UYPJB/NQ9sVQeg6NqtlczSXbNAl9qhureD1PXeJfqXpu&#xA;hdgQVZ4y3Su9TudlWW4q7FXYqsl2AkHVOvT7J6ip+/CFWIY4pvTBoJqyIKsakH49zsOoNB74FUB/&#xA;o+qHtFerUeHrRjf6Xj/4hlfKXv8Av/H3J6I3LEOxVxNNz0xVD0Sb904qJP3jqQ1OHRQfs0rQbH3G&#xA;EqiMCoe9ujBEBGoe4lPC3jJpyciu58ABVvbIzlXvSA3Z2otoePL1JXPOeYihdz1Y/dQDsKDoMYxo&#xA;KSr5JDsVQV4jW0v1+FS1AFu41BJeMftAD9pOvuKjwpXIUeIfFIRiOrqHQhkYAqwNQQehBywFDUiB&#xA;0KkCuxXkKgMDVTT2O+KrInBIfiyCX9lhQhl2INT4Dt4dcKquBXYq4kAEk0A3JOKoTTAXga6YUa7b&#xA;1qGoIQgCMUPT4AKjxrkMfK+9JVEao9dH5GcARUYsnEVKsB8I3Bqfur0ywIVwABQdBgV2KuxVB60r&#xA;No96quYyYJPjWlR8B/mDD8MVRmKuxV2KoLUOH1jTubcf9JPHfjU+hLQe/wAsVRuKuxV2KuxVRcOV&#xA;MYPxj4o/iK8uJBAZqHvseu2FVO5jkurMNHRLhCJI9wQsqGvEkV2qCrU7VyExY25pCtbXCXECTJUK&#xA;4rxPUHup9wdjhibFoVMKqcxB+FjRFHKQ9uI7fT+rCFdAJeHKUASMSWVSSB2AFfb8cCr3dI0Z3YKi&#xA;AszHYADck4k0qDskeaVr6ZaFxxtkPVIjQ716M5HI/QO2VxFniKSjcsQ7FXYq7FUDB/oV0LU/7zTl&#xA;mtT2VvtNF+tk9qjoBlY9JroeX6ko7LEKMiN6vE09OXuFJYSLuGJ3WlF79x3riqpG/IHpyXZ1BrQ0&#xA;rTEquxVBalWb0rFd/rJPre0C09T/AIKoT/ZV7ZXPfbv+5IRMpZmWMLVW/vGqtAo7EGteXTpliHIo&#xA;ZudBQCkew6eII8cKqmBXYq7FUFrnp/oa/wDUbgn1eXk3IrQcD+0CKYqjcVdirsVQl8SLnT6KWrcE&#xA;bU2/cS77kYqi8VdirsVdirTryHWhG6nwOKqDSFC0zE/Cv76IEtxVeR5IqqWYk7e4+7FVCKRLe7AV&#xA;g1pfHnA4NVEpFWAI2pIByHvy8Rlf0nyP3pRzPx7Ek1oo6mgr/nXLEIeBRKVlBPEMX5isfNqMh5JQ&#xA;VUCnHc12PYHCVROBUBN/p1wbcb2cDA3J7SONxF8h1f8A4H+bKz6jXRPJH5Yh2KuxV2KuxVSurZLm&#xA;BoXJAahV1+0rA1Vl91IqMEo2KUKdlcySB4ZwFu4KCUDYMD9mRf8AJan0bjtkYSvY80lXmiSaJ4pB&#xA;VJFKOASDRhQ7ihGTQo+pIk/EqxoN2FeHEsQNzX4lH2ula13phVWeaJImmZwsSqXaQn4QoFa18KYC&#xA;a5qgbWQhnuZRS7uwTb2xID+lGCVTfv8AFVvAtTwyEB1PVJRCRPxMbuZWYt6shVR8JJYJQDoA1B12&#xA;6mu+WBCIwK7FXYq7FUHrLFdIviFLEW8tFFKn4D4kDFUZirsVQ1/qem6dCs2oXcNnC7rEklxIsSl3&#xA;+ygZyByPYYqg/wBJWGoyWUunXkF3FFdvFLJC6yqrrBJyQlG2YV6Hpiqa4q7FXYq7FXYqteNX36MB&#xA;RXH2hUg7H6BhtUNdWBuFKGUojNykVQKsQKKSTuCpCsCtNxkZAEUqHhPpXKQ6hKXlICQO4URSlW5B&#xA;loABLsKr7VXvkROtj/amkzyaEC9294xhsWpHWkt4ACoHdYz0Z/fovffbKzLi2HzTSLggighSGJeM&#xA;aCir1/E7n55MAAUEL8KuxV2KuxV2KuxVDXto8vGaBxFdxV9KQioIPVHHdGpv9/UZCUb3HNILra+S&#xA;VzDIvo3airwMd6D9pD+2vuPpodsYzvbqtK0zQrGXmKrGnxMz0CjjvUk+FMkTSEpSykvgPSnmisFN&#xA;U5cWaVg/IPR1Pwr2J+11NR9qF8fu+/8AYnkmghehBkNG3cioNaKPhqTxGx6fry1CoqqooooNzQeJ&#xA;NScCt4q7FXYq7FUHrIc6RfcCA31eWhIqK8D2qMVRmKuxVKPNOi3Ws6UbC3uYrbm6mZpoDcK8Qrzi&#xA;KCSE0cfCx5fZqO+KoPSvK1/ZRyma/imupbz6680du0AYiH0FVlWY14xhE2YLxUDj1JVTCzubq6a4&#xA;+ranZ3QhlMUgiiLek6gBo34zGjA7kHfFUT6eq/8ALRB/yIf/AKrYq709V/5aIP8AkQ//AFWxV3p6&#xA;r/y0Qf8AIh/+q2Ku9PVf+WiD/kQ//VbFXenqv/LRB/yIf/qtiqnO1/BDJPPeW0UESl5ZXiZUVFFW&#xA;ZmM1AAOpxVQsZJtS02KaDULLUbSZNriKH1IpabEgrMyEVHbARatfoWUjizW7RjpC0MjRj5RmYoPu&#xA;yPhx7k2ixDqgAAuLcAbACB/+quTQ36eq/wDLRB/yIf8A6rYq709V/wCWiD/kQ/8A1WxV3p6r/wAt&#xA;EH/Ih/8AqtiqD1W/k021+s3+rWOn24dVNxcp6aVrXjyknVasARiqLCaoQCLm3IO4Igf/AKrYq36e&#xA;q/8ALRB/yIf/AKrYq709V/5aIP8AkQ//AFWxV3p6r/y0Qf8AIh/+q2KqU9le3CcJ5LWVAahXt2YA&#xA;jvvLgMQeaqS6ROrq5kgdkIKGSGSTjTpx5zNxp7ZHwwm3RXNzc3EkNrqdnJLaOFvIY4i7IWU0SQCa&#xA;qHvvk0Ir09V/5aIP+RD/APVbFXenqv8Ay0Qf8iH/AOq2Ku9PVf8Alog/5EP/ANVsVd6eq/8ALRB/&#xA;yIf/AKrYq709V/5aIP8AkQ//AFWxVox6oBU3MFP+MD/9VsVS8CfW9Nmaz1W0ubC7jaKOe2RnSoLK&#xA;5WSOfffYivbFU7xV2KuxV2KpL5c8rWehG6MEskpuWr+8p8KK7uiCnXiZW+I7nbFU6xV2KuxV2Kux&#xA;VC6tD62l3kX1f636kMii05+n6tVP7vn+zz6VxVS0FJE0e1SSyGnMicRZCQTCJVNFUSLsRxpiqPxV&#xA;2KuxV2KuxVB6rpGnarbC21CL14A3L0+TKK8StTxK1py28DQjcA4qjMVdirsVdirsVdirEdW8reX9&#xA;VN8bt75hqEkUs6rbsBWBXWIKPQ/Z9StT8RoKkjbFWVwSRyRBo1ZU6BWRkIpt9lgpxVfirsVUL7UL&#xA;HT7Vrq+uI7a2QqGmlYIoLEKoqe7MQAO52xVA+WPMmm+Y9Ft9X06VJbe4B/u3D8GBoUen2XXoyncH&#xA;bFU0ZQylT0Ioeh6/PFWMRfl9pazaVNcXM94+kzzXdubgQHlPcOJHkf04oxy5jkCKUJ+VFWUYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FVDULY3Vhc2y+nynieIesnqxVdSvxxhk5rvuvIVHcYqhPLejnRtCs9LMkc&#xA;ptI/T9SKMwo25NVjLycevTlTwoNsVTLFXYq7FXYq7FXYq7FXYq7FXYq7FXYqkupWesS+Y9JuLUsu&#xA;n2/qm+pOyK3KNlRDCFKyDk3Kp3BVaEAtVVOsVdirsVY9568ry+Y9CNpbXUllfwSLc2F1GV+CZAyg&#xA;sGV1ZeLmopXuCGAIVRvl3y7ZaFZSW1szSPcTNc3M78Q0krgLWiBVUKiKigDZVHzxVNMVdir/AP/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:OriginalDocumentID>xmp.did:0480117407206811994C9DF7EC9D48D0</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:FA7F117407206811AB088599DB67065B</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:FA7F117407206811AB088599DB67065B</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0480117407206811994C9DF7EC9D48D0</stEvt:instanceID>
                  <stEvt:when>2013-01-14T16:42:52+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FA7F117407206811AB088599DB67065B</stEvt:instanceID>
                  <stEvt:when>2013-02-26T11:55:10+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:0480117407206811994C9DF7EC9D48D0</stRef:instanceID>
            <stRef:documentID>xmp.did:0480117407206811994C9DF7EC9D48D0</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:0480117407206811994C9DF7EC9D48D0</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -290.187 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 290.187 li
472.743 290.187 li
472.743 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.6 lw
2 lc
0 lj
3.25 ml
[3 4 1 4 ] 0 dsh
true sadj
62.9395 91.4658 mo
63.0625 91.4658 li
63.1855 91.4658 li
63.3086 91.4692 li
63.4326 91.4731 li
63.5557 91.478 li
63.6787 91.4849 li
63.8013 91.4932 li
63.9243 91.5029 li
64.0474 91.5142 li
64.1704 91.5269 li
64.2935 91.541 li
64.4165 91.5571 li
64.5396 91.5742 li
64.6626 91.5928 li
64.9087 91.6353 li
65.0317 91.6582 li
65.1543 91.6821 li
65.4004 91.7349 li
65.5244 91.7642 li
65.6475 91.7949 li
65.8936 91.8589 li
66.0166 91.894 li
66.1396 91.9302 li
66.3857 92.0059 li
66.8774 92.1758 li
67.0005 92.2222 li
67.1235 92.27 li
67.3696 92.3682 li
67.8623 92.583 li
67.9854 92.6401 li
68.1084 92.6992 li
68.3545 92.8203 li
68.8467 93.0791 li
68.9697 93.147 li
69.0923 93.2168 li
69.3384 93.3599 li
69.8315 93.6621 li
70.8154 94.3311 li
70.9497 94.4282 li
71.0825 94.5269 li
71.3496 94.729 li
71.8823 95.1519 li
72.9507 96.0688 li
73.0835 96.1909 li
73.2173 96.314 li
73.4834 96.564 li
74.0176 97.082 li
75.0845 98.189 li
75.2188 98.333 li
75.3516 98.48 li
75.6187 98.7759 li
76.1523 99.3862 li
77.2197 100.678 li
79.3545 103.522 li
79.4785 103.698 li
79.6035 103.875 li
79.8525 104.233 li
80.3506 104.962 li
81.3477 106.471 li
83.3403 109.689 li
87.3267 116.86 li
87.4487 117.094 li
87.5703 117.328 li
87.8154 117.799 li
88.3037 118.749 li
89.2808 120.685 li
91.2344 124.686 li
95.1426 133.133 li
103.622 152.761 li
111.535 171.494 li
120.109 190.837 li
120.241 191.121 li
120.373 191.404 li
120.636 191.966 li
121.162 193.087 li
122.214 195.302 li
124.318 199.619 li
128.528 207.761 li
128.65 207.988 li
128.773 208.214 li
129.02 208.666 li
129.509 209.558 li
130.492 211.316 li
132.455 214.699 li
132.578 214.904 li
132.701 215.109 li
132.945 215.517 li
133.437 216.326 li
134.418 217.908 li
136.381 220.937 li
136.515 221.136 li
136.647 221.333 li
136.914 221.724 li
137.445 222.5 li
138.511 224.005 li
140.64 226.843 li
140.772 227.013 li
140.906 227.181 li
141.171 227.517 li
141.704 228.175 li
142.769 229.449 li
144.896 231.808 li
145.021 231.939 li
145.146 232.068 li
145.394 232.324 li
145.891 232.826 li
146.884 233.789 li
147.008 233.904 li
147.132 234.021 li
147.381 234.25 li
147.878 234.697 li
148.872 235.55 li
148.996 235.654 li
149.121 235.755 li
149.369 235.957 li
149.866 236.349 li
150.859 237.091 li
150.983 237.179 li
151.107 237.267 li
151.356 237.441 li
151.853 237.779 li
152.847 238.408 li
152.968 238.482 li
153.09 238.554 li
153.333 238.697 li
153.82 238.972 li
154.794 239.48 li
154.917 239.541 li
155.039 239.599 li
155.283 239.714 li
155.77 239.935 li
156.744 240.333 li
156.866 240.38 li
156.986 240.425 li
157.23 240.511 li
157.717 240.677 li
157.839 240.716 li
157.96 240.753 li
158.205 240.828 li
158.691 240.964 li
158.813 240.998 li
158.936 241.029 li
159.179 241.087 li
159.3 241.117 li
159.422 241.144 li
159.666 241.197 li
159.788 241.222 li
159.91 241.246 li
160.152 241.292 li
160.274 241.314 li
160.396 241.335 li
160.64 241.375 li
160.772 241.394 li
160.904 241.414 li
161.037 241.429 li
161.168 241.447 li
161.3 241.462 li
161.433 241.478 li
161.696 241.503 li
161.83 241.515 li
161.961 241.527 li
162.093 241.535 li
162.226 241.544 li
162.357 241.55 li
162.49 241.558 li
162.622 241.564 li
162.753 241.568 li
162.887 241.572 li
163.019 241.574 li
163.15 241.576 li
163.283 241.576 li
163.415 241.574 li
163.546 241.572 li
163.679 241.57 li
163.811 241.566 li
163.943 241.562 li
164.076 241.554 li
164.208 241.548 li
164.339 241.541 li
164.472 241.531 li
164.604 241.521 li
164.735 241.509 li
164.868 241.498 li
165 241.486 li
165.132 241.47 li
165.265 241.455 li
165.396 241.439 li
165.528 241.421 li
165.661 241.404 li
165.924 241.365 li
166.057 241.343 li
166.189 241.322 li
166.454 241.273 li
166.981 241.166 li
167.113 241.136 li
167.247 241.107 li
167.511 241.042 li
168.039 240.902 li
168.17 240.865 li
168.304 240.826 li
168.567 240.746 li
169.096 240.574 li
169.22 240.531 li
169.342 240.488 li
169.588 240.398 li
170.083 240.208 li
170.206 240.158 li
170.329 240.107 li
170.576 240.003 li
171.068 239.785 li
171.191 239.728 li
171.314 239.669 li
171.562 239.552 li
172.055 239.304 li
173.041 238.771 li
173.165 238.699 li
173.288 238.628 li
173.534 238.482 li
174.027 238.179 li
175.014 237.533 li
176.985 236.076 li
177.12 235.968 li
177.253 235.861 li
177.521 235.64 li
178.055 235.193 li
179.124 234.246 li
181.262 232.166 li
181.396 232.027 li
181.529 231.886 li
181.796 231.607 li
182.332 231.031 li
183.4 229.835 li
185.539 227.257 li
185.669 227.091 li
185.8 226.923 li
186.063 226.587 li
186.587 225.904 li
187.638 224.494 li
189.736 221.507 li
193.935 214.888 li
194.057 214.683 li
194.179 214.478 li
194.423 214.064 li
194.914 213.228 li
195.892 211.525 li
197.85 207.992 li
201.765 200.458 li
210.257 182.32 li
218.185 163.919 li
226.773 143.599 li
235.207 124.814 li
235.33 124.557 li
235.453 124.301 li
235.699 123.79 li
236.189 122.777 li
237.173 120.782 li
239.141 116.928 li
239.264 116.694 li
239.385 116.46 li
239.631 115.995 li
240.124 115.074 li
241.106 113.273 li
243.074 109.838 li
243.207 109.613 li
243.34 109.39 li
243.606 108.948 li
244.14 108.077 li
245.207 106.392 li
247.338 103.254 li
247.471 103.069 li
247.605 102.885 li
247.871 102.52 li
248.404 101.807 li
249.471 100.444 li
251.604 97.9893 li
251.727 97.8569 li
251.854 97.7271 li
252.102 97.4692 li
252.598 96.9692 li
253.594 96.0313 li
253.719 95.9199 li
253.844 95.8091 li
254.092 95.5928 li
254.59 95.1758 li
255.586 94.4053 li
255.709 94.3149 li
255.834 94.2261 li
256.084 94.0522 li
256.58 93.7202 li
256.705 93.6411 li
256.83 93.562 li
257.078 93.4121 li
257.576 93.1279 li
257.701 93.061 li
257.826 92.9951 li
258.074 92.8662 li
258.572 92.627 li
258.697 92.5713 li
258.82 92.5161 li
259.07 92.4102 li
259.568 92.2148 li
259.689 92.1699 li
259.813 92.127 li
260.055 92.0449 li
260.178 92.0059 li
260.299 91.9692 li
260.543 91.897 li
260.666 91.8643 li
260.787 91.832 li
261.031 91.771 li
261.154 91.7432 li
261.275 91.7158 li
261.52 91.667 li
261.641 91.644 li
261.764 91.623 li
261.885 91.603 li
262.006 91.584 li
262.129 91.5669 li
262.25 91.5513 li
262.373 91.5361 li
262.494 91.5229 li
262.617 91.5112 li
262.738 91.501 li
262.861 91.4922 li
262.982 91.4839 li
263.105 91.478 li
263.227 91.4731 li
263.348 91.4692 li
263.471 91.4668 li
263.592 91.4658 li
263.715 91.4678 li
263.836 91.4712 li
263.959 91.4751 li
264.08 91.481 li
264.203 91.4883 li
264.324 91.4961 li
264.447 91.5059 li
264.568 91.5171 li
264.691 91.5303 li
264.813 91.543 li
264.934 91.5591 li
265.057 91.5752 li
265.178 91.5928 li
265.422 91.6328 li
265.545 91.6553 li
265.666 91.6792 li
265.91 91.73 li
266.033 91.7568 li
266.154 91.7861 li
266.398 91.8481 li
266.521 91.8799 li
266.643 91.915 li
266.887 91.9873 li
267.375 92.1489 li
267.506 92.1963 li
267.639 92.2451 li
267.904 92.3481 li
268.434 92.5732 li
268.566 92.6328 li
268.699 92.6938 li
268.963 92.8223 li
269.492 93.0972 li
269.625 93.1699 li
269.756 93.2441 li
270.021 93.397 li
270.551 93.7241 li
271.609 94.4561 li
271.742 94.5552 li
271.875 94.6543 li
272.139 94.8589 li
272.668 95.2852 li
273.729 96.21 li
273.859 96.332 li
273.992 96.4561 li
274.256 96.707 li
274.785 97.228 li
275.844 98.3369 li
275.969 98.4731 li
276.092 98.6089 li
276.338 98.8862 li
276.832 99.4541 li
277.82 100.651 li
279.797 103.269 li
279.92 103.442 li
280.043 103.616 li
280.291 103.968 li
280.785 104.684 li
281.773 106.167 li
283.748 109.33 li
283.883 109.554 li
284.016 109.779 li
284.285 110.232 li
284.82 111.152 li
285.891 113.043 li
288.031 117.018 li
292.316 125.647 li
300.725 144.47 li
308.57 163.039 li
317.076 182.791 li
325.018 199.771 li
325.139 200.015 li
325.26 200.259 li
325.504 200.746 li
325.99 201.71 li
326.963 203.615 li
328.91 207.314 li
332.803 214.234 li
332.934 214.457 li
333.066 214.679 li
333.33 215.121 li
333.859 215.996 li
334.914 217.707 li
337.025 220.968 li
337.158 221.166 li
337.289 221.363 li
337.553 221.751 li
338.082 222.517 li
339.137 224.011 li
341.25 226.828 li
341.373 226.986 li
341.496 227.14 li
341.742 227.451 li
342.234 228.064 li
343.219 229.248 li
345.189 231.458 li
345.314 231.591 li
345.436 231.72 li
345.682 231.98 li
346.176 232.486 li
347.16 233.46 li
349.131 235.248 li
349.264 235.361 li
349.398 235.474 li
349.664 235.695 li
350.199 236.126 li
351.266 236.941 li
351.4 237.037 li
351.533 237.132 li
351.801 237.322 li
352.334 237.689 li
353.402 238.371 li
353.535 238.451 li
353.67 238.531 li
353.936 238.689 li
354.471 238.99 li
354.604 239.062 li
354.738 239.132 li
355.004 239.273 li
355.539 239.541 li
355.672 239.607 li
355.805 239.669 li
356.072 239.792 li
356.607 240.029 li
357.674 240.449 li
357.799 240.494 li
357.924 240.537 li
358.172 240.623 li
358.672 240.781 li
358.797 240.818 li
358.92 240.855 li
359.17 240.925 li
359.668 241.054 li
359.793 241.085 li
359.918 241.115 li
360.168 241.171 li
360.293 241.197 li
360.416 241.222 li
360.666 241.273 li
360.791 241.294 li
360.916 241.318 li
361.164 241.359 li
361.289 241.378 li
361.414 241.396 li
361.664 241.431 li
361.787 241.447 li
361.912 241.46 li
362.037 241.474 li
362.162 241.488 li
362.287 241.5 li
362.412 241.511 li
362.535 241.523 li
362.66 241.531 li
362.785 241.541 li
362.91 241.546 li
363.035 241.554 li
363.16 241.56 li
363.283 241.566 li
363.408 241.568 li
363.533 241.572 li
363.658 241.574 li
363.783 241.576 li
363.908 241.576 li
364.031 241.574 li
364.156 241.574 li
364.281 241.57 li
364.406 241.568 li
364.531 241.562 li
364.654 241.556 li
364.779 241.55 li
364.904 241.542 li
365.029 241.535 li
365.154 241.527 li
365.279 241.517 li
365.402 241.505 li
365.652 241.482 li
365.775 241.468 li
365.896 241.455 li
366.141 241.423 li
366.264 241.408 li
366.385 241.388 li
366.629 241.351 li
366.752 241.332 li
366.875 241.31 li
367.119 241.265 li
367.607 241.166 li
367.73 241.138 li
367.852 241.111 li
368.096 241.05 li
368.586 240.923 li
368.707 240.888 li
368.83 240.855 li
369.074 240.783 li
369.563 240.626 li
369.686 240.585 li
369.807 240.542 li
370.051 240.457 li
370.541 240.273 li
370.662 240.224 li
370.785 240.175 li
371.029 240.076 li
371.518 239.863 li
371.641 239.808 li
371.762 239.751 li
372.008 239.636 li
372.496 239.398 li
373.473 238.878 li
373.607 238.802 li
373.738 238.728 li
374.004 238.574 li
374.535 238.251 li
375.594 237.562 li
375.727 237.47 li
375.859 237.378 li
376.125 237.193 li
376.656 236.806 li
377.715 235.99 li
377.848 235.882 li
377.98 235.775 li
378.246 235.554 li
378.777 235.107 li
379.836 234.16 li
381.957 232.083 li
382.082 231.955 li
382.205 231.826 li
382.453 231.564 li
382.947 231.031 li
383.938 229.925 li
385.916 227.558 li
386.041 227.404 li
386.164 227.248 li
386.412 226.933 li
386.906 226.296 li
387.896 224.986 li
389.875 222.214 li
390.01 222.019 li
390.145 221.824 li
390.412 221.429 li
390.949 220.63 li
392.021 218.988 li
394.166 215.541 li
398.457 208.021 li
398.588 207.777 li
398.719 207.533 li
398.984 207.042 li
399.51 206.052 li
400.563 204.042 li
402.668 199.896 li
406.881 191.128 li
414.74 173.466 li
423.26 153.337 li
431.215 134.848 li
431.338 134.574 li
431.459 134.301 li
431.703 133.756 li
432.191 132.671 li
433.166 130.521 li
435.115 126.319 li
435.236 126.061 li
435.359 125.804 li
435.604 125.29 li
436.09 124.271 li
437.064 122.262 li
439.014 118.373 li
439.146 118.116 li
439.279 117.86 li
439.543 117.35 li
440.072 116.341 li
441.129 114.367 li
443.244 110.607 li
443.377 110.38 li
443.51 110.155 li
443.773 109.708 li
444.303 108.828 li
445.359 107.123 li
447.475 103.937 li
447.598 103.761 li
447.721 103.586 li
447.969 103.239 li
448.463 102.559 li
449.449 101.251 li
449.572 101.093 li
449.695 100.936 li
449.943 100.625 li
450.438 100.017 li
451.422 98.8589 li
451.547 98.7202 li
451.67 98.582 li
451.916 98.3101 li
452.41 97.7803 li
453.396 96.7803 li
453.521 96.6611 li
453.645 96.543 li
453.891 96.311 li
454.383 95.8633 li
455.371 95.0303 li
455.508 94.9209 li
455.646 94.813 li
455.922 94.603 li
456.473 94.2041 li
456.611 94.1079 li
456.748 94.0142 li
457.023 93.832 li
457.574 93.4883 li
457.711 93.4072 li
457.85 93.3271 li
458.125 93.1738 li
458.676 92.8882 li
458.814 92.8213 li
458.951 92.7559 li
459.227 92.6309 li
459.777 92.4053 li
459.916 92.353 li
460.053 92.3032 li
460.328 92.208 li
460.465 92.1641 li
460.604 92.1211 li
460.879 92.042 li
461.016 92.0049 li
461.154 91.9712 li
461.293 91.938 li
461.43 91.9072 li
461.568 91.8779 li
461.705 91.8511 li
461.844 91.8262 li
461.98 91.8032 li
462.119 91.7822 li
462.256 91.7632 li
462.393 91.7461 li
462.531 91.731 li
462.67 91.7183 li
462.807 91.707 li
462.945 91.6982 li
463.082 91.6919 li
463.221 91.687 li
463.357 91.6841 li
463.496 91.6831 li
463.633 91.6841 li
463.771 91.687 li
463.908 91.6929 li
464.047 91.7002 li
464.186 91.71 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
[.72 2.88 ] 0 dsh
62.9395 124.362 mo
63.0625 124.361 li
63.1855 124.362 li
63.3086 124.364 li
63.4326 124.367 li
63.5557 124.372 li
63.6787 124.378 li
63.8013 124.385 li
63.9243 124.394 li
64.0474 124.404 li
64.1704 124.415 li
64.2935 124.428 li
64.4165 124.442 li
64.5396 124.457 li
64.6626 124.473 li
64.9087 124.51 li
65.0317 124.531 li
65.1543 124.552 li
65.4004 124.6 li
65.5244 124.625 li
65.6475 124.652 li
65.8936 124.709 li
66.0166 124.74 li
66.1396 124.772 li
66.3857 124.84 li
66.8774 124.99 li
67.0005 125.031 li
67.1235 125.072 li
67.3696 125.16 li
67.8623 125.35 li
67.9854 125.401 li
68.1084 125.453 li
68.3545 125.56 li
68.8467 125.789 li
68.9697 125.85 li
69.0923 125.911 li
69.3384 126.038 li
69.8315 126.305 li
70.8154 126.897 li
70.9497 126.983 li
71.0825 127.07 li
71.3496 127.249 li
71.8823 127.623 li
72.9507 128.434 li
73.0835 128.541 li
73.2173 128.65 li
73.4834 128.871 li
74.0176 129.329 li
75.0845 130.306 li
75.2188 130.434 li
75.3516 130.563 li
75.6187 130.825 li
76.1523 131.363 li
77.2197 132.503 li
79.3545 135.01 li
79.4785 135.165 li
79.6035 135.321 li
79.8525 135.637 li
80.3506 136.279 li
81.3477 137.607 li
83.3403 140.436 li
87.3267 146.724 li
87.4487 146.929 li
87.5703 147.134 li
87.8154 147.546 li
88.3037 148.378 li
89.2808 150.072 li
91.2344 153.564 li
95.1426 160.908 li
103.622 177.818 li
111.535 193.677 li
120.109 209.65 li
120.241 209.878 li
120.373 210.109 li
120.636 210.564 li
121.162 211.47 li
122.214 213.253 li
124.318 216.699 li
124.451 216.908 li
124.582 217.117 li
124.846 217.533 li
125.372 218.357 li
126.423 219.974 li
128.528 223.072 li
128.65 223.246 li
128.773 223.419 li
129.02 223.767 li
129.509 224.453 li
130.492 225.789 li
132.455 228.33 li
132.578 228.484 li
132.701 228.634 li
132.945 228.939 li
133.437 229.535 li
134.418 230.693 li
136.381 232.869 li
136.515 233.009 li
136.647 233.15 li
136.914 233.425 li
137.445 233.966 li
138.511 235.007 li
138.644 235.132 li
138.776 235.257 li
139.042 235.505 li
139.575 235.99 li
140.64 236.912 li
140.772 237.025 li
140.906 237.134 li
141.171 237.353 li
141.704 237.777 li
142.769 238.58 li
142.901 238.675 li
143.035 238.771 li
143.3 238.958 li
143.833 239.32 li
144.896 240 li
145.021 240.074 li
145.146 240.148 li
145.394 240.294 li
145.891 240.576 li
146.884 241.097 li
147.008 241.16 li
147.132 241.22 li
147.381 241.339 li
147.878 241.566 li
148.872 241.98 li
148.996 242.027 li
149.121 242.074 li
149.369 242.164 li
149.866 242.335 li
149.99 242.376 li
150.113 242.416 li
150.362 242.492 li
150.859 242.634 li
150.983 242.669 li
151.107 242.701 li
151.356 242.763 li
151.48 242.794 li
151.604 242.824 li
151.853 242.878 li
151.978 242.906 li
152.102 242.931 li
152.35 242.98 li
152.474 243.001 li
152.599 243.025 li
152.847 243.066 li
152.968 243.083 li
153.09 243.103 li
153.333 243.136 li
153.456 243.152 li
153.578 243.167 li
153.82 243.195 li
153.942 243.207 li
154.064 243.216 li
154.187 243.228 li
154.308 243.238 li
154.43 243.246 li
154.552 243.253 li
154.673 243.261 li
154.794 243.267 li
154.917 243.273 li
155.039 243.277 li
155.161 243.281 li
155.283 243.283 li
155.403 243.285 li
155.525 243.287 li
155.647 243.287 li
155.77 243.287 li
155.891 243.285 li
156.013 243.283 li
156.134 243.279 li
156.256 243.275 li
156.377 243.269 li
156.5 243.263 li
156.622 243.257 li
156.744 243.25 li
156.866 243.24 li
156.986 243.232 li
157.108 243.22 li
157.23 243.208 li
157.353 243.197 li
157.474 243.183 li
157.717 243.156 li
157.839 243.14 li
157.96 243.125 li
158.205 243.089 li
158.327 243.07 li
158.449 243.05 li
158.691 243.007 li
158.813 242.986 li
158.936 242.962 li
159.179 242.912 li
159.666 242.802 li
159.788 242.775 li
159.91 242.744 li
160.152 242.681 li
160.64 242.544 li
160.772 242.505 li
160.904 242.464 li
161.168 242.38 li
161.696 242.201 li
161.83 242.152 li
161.961 242.105 li
162.226 242.003 li
162.753 241.791 li
162.887 241.736 li
163.019 241.677 li
163.283 241.562 li
163.811 241.316 li
164.868 240.773 li
165 240.701 li
165.132 240.628 li
165.396 240.478 li
165.924 240.166 li
166.981 239.494 li
167.113 239.406 li
167.247 239.316 li
167.511 239.134 li
168.039 238.757 li
169.096 237.955 li
169.22 237.857 li
169.342 237.759 li
169.588 237.558 li
170.083 237.148 li
171.068 236.285 li
173.041 234.386 li
173.165 234.261 li
173.288 234.134 li
173.534 233.878 li
174.027 233.357 li
175.014 232.271 li
176.985 229.933 li
177.12 229.767 li
177.253 229.599 li
177.521 229.261 li
178.055 228.576 li
179.124 227.154 li
181.262 224.126 li
181.396 223.927 li
181.529 223.73 li
181.796 223.33 li
182.332 222.519 li
183.4 220.851 li
185.539 217.332 li
185.669 217.107 li
185.8 216.882 li
186.063 216.431 li
186.587 215.517 li
187.638 213.648 li
189.736 209.744 li
193.935 201.304 li
201.765 183.552 li
210.257 161.958 li
218.185 140.535 li
226.773 117.243 li
235.207 95.9541 li
235.33 95.6641 li
235.453 95.375 li
235.699 94.7988 li
236.189 93.6563 li
237.173 91.4082 li
239.141 87.0713 li
239.264 86.8071 li
239.385 86.5449 li
239.631 86.022 li
240.124 84.9868 li
241.106 82.9639 li
243.074 79.1089 li
243.207 78.8569 li
243.34 78.6069 li
243.606 78.1108 li
244.14 77.1353 li
245.207 75.2471 li
245.34 75.0171 li
245.473 74.7891 li
245.74 74.3359 li
246.273 73.4463 li
247.338 71.7339 li
247.471 71.5269 li
247.605 71.3213 li
247.871 70.9131 li
248.404 70.1152 li
249.471 68.5908 li
251.604 65.8491 li
251.727 65.7012 li
251.854 65.5552 li
252.102 65.2681 li
252.598 64.71 li
253.594 63.6621 li
253.719 63.5381 li
253.844 63.415 li
254.092 63.1729 li
254.59 62.707 li
255.586 61.8472 li
255.709 61.7471 li
255.834 61.647 li
256.084 61.4531 li
256.58 61.084 li
256.705 60.9951 li
256.83 60.9082 li
257.078 60.7402 li
257.576 60.4229 li
257.701 60.3481 li
257.826 60.2739 li
258.074 60.1309 li
258.572 59.8643 li
258.697 59.8008 li
258.82 59.7402 li
259.07 59.6221 li
259.568 59.4053 li
259.689 59.355 li
259.813 59.3071 li
260.055 59.2158 li
260.178 59.1719 li
260.299 59.1299 li
260.543 59.0508 li
260.666 59.0142 li
260.787 58.978 li
261.031 58.9102 li
261.154 58.8789 li
261.275 58.8491 li
261.52 58.7939 li
261.641 58.769 li
261.764 58.7451 li
261.885 58.7222 li
262.006 58.7021 li
262.129 58.6821 li
262.25 58.665 li
262.373 58.6489 li
262.494 58.6338 li
262.617 58.6211 li
262.738 58.6089 li
262.861 58.5991 li
262.982 58.5898 li
263.105 58.583 li
263.227 58.5781 li
263.348 58.5742 li
263.471 58.5713 li
263.592 58.5713 li
263.715 58.5723 li
263.836 58.5762 li
263.959 58.5801 li
264.08 58.5869 li
264.203 58.5942 li
264.324 58.604 li
264.447 58.6152 li
264.568 58.627 li
264.691 58.6411 li
264.813 58.6563 li
264.934 58.6729 li
265.057 58.6919 li
265.178 58.7119 li
265.422 58.7559 li
265.545 58.7813 li
265.666 58.8071 li
265.91 58.8643 li
266.033 58.894 li
266.154 58.9272 li
266.398 58.9951 li
266.521 59.0322 li
266.643 59.0698 li
266.887 59.1509 li
267.375 59.3311 li
267.506 59.3838 li
267.639 59.439 li
267.904 59.5532 li
268.434 59.8042 li
268.566 59.8711 li
268.699 59.939 li
268.963 60.082 li
269.492 60.3892 li
269.625 60.4702 li
269.756 60.5532 li
270.021 60.7231 li
270.551 61.0879 li
271.609 61.9053 li
271.742 62.0142 li
271.875 62.126 li
272.139 62.354 li
272.668 62.8301 li
273.729 63.8608 li
273.859 63.998 li
273.992 64.1362 li
274.256 64.417 li
274.785 64.998 li
275.844 66.2373 li
275.969 66.3882 li
276.092 66.541 li
276.338 66.8501 li
276.832 67.4849 li
277.82 68.8232 li
279.797 71.75 li
279.92 71.9438 li
280.043 72.1392 li
280.291 72.5322 li
280.785 73.334 li
281.773 74.9951 li
283.748 78.54 li
283.883 78.791 li
284.016 79.043 li
284.285 79.5513 li
284.82 80.583 li
285.891 82.7051 li
288.031 87.1719 li
292.316 96.894 li
300.725 118.236 li
308.57 139.52 li
317.076 162.511 li
325.018 182.722 li
332.803 200.484 li
332.934 200.763 li
333.066 201.042 li
333.33 201.597 li
333.859 202.701 li
334.914 204.867 li
337.025 209.046 li
337.158 209.302 li
337.289 209.554 li
337.553 210.058 li
338.082 211.056 li
339.137 213.009 li
341.25 216.753 li
341.373 216.964 li
341.496 217.175 li
341.742 217.593 li
342.234 218.421 li
343.219 220.041 li
345.189 223.123 li
345.314 223.308 li
345.436 223.494 li
345.682 223.861 li
346.176 224.585 li
347.16 225.998 li
349.131 228.66 li
349.264 228.833 li
349.398 229.005 li
349.664 229.345 li
350.199 230.013 li
351.266 231.302 li
351.4 231.458 li
351.533 231.615 li
351.801 231.921 li
352.334 232.527 li
353.402 233.685 li
353.535 233.826 li
353.67 233.964 li
353.936 234.242 li
354.471 234.781 li
355.539 235.808 li
357.674 237.671 li
357.799 237.773 li
357.924 237.871 li
358.172 238.068 li
358.672 238.451 li
359.668 239.171 li
359.793 239.257 li
359.918 239.341 li
360.168 239.509 li
360.666 239.833 li
361.664 240.441 li
361.787 240.511 li
361.912 240.582 li
362.162 240.72 li
362.66 240.988 li
362.785 241.052 li
362.91 241.115 li
363.16 241.24 li
363.658 241.478 li
363.783 241.535 li
363.908 241.589 li
364.156 241.699 li
364.654 241.908 li
365.652 242.279 li
365.775 242.32 li
365.896 242.361 li
366.141 242.439 li
366.629 242.585 li
366.752 242.621 li
366.875 242.654 li
367.119 242.718 li
367.607 242.837 li
367.73 242.867 li
367.852 242.892 li
368.096 242.943 li
368.219 242.966 li
368.34 242.99 li
368.586 243.035 li
368.707 243.054 li
368.83 243.074 li
369.074 243.111 li
369.197 243.128 li
369.318 243.146 li
369.563 243.173 li
369.686 243.189 li
369.807 243.201 li
369.93 243.212 li
370.051 243.224 li
370.174 243.234 li
370.297 243.244 li
370.418 243.251 li
370.541 243.259 li
370.662 243.265 li
370.785 243.271 li
370.908 243.277 li
371.029 243.281 li
371.152 243.283 li
371.273 243.285 li
371.396 243.287 li
371.518 243.287 li
371.641 243.287 li
371.762 243.285 li
371.885 243.283 li
372.008 243.281 li
372.129 243.277 li
372.252 243.271 li
372.373 243.265 li
372.496 243.259 li
372.619 243.251 li
372.74 243.244 li
372.863 243.234 li
372.984 243.224 li
373.107 243.212 li
373.23 243.203 li
373.473 243.175 li
373.607 243.16 li
373.738 243.142 li
374.004 243.107 li
374.137 243.087 li
374.27 243.068 li
374.535 243.023 li
374.666 243 li
374.799 242.974 li
375.064 242.923 li
375.594 242.806 li
375.727 242.775 li
375.859 242.742 li
376.125 242.673 li
376.656 242.525 li
376.787 242.486 li
376.92 242.445 li
377.186 242.361 li
377.715 242.177 li
377.848 242.13 li
377.98 242.082 li
378.246 241.982 li
378.777 241.767 li
378.908 241.712 li
379.041 241.656 li
379.307 241.539 li
379.836 241.292 li
379.969 241.23 li
380.102 241.166 li
380.367 241.033 li
380.898 240.757 li
381.957 240.158 li
382.082 240.083 li
382.205 240.009 li
382.453 239.857 li
382.947 239.542 li
383.938 238.875 li
384.061 238.787 li
384.184 238.699 li
384.432 238.521 li
384.928 238.154 li
385.916 237.378 li
386.041 237.279 li
386.164 237.175 li
386.412 236.97 li
386.906 236.552 li
387.896 235.673 li
389.875 233.767 li
390.01 233.63 li
390.145 233.494 li
390.412 233.216 li
390.949 232.65 li
392.021 231.474 li
394.166 228.955 li
394.301 228.789 li
394.434 228.625 li
394.703 228.291 li
395.238 227.613 li
396.311 226.216 li
398.457 223.271 li
398.588 223.083 li
398.719 222.896 li
398.984 222.515 li
399.51 221.75 li
400.563 220.183 li
402.668 216.917 li
406.881 209.884 li
414.74 195.33 li
423.26 178.308 li
431.215 162.396 li
431.338 162.158 li
431.459 161.921 li
431.703 161.449 li
432.191 160.507 li
433.166 158.642 li
435.115 154.986 li
439.014 148.05 li
439.146 147.826 li
439.279 147.599 li
439.543 147.154 li
440.072 146.271 li
441.129 144.541 li
443.244 141.242 li
443.377 141.043 li
443.51 140.845 li
443.773 140.453 li
444.303 139.679 li
445.359 138.18 li
447.475 135.376 li
447.598 135.221 li
447.721 135.067 li
447.969 134.761 li
448.463 134.161 li
449.449 133.009 li
449.572 132.869 li
449.695 132.73 li
449.943 132.456 li
450.438 131.92 li
451.422 130.898 li
451.547 130.775 li
451.67 130.653 li
451.916 130.413 li
452.41 129.944 li
453.396 129.061 li
453.521 128.956 li
453.645 128.852 li
453.891 128.647 li
454.383 128.251 li
455.371 127.515 li
455.508 127.418 li
455.646 127.323 li
455.922 127.137 li
456.473 126.784 li
456.611 126.699 li
456.748 126.616 li
457.023 126.455 li
457.574 126.152 li
457.711 126.08 li
457.85 126.009 li
458.125 125.873 li
458.676 125.621 li
458.814 125.562 li
458.951 125.504 li
459.227 125.394 li
459.777 125.194 li
459.916 125.148 li
460.053 125.104 li
460.328 125.021 li
460.465 124.982 li
460.604 124.944 li
460.879 124.875 li
461.016 124.843 li
461.154 124.812 li
461.293 124.783 li
461.43 124.756 li
461.568 124.731 li
461.705 124.707 li
461.844 124.686 li
461.98 124.665 li
462.119 124.647 li
462.256 124.631 li
462.393 124.616 li
462.531 124.603 li
462.67 124.592 li
462.807 124.582 li
462.945 124.575 li
463.082 124.569 li
463.221 124.565 li
463.357 124.563 li
463.496 124.563 li
463.633 124.564 li
463.771 124.568 li
463.908 124.573 li
464.047 124.58 li
464.186 124.589 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
62.9395 5.36719 mo
63.0625 5.36621 li
63.1855 5.36816 li
63.3086 5.37109 li
63.4326 5.37598 li
63.5557 5.38281 li
63.6787 5.39209 li
63.8013 5.40332 li
63.9243 5.41602 li
64.0474 5.43115 li
64.1704 5.44727 li
64.2935 5.46582 li
64.4165 5.48633 li
64.5396 5.50879 li
64.6626 5.5332 li
64.9087 5.58691 li
65.0317 5.61719 li
65.1543 5.64893 li
65.4004 5.71924 li
65.5244 5.75586 li
65.6475 5.79492 li
65.8936 5.87988 li
66.0166 5.9248 li
66.1396 5.97217 li
66.3857 6.07129 li
66.8774 6.29102 li
67.0005 6.35107 li
67.1235 6.41309 li
67.3696 6.54102 li
67.8623 6.82031 li
67.9854 6.89502 li
68.1084 6.97119 li
68.3545 7.12793 li
68.8467 7.46484 li
68.9697 7.5542 li
69.0923 7.64404 li
69.3384 7.83008 li
69.8315 8.22412 li
70.8154 9.09521 li
70.9497 9.22119 li
71.0825 9.3501 li
71.3496 9.61328 li
71.8823 10.1631 li
72.9507 11.3599 li
73.0835 11.5181 li
73.2173 11.6792 li
73.4834 12.0049 li
74.0176 12.6812 li
75.0845 14.126 li
75.2188 14.3149 li
75.3516 14.5059 li
75.6187 14.894 li
76.1523 15.6919 li
77.2197 17.3809 li
79.3545 21.106 li
79.4785 21.3369 li
79.6035 21.5688 li
79.8525 22.0391 li
80.3506 22.9961 li
81.3477 24.978 li
83.3403 29.2139 li
87.3267 38.6919 li
87.4487 39.002 li
87.5703 39.312 li
87.8154 39.937 li
88.3037 41.1992 li
89.2808 43.772 li
91.2344 49.106 li
95.1426 60.4341 li
103.622 87.186 li
111.535 113.428 li
120.109 141.602 li
128.528 167.691 li
136.381 189.708 li
136.515 190.058 li
136.647 190.408 li
136.914 191.103 li
137.445 192.486 li
138.511 195.208 li
140.64 200.492 li
144.896 210.369 li
145.021 210.642 li
145.146 210.916 li
145.394 211.458 li
145.891 212.537 li
146.884 214.652 li
148.872 218.724 li
148.996 218.972 li
149.121 219.218 li
149.369 219.708 li
149.866 220.679 li
150.859 222.582 li
152.847 226.218 li
152.968 226.433 li
153.09 226.65 li
153.333 227.076 li
153.82 227.921 li
154.794 229.57 li
156.744 232.705 li
156.866 232.892 li
156.986 233.08 li
157.23 233.453 li
157.717 234.189 li
158.691 235.619 li
160.64 238.312 li
160.772 238.486 li
160.904 238.66 li
161.168 239.003 li
161.696 239.681 li
162.753 240.984 li
162.887 241.142 li
163.019 241.3 li
163.283 241.613 li
163.811 242.222 li
164.868 243.394 li
165 243.537 li
165.132 243.677 li
165.396 243.955 li
165.924 244.5 li
166.981 245.541 li
169.096 247.425 li
169.22 247.529 li
169.342 247.628 li
169.588 247.828 li
170.083 248.216 li
171.068 248.949 li
171.191 249.035 li
171.314 249.123 li
171.562 249.292 li
172.055 249.623 li
173.041 250.242 li
173.165 250.314 li
173.288 250.386 li
173.534 250.529 li
174.027 250.802 li
174.15 250.869 li
174.273 250.933 li
174.521 251.062 li
175.014 251.308 li
175.137 251.367 li
175.259 251.425 li
175.506 251.541 li
176 251.757 li
176.985 252.15 li
177.12 252.199 li
177.253 252.246 li
177.521 252.339 li
178.055 252.511 li
178.188 252.552 li
178.323 252.591 li
178.589 252.667 li
179.124 252.808 li
179.257 252.839 li
179.392 252.873 li
179.659 252.931 li
179.792 252.96 li
179.925 252.988 li
180.192 253.039 li
180.327 253.064 li
180.46 253.087 li
180.728 253.13 li
180.861 253.152 li
180.995 253.171 li
181.262 253.207 li
181.396 253.222 li
181.529 253.238 li
181.663 253.251 li
181.796 253.265 li
181.931 253.279 li
182.063 253.291 li
182.198 253.3 li
182.332 253.308 li
182.464 253.318 li
182.599 253.326 li
182.731 253.332 li
182.866 253.337 li
183 253.341 li
183.132 253.345 li
183.267 253.347 li
183.4 253.349 li
183.534 253.349 li
183.667 253.347 li
183.8 253.347 li
183.935 253.343 li
184.068 253.339 li
184.202 253.335 li
184.335 253.33 li
184.47 253.324 li
184.603 253.316 li
184.736 253.308 li
184.871 253.298 li
185.003 253.289 li
185.138 253.277 li
185.271 253.263 li
185.539 253.236 li
185.669 253.22 li
185.8 253.205 li
186.063 253.169 li
186.194 253.152 li
186.326 253.132 li
186.587 253.089 li
186.718 253.068 li
186.851 253.044 li
187.112 252.994 li
187.638 252.884 li
187.769 252.855 li
187.899 252.824 li
188.162 252.759 li
188.687 252.621 li
188.817 252.583 li
188.95 252.544 li
189.211 252.466 li
189.736 252.298 li
189.868 252.253 li
189.999 252.208 li
190.262 252.117 li
190.786 251.917 li
191.835 251.48 li
191.966 251.421 li
192.098 251.363 li
192.36 251.242 li
192.884 250.988 li
193.935 250.439 li
194.057 250.373 li
194.179 250.304 li
194.423 250.166 li
194.914 249.88 li
195.892 249.275 li
197.85 247.923 li
197.972 247.833 li
198.095 247.744 li
198.338 247.558 li
198.829 247.183 li
199.807 246.398 li
201.765 244.705 li
201.897 244.583 li
202.029 244.462 li
202.295 244.218 li
202.827 243.718 li
203.888 242.687 li
206.011 240.488 li
210.257 235.611 li
210.381 235.46 li
210.504 235.308 li
210.752 235.003 li
211.249 234.388 li
212.239 233.136 li
214.221 230.556 li
218.185 225.123 li
226.773 212.582 li
235.207 200.351 li
235.33 200.181 li
235.453 200.011 li
235.699 199.671 li
236.189 198.996 li
237.173 197.664 li
239.141 195.074 li
239.264 194.916 li
239.385 194.757 li
239.631 194.445 li
240.124 193.824 li
241.106 192.603 li
243.074 190.265 li
243.207 190.113 li
243.34 189.96 li
243.606 189.658 li
244.14 189.064 li
245.207 187.91 li
247.338 185.753 li
247.471 185.626 li
247.605 185.5 li
247.871 185.248 li
248.404 184.755 li
249.471 183.814 li
251.604 182.113 li
251.727 182.021 li
251.854 181.931 li
252.102 181.751 li
252.598 181.406 li
253.594 180.751 li
253.719 180.675 li
253.844 180.597 li
254.092 180.447 li
254.59 180.158 li
255.586 179.619 li
255.709 179.556 li
255.834 179.494 li
256.084 179.373 li
256.58 179.14 li
256.705 179.085 li
256.83 179.031 li
257.078 178.925 li
257.576 178.728 li
257.701 178.681 li
257.826 178.634 li
258.074 178.544 li
258.572 178.378 li
258.697 178.339 li
258.82 178.3 li
259.07 178.226 li
259.568 178.089 li
259.689 178.058 li
259.813 178.029 li
260.055 177.972 li
260.178 177.945 li
260.299 177.917 li
260.543 177.869 li
260.666 177.845 li
260.787 177.822 li
261.031 177.781 li
261.154 177.759 li
261.275 177.742 li
261.52 177.707 li
261.641 177.691 li
261.764 177.675 li
261.885 177.662 li
262.006 177.65 li
262.129 177.636 li
262.25 177.625 li
262.373 177.615 li
262.494 177.607 li
262.617 177.597 li
262.738 177.589 li
262.861 177.583 li
262.982 177.578 li
263.105 177.574 li
263.227 177.57 li
263.348 177.568 li
263.471 177.566 li
263.592 177.566 li
263.715 177.568 li
263.836 177.57 li
263.959 177.572 li
264.08 177.576 li
264.203 177.582 li
264.324 177.587 li
264.447 177.593 li
264.568 177.603 li
264.691 177.611 li
264.813 177.621 li
264.934 177.63 li
265.057 177.642 li
265.178 177.656 li
265.422 177.683 li
265.545 177.699 li
265.666 177.714 li
265.91 177.751 li
266.033 177.771 li
266.154 177.791 li
266.398 177.833 li
266.521 177.857 li
266.643 177.88 li
266.887 177.931 li
267.375 178.044 li
267.506 178.078 li
267.639 178.111 li
267.904 178.183 li
268.434 178.339 li
268.566 178.382 li
268.699 178.425 li
268.963 178.515 li
269.492 178.707 li
269.625 178.757 li
269.756 178.808 li
270.021 178.916 li
270.551 179.144 li
271.609 179.656 li
271.742 179.724 li
271.875 179.792 li
272.139 179.937 li
272.668 180.234 li
273.729 180.876 li
273.859 180.962 li
273.992 181.048 li
274.256 181.222 li
274.785 181.583 li
275.844 182.355 li
275.969 182.449 li
276.092 182.542 li
276.338 182.734 li
276.832 183.128 li
277.82 183.957 li
279.797 185.763 li
279.92 185.882 li
280.043 186.003 li
280.291 186.246 li
280.785 186.738 li
281.773 187.755 li
283.748 189.919 li
283.883 190.072 li
284.016 190.226 li
284.285 190.535 li
284.82 191.162 li
285.891 192.447 li
288.031 195.134 li
292.316 200.906 li
300.725 213.134 li
308.57 224.597 li
308.703 224.785 li
308.836 224.972 li
309.102 225.347 li
309.633 226.095 li
310.697 227.572 li
312.824 230.449 li
317.076 235.865 li
317.201 236.015 li
317.324 236.166 li
317.572 236.462 li
318.07 237.052 li
319.063 238.207 li
321.047 240.416 li
321.172 240.548 li
321.295 240.681 li
321.543 240.947 li
322.039 241.466 li
323.033 242.482 li
325.018 244.392 li
325.139 244.503 li
325.26 244.615 li
325.504 244.835 li
325.99 245.267 li
326.963 246.105 li
327.086 246.207 li
327.207 246.306 li
327.451 246.507 li
327.938 246.9 li
328.91 247.652 li
329.031 247.744 li
329.154 247.833 li
329.396 248.013 li
329.883 248.363 li
330.855 249.029 li
332.803 250.222 li
332.934 250.296 li
333.066 250.371 li
333.33 250.515 li
333.859 250.794 li
333.99 250.863 li
334.123 250.927 li
334.385 251.058 li
334.914 251.31 li
335.045 251.371 li
335.178 251.431 li
335.441 251.546 li
335.969 251.771 li
337.025 252.173 li
337.158 252.22 li
337.289 252.265 li
337.553 252.353 li
338.082 252.517 li
338.213 252.556 li
338.346 252.593 li
338.609 252.667 li
339.137 252.802 li
339.27 252.833 li
339.402 252.865 li
339.666 252.923 li
339.797 252.951 li
339.93 252.978 li
340.193 253.029 li
340.326 253.052 li
340.457 253.076 li
340.721 253.121 li
340.854 253.14 li
340.986 253.16 li
341.25 253.197 li
341.373 253.21 li
341.496 253.226 li
341.619 253.24 li
341.742 253.253 li
341.865 253.265 li
341.988 253.277 li
342.111 253.287 li
342.234 253.296 li
342.357 253.306 li
342.48 253.314 li
342.604 253.322 li
342.727 253.328 li
342.85 253.333 li
342.973 253.337 li
343.096 253.341 li
343.219 253.345 li
343.342 253.347 li
343.465 253.347 li
343.588 253.349 li
343.713 253.349 li
343.836 253.347 li
343.959 253.345 li
344.082 253.343 li
344.205 253.339 li
344.328 253.333 li
344.451 253.33 li
344.574 253.322 li
344.697 253.316 li
344.82 253.306 li
344.943 253.298 li
345.066 253.289 li
345.189 253.279 li
345.314 253.267 li
345.436 253.253 li
345.682 253.226 li
345.805 253.212 li
345.928 253.197 li
346.176 253.164 li
346.299 253.146 li
346.422 253.126 li
346.668 253.085 li
347.16 252.994 li
347.283 252.968 li
347.406 252.943 li
347.652 252.888 li
348.146 252.771 li
348.268 252.738 li
348.391 252.705 li
348.637 252.636 li
349.131 252.492 li
349.264 252.449 li
349.398 252.406 li
349.664 252.316 li
350.199 252.125 li
350.332 252.076 li
350.465 252.025 li
350.732 251.917 li
351.266 251.695 li
351.4 251.636 li
351.533 251.576 li
351.801 251.455 li
352.334 251.197 li
353.402 250.634 li
353.535 250.558 li
353.67 250.484 li
353.936 250.328 li
354.471 250.005 li
355.539 249.308 li
355.672 249.216 li
355.805 249.125 li
356.072 248.937 li
356.607 248.546 li
357.674 247.716 li
357.799 247.617 li
357.924 247.513 li
358.172 247.306 li
358.672 246.88 li
359.668 245.988 li
361.664 244.025 li
361.787 243.892 li
361.912 243.761 li
362.162 243.496 li
362.66 242.955 li
363.658 241.828 li
365.652 239.396 li
365.775 239.24 li
365.896 239.082 li
366.141 238.763 li
366.629 238.119 li
367.607 236.787 li
369.563 233.955 li
369.686 233.771 li
369.807 233.585 li
370.051 233.212 li
370.541 232.457 li
371.518 230.902 li
373.473 227.628 li
373.607 227.4 li
373.738 227.169 li
374.004 226.705 li
374.535 225.763 li
375.594 223.835 li
377.715 219.789 li
381.957 210.953 li
382.082 210.679 li
382.205 210.408 li
382.453 209.859 li
382.947 208.753 li
383.938 206.503 li
385.916 201.855 li
389.875 191.974 li
398.457 168.105 li
406.881 142.036 li
414.74 116.245 li
423.26 87.98 li
431.215 62.7471 li
431.338 62.377 li
431.459 62.0088 li
431.703 61.2739 li
432.191 59.812 li
433.166 56.9209 li
435.115 51.2881 li
435.236 50.9429 li
435.359 50.5991 li
435.604 49.9131 li
436.09 48.5508 li
437.064 45.8721 li
439.014 40.6992 li
439.146 40.3579 li
439.279 40.0181 li
439.543 39.3408 li
440.072 38.0029 li
441.129 35.3901 li
443.244 30.4229 li
443.377 30.125 li
443.51 29.8281 li
443.773 29.2393 li
444.303 28.0791 li
445.359 25.835 li
447.475 21.6509 li
447.598 21.4199 li
447.721 21.1899 li
447.969 20.7349 li
448.463 19.8428 li
449.449 18.1309 li
449.572 17.9238 li
449.695 17.7178 li
449.943 17.312 li
450.438 16.5171 li
451.422 15.0029 li
451.547 14.8213 li
451.67 14.6411 li
451.916 14.2852 li
452.41 13.5928 li
453.396 12.2881 li
453.521 12.1328 li
453.645 11.979 li
453.891 11.6768 li
454.383 11.0918 li
455.371 10.0068 li
455.508 9.86426 li
455.646 9.72412 li
455.922 9.4502 li
456.473 8.93018 li
456.611 8.80518 li
456.748 8.68311 li
457.023 8.44531 li
457.574 7.99805 li
457.711 7.89111 li
457.85 7.78809 li
458.125 7.58691 li
458.676 7.21387 li
458.814 7.12695 li
458.951 7.04199 li
459.227 6.87891 li
459.777 6.58301 li
459.916 6.51514 li
460.053 6.44922 li
460.328 6.32617 li
460.465 6.26709 li
460.604 6.21191 li
460.879 6.10791 li
461.016 6.05908 li
461.154 6.01416 li
461.293 5.97021 li
461.43 5.93018 li
461.568 5.89111 li
461.705 5.85596 li
461.98 5.79199 li
462.119 5.76416 li
462.256 5.73828 li
462.393 5.71484 li
462.531 5.69531 li
462.67 5.67676 li
462.807 5.66211 li
462.945 5.64893 li
463.082 5.63916 li
463.221 5.63184 li
463.357 5.62695 li
463.496 5.625 li
463.633 5.625 li
463.771 5.62793 li
463.908 5.63379 li
464.047 5.64209 li
464.186 5.65332 li
.6 .545098 .239216 rgb
@
.4 lw
472.543 .200195 mo
472.543 258.515 li
54.5806 .200195 mo
472.543 .200195 li
54.5806 258.515 mo
54.5806 .200195 li
472.543 258.515 mo
54.5806 258.515 li
0 0 0 rgb
@
0 lc
62.9395 258.515 mo
62.9395 255.613 li
@
64.1382 270.91 mo
64.3462 270.296 64.4517 269.414 64.4517 268.256 cv
64.4517 267.333 64.3892 266.599 64.2622 266.048 cv
64.0278 265.023 63.5874 264.512 62.9419 264.512 cv
62.2974 264.512 61.854 265.04 61.6157 266.094 cv
61.4897 266.656 61.4263 267.395 61.4263 268.314 cv
61.4263 269.175 61.4907 269.863 61.6196 270.38 cv
61.8638 271.343 62.3188 271.825 62.9868 271.825 cv
63.5454 271.825 63.9282 271.519 64.1382 270.91 cv
cp
65.0044 265.578 mo
65.3862 266.318 65.5796 267.167 65.5796 268.128 cv
65.5796 268.884 65.4614 269.597 65.2251 270.265 cv
64.7817 271.521 64.0122 272.15 62.9185 272.15 cv
62.1704 272.15 61.5552 271.808 61.0737 271.13 cv
60.5571 270.406 60.2993 269.421 60.2993 268.174 cv
60.2993 267.195 60.4712 266.351 60.8169 265.644 cv
61.2847 264.685 62.0024 264.205 62.9712 264.205 cv
63.8442 264.205 64.52 264.662 65.0044 265.578 cv
cp
.137255 .121569 .12549 rgb
f
163.25 258.515 mo
163.25 255.613 li
0 0 0 rgb
@
164.356 274.658 mo
161.017 274.658 li
161.017 275.677 li
164.356 275.677 li
164.356 275.677 li
162.142 275.677 li
165.481 275.677 li
165.481 275.677 li
165.481 274.658 li
162.142 274.658 li
164.356 274.658 li
cp
ef
165.779 264.933 mo
164.69 264.933 li
164.162 267.099 li
164.143 267.202 164.119 267.295 164.119 267.401 cv
164.119 267.981 164.743 267.896 164.743 268.59 cv
164.743 268.904 164.505 269.018 164.225 269.018 cv
163.696 269.018 163.468 268.582 163.468 268.105 cv
163.468 267.814 163.521 267.535 163.582 267.254 cv
164.11 264.933 li
163.002 264.933 li
162.224 267.234 li
162.048 267.763 161.675 269.029 160.949 269.029 cv
160.69 269.029 160.565 268.945 160.565 268.675 cv
160.565 268.022 161.499 267.834 161.705 267.213 cv
162.452 264.933 li
161.851 264.933 li
161.488 264.933 161.022 265.285 160.855 265.596 cv
160.741 265.596 li
160.803 265.327 161.113 264.963 161.289 264.755 cv
161.57 264.445 161.912 264.205 162.35 264.205 cv
165.936 264.205 li
165.779 264.933 li
cp
.137255 .121569 .12549 rgb
f
160.949 287.519 mo
162.183 286.239 163.02 285.298 163.46 284.699 cv
163.902 284.101 164.125 283.517 164.125 282.949 cv
164.125 282.449 163.987 282.07 163.721 281.809 cv
163.45 281.548 163.129 281.417 162.754 281.417 cv
162.291 281.417 161.919 281.586 161.632 281.921 cv
161.474 282.108 161.323 282.392 161.178 282.776 cv
160.961 282.73 li
161.128 281.956 161.412 281.419 161.816 281.115 cv
162.22 280.814 162.651 280.666 163.114 280.666 cv
163.683 280.666 164.145 280.842 164.496 281.201 cv
164.848 281.562 165.023 282 165.023 282.518 cv
165.023 283.072 164.834 283.602 164.452 284.115 cv
164.072 284.625 163.243 285.536 161.969 286.845 cv
164.292 286.845 li
164.614 286.845 164.84 286.808 164.972 286.73 cv
165.104 286.652 165.253 286.464 165.419 286.166 cv
165.551 286.224 li
164.988 287.634 li
160.949 287.634 li
160.949 287.519 li
cp
f
263.563 258.515 mo
263.563 255.613 li
0 0 0 rgb
@
266.172 264.955 mo
265.047 264.955 li
264.503 267.191 li
264.479 267.298 264.461 267.394 264.461 267.501 cv
264.461 268.101 265.103 268.015 265.103 268.731 cv
265.103 269.053 264.854 269.17 264.567 269.17 cv
264.021 269.17 263.784 268.722 263.784 268.228 cv
263.784 267.928 263.839 267.64 263.903 267.353 cv
264.448 264.955 li
263.304 264.955 li
262.501 267.33 li
262.321 267.875 261.935 269.181 261.187 269.181 cv
260.919 269.181 260.79 269.095 260.79 268.816 cv
260.79 268.144 261.754 267.952 261.966 267.308 cv
262.737 264.955 li
262.114 264.955 li
261.741 264.955 261.261 265.318 261.091 265.638 cv
260.97 265.638 li
261.034 265.362 261.356 264.987 261.538 264.771 cv
261.829 264.453 262.179 264.205 262.63 264.205 cv
266.333 264.205 li
266.172 264.955 li
cp
.137255 .121569 .12549 rgb
f
363.873 258.515 mo
363.873 255.613 li
0 0 0 rgb
@
358.463 270.621 mo
358.767 270.814 359.025 270.911 359.241 270.911 cv
359.711 270.911 360.063 270.752 360.291 270.435 cv
360.52 270.113 360.635 269.768 360.635 269.392 cv
360.635 269.031 360.542 268.713 360.357 268.441 cv
360.041 267.976 359.514 267.747 358.771 267.747 cv
358.727 267.747 358.684 267.748 358.644 267.748 cv
358.604 267.751 358.556 267.755 358.503 267.763 cv
358.49 267.63 li
359.03 267.435 359.457 267.21 359.764 266.957 cv
360.076 266.705 360.23 266.371 360.23 265.958 cv
360.23 265.591 360.107 265.31 359.865 265.119 cv
359.619 264.925 359.342 264.83 359.025 264.83 cv
358.656 264.83 358.332 264.968 358.046 265.24 cv
357.893 265.39 357.725 265.619 357.545 265.927 cv
357.391 265.892 li
357.523 265.38 357.773 264.969 358.143 264.664 cv
358.512 264.355 358.934 264.205 359.417 264.205 cv
359.932 264.205 360.331 264.345 360.612 264.628 cv
360.894 264.912 361.034 265.238 361.034 265.609 cv
361.034 265.936 360.916 266.235 360.688 266.509 cv
360.555 266.664 360.349 266.837 360.072 267.027 cv
360.396 267.167 360.656 267.33 360.85 267.513 cv
361.219 267.869 361.403 268.316 361.403 268.859 cv
361.403 269.5 361.152 270.066 360.647 270.552 cv
360.143 271.041 359.426 271.287 358.494 271.287 cv
358.081 271.287 357.791 271.226 357.624 271.103 cv
357.457 270.98 357.373 270.845 357.373 270.705 cv
357.373 270.617 357.4 270.533 357.457 270.453 cv
357.514 270.371 357.602 270.331 357.729 270.331 cv
357.914 270.331 358.16 270.427 358.463 270.621 cv
cp
.137255 .121569 .12549 rgb
f
369.502 267.281 mo
368.412 267.281 li
367.885 269.447 li
367.863 269.55 367.842 269.644 367.842 269.75 cv
367.842 270.33 368.465 270.244 368.465 270.939 cv
368.465 271.251 368.224 271.367 367.947 271.367 cv
367.415 271.367 367.187 270.929 367.187 270.454 cv
367.187 270.162 367.239 269.882 367.301 269.603 cv
367.832 267.281 li
366.721 267.281 li
365.943 269.582 li
365.768 270.111 365.394 271.376 364.668 271.376 cv
364.409 271.376 364.286 271.292 364.286 271.023 cv
364.286 270.371 365.218 270.183 365.424 269.562 cv
366.172 267.281 li
365.569 267.281 li
365.209 267.281 364.743 267.632 364.576 267.945 cv
364.462 267.945 li
364.523 267.675 364.836 267.312 365.012 267.103 cv
365.293 266.792 365.635 266.552 366.07 266.552 cv
369.656 266.552 li
369.502 267.281 li
cp
f
361.215 289.867 mo
362.449 288.587 363.284 287.646 363.729 287.047 cv
364.168 286.45 364.387 285.865 364.387 285.296 cv
364.387 284.797 364.256 284.417 363.982 284.158 cv
363.715 283.896 363.395 283.765 363.021 283.765 cv
362.555 283.765 362.182 283.935 361.896 284.27 cv
361.737 284.457 361.588 284.74 361.443 285.125 cv
361.223 285.079 li
361.395 284.304 361.68 283.767 362.08 283.462 cv
362.484 283.163 362.915 283.013 363.377 283.013 cv
363.947 283.013 364.409 283.191 364.761 283.549 cv
365.112 283.91 365.288 284.347 365.288 284.867 cv
365.288 285.419 365.1 285.951 364.717 286.462 cv
364.334 286.972 363.508 287.884 362.234 289.193 cv
364.555 289.193 li
364.879 289.193 365.107 289.157 365.235 289.078 cv
365.367 289 365.517 288.812 365.684 288.513 cv
365.815 288.572 li
365.253 289.983 li
361.215 289.983 li
361.215 289.867 li
cp
f
.5 lw
354.623 277.764 mo
373.123 277.764 li
0 0 0 rgb
@
.4 lw
464.186 258.515 mo
464.186 255.613 li
@
457.639 271.283 mo
458.912 269.961 459.774 268.992 460.232 268.373 cv
460.688 267.753 460.916 267.149 460.916 266.563 cv
460.916 266.047 460.776 265.656 460.496 265.386 cv
460.22 265.116 459.887 264.982 459.5 264.982 cv
459.024 264.982 458.638 265.157 458.34 265.502 cv
458.176 265.695 458.021 265.989 457.87 266.386 cv
457.647 266.337 li
457.822 265.538 458.115 264.982 458.531 264.671 cv
458.947 264.36 459.395 264.205 459.871 264.205 cv
460.459 264.205 460.935 264.389 461.299 264.759 cv
461.662 265.13 461.844 265.583 461.844 266.118 cv
461.844 266.689 461.646 267.238 461.254 267.767 cv
460.861 268.296 460.008 269.236 458.689 270.589 cv
461.087 270.589 li
461.421 270.589 461.656 270.548 461.791 270.468 cv
461.928 270.39 462.082 270.195 462.253 269.885 cv
462.388 269.947 li
461.808 271.403 li
457.639 271.403 li
457.639 271.283 li
cp
.137255 .121569 .12549 rgb
f
470.57 267.348 mo
469.445 267.348 li
468.902 269.585 li
468.879 269.692 468.859 269.787 468.859 269.896 cv
468.859 270.495 469.501 270.408 469.501 271.125 cv
469.501 271.447 469.252 271.564 468.967 271.564 cv
468.418 271.564 468.183 271.116 468.183 270.623 cv
468.183 270.322 468.236 270.033 468.301 269.746 cv
468.846 267.348 li
467.702 267.348 li
466.899 269.722 li
466.719 270.269 466.332 271.574 465.586 271.574 cv
465.317 271.574 465.188 271.49 465.188 271.209 cv
465.188 270.537 466.152 270.345 466.365 269.703 cv
467.135 267.348 li
466.513 267.348 li
466.139 267.348 465.658 267.711 465.488 268.033 cv
465.369 268.033 li
465.434 267.755 465.756 267.38 465.938 267.166 cv
466.227 266.845 466.577 266.598 467.028 266.598 cv
470.731 266.598 li
470.57 267.348 li
cp
f
54.5806 253.648 mo
57.4834 253.648 li
0 0 0 rgb
@
38.874 257.758 mo
40.3789 256.198 41.4014 255.05 41.9404 254.319 cv
42.4795 253.588 42.749 252.875 42.749 252.18 cv
42.749 251.571 42.585 251.108 42.2549 250.791 cv
41.9268 250.471 41.5332 250.313 41.0771 250.313 cv
40.5137 250.313 40.0566 250.518 39.7061 250.928 cv
39.5146 251.155 39.3291 251.504 39.1533 251.971 cv
38.8857 251.915 li
39.0928 250.971 39.4404 250.313 39.9336 249.946 cv
40.4248 249.578 40.9521 249.393 41.5156 249.393 cv
42.21 249.393 42.7725 249.613 43.2031 250.051 cv
43.6318 250.489 43.8477 251.024 43.8477 251.657 cv
43.8477 252.331 43.6143 252.979 43.1504 253.603 cv
42.6846 254.229 41.6738 255.34 40.1201 256.94 cv
42.9521 256.94 li
43.3467 256.94 43.625 256.893 43.7842 256.797 cv
43.9463 256.704 44.1279 256.474 44.3291 256.108 cv
44.4893 256.18 li
43.8037 257.903 li
38.874 257.903 li
38.874 257.758 li
cp
.137255 .121569 .12549 rgb
f
44.7236 257.758 mo
46.2295 256.198 47.252 255.05 47.791 254.319 cv
48.3301 253.588 48.5996 252.875 48.5996 252.18 cv
48.5996 251.571 48.4346 251.108 48.1045 250.791 cv
47.7764 250.471 47.3838 250.313 46.9268 250.313 cv
46.3643 250.313 45.9072 250.518 45.5576 250.928 cv
45.3643 251.155 45.1787 251.504 45.002 251.971 cv
44.7373 251.915 li
44.9424 250.971 45.29 250.313 45.7822 249.946 cv
46.2744 249.578 46.8018 249.393 47.3643 249.393 cv
48.0605 249.393 48.623 249.613 49.0518 250.051 cv
49.4814 250.489 49.6963 251.024 49.6963 251.657 cv
49.6963 252.331 49.4658 252.979 48.999 253.603 cv
48.5352 254.229 47.5244 255.34 45.9697 256.94 cv
48.8018 256.94 li
49.1973 256.94 49.4756 256.893 49.6357 256.797 cv
49.7959 256.704 49.9766 256.474 50.1787 256.108 cv
50.3389 256.18 li
49.6543 257.903 li
44.7236 257.903 li
44.7236 257.758 li
cp
f
54.5806 197.552 mo
57.4834 197.552 li
54.5806 208.773 mo
56.3228 208.773 li
54.5806 219.99 mo
56.3228 219.99 li
54.5806 231.208 mo
56.3228 231.208 li
54.5806 242.427 mo
56.3228 242.427 li
0 0 0 rgb
@
39.3994 201.639 mo
40.9033 200.078 41.9258 198.93 42.4648 198.2 cv
43.0039 197.469 43.2734 196.755 43.2734 196.061 cv
43.2734 195.452 43.1094 194.989 42.7803 194.67 cv
42.4521 194.352 42.0576 194.194 41.6025 194.194 cv
41.0381 194.194 40.5811 194.399 40.2314 194.809 cv
40.0391 195.036 39.8525 195.384 39.6768 195.852 cv
39.4111 195.794 li
39.6172 194.851 39.9639 194.194 40.458 193.826 cv
40.9482 193.458 41.4756 193.274 42.04 193.274 cv
42.7344 193.274 43.2969 193.493 43.7275 193.931 cv
44.1572 194.37 44.3721 194.904 44.3721 195.537 cv
44.3721 196.21 44.1396 196.86 43.6748 197.483 cv
43.209 198.109 42.1982 199.221 40.6436 200.821 cv
43.4775 200.821 li
43.8711 200.821 44.1494 200.774 44.3096 200.678 cv
44.4697 200.584 44.6514 200.354 44.8545 199.989 cv
45.0137 200.06 li
44.3281 201.783 li
39.3994 201.783 li
39.3994 201.639 li
cp
.137255 .121569 .12549 rgb
f
46.751 201.063 mo
47.123 201.301 47.4395 201.418 47.6982 201.418 cv
48.2744 201.418 48.7021 201.225 48.9814 200.833 cv
49.2607 200.446 49.4014 200.02 49.4014 199.563 cv
49.4014 199.124 49.2881 198.736 49.0625 198.402 cv
48.6787 197.838 48.0342 197.557 47.124 197.557 cv
47.0703 197.557 47.0186 197.557 46.9707 197.558 cv
46.9209 197.559 46.8643 197.565 46.7979 197.575 cv
46.7842 197.413 li
47.4443 197.176 47.9609 196.902 48.3408 196.592 cv
48.7178 196.284 48.9072 195.876 48.9072 195.373 cv
48.9072 194.922 48.7578 194.582 48.46 194.347 cv
48.1611 194.113 47.8213 193.996 47.4395 193.996 cv
46.9873 193.996 46.5869 194.163 46.2432 194.497 cv
46.0537 194.676 45.8486 194.956 45.6318 195.334 cv
45.4404 195.292 li
45.6045 194.665 45.9111 194.167 46.3604 193.792 cv
46.8066 193.418 47.3271 193.229 47.9141 193.229 cv
48.5439 193.229 49.0283 193.404 49.373 193.75 cv
49.7178 194.094 49.8887 194.493 49.8887 194.946 cv
49.8887 195.346 49.7471 195.711 49.4619 196.045 cv
49.3027 196.233 49.0537 196.445 48.7168 196.68 cv
49.1104 196.848 49.4268 197.045 49.666 197.272 cv
50.1143 197.704 50.3389 198.25 50.3389 198.912 cv
50.3389 199.696 50.0303 200.383 49.417 200.98 cv
48.8018 201.577 47.9268 201.875 46.79 201.875 cv
46.2852 201.875 45.9307 201.799 45.7275 201.649 cv
45.5234 201.5 45.4229 201.338 45.4229 201.165 cv
45.4229 201.059 45.4541 200.956 45.5234 200.857 cv
45.5908 200.757 45.7002 200.708 45.8525 200.708 cv
46.0801 200.708 46.3789 200.827 46.751 201.063 cv
cp
f
54.5806 141.458 mo
57.4834 141.458 li
54.5806 152.677 mo
56.3228 152.677 li
54.5806 163.896 mo
56.3228 163.896 li
54.5806 175.115 mo
56.3228 175.115 li
54.5806 186.333 mo
56.3228 186.333 li
0 0 0 rgb
@
38.8994 145.572 mo
40.4033 144.008 41.4268 142.862 41.9658 142.13 cv
42.5049 141.397 42.7744 140.686 42.7744 139.991 cv
42.7744 139.384 42.6104 138.921 42.2803 138.601 cv
41.9521 138.283 41.5576 138.124 41.1025 138.124 cv
40.5381 138.124 40.0811 138.329 39.7314 138.74 cv
39.54 138.966 39.3535 139.313 39.1777 139.782 cv
38.9111 139.726 li
39.1182 138.781 39.4648 138.124 39.958 137.756 cv
40.4492 137.388 40.9766 137.204 41.54 137.204 cv
42.2354 137.204 42.7979 137.423 43.2275 137.861 cv
43.6572 138.298 43.8721 138.834 43.8721 139.467 cv
43.8721 140.141 43.6396 140.79 43.1748 141.415 cv
42.71 142.039 41.6982 143.151 40.1445 144.75 cv
42.9775 144.75 li
43.3721 144.75 43.6494 144.705 43.8096 144.609 cv
43.9707 144.513 44.1523 144.283 44.3545 143.917 cv
44.5146 143.991 li
43.8291 145.712 li
38.8994 145.712 li
38.8994 145.572 li
cp
.137255 .121569 .12549 rgb
f
48.0557 138.509 mo
45.0283 142.788 li
48.0557 142.788 li
48.0557 138.509 li
cp
48.4639 137.234 mo
49.0498 137.234 li
49.0498 142.788 li
50.3389 142.788 li
50.3389 143.608 li
49.0498 143.608 li
49.0498 145.712 li
48.0693 145.712 li
48.0693 143.608 li
44.5146 143.608 li
44.5146 142.788 li
48.4639 137.234 li
cp
f
54.5806 85.3633 mo
57.4834 85.3633 li
54.5806 96.582 mo
56.3228 96.582 li
54.5806 107.801 mo
56.3228 107.801 li
54.5806 119.02 mo
56.3228 119.02 li
54.5806 130.239 mo
56.3228 130.239 li
0 0 0 rgb
@
39.3418 89.4937 mo
40.8467 87.9321 41.8682 86.7847 42.4072 86.0542 cv
42.9463 85.3218 43.2158 84.6099 43.2158 83.9136 cv
43.2158 83.3062 43.0518 82.8433 42.7227 82.5239 cv
42.3945 82.2065 42.001 82.0483 41.5449 82.0483 cv
40.9814 82.0483 40.5244 82.2515 40.1738 82.6636 cv
39.9814 82.8882 39.7959 83.2358 39.6201 83.7046 cv
39.3535 83.6489 li
39.5596 82.7046 39.9072 82.0483 40.4014 81.6802 cv
40.8916 81.311 41.4189 81.1284 41.9834 81.1284 cv
42.6768 81.1284 43.2393 81.3462 43.6709 81.7847 cv
44.0996 82.2202 44.3154 82.7573 44.3154 83.3901 cv
44.3154 84.064 44.082 84.7144 43.6182 85.3374 cv
43.1514 85.9624 42.1416 87.0757 40.5869 88.6733 cv
43.4199 88.6733 li
43.8135 88.6733 44.0928 88.6265 44.252 88.5308 cv
44.4131 88.437 44.5947 88.2065 44.7969 87.8413 cv
44.9561 87.9146 li
44.2705 89.6362 li
39.3418 89.6362 li
39.3418 89.4937 li
cp
.137255 .121569 .12549 rgb
f
46.6846 88.9048 mo
47.0654 89.1694 47.3584 89.3032 47.5635 89.3032 cv
48.0381 89.3032 48.4531 89.0933 48.8057 88.6763 cv
49.1611 88.2593 49.3379 87.7456 49.3379 87.1362 cv
49.3379 86.0718 48.7695 85.3042 47.6328 84.8354 cv
47.0029 84.5757 46.415 84.4468 45.8701 84.4468 cv
45.7813 84.4468 45.7236 84.4448 45.7021 84.439 cv
45.6787 84.4312 45.6514 84.4106 45.6182 84.3726 cv
45.626 84.3403 45.6348 84.312 45.6396 84.2886 cv
45.6465 84.2671 45.6533 84.2456 45.6611 84.2241 cv
47.0068 81.2759 li
49.6533 81.2759 li
49.7842 81.2759 49.8857 81.2524 49.958 81.2065 cv
50.0303 81.1636 50.123 81.0776 50.2393 80.9546 cv
50.3389 81.0405 li
49.8623 82.1831 li
49.8467 82.2192 49.8008 82.2427 49.7256 82.2544 cv
49.6533 82.2651 49.5723 82.269 49.4854 82.269 cv
47.0947 82.269 li
46.5693 83.3491 li
47.2451 83.4644 47.7393 83.5728 48.0518 83.6753 cv
48.5674 83.8481 48.9971 84.105 49.3428 84.4409 cv
49.6396 84.7329 49.8643 85.061 50.0166 85.4243 cv
50.1689 85.7886 50.2451 86.1743 50.2451 86.5815 cv
50.2451 87.4917 49.9209 88.2495 49.2725 88.8589 cv
48.623 89.4673 47.8027 89.772 46.8096 89.772 cv
46.4072 89.772 46.0811 89.7319 45.834 89.6538 cv
45.4229 89.5269 45.2158 89.2983 45.2158 88.9692 cv
45.2158 88.8462 45.2607 88.7378 45.3486 88.646 cv
45.4385 88.5532 45.5752 88.5063 45.7588 88.5063 cv
45.9951 88.5063 46.3027 88.6382 46.6846 88.9048 cv
cp
f
54.5806 29.269 mo
57.4834 29.269 li
54.5806 40.4883 mo
56.3228 40.4883 li
54.5806 51.7061 mo
56.3228 51.7061 li
54.5806 62.9248 mo
56.3228 62.9248 li
54.5806 74.144 mo
56.3228 74.144 li
0 0 0 rgb
@
38.9541 33.3784 mo
40.458 31.8149 41.4805 30.6694 42.0195 29.937 cv
42.5586 29.2046 42.8281 28.4927 42.8281 27.7983 cv
42.8281 27.1909 42.6641 26.728 42.335 26.4077 cv
42.0068 26.0903 41.6123 25.9312 41.1572 25.9312 cv
40.5928 25.9312 40.1357 26.1362 39.7861 26.5474 cv
39.5938 26.7729 39.4072 27.1206 39.2314 27.5894 cv
38.9658 27.5327 li
39.1719 26.5884 39.5186 25.9312 40.0127 25.563 cv
40.5029 25.1948 41.0303 25.0112 41.5947 25.0112 cv
42.2891 25.0112 42.8516 25.23 43.2822 25.6685 cv
43.7119 26.105 43.9268 26.6411 43.9268 27.2739 cv
43.9268 27.9478 43.6943 28.5972 43.2295 29.2222 cv
42.7637 29.8462 41.7529 30.9585 40.1982 32.5562 cv
43.0322 32.5562 li
43.4258 32.5562 43.7041 32.5112 43.8643 32.4155 cv
44.0244 32.3198 44.2061 32.0903 44.4092 31.7241 cv
44.5684 31.7983 li
43.8828 33.52 li
38.9541 33.52 li
38.9541 33.3784 li
cp
.137255 .121569 .12549 rgb
f
48.9502 29.73 mo
48.6611 29.0229 48.1719 28.6694 47.4814 28.6694 cv
46.8428 28.6694 46.4199 28.8589 46.21 29.2378 cv
46.0869 29.4595 46.0244 29.8296 46.0244 30.3472 cv
46.0244 31.0181 46.168 31.6743 46.4541 32.3159 cv
46.7393 32.9575 47.1924 33.2788 47.8086 33.2788 cv
48.2979 33.2788 48.6533 33.0698 48.875 32.6528 cv
49.0977 32.2358 49.209 31.7456 49.209 31.188 cv
49.209 30.6401 49.1221 30.1558 48.9502 29.73 cv
cp
49.6123 32.7476 mo
49.1299 33.353 48.501 33.6558 47.7275 33.6558 cv
47.0029 33.6558 46.3447 33.3159 45.751 32.6362 cv
45.1553 31.9585 44.8604 31.0542 44.8604 29.9282 cv
44.8604 28.4761 45.4346 27.23 46.5869 26.1899 cv
47.6152 25.3179 48.7705 24.8823 50.0537 24.8823 cv
50.085 25.0854 li
49.5713 25.1792 49.1279 25.3081 48.7549 25.4702 cv
48.3828 25.6333 48.0498 25.8608 47.7588 26.1538 cv
47.458 26.4487 47.1768 26.8237 46.9131 27.2808 cv
46.6494 27.7378 46.4697 28.1909 46.3701 28.6392 cv
46.625 28.4819 46.8467 28.3667 47.0303 28.2935 cv
47.3604 28.1616 47.6914 28.0952 48.0244 28.0952 cv
48.6787 28.0952 49.2266 28.3228 49.6719 28.7749 cv
50.1162 29.2261 50.3389 29.8726 50.3389 30.7124 cv
50.3389 31.4644 50.0967 32.1431 49.6123 32.7476 cv
cp
f
472.543 6.83105 mo
470.801 6.83105 li
472.543 18.0498 mo
470.801 18.0498 li
472.543 29.269 mo
469.641 29.269 li
472.543 40.4883 mo
470.801 40.4883 li
472.543 51.7061 mo
470.801 51.7061 li
472.543 62.9248 mo
470.801 62.9248 li
472.543 74.144 mo
470.801 74.144 li
472.543 85.3633 mo
469.641 85.3633 li
472.543 96.582 mo
470.801 96.582 li
472.543 107.801 mo
470.801 107.801 li
472.543 119.02 mo
470.801 119.02 li
472.543 130.239 mo
470.801 130.239 li
472.543 141.458 mo
469.641 141.458 li
472.543 152.677 mo
470.801 152.677 li
472.543 163.896 mo
470.801 163.896 li
472.543 175.115 mo
470.801 175.115 li
472.543 186.333 mo
470.801 186.333 li
472.543 197.552 mo
469.641 197.552 li
472.543 208.773 mo
470.801 208.773 li
472.543 219.99 mo
470.801 219.99 li
472.543 231.208 mo
470.801 231.208 li
472.543 242.427 mo
470.801 242.427 li
472.543 253.648 mo
469.641 253.648 li
471.645 .200195 mo
471.645 1.94189 li
458.873 .200195 mo
458.873 1.94189 li
446.1 .200195 mo
446.1 3.10303 li
433.328 .200195 mo
433.328 1.94189 li
420.555 .200195 mo
420.555 1.94189 li
407.783 .200195 mo
407.783 1.94189 li
395.012 .200195 mo
395.012 1.94189 li
382.24 .200195 mo
382.24 3.10303 li
369.467 .200195 mo
369.467 1.94189 li
356.695 .200195 mo
356.695 1.94189 li
343.924 .200195 mo
343.924 1.94189 li
331.152 .200195 mo
331.152 1.94189 li
318.379 .200195 mo
318.379 3.10303 li
305.607 .200195 mo
305.607 1.94189 li
292.836 .200195 mo
292.836 1.94189 li
280.064 .200195 mo
280.064 1.94189 li
267.291 .200195 mo
267.291 1.94189 li
254.52 .200195 mo
254.52 3.10303 li
241.748 .200195 mo
241.748 1.94189 li
228.976 .200195 mo
228.976 1.94189 li
216.204 .200195 mo
216.204 1.94189 li
203.432 .200195 mo
203.432 1.94189 li
190.66 .200195 mo
190.66 3.10303 li
177.888 .200195 mo
177.888 1.94189 li
165.116 .200195 mo
165.116 1.94189 li
152.343 .200195 mo
152.343 1.94189 li
139.571 .200195 mo
139.571 1.94189 li
126.799 .200195 mo
126.799 3.10303 li
114.027 .200195 mo
114.027 1.94189 li
101.255 .200195 mo
101.255 1.94189 li
88.4834 .200195 mo
88.4834 1.94189 li
75.7114 .200195 mo
75.7114 1.94189 li
62.9395 .200195 mo
62.9395 3.10303 li
54.5806 6.83105 mo
56.3228 6.83105 li
54.5806 18.0498 mo
56.3228 18.0498 li
0 0 0 rgb
@
429.568 278.768 mo
430.95 278.842 431.985 279.677 431.985 281.275 cv
431.985 283.416 430.423 286.011 427.698 286.229 cv
429.568 278.768 li
cp
427.227 286.229 mo
426.137 286.175 424.829 285.541 424.829 283.725 cv
424.829 281.546 426.393 279.005 429.102 278.768 cv
427.227 286.229 li
cp
430.687 274.233 mo
430.687 274.197 430.741 273.995 430.741 273.977 cv
430.741 273.958 430.741 273.794 430.522 273.794 cv
430.343 273.794 430.326 273.85 430.252 274.16 cv
429.202 278.363 li
426.324 278.455 423.662 280.881 423.662 283.362 cv
423.662 285.097 424.929 286.538 427.138 286.664 cv
426.992 287.23 426.866 287.814 426.723 288.38 cv
426.504 289.238 426.324 289.933 426.324 289.987 cv
426.324 290.168 426.45 290.187 426.541 290.187 cv
426.632 290.187 426.667 290.168 426.723 290.113 cv
426.758 290.077 426.866 289.639 426.921 289.383 cv
427.61 286.664 li
430.526 286.574 433.153 284.111 433.153 281.665 cv
433.153 280.224 432.191 278.545 429.674 278.363 cv
430.687 274.233 li
cp
f
8.354 168.407 mo
8.6084 168.477 8.63623 168.477 8.87793 168.688 cv
9.65576 169.308 9.88232 169.886 9.88232 170.28 cv
9.88232 170.985 9.10352 171.182 8.55225 171.182 cv
7.84473 171.182 6.10449 170.731 5.45313 170.409 cv
4.61865 169.971 4.09521 169.337 4.09521 168.774 cv
4.09521 167.859 5.25586 167.66 5.34131 167.66 cv
5.42529 167.66 5.50977 167.689 5.58154 167.703 cv
8.354 168.407 li
cp
.39209 165.47 mo
.378906 165.47 .236816 165.47 .236816 165.655 cv
.236816 165.866 .363281 167.203 .391113 167.441 cv
.405273 167.553 .475098 167.637 .658691 167.637 cv
.827637 167.637 .827637 167.511 .827637 167.3 cv
.827637 166.625 .92627 166.597 1.06738 166.597 cv
1.35107 166.639 li
4.70166 167.483 li
4.16846 167.737 3.7793 168.144 3.7793 168.778 cv
3.7793 170.422 5.86328 172.167 7.92969 172.167 cv
9.26074 172.167 10.1958 171.393 10.1958 170.296 cv
10.1958 170.015 10.1392 169.312 9.13574 168.467 cv
9.729 168.354 10.1958 167.862 10.1958 167.187 cv
10.1958 166.696 9.87109 166.372 9.41797 166.147 cv
8.91016 165.909 8.04785 165.725 8.02002 165.725 cv
7.87891 165.725 7.87891 165.85 7.87891 165.893 cv
7.87891 166.034 7.93555 166.047 8.1333 166.09 cv
9.04932 166.329 9.88135 166.582 9.88135 167.159 cv
9.88135 167.539 9.51416 167.582 9.23193 167.582 cv
8.89209 167.582 8.79443 167.553 8.5542 167.498 cv
.39209 165.47 li
cp
f
9.88135 162.769 mo
9.88135 163.457 9.37207 164.017 8.35498 164.017 cv
7.93213 164.017 6.77246 163.848 5.93848 163.357 cv
4.96338 162.769 4.76465 161.927 4.76465 161.451 cv
4.76465 160.272 5.69775 160.159 6.13574 160.159 cv
6.80029 160.159 7.95996 160.439 8.67969 160.917 cv
9.51416 161.463 9.88135 162.22 9.88135 162.769 cv
9.88135 162.769 li
cp
4.76465 158.121 mo
4.76465 157.936 4.76465 157.427 4.27979 157.427 cv
3.93701 157.427 3.93701 157.724 3.93701 157.978 cv
3.93701 161.191 li
3.93701 163.319 6.27441 164.883 7.95996 164.883 cv
9.20557 164.883 10.1968 164.054 10.1968 162.779 cv
10.1968 161.123 8.48535 159.253 6.30713 159.253 cv
6.06592 159.253 5.38818 159.253 4.76465 159.673 cv
4.76465 158.121 li
cp
f
gsave
32.2832 193.229 mo
32.2832 62.1284 li
0 62.1284 li
0 193.229 li
32.2832 193.229 li
cp
clp
.6 lw
10 ml
16.063 192.96 mo
16.063 136.649 li
@
grestore
27.606 188.603 mo
27.8604 188.673 27.8882 188.673 28.1289 188.886 cv
28.9067 189.505 29.1343 190.083 29.1343 190.478 cv
29.1343 191.182 28.3555 191.38 27.8032 191.38 cv
27.0967 191.38 25.356 190.929 24.7051 190.605 cv
23.8701 190.167 23.3467 189.533 23.3467 188.97 cv
23.3467 188.055 24.5068 187.857 24.5928 187.857 cv
24.6772 187.857 24.7627 187.885 24.8325 187.899 cv
27.606 188.603 li
cp
19.645 185.667 mo
19.6309 185.667 19.4883 185.667 19.4883 185.851 cv
19.4883 186.061 19.6147 187.398 19.6426 187.637 cv
19.6572 187.75 19.7271 187.835 19.9106 187.835 cv
20.0791 187.835 20.0791 187.708 20.0791 187.498 cv
20.0791 186.822 20.1782 186.793 20.3193 186.793 cv
20.603 186.836 li
23.9536 187.679 li
23.4204 187.932 23.0308 188.34 23.0308 188.973 cv
23.0308 190.621 25.1152 192.364 27.1812 192.364 cv
28.5127 192.364 29.4478 191.59 29.4478 190.492 cv
29.4478 190.21 29.3906 189.508 28.3872 188.664 cv
28.981 188.551 29.4478 188.059 29.4478 187.384 cv
29.4478 186.891 29.123 186.568 28.6709 186.343 cv
28.1616 186.104 27.2993 185.921 27.272 185.921 cv
27.1304 185.921 27.1304 186.047 27.1304 186.09 cv
27.1304 186.231 27.187 186.246 27.3853 186.286 cv
28.3003 186.527 29.1328 186.78 29.1328 187.357 cv
29.1328 187.734 28.7661 187.778 28.4839 187.778 cv
28.145 187.778 28.0459 187.75 27.8062 187.694 cv
19.645 185.667 li
cp
f
29.2524 181.241 mo
29.2524 181.438 29.2524 181.891 28.647 181.891 cv
28.083 181.891 27.5205 181.353 27.5205 180.759 cv
27.5205 180.167 27.8574 179.899 28.7163 179.899 cv
28.9287 179.899 28.9419 179.914 28.999 180.054 cv
29.1533 180.421 29.2524 180.845 29.2524 181.241 cv
29.2524 181.241 li
cp
29.0942 182.116 mo
28.6553 183.192 27.5537 183.662 26.2827 183.662 cv
25.3076 183.662 23.3022 183.298 21.7749 182.235 cv
20.335 181.214 19.6851 179.9 19.6851 178.879 cv
19.6851 177.48 20.7876 176.457 22.6797 176.457 cv
24.0918 176.457 27.3984 177.176 28.7261 179.536 cv
28.2329 179.607 27.2051 179.747 27.2051 180.772 cv
27.2051 181.517 27.9097 182.206 28.6431 182.206 cv
28.9238 182.206 29.0801 182.114 29.0942 182.114 cv
29.0942 182.116 li
cp
29.2124 179.449 mo
28.3789 177.267 25.8618 175.198 23.1328 175.198 cv
20.8584 175.198 19.3301 176.69 19.3301 178.787 cv
19.3301 181.826 22.5396 184.921 25.8325 184.921 cv
28.1787 184.921 29.6064 183.345 29.6064 181.319 cv
29.6064 180.967 29.5488 180.489 29.3906 179.941 cv
30.2715 179.998 30.2998 179.998 30.4849 179.998 cv
30.9395 179.998 32.0479 179.998 32.0479 178.829 cv
32.0479 177.154 29.4487 176.479 29.2935 176.479 cv
29.1934 176.479 29.1494 176.577 29.1494 176.633 cv
29.1494 176.746 29.2222 176.774 29.3066 176.802 cv
30.3149 177.14 30.6694 177.957 30.6694 178.449 cv
30.6694 179.096 30.2871 179.308 29.2134 179.449 cv
29.2124 179.449 li
cp
f
20.5449 171.585 mo
20.3774 171.506 20.2988 171.497 20.2285 171.497 cv
19.9224 171.497 19.6851 171.773 19.6851 172.08 cv
19.6851 172.456 19.9937 172.574 20.1514 172.623 cv
24.4478 173.928 li
24.4668 173.938 24.5962 173.977 24.606 173.977 cv
24.7134 173.977 24.8027 173.67 24.8027 173.591 cv
24.8027 173.523 24.7832 173.513 24.6353 173.443 cv
20.5449 171.585 li
cp
f
23.3984 166.182 mo
23.3984 166.52 li
23.6182 166.549 24.209 166.648 24.3091 166.777 cv
24.3696 166.857 24.3696 167.619 24.3696 167.759 cv
24.3696 169.581 li
23.4468 168.541 23.1694 168.194 22.7026 167.599 cv
22.1167 166.866 21.5024 166.182 20.5591 166.182 cv
19.3579 166.182 18.6221 167.23 18.6221 168.496 cv
18.6221 169.722 19.4824 170.551 20.3916 170.551 cv
20.896 170.551 20.9453 170.122 20.9453 170.021 cv
20.9453 169.78 20.7754 169.49 20.4136 169.49 cv
20.2334 169.49 19.8813 169.561 19.8813 170.095 cv
19.1919 169.787 18.9766 169.108 18.9766 168.641 cv
18.9766 167.645 19.75 167.126 20.5522 167.126 cv
21.4141 167.126 22.0972 167.743 22.4541 168.06 cv
24.8105 170.453 li
24.9004 170.551 24.9194 170.551 25.1973 170.551 cv
25.1973 166.479 li
23.3984 166.182 li
cp
f
27.606 160.494 mo
27.8604 160.564 27.8882 160.564 28.1289 160.775 cv
28.9067 161.396 29.1343 161.973 29.1343 162.368 cv
29.1343 163.071 28.3555 163.269 27.8032 163.269 cv
27.0967 163.269 25.356 162.819 24.7051 162.495 cv
23.8701 162.058 23.3467 161.423 23.3467 160.861 cv
23.3467 159.945 24.5068 159.748 24.5928 159.748 cv
24.6772 159.748 24.7627 159.776 24.8325 159.789 cv
27.606 160.494 li
cp
19.645 157.556 mo
19.6309 157.556 19.4883 157.556 19.4883 157.742 cv
19.4883 157.952 19.6147 159.289 19.6426 159.527 cv
19.6572 159.64 19.7271 159.725 19.9106 159.725 cv
20.0791 159.725 20.0791 159.598 20.0791 159.388 cv
20.0791 158.712 20.1782 158.684 20.3193 158.684 cv
20.603 158.727 li
23.9536 159.57 li
23.4204 159.823 23.0308 160.231 23.0308 160.864 cv
23.0308 162.509 25.1152 164.253 27.1812 164.253 cv
28.5127 164.253 29.4478 163.48 29.4478 162.382 cv
29.4478 162.101 29.3906 161.398 28.3872 160.554 cv
28.981 160.441 29.4478 159.95 29.4478 159.274 cv
29.4478 158.782 29.123 158.458 28.6709 158.233 cv
28.1616 157.995 27.2993 157.812 27.272 157.812 cv
27.1304 157.812 27.1304 157.938 27.1304 157.98 cv
27.1304 158.122 27.187 158.134 27.3853 158.176 cv
28.3003 158.416 29.1328 158.668 29.1328 159.246 cv
29.1328 159.625 28.7661 159.667 28.4839 159.667 cv
28.145 159.667 28.0459 159.64 27.8062 159.584 cv
19.645 157.556 li
cp
f
23.6216 154.592 mo
23.6216 153.279 li
23.6216 153.001 23.6216 152.861 23.3423 152.861 cv
23.189 152.861 23.189 153.002 23.189 153.256 cv
23.189 154.499 li
21.1826 153.99 20.9009 153.919 20.8149 153.919 cv
20.5752 153.919 20.4336 154.089 20.4336 154.329 cv
20.4336 154.371 20.4487 154.768 20.9429 154.893 cv
23.189 155.445 li
23.189 156.773 li
23.189 157.054 23.189 157.196 23.4541 157.196 cv
23.6216 157.196 23.6216 157.083 23.6216 156.8 cv
23.6216 155.558 li
27.6479 156.559 27.8892 156.615 28.1436 156.615 cv
28.9097 156.615 29.4478 156.081 29.4478 155.322 cv
29.4478 153.889 27.3853 153.086 27.272 153.086 cv
27.1304 153.086 27.1304 153.198 27.1304 153.254 cv
27.1304 153.379 27.1729 153.393 27.3281 153.464 cv
28.7954 154.063 29.1328 154.803 29.1328 155.277 cv
29.1328 155.569 28.9478 155.708 28.4814 155.708 cv
28.1411 155.708 28.0425 155.681 27.8013 155.625 cv
23.6216 154.592 li
cp
f
27.606 148.052 mo
27.8604 148.123 27.8882 148.123 28.1289 148.334 cv
28.9067 148.955 29.1343 149.532 29.1343 149.926 cv
29.1343 150.63 28.3555 150.829 27.8032 150.829 cv
27.0967 150.829 25.356 150.377 24.7051 150.054 cv
23.8701 149.618 23.3467 148.983 23.3467 148.419 cv
23.3467 147.504 24.5068 147.305 24.5928 147.305 cv
24.6772 147.305 24.7627 147.334 24.8325 147.349 cv
27.606 148.052 li
cp
19.645 145.117 mo
19.6309 145.117 19.4883 145.117 19.4883 145.3 cv
19.4883 145.512 19.6147 146.848 19.6426 147.087 cv
19.6572 147.199 19.7271 147.284 19.9106 147.284 cv
20.0791 147.284 20.0791 147.157 20.0791 146.946 cv
20.0791 146.272 20.1782 146.243 20.3193 146.243 cv
20.603 146.285 li
23.9536 147.129 li
23.4204 147.382 23.0308 147.791 23.0308 148.422 cv
23.0308 150.069 25.1152 151.813 27.1812 151.813 cv
28.5127 151.813 29.4478 151.04 29.4478 149.942 cv
29.4478 149.662 29.3906 148.958 28.3872 148.114 cv
28.981 148 29.4478 147.507 29.4478 146.833 cv
29.4478 146.341 29.123 146.017 28.6709 145.792 cv
28.1616 145.554 27.2993 145.371 27.272 145.371 cv
27.1304 145.371 27.1304 145.498 27.1304 145.54 cv
27.1304 145.68 27.187 145.694 27.3853 145.737 cv
28.3003 145.975 29.1328 146.228 29.1328 146.805 cv
29.1328 147.185 28.7661 147.227 28.4839 147.227 cv
28.145 147.227 28.0459 147.199 27.8062 147.143 cv
19.645 145.117 li
cp
f
23.3467 139.789 mo
23.4043 138.717 24.0527 137.916 25.291 137.916 cv
26.9521 137.916 28.9648 139.126 29.1343 141.24 cv
23.3467 139.789 li
cp
29.1343 141.605 mo
29.0918 142.451 28.5996 143.465 27.1909 143.465 cv
25.502 143.465 23.5313 142.252 23.3467 140.152 cv
29.1343 141.605 li
cp
19.8286 138.921 mo
19.7993 138.921 19.645 138.879 19.6309 138.879 cv
19.6162 138.879 19.4883 138.879 19.4883 139.048 cv
19.4883 139.188 19.5317 139.201 19.7715 139.258 cv
23.0317 140.073 li
23.103 142.307 24.9849 144.371 26.9111 144.371 cv
28.2559 144.371 29.374 143.388 29.4727 141.675 cv
29.9106 141.787 30.3643 141.885 30.8032 141.997 cv
31.4692 142.166 32.0059 142.307 32.0488 142.307 cv
32.1899 142.307 32.2036 142.208 32.2036 142.137 cv
32.2036 142.067 32.1899 142.04 32.147 141.997 cv
32.1191 141.97 31.7788 141.885 31.5815 141.843 cv
29.4727 141.308 li
29.4019 139.047 27.4912 137.008 25.5942 137.008 cv
24.4756 137.008 23.1729 137.755 23.0317 139.708 cv
19.8286 138.921 li
cp
f
23.1104 121.952 mo
22.5591 121.952 li
22.5591 123.347 li
9.56738 123.347 li
9.56738 121.952 li
9.01611 121.952 li
9.01611 123.898 li
23.1104 123.898 li
23.1104 121.952 li
cp
f
17.9951 119.136 mo
14.8472 119.136 li
14.1279 118.728 13.7178 118.038 13.7178 117.321 cv
13.7178 116.293 14.9604 115.435 16.5552 115.435 cv
18.2627 115.435 19.4482 116.42 19.4482 117.461 cv
19.4482 118.024 19.166 118.559 18.5874 118.939 cv
18.29 119.136 18.2769 119.136 17.9951 119.136 cv
17.9951 119.136 li
cp
14.2969 119.186 mo
13.3462 119.186 li
13.5005 121.22 li
13.9375 121.22 li
13.9375 120.218 14.0244 120.12 14.6479 120.12 cv
21.2905 120.12 li
21.9282 120.12 21.9282 120.275 21.9282 121.22 cv
22.3613 121.22 li
22.3467 120.739 22.3203 120.006 22.3203 119.639 cv
22.3203 119.257 22.3467 118.537 22.3613 118.042 cv
21.9282 118.042 li
21.9282 118.98 21.9282 119.136 21.2891 119.136 cv
18.7729 119.136 li
18.9985 119.064 19.7632 118.471 19.7632 117.4 cv
19.7632 115.719 18.375 114.252 16.5488 114.252 cv
14.75 114.252 13.3462 115.624 13.3462 117.207 cv
13.3462 118.309 13.9795 118.902 14.2969 119.185 cv
14.2969 119.186 li
cp
f
17.9927 111.301 mo
15.0771 111.301 li
14.8081 111.301 14.7939 111.301 14.5684 111.146 cv
13.7749 110.597 13.6626 109.824 13.6626 109.486 cv
13.6626 108.854 14.0303 108.347 14.5684 108.01 cv
15.1479 107.643 15.9556 107.601 16.5352 107.601 cv
17.0591 107.601 17.9082 107.63 18.5449 108.036 cv
18.9844 108.332 19.4507 108.868 19.4507 109.627 cv
19.4507 110.261 19.1108 110.767 18.5874 111.104 cv
18.29 111.301 18.248 111.301 17.9927 111.301 cv
17.9927 111.301 li
cp
14.2837 111.351 mo
9.8042 111.351 li
9.9585 113.386 li
10.3936 113.386 li
10.3936 112.398 10.4937 112.286 11.186 112.286 cv
19.605 112.286 li
19.605 111.933 li
19.5918 111.917 19.394 111.804 18.731 111.423 cv
19.0566 111.211 19.7632 110.618 19.7632 109.571 cv
19.7632 107.889 18.375 106.417 16.5488 106.417 cv
14.75 106.417 13.3462 107.803 13.3462 109.415 cv
13.3462 110.516 14.0244 111.124 14.2837 111.35 cv
14.2837 111.351 li
cp
f
9.55664 99.7573 mo
9.37207 99.687 9.31494 99.687 9.30225 99.687 cv
9.14648 99.687 9.01611 99.8135 9.01611 99.9683 cv
9.01611 100.067 9.06201 100.165 9.14648 100.207 cv
22.6123 105.091 li
22.7969 105.161 22.8535 105.161 22.8662 105.161 cv
23.0225 105.161 23.1489 105.034 23.1489 104.88 cv
23.1489 104.696 23.0498 104.654 22.811 104.571 cv
9.55664 99.7573 li
cp
f
18.7163 90.4829 mo
19.0322 90.2983 19.606 89.7339 19.606 89.5786 cv
19.606 89.4502 19.4917 89.4502 19.2793 89.4502 cv
16.8066 89.4502 li
16.2534 89.4502 16.1812 89.394 16.1812 88.4805 cv
15.748 88.4805 li
15.7622 89.0044 15.79 89.7813 15.79 90.2031 cv
15.79 90.7686 15.79 91.9692 15.748 92.4771 cv
16.1812 92.4771 li
16.1812 92.0244 li
16.1812 90.7534 16.3379 90.7109 16.8628 90.7109 cv
17.7705 90.7109 li
19.3604 90.7109 19.4883 92.5054 19.4883 92.9014 cv
19.4883 93.8179 18.9927 96.6152 14.7769 96.6152 cv
10.5469 96.6152 10.0786 93.8311 10.0786 92.9844 cv
10.0786 91.4722 11.3535 90.186 13.436 89.9043 cv
13.6333 89.875 13.6758 89.875 13.6758 89.6772 cv
13.6758 89.4502 13.6333 89.4502 13.3369 89.4502 cv
9.98486 89.4502 li
9.74463 89.4502 9.646 89.4502 9.646 89.606 cv
9.646 89.6631 9.646 89.7192 9.81592 89.8325 cv
10.8652 90.5396 li
10.4116 90.9917 9.646 91.7544 9.646 93.1548 cv
9.646 95.7827 11.8799 98.0718 14.7769 98.0718 cv
17.6743 98.0718 19.9214 95.8105 19.9214 93.1255 cv
19.9214 92.0933 19.5518 90.9629 18.7163 90.4829 cv
18.7163 90.4829 li
cp
f
16.3379 86.2212 mo
16.3379 82.2847 li
16.3379 81.9736 16.3379 81.9297 16.0229 81.9297 cv
14.6318 81.9297 13.2681 82.6963 13.2681 84.4634 cv
13.2681 86.103 14.7261 87.4038 16.4956 87.4038 cv
18.3906 87.4038 19.7632 85.9185 19.7632 84.293 cv
19.7632 82.5679 18.1948 81.9297 17.9263 81.9297 cv
17.7852 81.9297 17.7559 82.04 17.7559 82.1089 cv
17.7559 82.2305 17.8418 82.2583 17.9541 82.2847 cv
19.4087 82.7817 19.4087 84.0552 19.4087 84.1978 cv
19.4087 84.9043 18.9844 85.4712 18.4604 85.7969 cv
17.7817 86.2212 16.8477 86.2212 16.3379 86.2212 cv
16.3379 86.2212 li
cp
16.0229 86.2212 mo
13.9341 86.1372 13.5825 84.9517 13.5825 84.4727 cv
13.5825 83.0181 15.4766 82.877 16.0229 82.877 cv
16.0229 86.2212 li
cp
f
11.3418 72.7222 mo
10.8184 72.5254 10.4092 72.1431 10.3936 71.1831 cv
9.96045 71.1831 li
9.98828 71.6206 10.0029 72.1851 10.0029 72.5537 cv
10.0029 72.9766 9.97412 73.7954 9.96045 74.1621 cv
10.3936 74.1621 li
10.4082 73.4287 10.7764 73.1323 11.1006 73.1323 cv
11.2139 73.1323 11.2983 73.1743 11.3838 73.2021 cv
18.1938 75.7871 li
11.0581 78.4849 li
10.8604 78.5698 10.8325 78.5698 10.8052 78.5698 cv
10.3936 78.5698 10.3936 77.7642 10.3936 77.4116 cv
9.96045 77.4116 li
10.0029 77.9194 10.0029 78.895 10.0029 79.4312 cv
10.0029 80.1084 9.97412 80.7168 9.96045 81.2241 cv
10.3936 81.2241 li
10.3936 80.3062 10.3936 80.0386 10.9326 79.8408 cv
19.6108 76.5635 li
19.8789 76.4648 19.9214 76.3936 19.9214 76.2104 cv
19.9214 75.9702 19.8501 75.9424 19.6533 75.8711 cv
11.3418 72.7222 li
cp
f
6.88623 67.3643 mo
10.5117 67.3643 li
10.5117 69.96 li
6.88623 67.3643 li
cp
10.8667 65.4829 mo
10.5117 65.4829 li
10.5117 66.5767 li
6.10449 66.5767 li
5.89697 66.5767 5.82715 66.5767 5.82715 66.7949 cv
5.82715 66.9131 5.82715 66.9531 5.96582 67.0522 cv
10.5117 70.3257 li
10.8667 70.3257 li
10.8667 67.4194 li
11.6733 67.4194 li
12.0078 67.4194 12.126 67.4194 12.126 68.2192 cv
12.126 68.4858 li
12.48 68.4858 li
12.46 67.9927 12.4419 67.3594 12.4419 67.0034 cv
12.4419 66.6382 12.4609 66.0063 12.48 65.5117 cv
12.126 65.5117 li
12.126 65.7783 li
12.126 66.5776 12.0078 66.5776 11.6733 66.5776 cv
10.8667 66.5776 li
10.8667 65.4829 li
cp
f
9.01611 62.1675 mo
9.01611 64.1016 li
9.56738 64.1016 li
9.56738 62.7178 li
22.5591 62.7178 li
22.5591 64.1016 li
23.1104 64.1016 li
23.1104 62.1675 li
9.01611 62.1675 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (xsec_phidep.eps)%%CreationDate: 26/02/13 11:55%%Canvassize: 16383%AI9_DataStream%Gb!!kD3H<UFX?ejqEI)L'LD,HRu)?br/$YSO(MT3Q^#PEcoN#_l4VcNF]WL([:IRd?^u3*73\eikSYgY9TuJ;L!2q/JW'DK/q3N#%0CRc3HN)pSpKueUa"K&&>[m,fP00W^mE*\'p0V0SIIlSuPGbZE[X5UKO@S@/FA#gV5O;05m!2k0X1R],05k/[I!'p_IIlUG0CNfI%mbds%o#i,Y?<r#$p&4[/e`HhA\\5]RbN6q%X6Vu%Q[JDup$:?K2p]Ncn(uo^X+,,74mqn'k2GmMo=OI/^:h5Uo?D.Mp5<:EbNR(P%^&1):2<".UrGk#61omBSH>g,shql(qo5K3PE-H60H[iZn2a<7]`i%Rf^ZVe=I^m8QN'$ZOLCJGE2uE:j?ejN9j5'[WX+s>n8h?rK%s70doCQ&FG(B!K"f=,[jhg@:NioW85r<@abht#rKDB9k=rPpmNnas$bl-"3GIrX0:cY%b&qW@YkI$kdpYQ!qPUZH`A4n+r1f2oi0%Xi=Yd5G)@dIWb8&X1,PKlH/.$21BrJq1Wb`gXcG^n=hrb'DTmcs6-r=-fG%&?,6I^c//C*5K?F.A3T.VYC;0q7/af:QX%O;UU:US%\Gp4*,f]:s2_SOq?9R(_I\s52/XNg\r:g!>>)nZ\<Y9fuY>dR:[=-ZaO*Q*Dk8-(,q8MI1hHW4Y\^qYrir7o+(]WM"9-B6fU<p+$%hVR&fbGuEiA!@8d)YN"C4hnPh2m[<"nb*;3E?,Ab<t0V&FoVEb""+!6>E&A2/q(&jrU\d1c`V`0\US+5gV<^Sl^Ltj]DM'`iSVUt%WK!\'`s[T<S"HJXCWiW])rbmCm!!=,,CD@\g2HFeI/i3V0<@t:gOHeanbec&iu)/&@CMm&jknno<WC(>5!7W5ZMoURm4Ws1gh5B5%roT^?`.*%)r0MU\1"p-Gs6Ro`I:%u%I=(_%r\f8g?cM2G?`Wr!rS)h9)m*J[_EFOh1]Pn<rTa+DpsVI`hn=I:lW8SKHh&$jkiI$_%=4a5#jgX.Gqp"f$fq0.$r:J7g(CrH#Y?nm@q+#?[?L.UQU-FZrq5aPaVlq/bD2<i)EhWO&C.P\Cf?8"YEqS_nj^54Z?[qq'6ZTiN%]"\fKGCK8Fcf6Z[@uQFp+4sB!l.*Z^6TX,;HN%O5;nnpm-g]=VqrSf\ir8N1rS'7q>^gm@G<9_irmSNl_*l]MIue5i`=$#Np6>jG%h'Z?Xa%mTti.&A:N7K)"_YE0kc?K<Mea;a^n*dGds7#%EI1LSKhrg3q\,X[jqXNZkGIK6^]KG?*Jp_]`s7#%Ep?%hdh`T],r7KgZ%)Lm/)C@!Ac$D!s$G;!;jc+8;o_q"&lhXf]]Iq6`@jpfMC6SP[;n*g8Dj"g-hIDN)$@&nYLnTO+>TDr9%mf)d7^Kc6XjKh(<ddV0>%^O6%,="eJEs5hAchn0f\mu99Z0#)h?4l+-XV6NgDp]pchql=_QfAhH`2JiChCYNW#r*bL<@SbZDc*hKgrei.Z54JFka"RI0r:'.W%qTC0lIWP>&^MT>#"9&2M:O)Ws:Hk*Jr;.k.cUZU-s7.JVW#W#9a`71Bl?;N#2c&qiYJ0nUSUIT'E?"oUs*4*pY4gE=PHV]jh=.?@%B>2j$EP(o(]^qG*nDP1kgU[1PX/h#V-U7M%F8pZ9<rD[N)BHQ's7*e;kKE&'*_el2^:V)Yq3Vs_q_h\Cs)P3Db@ba"h`V5`qL_s7%J,SB+TZp\HNRdY,H?o2G:P)KXI/`f`e\GKu4b#*Nn"Id.^3KNoGPV)MXM"G(SNXR#GdY`\Z(UM<DdL)(Hcm"nSRY1:@P$F*m]PuM%?`p*5l0n)RmMGWl=8Ho!pR@Z,s*F>l`b4)ek5NuIHGdMOQ1&Yem-a`8(2IN!]/KH?eT\J]GcGnjVD5QmPQ!"[H1gIK=)Yg@Du/-/%IWP,Y`S6`G6Zp?$r8urZ.aPUYKZj:Pe=nRmSW,?AC+eiiFNX"eL+W.A>Air.07Nk\Df9Rm(B8e2N%cLuCm8+k4Ug*,O7UZkr#U@^%kFli(gZ#iGTqGZJ4IR"G0"H?+E;SYFc"/Gb]0G-(9W/-'k_Hn%=ARi1^4#aFO*?'@n,-W'bHMFF_]'N!+)UqR=*N8G)BHA903*o.%/XoO!o\_Ye@jCO.-@=toH<jBWNr?kdNoTOd2a=_;rJf(q[%7'`gU@]s7n5f#PITCnaI?7LL5gEKlMAQKK,;kSP42WHa^,t)r5gUt%]\FmhcBnFTUj.k:H9[YF]0G3.^P9sY/0[83M]Qd8j5K%-^:o$cH?9::f7/a>Hk/U=h(+'m$+fW<EQcNi4Fcm?p"bP\(Cr_o*o_BF%g9[h]hnL1de`EjDf05c)*ZsqKmf*%,o69<?fMq;\:4Ec>mJl.GD_AeQ1_=G8j(6<LhqA?`Z`^(j6`kera6=6XfrQEjO7Bi3n_MrT%Rl?u>qqZHla/?lP3XaKYNS*3`F/d\5?/B9S#&?o]mltg(2h-/DqR[nKrq,fCG&8)d6X8I**U\D\s*TF4q,BktiR6DoTCW3na+(_u%%N=59OlscOe/.o$N4)O\c8Sq\HunuDS)91Lrl(8>?_"_Kf%ofFh6D,U04&Y<hn==*n<<SWG4m/-`]Fk'QWRA)["\2G]!0cAJk[Q)%56(**-GDTZ'<Bbcl[QL\HN!uH$^S'Yn0<4&P**?>)+G1W"tnmJIXKO=fg>3hIc;3CnV7A.h6ucXZ0PMkfhWY?2?2!_QEL)VE;`SR%M:\s"T3f9\o5OHp_oiU.SkFR@4_ZS+]>s=<o&BJ_%r0X9r(sF9DI._jKAGn#Tc/tNH[beYa31[S?i1cCiOt-g(VZ?qFaN#ZY9.oG%_i<4g]Ph'-M#6b@jNXYsn)!7$roqV<k9'*`rUZq2pYS46BV2EOTC".G+)LU^W3S@2Y>;V(o1+,P7^$a6J,Jf[:n-cPDa$(BUWp^/%Po'Deh&5qbb<J.<")I*6D2,(SHH?EH>i4GPrc"5(q!-i&o@q_AH#K02DnknQMXPo?S#;3gI&&E6SppD89C\cO?JTunoYWnCm(M;8%NVq>Eh5cUG\II1TXrcG^+-5,!-?=0WF%Et<[Xp.*lK6?$J[`)aO4R/L)\;CQ"'t?4*?PaY?=2T<U;<=[]K-uoJ,>H'MauBII,thI%@Z84Z=4\N-!,QcMlBN=9+)1Bs.=;#6&JUl9bL:C$?N0W[]<P3B(%1nZs8D;RJ,Sb9s6n8eIuYUqTlL%sqn#),n29jP=Zb=G?/oPp%lf5B4NS]$2TgIUT:H@g@n(d]__l[hh<+fI:HiIC!g6s&>i$1s'5KCk#^A>rWGl@P=pXIf^%7C0B<qQNF^9Q8hq!ca95.L)2XaRkD%rNQItmJRE4[f,X^@8<DTm!O#,r8X99LJKf)iDHrUlJ9d)hRrX_e^_89l['B=n),=:oC4oJiA*\`g@"7NG:t"D?@>4`TW-Z#5>m+t%Zk![%3jaeM\@b#R<OA92q0**qIsc1H]8%k[ong_ML4:2+n;"XQs'aC:"0H5;XS;RA1,+$!HhI6a8qXPKa@=KMoB$cm>T[60g0D1+%NfWstVW.bA]QffNqe:GmdYOc1h*T@MCMrV0..#:s_gM>LZhq_&q^Hpo*focmmb`D&-kGELXIVcur.N'g+T-o$pEug0;ls,p:d<V1%jjj=%hOJrk',o2's+IgRYCAn)[FalT2GW`9p<Cjcm]O=CY9-oR;X.TGs7,O-a-JV`WL&\_Da$?:L735UE7TT=;8#d&\:6&YB^rd>%jnCu.:dJZUS3$Jf51324fhX"OVtL#FbsqPi):EH[I/(f_1urnnIei$EUuTklmbnCP$-ph`0>.,?NqrQr:"LULF:NsH*T:u>!co`\%KI%iIs)%WZ`.!Q>N*cq=BAYlJN,:6,kEfhbShN:rn0k_aZrjsNUY2=NNNR^,A@m6Z^D&8X(+gKM07UMXaNECFrfAaX1s2.2F;FJs%(i-hGgn*(8lfBFtPkP?n-'hbOO0N-()clZG=:;`N,oP:mF;D;r_tI7Bb=VFY:Uf2eY[l@OV_J=l0\F6?b!fFRhCb.,fGGIC9&K7^%V718CgQGtsppE7cosp;,%GS5&7nH/DX&$WNIEm1sL8E6+)dgUhS?:*tf48"Nf"\R>^L%MfYaW8]T!J3Z;UYHNVkJ%o9<>a8BhO2W%S.3ZHW\7fLdBM?a/hG_#lVGRF_)'*Kb/@b-L2GN)r\TC)=>)fV<XZsJ5&GF@]DZHbHR;d6abIbM$aJL![nD'&/D>L)a6*tZ7bW.g%QF<\7V+thG")V-kI(/WSHH:i;`odg_kaN*Adf`dR?!)=iO<"KU=1qgq:W(3ON=!44D@A'C5%@ui^?*..j]]`H?4Et_NkngGqlX_`%(fU,S4l'=B]<SeBlbp6;4-gf*1l`+&MIC!pA7FTL*,BCA`(Dn'bkitN@U$!]mMNCPnJ_NQBl4?\N9:dgHgu8:E=BhejmLd8EB]G7%/5b#Z3J?.Gs#b-YC(0sK+3%miOGh,4\&!,UVs:.ni,N7I&Bedrlh`"[QDA]aHR+R7Gfd[89b4>&@Gq1o[0jf2B0:D9:n$f25!p<^%CWmlC'\Je:!V7Ut%qsjJ?nE+%>LJr]=>.<F4RJX#DVf4O$nOhqUOe\Y_mMD=#$/2&)2?A]@>mM'H^+&7,1^ZL_D+PhSD*!d[P9.R%ac/>lh)<8:p$o;ehP6'+*Ja#@Ib.4&XH+tBTm.Hi5)jnCW5LEE!,Ys3Ajb:4gPmN8@]kIQE@c0=Tgi<,8$DDa/gEYrI*$md,`"SV%UuMQ;O-%?t0AEX"lsh6"M3Gs-nK&4"',K6qXF0BK4l+,s!unR"kSXIqgK4HkEZKQ@2R]f/^[]iHe&^udbjZc9dh#A>B_Lh-9Y)ph%N9phe.'2#O/DBD"D!r4,JSd]Z@)m#?GX`V#6'?Y(D(Oq&NT&`gmY;gU!"7h9RkSYnID!Vq\t`cgY[L"^B7r1WUfP@J.%PpKM4o,4%+)?6B@X4.Oh_G#TQS=_2ltX!sd#:a7b)jPT(,pWKMFWV^gIie-,qFM*c,$Zhj6MG>6#OfK>hJ/rY7#1(fp2(f8d`MV#aMYdVeq2!%d>3dAXCGA@Z&?OP))gQZYjniR@:S[2j*)8>Yo+_D[R1r6)jdoY/8:L32Fb!3O\?^;CJHBf&b63pI7dmmHm`B3UEBc<cS7IF54_Nc%/C[jVj[;BSa(pE])8;)Uh7._1M`hEj/UP+B2.9(o2kY0":2'9`Nu0*%"rp_b;fc$P1%Z?!'&R7k>/MOpF2I[pgrFrA4U^R5ppF(<%J8t/cQ6c?X;98m*[GMFW?qaYI875pHbJ\.u`NUL0Kag$X%BJNY&=^RH,7//l,kY`iJ?bn'ESk($",kN[J;n!m%81\7(LhCYCJ,[T%&6RL5O(5JV7AO_>En(%KfE#[;I<>PMQkH0]!u0M"K$^At3j96#-!!C^X6i:8A[T]-3&Xa3+tUZ?=Nkr*Z;DY`h*Vj_D;DG0F^7$r%1+sXL5&?]@*NI"pf[-gEmC)<g7>S7D\(Ki>e0t]XcjX^EN^jL<dA`?2UQ.de51#BRj81ZA;RV+0U#?[N4a+`Q`t:sU2ltM:R$7b^%[3n,Tk%us&6Du/8C8-DaZL1-f4CUSuBOF2`WdAm?r/M=I7G$+.Y7Z0g+?gg?qG0Y^5-V^JCDPIZYmNh*An16J(3A)cRAL-=%3\*?%m&:p^-A/Id;@9AbX@lh/%'6kJ)n,Pe\.KCT2KhGONm6:^c*>WY#-S_fZa';6@b2C;4mZ(6EPeG[[TH:,gVQ&(G3J[]T!<("!UIUW%;7&:NZOPe'T5"#0B#@N+G-)&U(e&eS2H3m7XD.pH\`dH9Q#>45@D\tQl#TBJ&*%3QT(\#X*Xj!VK!)5iKSEn!eZR0%)Fc`jRF.d<%V$+E=g#oKX>ctLGd82;N8L5He-fnt3gU<9=8C1B_2RH&nL9b=VCl="<e?""FX+"n)H\AV$o[kd=P06gn%'[CtN&7X:=@pU["r'C4%h!Kr@>IqGieh3_%)!t@5hIk;%-,$$_]k"ND-6?RpFH`gjXTh7#SX=gtg-iP@<L)\ND!X^(?V?j]<;(K,_gU`!L5d3KIGSi-'/U3R%,Q)s'[_8V&6HWPdku<PK*.@uu=[IAb3""\l-`3"E:s[s@VFE^+%LXfKTI9B1#nC`#2XPsmBT`jAlkW;WU3&q6"Tk#PVZD4E)5lj:%k#L=T^<LL8k1.Ip6,!h:?)B2QLWrjZ/>K=>_[(CCL6]EN?*(.H2O(*hm6kQ+9Y4U>fUaqmL=nuDRi7B:DHMK.$M2WMHof,4lDC6Y%':Q9PTkk5jb(P\W5fX@$XOnoDd$(FlFbprC=df])7GIcLr+";EdHiFf_hN#,W2."*1b=[s])e2MXZ/cr#?](XNE3PG9cXfC6BDcm%Zl'`KZ&ChdHmYlD_k>tr"_sg##@iRa@@URZ))@aP^pmYPo3H$;/Sm*OL-RWL?`L*nnFkLN/C7r_.e&sE8aXNfL;?[7#<rWuioB("%,q,ft/8\(D4SI<)TGpOQ[kXj$qV4R',p%ClWsNT")s+cMV:90O-JR)V<j>:!1LCm$Q?H\"C/PLWn$$p:<,HK/]?.PkKs#)u5\I+W%/RcO,.gEnh70:(?[^1?&>U3mEm@4hS&_G-dZc&f3$epI43%ubggr6Nnj>4Ze.UO)nB=b`2p(YVLbj/7($r"%Q0oZ2:@,MFp2XUI/%H8;SnIW-!DlZ4f<fD%bo];V9]kn#3o<FMFZ#i$#^L4WT[Rq=3pF41-T6[p:<(5a0<_qKpb7b=tT($a7E",8)LA&II')pddf^+oZL%#*JA,pDXKJ$Zt>:6aUi-!i'TA/8m@5JYh5RcJ5M:HA?9H/GA!=7)cUXh6]+LA$X8m1fiA.cN`t`=h>CAA6=GW"jGbm^cH'34Bh:g%_OU#2I\MHG;KE("PiP*2LSQ<5f,02.>>0dJ7Vm0<+rsd@GCbdbXZOONPuqt9G%g'Tg6oYW/CbrGL$J&O9hCA_9p9="3s7.?g2u`W%P/5lJ`#Vs3h$,F](_%Eg[lH?*qa.noHX_]'0@>_l_Q%F!@,-n.-k4uec@7lX".d6CkV&/V<aQ.+_/9bXc(5=C'Qsdl4ZSgDm]1CF%=R!dE^,@e*mi!_*SAgps0G*.dOAf9i'a=_=7q0*M)9+oqVn?lO^nu`Goo]`YH:k)ZYeENi=2\kCCNg+*@'YpQZ.UOEi,%;.A$jF9%`JHlc'$BfD\W<6(,!cBZP$IqYKuRGSD40$o?YEOI4X:CQ'YegH%nE;sXW^4jF?guT)hDE@j;FtrhN$H<Ket&Z?o:c@*2*mN-)=Iq%KH!q6*[9;9IZboa\V+^"f/fI2(iF$\C?$<T_DKculn-6NPA;jGF.P9WZV,?iL?760Qa^?>>tfS!kh"7;e>UT_f_fXTPN(.#NDCeV%Fh`7HmkItO@J%S(91gZW\<<'#M]sSY42U0n9<*QND7@%!KR/LkQ:_)*3TG1h0h.t7,n%meVFP]b&Sj;mD40qI7K<XM]l!,*A)-j9%AR!DHU.#G9N@dKCkcunQ8ok8m<Ocoq$//\oCV,8JSt\0u@o7>Y#W=hhQPE;)j'C@"9Tl%udBF+P"sYfc;@mMAcg]b^d2%Y^BQ=WZ%Gu(lE:J7U(PXp#GL$b5mVdP-L"so68VMq;Nb_61D3[MPK_]DqqP+f#ZCe+a^H)Nus!=ZA(m4PqHWs"_G.+psu_"M2CEW[7dd5/dG%$,sb7_7En4iWIb*l60?)f8W:-`o`Hgj_1hP#,?13"]lh%+m@Z2SDFlM!uhTG0OOCt(poN_\eTC,-Q0M+jpq&>^skh=Ao(hcFLV2Q%Ak1=]*BepJ6H,fUAc[]$!$Re;]iF&eJ<pRg_SG@l!>\@Z+Mu&5K/Jqe<2^O.>G4gZ-I&f`-g\^;D7au%N8"bpQti-R&\r)%!ZMn@%0Waa]Z0T:0X7g.-1^^!4UsZ-8_M9RSOa#QFi4fU;pl_GWk5a7/rMrf@\[6#D3Xc['@A)+h5C03ILDZ1n9G(t+.FBZ_BFPs:(iJ7,%HIY.<-]m?q=NP]`-.&^LD.)DY'/F>doe?^*&2j7(fZ4)9/2L&&5gqsbS)b.tLs,j@S_^+2h^:m-ac/[UCL@I,>F(B3)dXK<(cO1g%O'm+OV+n@'S_IQZKufq.R,#:1kW;I`WaE&GJ^MQ5RO/sf(i=@!7B2$`^cJ"b;Z$*$:p;W#Ll#edaL"-=]KmpqG!!o/D;W^.c$'PS%gGaa/E[Us(&Fg0daHXu>M$jMV)P7Cr(,%?tr.`-eKG=8EF_5#]()'AP1['A:2*nQOFtU!7).7-\Zt<M&1sMN^!ana]0:3p5qi'LO%k8i^-YbD+@2IXV?pEZ.)"g#gc!0!BVYZeOZ1S[)-BQ,;oUiteq6(67__/GWJHP^jM%%b<I^s((G$Y0e(Y`=-m@1B1-^u..:cjF1j%\]THM+K)?>&1jn[3pRX".'4H>@ncHufZ+i]?H`qd)cYm:<s6EY=*,6J0G(Z.7M?-]-6iN1/QFV%KP$Q$K;Wf)ak-a7B]g#l!4J6M%iZ(8/R`=?+6ifnkf)np>(mcE%?O@@[U>G2_GFq=W1?'+`(acEjYSaHInT!10#]99kh)Yd.?,JMc"NYdRJYimL\=#F`;6Ktah8?2<%8nJ't"F21;NY1X7i"&jN,8inQNT(hT)4#DZHRe2[VKoG#24O]+EL\>FOkmZPr2C+DA"um\,9%?qddF:R(%.2'GB]!$7c=bCg?,M8%oXjL>A_ih:P4[<ui.Cq8`&/7=kQ[mIc"qgE[`I<!IT'WchG02=@!1>OUf^<Zr,SFaq^4gN(H4G3,gG'=e:_hHHTMNNfF`SEiZBmJ%Qm`:aT`a$N_2]gF!,RUgA"-t5lV$jNfUfdIgr]'<D"E,HFTMsBIL!mkpsHLnP^%kdX%S*J=P^Z]pMVVVGs>O"9Z]'a4r"<1<O-"h%r+)[=GrrRn1Xi_r.?KcW9kt%p!@rU`hkV*OYUEbIO52rQBC98C/6hf*LpkLNbUj?;1ja&&a%aC/&e(PR=#=E&L2giRQKS5??idoP%o,C!I>q9T%YIe5mOL;*)B$`oIY=9mr0U$$g2i!!n.2!"YN'2?N'UER^L'0rjK+FH4r(d!JUebuD+(%a0]`m27==1*,67`6,(Pt8r%)T4&0`?WO<FDhqTYZ2$g@o!m1Yg3cB,;g:X_6MBpou&.SZ2d(`)^YhhoG-%BM#s&=TA<fP^mP-%/5#<'Auop_HX]Eu$'VuE'raNM%,3%Y<BG<i97Wep&"_=9R\$BcgN/mPd@MDB?4AaeC$$$-5&]/?7kZW)iC?`PgnEm_i5H8f87Q5.K%IKD>T1KD;I:1JO#pPc/V%+H@%"'EbKfT,W"IrEh'8NX<kL.,o#LZXQOOC=9Q4Zi%gO>&tqUgdFt.9^bI6se`G_SHClOXGHSq-$o^(a.To#N`'u-6ggi8bJ:h.`pFb%pmDA^5T;D[2QD/%0#FQ?Y@EER^i3l[Jrp]#C16&\8#VjlF/HhTdgh`K.d;JVieEPP.=KlYm8S*"U2.A]/*K/l)M-^BGE=Xj>%J"D%me"IJ56G#@1nZLFUHJmA.3_a6Q+@(A*]mm1\M+OL;=Vu>O2eV9fg0S"g/a"X$e>P'DRO[&A.<#/&LgT,(g+8[0oJH\]#cN5bee,1%kQQ_`^`oYk.+@AbOOJHu(eFnbo%qYcI@+TnP^s/baNQ[B#$W`Io<(MgQ@\^FL0H=<ecrKO8fANPk0a8uRiF>=!ZHS-I;.FE_>p@@%7,hQgqCm7o[$.pedE:.K7LceV`RQbr5B)fb"lH+Q%]gfP72<J\G2-qbV.b:V(0Nmn5f')*bNPZ)?L6+C_5Anj3KaP$A@"D=<bPSO%.cH?:%'_8e!AI+NlA3Td"=BIUA/\f!(8NK[2sX3*UAV?:B%EX0NIc`f$/:N?hS:U]Ee$%Cc%,?E"5DqT)u?i8+:pJm>;iRu53<o\%[*GuQ87=8jp1bURO?^[Hr.$5VP):VJQ>Mtf9HQid`@s;k+@Z1qm?#\cWr":S,!T0h&;@f;i.3>3OLe[C_Y,%)KfuGA:ejMm[V^&D%,(hXLg;jgEk3LgXd8_S81*JGE!@]gS_\C_IP(XK&;[S%T\N^[3i$McDasFU>(<kR&j)`e;%&3j=$tZt\$I!b+C)DS@NmXAo<3A[a%X4gc#=gu(+`hY=]gT;4.G0WQf=pKCD@iUaT_)NV+PDhH>S.+_1=*"'O2r2bC!O*-:S_6pUkdq:(<t6<+o77"uGNGI+W/2KF/50^>%AtN_f`[IH-`B>ni<t$ZP#:^-"c+J7H(4aA7Tdg^!^arRfO0-u41e.b`]aDXlRVtdCj46%<#T9Jp4N1/r0/@_rb+ib\#YWgDRN8\Y%,pH1^i,H),0PAU`ClmFu$p\gi/o,DS./6W+.:rUZY]"u-$cZ5'2PLHoGlT"Rc0o9G6$&\"9C?<O`Z5M`%\XoP3(B`GDYr^$Ym:jB%Lk9<I/"RLS&Uh[4G"kIDE5m+D_7jEFp.7qa@:7lDLo&dblA)TI$nIeNGW96N(crA-.14`gK,I:$!6,_D;nFd5MZk3brQJBmF%\5=%-0nm%]R[-HoU[VKpbtu60cCQ0j;LIcG1a6c,gXnf_]$)$:Yi7=A*WIoQ%P]0Y`\p8<7]7fS6]s+K4kt''9(1W,oRA2B;1Nt>DYhf%nsO/*k0@uYNI[;Zj<G7rLi#m0'%$te:/:Qrd0Q*QC7Jr?/1S>]&rhDjRWB%"_Ef006mKk'lH^3m.*ubqf8=5EbR%3C1]eHhR:q7a%&4Q=(U(J&,Wad4k!K5e&-__3Wc2-cp,EN_#YVM&)^r#N8+q]frR*m@]8BDX_9(d?O)Bj14pG:3Q):!E-'9,h<cJQNr7_hW=9LPY\%8!3VU&rf4uV;i[:!K//O9VN-m[oU/4#V-!5Dok:%Jj,HCa$_c$IVI,q6mH*53@:I4oWqhfL.O4r.lB><8-BU%7AXrM)UY*-!mDo.%+f2421XV#X=-&/,YVA$\pGgP+?K,6)KLn!-gEaO.U(Np@Xe1G>8=V@,DGE$?MR+6&bDA\bR:P+o6mLp$r`gfh%BS&N4qc7V6UIQ-%M\D(.7L_c`EhX/q2^A2oU<udBK<9i!1d]2e9hmn#NWhqa2Um@m":+`T))6t;)fcA+ZC+**fYQ!,-d`3nN%,ib&rhXARoBnG)?C4$%TI/&7m6TTiKkLUjfP=T\-_`en\BZj%I91an_D6_.i_2%=)'NnZ*1"]%)?u@ML_#d`_Q6A'5?LBOTktE9RLrSa,9e#Q+1+*VOqACP%lcCCi`L5;(Y`'^noO="p"RX!\4g;L1*ua<8%'3Oe/p^QHkZ)%@VRFQJ"BNYBJE`f`WNkqD_[h']S3mOD$'>9.cq.b76p\Z"K?/_e%_rdI8nX,CW<K0f84=1F)U._&t,U"AUGtbFJp?n;m9N\)_%lnl.=HGF<-BAK"Q9MiRi\>;^].X[9'7rj1faf.Q=?s,n?_#.>erQ!&%%j'23fbl<$Be)s%3-\+>k8:=;nsHX(Q'_ko:Rfd>/IiF3VFcYIH/9s_<kJ8leMpAEFR?fRL^mb@=JITMEJL&#Kd`8KAPQR]2V6Wu%Mh8-)MX\H?g856eiC.TUWtdP$=F&Nh_4O>)6;*1j/D0@n)pA2u#_cP5bF\Uq4=_^H)ir*c<cTKuk@9We7@.LKo;q/Y'YhY%<m(/#%e#_bf9h#4@R[)[>h5OI3rI1)q3,)F9NE80Ue#ZT]J^^]N"m6@5c&1.3kua`a!V9B6Se[GgWtBl6F+UF@<FGc_X\iej#dR-N,g\tm%B[sa'X-SS-$n\=&jqC+?Qr;(tTLC7e^Q\jQ?tKcHUFJm[GYL_&#mM:/c$<R0U,0Djc%a1#XdH[+/F:A=9BnPm+&)la2oFdS@k&C-%oA,74^c)3P7MI)5NHA`"0k.GN-W+^(N(I9IqTFq%4PKoS`>#SWKOlNq&Q>>_12P,FaM;9SG$J@lS=Ki,+rOuQecRG74bK640UdX4%/E7`PH>J;PN7l0VW@PY#;/C:-b/(c\gpWVl]PuVUfpma'h<_E"VT%W.!@s2\h4JIn#.W)J[-&p8,6h)I:Y=aNSM49kbPdNFq=qL4%<XLXs+OV?q4h'(nJE6If.fT`Uli(.]hT[KGAP2':[oXp4o&/ooF%@i(`4b.:42@e0lgm`O*+Zc=GpEDFnD,e].<_?V7?PXFQ1S,l%l+((kJ&O3,(=F:&IDp+d=FX=*0k"&7L`*$=lr)Mm3GilD"0:m*$TkT(YC0ga<dI,N=)q]>]@FaoWue0A=F\kR*"2(N?p-_`rDa#G%Dc\u,SYWa:k,Z4_*b;u7GO"QfgoF2c4:$44iMtXtO]SG/=;cDF@bdR.GK05W)0D0+F^i]P!VZ62TQ<<[M(Np*fd>a]q_KSBXG^&"%]<]ZWPir@qX?ZAI7ORL,+`[(kqTA+ZY1Gid-jS@>=3AkVb4XJLc:tIn51L5-H;SO`Fln''W$)q.RX?\p7KSs)/ZL<n.%>T9L?a`C%k^4t^5Gg=ukpk)nZ"Har<;)aj$VMsF3I7p*npHLN-rk)U4(qO2<UYVg<B]?Gd%kgqBIu'?h0&":-?V#&&";!soZh/K9TRWRQo$8Q%J/R$ed\K47%&ee)KhZ=jNeo'99hUnh#>5DnOjs)W-&!@)J[C%U7>][B1b!ZJ'o,"e;HU!F\oO5RX<*'[&"43R25V]oT%$W_i8@2C%$"Y3+nt[+a2suq%U_&;8WncYcPqje2PHWKie70k5M&Ap[juQq-Kent^Ih7o$'(rS@+tOnA.SoV$=@-Cq"[ER7'&<=5\oA:I10p%/%h]sbXd`!IZM6Kr%s-2>(#tlR>(="0V_1";V`$?n!d:X1G3=&7]!EE]X:Vp#/Ea[]UKI+Ph/R<Q5Q99>9]+C84B"iqNYZ-8<:E5%a%$JWN:7R![ab24I!<ObD3p(.cXKf]KNDC\2f&`3`Bp/h`55#"MjZR^CXq+nCi*PPhS:Nbg9*;l_ggm`?RTB_g:5tT:as&@r(cs'3C%;qmBjH0.?!Ur;QQL&]Ya]\T+0,lU_81Z*QMT,K9EbrJXYgU6DIl@],dAso9Ds4!]^DN6/jd#*0h&,oKpf]LD-C3AZc49)9'j58Kq%c@9Sb*<bOdM>u)ZbXA'#Vq0WNH17FEddXQO;n/UqK:Cs"-b4Su@H'KpFh)_:`.)N-^4G$mrrgQE!L*Q5\lcq\$id1Lct-S/q+kk"%*21K(C:eYSgP,Y1bka*j:CUlHlC%\%p;nDGr$Pl(3B'P-O9V_gnOT2M1pB,:Y*6@<^e/`EPk\%ip;s41Ye#n'gR;J"2Fu^f(3o>@%J2piSq+h*NcK"I,(U.^L%HfqVZPbt&:BP)LiHF0E!OG2maaXBSPRck@oh@0BgOoM/-r,TT;*]Cni]dIEae'^T'/8U83<,sr.MHd5%n=Mc6P31OFnXoYD<1*S2?ubpai]dH:h>'\&568shb^\mlgLpL!Z$b[u&MkJpo:K(-peQRCPF]dE+r&B$-ha@.q+nrGRK(47aF:8d%:OH@kSiQh-UQW9\ju5eKhG=%sN3_sk-i]$1,<E#"r$Pl`P*j1;!g[YO49#UhQl'lG0R[+enXfgCk"h@#hKR)`J&8:0(818kJ>MV&%W+3h?K0&d'I@HC7nt3/7p?M%`If`Ye?9%rkX4.t;PQ0-U0?H-J:Q9WgI]<*<"1&%@#QG+IVG44WpeMT'q94>?5V(*);W9pKh>OJ$%Ii=-n=ZcCS&>Nr(o:K3Yj:^W?[6?Z-q+hIRDfJO:peR.P@]E3&'6Y1UNg'JG%F(]uj?GN?jsNqsr25;=Is+N`VhU0*Ic`kGNNS*'%_1-4T(si,XQJGb%q+hHNcU[o2QB+\0s4$6j$\g*YVFAgB4nqf)H@Tc$T3Cm>gVJAS_$`[Qr20`@I;p#9q+m9b4n5-o_O?oUPQ+UU%K'G-ermSZ?c.U3gWiuU_Ss01Ro:595rrd2BGNVANs&:07Rq#'TJG/1H-KdUYII^>bs/GW>0.6dV;'1.fo:JXB45]*`jZ(koo:M-(%eRaLXr$RlC`abY=VcG26Fn20o>hafV(CAmjr.p8q\pI9b/lJ/":C]!TC.\K<?+<F>H=[U>'#L(p#]hUr_YB\$86FA^YoH`=KmGYV%8;LfuE^%!(aI]h>o#X=X1JVt0Oe;k+IrA5IQk#=nRA`ZZ<89**,Uaq\q`:ZH//0CROu&6A(27D.&fdC\#an@3BVh"t4IJ`2Z*HL4%a[?JWJKIQ2K`@=u4GcTPH/YgG7)Jt-,4/nb_;2;P?3_,M@=e30LpUq?DHA%1mWIk3-;sG2[P3gRg==#-C<hcBQq6VDA]Pr]UcK1a%%jFpA3fOLZWQ[3V8OP'".iq)((_Y@j7n,nhPDS=9+snhpVf;VGc,k"#s![)A6mSQ-d+dS;.FEVF=cGSBs/a/<K>k/M<#d.Qm-`#%%=?Q?kc*?W%>1KL(T!Q`RHa%.oQ`F?C1OZ+.(ji,1J+e&^b4J8_46S;FjpW>RQTc(/&%]s$4Bf6Hk'fMa;p:MNk,12BA*'U6Hf'O8%@e&UpT-QJ^@M1c&]A"-2a/nR3&3K0QkT.U%lAE\LfVlOT%_bD4p=J]Sf;N#^E8bS3:GuGP)V#1J/p**<_K)>c<$cSBY&k,k,`Rkl%9D6Gn*W:H;h:n7"5?T",WG]0qX.rEbftlsP*rT;F*H_ub:_pFe_sb>q1I07ak[Y5LIMC''gQhS3][6%4r@%*T"r9@^ZqD_cCli\A%4CC3f(0ZkG"Ban(hN0)o:t'_?P;G">,fT#^$]h)WEm;EF.5M>n7A$#)!juu?AcrI.K`G^1#T1689>lX?EI0`8Q53fL#r>o1Jk]Ro%E^)?@:X>SBQ)/u93_urA[+J-WCKBV4==2@*)87BQi&]"`riFShaKirah^ltBG5AZ#6bUMSa@f&R(;CmGBUWL%oZ=hab%-\q^IC"Y%bK9N:$F#DCJtg<5,>HlhTJ7td=/TkY)NNgg`A*RreaioGN2ZX5FK/:4phH?&/*HCMdU]Euj7"U^VTIdoUe/1fZZm02\,.&$LJhrp%CV0$:#F-1prQU%%E[Wj[*\J.d!(<0W@QotU6qm4ckPm6aA6Xr_J!>'uNh,ck(fjQ4!8&"[o&$aEFYoh,DT;"qZpBK_W5fg!8:4D$%=g/c9&aQSM/AU?ADYXf<P@H2ACn$`-aJd)-Xeq]/HmTSBWLl,K85'%EkXhQo0ic.MBr<.pPA]>I71tm=qE1`J0O'`Ne5mK:Z5$0]%qKAltVs6k0$K2jC"_m6F$aZeS6#E&)YXrZb_V?UgZ"Z96iCRiP[Z1sB-F%9C*fN(G9h<jAaZ,\_gW[JpQqbrsN1K%JVX735-a@BT%\HiGFM&J:#K*S_s4,CY8f`W&A\7,`5;#^rnVg/<<Mh*$#"egL0#6_+U@msBp(!$ajU'_[r!5gZXqrd=FE6(jg:PG4nENl@&jPXi%%B2>eDJjf!::B`P^D\r*]1fhTN&,$](;F/<QZ_rlrQmL!(KaRELdBS<j24ioAM/fJ%8ie]]3)kEU&NGOQZ)9Q)%38a8R\*?KJq[rN%!%3IMdA81@lkHJL-SKB.RuhZ)EW4'u!bSmVj>SeN;pNV/Ddj'Of"g?*+k>%*O7SiKg_pE8ns^87fBSkR#3:ujJ`b.mDZU\c2,/N5%ZVD5]R/A:5X]F'6i&@oAV/l>Y^BnHr8j)^7OI3L?i\r"aY(eaIM.*R?Y)2n]46=NY9hH_5Q^-I(PXB@:IM7n#p3u-_U$HQ9T#>QA%:"Pr[6sh:(f[=s&2^*NM]@l7(_2`A$*H?NA`^/R_KAQeVZl9t)q+Y:=@bnk=ie!5OM;JHj\(*:L#r]'j3sWMLC^94Jq+WEcT$h33%2rUl=ZKC((+i/L]EgZBd&CTEf6ONT3M(NA\`,?"1&(<N59e`r6]JoX\0XP&)cBJ#t(e,fu9R]p5>3K3<nXJG^nB^M"-4IA'"t..l%WV'"%Ede\Nm>W^Yr$E?M\Qi0a'2mc:,Thm#K[bKOUcS9F^q)7QSDOJ'5b-G`hh55pm:VX?7*9?=98tfskJV=g'/Sq%RGUD16h+cP%F@!lojYm4``OS\%2_c7)qR$YA!-;&#o:&"VE!DHrRuW[Y%Xo(qRN*!U$!<hOdS1+j$"M8!JcdDp\s2taiS`*D^Bm`b[$^b<qMsj/%hZQVafa`HEZ/)Su^Bn":c?U&;M-0<FM;NEp`,?icS[Tkn'=#e:nXK=/iaaD,S(Qije>UJ=.Z)s`^M/L"a=15j#nqMMQ5.=e]Snpc%ZCj!.FG5o5-HYNH?T\X]^KgbWVD]1A2P;6Ge0\VOkt15pYg)E(b\8G:oF%QT#o!!IWD1<OEN0_P9uN4BSW)8j//G-71#IgiLaQpN%0M=Eoe0\Wf3/rdE-=VGlP>Rg*jlk#5[>C8]`M>Bm)_^IJ,Z:+f.HECd9uK@X;4E)=^iE>BLi'c5,IIiFXg1N8,514/-"'c@Dc3'\%D945'9ZmDOS3gi;-=E-[19!tOk'"&:V2X+2bfY!#C(mjK*$_itfK>MCW(k)**$hF?(%R'A[q!,u0On0ZC/Z;/=j.DS2AHqlY'N%)%2?>W&pnTeKZZ;S"g'#V$8!DY+i.j&PMc6*qD/%Fh88Thq&P:rKe0\QugN%%-3GSLfC/[ESY84#jOkNc2T\[q8127K,Wh"60RnB3i%*@J6$R'BR;[Ah*4>WJcX7?M,Y/C?B\6"FPD-aedtbg+XWC6O=FNLs(;.%V0^S^]!(7Ti\\V`&PPNm[)dUc*5=hh,FoXFQ^TS^\uo%6WE0j6>_<X&QGWK;Oa?)=A$K,2F578K20p9C6K?B4+GAN9u*-H]24tPo,mAT-U0t4hrj5ao*hIdd9h?`H%saR->d^nT`bR[NPR_E%W?&?$B/_R'AS3ST].$Z$D.e#*bl"DP9G1/03j2t'b%)nWqgM\913l?H%]0X=_bUY\V@3rGdai[tAb'r**)%5L:prLM8Sp`nbnpl\%3$(K"M]J)Ca72EFaMp6#j+3jX7`7EL-dM5'E?#Lh)6(^0E?%cEFO0"B*+Ua=9cqF=`9$>&5<]=0Sm9[`q)MlDhf4)TccDR<i[DSY%WWrolo587<DGEXIGrJPu/R*=gG8$^?lc490Ue+a=\=[sY_G`Z_a!^s^.eU/e967$(+-W<c@n6Ml=8>O2#IYL+aA^gW@1_sEVQ)FX%<Z^Ln7a@_c3_X>ODR8h-W2J]nSNgNXd?_I?pPdLC4F<Pk,Ki!:g"ZCd*^3N,&Sd^=S'2R_F'G56Yj')TS:W?U`0,^XNrs-/$?eF)%O-qHLA^7Y-"hPaghY$A:Hfjp^Kq5o?g6..Q9?Jf`>_IB-cuI23."Ou54\iNn:Ha]kNjoAd&>8'>Met4KNcQ[Xr7QW5o:1]_K-&2r%'q9tiO+So)A*el?Gu-re]qF7V_+#oV`>3(n2DH`XmjZo)Q;h^u?iulOCJ!0oS6s'1pR3c\rrH'FT_BZ;]-t3nBt]srT"mM](\ct.%ABP*X;eQISXT2i01!&?(`9'R*2DKM>dbcW"I/LfPLGL*DQljmf$/r[i$02EO^mqFe$/r\tbc%nl*rp*u*.g#&+ea_F@20)T[AmkM%@l\fi3A<Z4NV-6.DXEhUH7lXCS.Iuf'Yeh;7=B0M(G\nBY59(g"Q!]<i.UGB(0(-cJd]fFd/jts"dg<2O\Kg<AnPg#]*"k$?HeTC%Ll$D19[4k)UiW7FM]L+hGs]O-ngo&q[cfkI*geak:c]J/4Y]#V`"M5>.F8/JL8II#Es\H,ZKVt`*!J5]]F-N`j@T*_2SWTL_4Dg!%1GFsPJD!LS-n,h@ShUoKZa#p1V'eMd6]4IWJOsqq9@9tPj#4e+&)ZsXM&Cq#cW,;.=9I]-D,L<4,E2Hp_F2n*".rJJR.V>2s4q&"%0;U-Ja=%Ee>,X@M``H\6mbL@hFqU&1#'Ji\b)l2=7Pnt2g'`u*&8(MB_BIYiN(^&^&aUCT2fi/U-;a>XbZW@^'5,O'&Xndo\5%t/%]\O$kTAqcA@0P<(Fn2fD-b*9;$H=;I9=@9#'*q1\XkD^W#4YMkY#/[13Uq\o525)O73EqS`9#&WL5?XXMF,/'-8(h5PG'<K'2qL)%L]nhUlZ+^(BA$fi&QAE2P'+C*=Wt,n!MRH=O+u"QYq?u>&s8Aq_U8&(&mQ!TH&Q$;jB@qi"!SQqRV-K/+'=[GA_IQ]5pW.;c]Bo5%]X6J$5PX(?Z3=scIHH8Xed=)qq9)S.iI5IGekc&!^1lpL5MZR3;nDmK+7-nmLbX(_&%CkF526BXJtH7Hi"#5(0.]6j=R&3),hhUj%Pc8^@/#sj)U?I'OC903g+jSQFS<*jOa48Rgd2ND9k<Mb5+-?Gc]aF._)(Bh\d,]sa/jsjkg6P02XWUHA+IROi9H3fL"+o+(1_!hn%8g%8r>X1,;alk[/d;T*8?EG,20o-&jLi0)]JBeabJp,F'"smbhDH6FWXp=h0/mZqsk&Eu_0Hls7">e2*/X(ScbYLfQp6"XJ91Nsp%&MR_J3r(0IR&lJ7PC/&]cn+>U,TikQ4i_,sO+<Wu2T\J)9`:C?UQi)TbU<3Wq4Vsr,9OaboRfr0Hj#AVp=Dl"U9uJaI?KYA8`c>p%,9"-sV3?6_p0q)V-MJoS8qa?_72A4%WQaMH'`q?nOC_B7k+>8,T2ZtA<oA!rKi6$9#jZ".JWj]$?;7:n.W)nc1PL@I;h$QVM!`G)%71@ZJZ`<Ul'EVebc:J^BV9`bn'*;^0+!sbhR-1M2:C*=fPBNN/+:E'J:FMKRV"3RQ&Spu3,k?V==kn>oKRfK/Rlhj%7Y%'m+[fZ(%!"Gh4&_cWk/127$Ppr7\+^e>)G1)&"j`[@)&JH7.dY&5HT!L_A!!6o\,pGj8Lif!*&Q5F74%>5A0L$r-3C5-(@lsGG#SFBW?KVS+%P>sG"6GUfj0f_S=CtUg=#afIJP9WIhf$d=U-.\(9@2pGVfhk39aUo_o'WK1d,%d`>3(JdlG/D?5!p1j`3(JdlXZYbP&[NA?*$Jc(%d`rFKe@K#0(j-9oD0U)SJ6D$Oj9Q@(o-g+R6nHXTQ085qB'[;o6Gdp/lHg4gVTiptKSYnq)b,jL0F:&.#RQu*+taL;dbcBA86Btm%*2+#mNmR#gEJ.(_0TM7!l50W__B_C:,G[9!]4'b+$$0Pg*@2VgEhWhR5`8Qtj>>l32s9YRl"q?uU^63P3i(48CN)5kA-clV=HCE4%,*\!EA'R-uh<qE-I(+a"-UW]2eu#kfKF%C9?u;>"G(>G`KXcF'lkgu7`/HJ;"<h6;K$FndW\s&/r#i0;^=%XiphV^3:g1B;:(O(h%n^f^Gcq-]p<_,p>lq%^3Acbs(+<VHTTCa7`8mB80%g(lcJC/uT8V<K(+A-=r+.OAtJT#WOUB^hkcg(-F@b[:l"O)n-R.MM/k+SF>%+RE<]XGkV\JApNL+$":5[t5E[*!Bs(Z,06G_DZ2DK1QOSk3LpH6/[tegXF81^b"kcP(S9fR[]LnGXRVef>p7$%[cj>TMO46m`l37%%T=`TLgRm?!p#O]P\B4oK1H@g$eO32P849Pm<2Hld=S#NR9npT+R!&ko5g(HW3)J$EDd@T3oBq,'ElVmg*\<T9VC4[]T[paD_OVu%8O8:ofRE4`+:ON8,ruN)K&EnWP8"`%'^Bi8<4;,upnfCd#Kr1_%LWmb[B>VHUB-;h-<3!Y"qc9G<Y,c*g5OQW<R\\\j<F-LguK<5%b@Qqm>B>T1l.S,C+sN_+=(5UG8(d'#4R0orSg5i7h!aD)8j+qFJ-R:Q1.6+D5FKLQH&o&`8*dt?U`Q?md.qROU*mK_FVoe1pH<<:%7k`nNHZ6&oanZOFI`@Tlj5,al%.-C9RdGn[5XrQ^';csHc07UZLaaHI_$*A=UNjFtQ[T1`C-)LWH)m(<H]h\hUa+,_<:#fhi?q[B%gpOp10KT_SR``G4[#JQOfJa<K"Qp%6hi8'J?M8Z5Pb%XrDnL0TB;3f55M0]*+R'b7-R,!!#^-36&^ffUYfYro1cj,D:j]J+`#*er%bd]!34P7@"5ohXYSR?%L2YoO8CcenpR%W+GgT'L<Z#'stC[CIaf+UhEd[P+nXu#)$bYbt<Ur3j,BQ?-o#C[dO*M!g5Dn9]E9hLqg%l+q(Sk)V9MKuJ&+q4gWY5p1D:]@&'n:9J^#pX2g>nif(q#^15IhmY1[Ai)7\^)or7RtNb,Edk*Vo/qO@)[PSJ\&a,mbd:LW*\g;F%7Lh5<Z@U\K*fpk91RG`DEfdPrc!<Jn(lMDtWuh`NV[4!B6]mld81]!A;'5#rN.*ic+8W(F25u4KYSVr3qFIZ>*E[,(Y:`pb9Xp>9%h&^@56b.-+Lr_+uH%)OG:5/0#+jU'h)WUB6l^/f*NJ?LXG<;EKRh(KbB`#5@G1>JlB6%^12nZEES,g+ph",+i_8SnS$qYi-TLW>`%]KQ6o$3'6ZVW4;?=+'F3s*J@$H1V>Fs,3$J:Tmnp:*'mi@$JF(@4U(1('ctNBXa;RT:mb'F`G2QNOGXH"+HD$Qgi-CM/&?0'1m;:%9Z@Z-bsO_mXA@+MP&c2cpue_:.]I$p;,6MG-*7e+I&!Y/[bG8KL5<XdnC<AK\p2q3240%\#0lM_D?iT&K=a#q&bZ"%WK/<3k&s\g%=Sb/?s4P'Rdb')4<_8,ocRZ6U-'fXp@t[rV`+46lF7p4;F5Die95,<>A)^D[3kr*Z@d.Vd[K,oO3V1sh6m:2VDdN4$25.oo<fd/(%dfQ#:s$[Gl[Grit9[!CQ+(8\`mQ3mWE&K:%s4knsNNOG[*c,#7U[=-^A(,Hc<VjOBdrI*"1#ZqP\DNi<lppZ`,O]/H4.<AAP8S?[%c*n^'2p^X@go+B$k1fgt[,Yi6T[`)Xok6NkgqiftFu5hf&Do*1o7a_=kL"\)Ct46.Rgu%UjO0@i&J$L23G=hE90:HA=h(h-]C#".%V6,rDZLVH&TZi&'\f[j0:&aF,E+tf*D73$GErIO;6Saps^IiOP*1<"D8k6:1$&u/\3jj+V$(L#D3$HZ.+Ma#t]BCmZ:WN:"?-K$h%SDIhY7MlJ+[_5t,`sTua3)7L<Z(O1fDKG6jDPr-?iE4<o:X8JD76F7"nMhNs;d'!S+(ka1W6+"DeeDC*`N`QP^_3?$Z_l_U,Wj;?%6DgZOF?%U8@V2J[kBEb9#/NUGK(3YIW(jQ3&)JueP;A)"E!'KGHbd&<;<X4tK6_6F8l'14mqZR)qXI+YHEF5n4;-:173&^\4;*R<%fPsB04Aos$Ep>V*#pu)RUQ4AsHLt-DNoQ7p9]s[r4us_k!CYZUk4)!(9_QHfnOTliP^bcU7tQ\5G']>oO0g./=e,Vij,mGNdWd^"%4;+a6VA/ZJ4;+W?Fs`=nO!GeGM*?S7Ju[QeIAfF,8p6)T);sTIW/0'$%uIo^:@o];o@P:_%i([O]/ujFoHCGU[VY:W)_$q^G%Ket%I0^^eG,Y&/%l#$R#Wb^&!]JX#M*=>9ae%d/dYC'tETVr'LHt^?&n@+h,_AO0N-YU\L;t)+&=FKW\o@KW-ku?%4;-(^I>j.L7#HSe%Zt&_O5ZX(_dYF4ZS(!3XKZ%7[COX]eO?dWGERKVmmJC_??'NIOGsB]3R&!usm7d@Q@:9/riY[(LajD79a/F$E3,>cnq@G?%s#GK5%:i6/!+$uQBfI'/b&?qt*.OKQLR%H1poH@W&^&9?)C7!!P\#MYf+(EB;C+&ihYiI$?oHC*)/,atGLO`MgntZdFV*-e<M"Dj"I8Ysd%%q1@..^;_E&C]t:4:4Ye(F%?7=\^%_f!JPL5/agW5?LJQ(a1?YP<K+c&(Pqf_+5\thNZKELtNYS*Z$$:^s8TnqN+5QrBq_O[SMju%!tlBt4I(bC5[mHcPrVi8"GhAu$5'?4>Z$1\m5jCPWC#ZJK]MbKqCm`%jR&JGi\T8e6GuiQEDhK+)TSW\&aR'<A!DVu5,h%O-:nU8%3FGf0@Hg/p3akJm&pC,ZknuD*6krU$XNT^5l/Y>6_`(BjO1.onb<LP4FSX)nr'_[AD@qDc:I8GPnoeENls4^I=cfPSo9[1:&,PjA%cDfp;kf`_mLn4O3dHU[Sn<;Eu**Dd5hf#+!eU.;h$'(-^Q016Z1&(@YOS(u66\b&`-U*ND#8%?)n@/R_TkWn\hd;KdPqTlq(FLD>%KGbo:S6h)n""#3I7@;1e(/KYa!'Xj?lRR"dI^8m_8_jHbK*$hbV#:o3a_e:dHs>3>1j)sUF=<h.6fCS*==joG6\0Z/,.K7^$FR6-%VD$/bC=+[W9Zd>:fn[bdY0Q;69u4VA1U;3o2j#)!!-"&F:oMPG$PMZS18eoDR,<Ln0u9h8nT8^faR_*C:]qLj)pmun/3fA9K5/Sr%du=dH-8-lW`0OFm<F0qu6l=eZDV%\`354[]`"It^4'2]ql\iVX8]%\o8J+T8p[QsV+rj-@>':>*&]92Y2r:K5]f/qN'%!;ZTHak'%l+.Rj15bQ%C1r\Ma*bW+henF"n[KZk5&0?F7^1NshKp1K'8Lk3WEkQPq+$Ecj5C\(8i.)Fj]H[gETALQaa7XO&ORZE9!.O21b<_t%lZnlMPm:Z"2a`->>+<0%5UsEceHfr<\ZlPRjB;u.">fL[<M]2#o'`%FkAQ-Z3lD.(`HM(Uo-a5%g!;=ds4?f,YK"=a+%#Dt]m))A%dKNN1$'PNS#nopobP-cG\GZ>AEXR!Q7a4OrH:^j6]0*@Q'h\dm?s`^:%.VXBkh7Kffh]YS^<HI+f]2_9*FgN)qS+LC2[r`mZct5J%Z#RJ<6Wl$_@aBkP?[uBDX;Sne;PuqA_#ZgbBPrVXV_c,@e#o=5YeZc'#gfpbiD.*0/Fsd)h1@(BKVcpWD6euud*jb4CX*kr=cQN:%l++)YMg-7u=g5JT@\Q.rnrk/G<(:J'!hiC+n(Y.]*D+k\_9:!e5@KquRg+rQ"CY]$nqliHOG6\dHHK=l&A!!2E\6^?^=R0YmTH7q%Pn7.3g:k/DYb4VMO_<r[^!HJp]6Z^Q284(WpIcu2qWMd\ik/_tEM&)%[;kA#WWkmQ&qb)S!E+lh5A""n#Guhs&;Mc%T-J',k9f-T%L^Z_QncAf+X7!oN1M*hG_-LK`.fn$h3QKuFee$YpN]ha86Fm&F<;Z"G2ois.SJfN"Q]_srMiJYWr7G.4@`X+dIYOhkZ.##?'rlQ$%_R%<m<m`G!6Pa8`Q;t:7<?rkpXc?7m#80o4'oC5cJ'$b\=:6R?@8FUb(]m097^l^/SemP86dVh8a(,7?>Khk))Sose6;Y"V1GU(j%;cM47hcXU)TLU\o,)p`h%]"Vo#Vf['"\!#.B"b@*%`(oj7"`IW,jqT7^_/ludA@E$fc#cK'!uP?.Y_J0abh@Y"V:hnnG4)5duKf3%d`7l[MQ.'cM-Pqc6:g;?'D<[Y<Sa\-M'eAWp<>YDYh"A)NJ4O)Qqe$HFqP62!NE/J*g\f4MSELQ06kU]jO7uT@>l2^4_c,hIZ+>!%kch3?bTCdt]>h!n0MHoAN)o?JoKm001BXN#Xtr[PU;`pqWQj>b[c3mYR:<-6\r&LC`8J:Q-9`U7&h5pchXKmEdenKrG?3V-&$5PU%H*U5*juqE,Es4ueRG,l:rCp!2VT]cR@c9+mWH>k=&*TFE#^<T`>&a\U/_\=/ZihYD)GT,Z!hcUG:KBkPSF@qp$Gj#q%qO-QH2ZfW%D=E.]3\Fq%<,-Ok#p$Sek[B=[n^;$:(YTe,@%7cL$`;)UK=?SaEPueG8#?74L>P\p`_<X=9BFR"A^Sh"(t+Uo0PdFF`Y-@?ADu4-%a]KtT4%nX$mZ=O1a>Gbq-2Q1n>GDL9`=PcM;`1_MS1l6V+Y&`,WR+ae/#aoo]NB7,Q<p'Pj4BF?3b,T_)oe-&bR'MECTE])+j=E'%f-+YJZ"H[DN^8"Tk8R3pTuPjRW"^R3,>XC?HYN<r4@r-^WRC,^#s5k61PIfY2KgF*`\"82q`?=h6i6_,f/Ds1.Ka1`m0,SRmC.Rt%oo2Kc4U>>rXd=t\DWDF2gP^S1Mh_KSC?<7+a\V-A[3CRVY`;2hQuTVJC'$gs<Wp3?q))sc1AN%n,D`Sh02fN7,Ta%n,2A-"SZl]_%!oAdq0!TeVc2giB8D=hten$>BfRe-D=EC".@OTJakiJV+322a<507V0')gqub95L6U(b*"n1$An.5@5UNqPF8Zg\"h6Y4k,oVPHX%m$M;Z!_j;X,6pWi6.Dqmg<;1(J]4uoHeW:!/-Z^^$!:XN/t:9a85`3PY+(eRl+ii,Z>O!2.G=dM/$\J_$HP!G<X:3nQ6ZP8ip<%+%Np)I&c?$E$<Wu[\3C7bFAnn"q5-2r+ATI=AB%O2];0I=seLgTC!&3$lR^%$I<WL$ZH:EjFLUYFk!/"8;^edj`R'iBZ$/2<2]7^AE%KeneHgD6d)0.#R;jTmAELYgW`6&2E1:966?p\h6\dG0_]%`D4RdB6LG.=eoP49e7+9e>4akff"efkW_K+PEJV!C7hJG[$V1/SV*Y%ZBGSD'KGqs[qS.A%[.Br&7$VeM/H32%YL6`G=6-X6qbL6(<TH4Q"/@'gQJNsDsjbpr,tLGMq3$flE7Z%7"pI@;],6t%s[#D[7!CT%;r=p)jdGU2+fQ6[.)%^V01*_nd5Oi9?YXGc8ZjqI.P[J="A(WYp,26E@M.>VYr%i(Pk3F?/"Vi=F(N>SS066cC9&-(Ec5i.\k[jZ%qU&G2=<b3-=b'[/[2t.\:KaB,/#>K3_4Me;)BX"HrUok7,\j^SSeA8o?E+FDN,cb,WN:?N]n.]rL)$1$3^b4H;9(rcW'2@ulG%eR%@,:#5Y,nPd'e:)Nf!2@je9!G^CI_gd<i]$t7-/D/\Rr]NgL=8hFk>igHk%O"aq&j9R!'!.L)A^Tb]!R!6n5jac,OE3Hr"8(bm[sa%Asn+X(;;D0jHXK+k0EDX5bn(P@Ml3o\c^R6C?f-SW=;X!j%+_'Z63F*F'U[YgTa"6ch]3:/HX@f'noE"S@qstO@bZ3/i`UQ+rC]R%pUZ;N?CcrN'=uPuN>alSh.l*-,P6qVm3+rJb;;o;Ru)6;b^`-K89MInf:d\h78[K\+!oa_>Z,g7,Y(h(ndDEiP,a7"Hd=2;O>;-L%S:AL8)O5Q"_?$b/s,ng>Eh=$e??JOt=J>Nn6^d%;UX=A.kjK\Ikisu1)!BhoF7uh7:bf]'$'Di-JT0aZd&1@Sm#j4n!-$ru6N'WF%Z2?Pjr@AhCTPgY@V+?0[9$:=uCVH;3a.lX49dCiIC)XVQ0Fl.`HKj+cPFY[Y1<5d/eC5id+rH;j%tp@(^-D%3\]sfakT.pJ1;KEo%>.mj#SRU"gh/p&.%sTKP+;SV6$no3TNho=BAb/S`"!td+[.6YF42LRPnt@X:b]fg2Y%e[giQuEN;bH&en9h\[M(TJiQ;hc]>$6)N%H>(#rktijL^0Ru`d1SnJ_7MCAa5R`"e'QRg;</oq8Ybb=R)B+$7u-^dfe.),4Xd68LFKqd#YB<?H+.JqU$Q3\W,,'Nj!pr-;78gs%C+<-%jT>IN\cBJGaR\"FFf[Ac\*kr_&%S-BKFU#"DiJnR%onTRCb_ZEke<a/)uoa4(Sb\)CfNsEO<2S[%[!"79S4'KU.uO6f%$h_%8I:=nc/aStk$>2]2Xb#-iai`6R7l&e9&nAZF6cnl,\S!jk6)0C,X\M,"!Qe)RMe#\2$^!EQ:%ps?hP-G<AsRIaatg14<Rj&1-_#T%J_7OQ0!)=Sa2ps_P:K`cPtu0r2&L6ud_\DTq0"3?ZF#5"7F1Y:4(g8Z*i[SL@#\a9/1A)o>>dL*&<]:m8>r]OY54_H-`r^PhdiSe%f)INP=`(eA!pK16br;sMB:!:6d_%'SqCQ[hS#A)bD)6J#Fq[B=oHbWTEFN\GdOL^#%!R;E>1lU3[UGnk^5EIl_5JL>at"I<hjJb,%$aPI\h4.U>P+#5c&rOqN9)^>QX]$_8Be"]<lNZ$/d5Yd+KIg0?cdYWO-Xg;ITp"_pSgb&j'R`;oO^sH=Zc0:hGJ2KX>/*LsW5bP^%dEd2jAu2$27,^L51AOr"4h4Of@.Wf52YD!)%fGJ41*^u>Su)0)1%j.&p;kjl(gbS:Z:IC;P]o<rB>bMAU7s^mF%rpn-iro-W`=1'%+k.O8T.ChZB-t$L;n#q6oa.l4I_hIb3=m34;k*&FQXkka9E\^5\)VsM.qDga2f0ih(5,_sY+$8VE%H&L/Jhqrmcf1f%V/#]q^$;l%q<3CVhY6XZ;k5@rhc:b-#noL$.CID_4m7=!U:38-aT6JuS=s35NDr7UK;En'$c2n9Xu!/[oHTQ'jW!ELUk]H,ObI\m+pl[dO?^Dg%C>J=V0d[[;@na$OhZ623:q&!5*AjYe3lNikLcm!6U3dE=cJ(lUiiTP5Y,hg'<MJ?rNh3"5`o!ZFCq3,o4b=W^j9*4GN)kDQZ"NN.%.%dpghWrTrdL#:@Gbc!V-Mk[[7[\Y&5[)8?_C,o92kCJ!-'JV0r3HF*a%l2?Q;e9#.E3^1Dp4(ERme%<jY;,`PepCZnql#>$/t[q%\8#JIFlmWbVNR'eMr6?%7\\#aV:1,=#YF[DMB*G&1e(GG@:13WXsS26GE\6RBGHP:A.74%9R(`mkeN\!\QKgRGZ=/S!+EGVfiCt:%jh.R3)E2qIVPlC%?4#Hg@,iQ_oq8I+b1/LpauI_ZllgLW&UID!L#.b)N/SbN?,89+_A:mWBW1Js*p[X-<Mu.,K'jIXG%q\!MkM\M%)9)P/0[O,-GX.4>UZW1A$dr#6$eJ+SareVb0rW%mRCdcQ<DABu=O9jD<h*+cY.#"bX':Yr@urX4]]%UF<[T;p)?n$M&`ZVA0te$/%'aBYmi.4JN#RJ9CcC4+8=:#QFo+M<n$RLle=qtl5o[IHS<F*V$rJ]CK?tIBfj;reSD,GZX].;8%pp&<NC),24[]WA]Yk.EB2.g!_%mU0=ekO/7m>FrIlp+=I/60@a.fNb!rZ!mn8CjDb$IAl?%\XS2"XAAWL[XF_-rE-sYI:@9&&q\[AV.sf]g\M%C_oh5hoi_7)\N[&1%'_M'4`El@+Z^PZ<?(WOdA+W;rT2eDWSiXj?s3pgt2Sl@Jf4S1al*BlkGB6oZ]?3buXfN`@Ys*FqQ/0R6-\s]TBq4LQ'Ut>Rom%\#%qE-H=T<-Z\pLScY@(>a+kPEu),!+=gf.d`XqJ6pf?IgK!jO#@qlSJ<UO`PsAD()rBIA3?-p0H5sfM4R]b7b;YRbG&26-.T#5Lq1f%\Zq`l-go:&($kEqQJ5Z9O-ed[<,ca"+5PdN"(K_F,,&04@`M5[!M!=_o#&mr@cs&n:'Fp-3d,BI8e>Y_CJ2^n/Qj<r``3J9Qn]0O%2O[2(4>aX+5QY()Po,)k5b"'=;E6&SF9I.AkZfY?HgK"$";!G9SDPA:r)k-NV1,'f/jRj);7^LO'hK?0FR/uW%;Q3mC(;Lfp#YeM%r;bh(!$jio!MO)ND&EX='=m8;V9"\C<^Sf3TT")H"9MJoG-^,'o),Gin=X5iX$e-K&GD,S\<05]%;(D!,!=sZW^trkpV_/!D+CW%%#'qcp#X#p_SGUek&M%XmSo]SeUIYX,8H=EX6Q?344=4O;*Y6CW>%O!=jGa]uje`p$8nYF0NAfCYXd9K"C>=F2?.n\6l\Zt@/\94]%-890bB7Wa@cA(DU;LjQRB1af591CX<@k-hkQ]0DL0FN1&#tBVQ0+UR.Rp4LP8j9FedK*<%dkUP><E3p/`Die0Ms4QYfPY</SeJ0%%Vk'rWhPel$=kf@mFa3JSmI=6HSa3-GCjhtcPh!8(6TD3UUhZmtY.msI!J_6AD4DINVqapSoO4JBa/9-i^chg/^[E("riRi+>NBV*%b6l8Xqj*C'*del,[XrQj)[Nd@Ge+);gVDeW*"=mMH9NS92EWZ50T#iIn)V?;eHrdkP2hQI>%2VKM,&Mc'U)kAHiOI=OHTD,+WSQ\%a$UT@elFo"iIp]NE$:]X(H6u>;?.!L&VQrhH@uU`,$kPJApnE(Nq'0e/S,ad-#.h496.o0jer;O*aSn0[^mNrd/c_M$4'WaM@WN`%<ks*n$^R&8`uAUHa@PIC'm#R$@FRW=Rks/f`Nas_,BD20fU&#eLlE&prmH\c^a6)O]r6Lu3+ju&A5WC`g^<jh%19,c'o?QAB37(!%FE@_!g2/:d-3MgtFj7.sE'i\qD7_6p-F,'lW5.OB+d[/=I4Q.)i45r;!X"4\\0bcI";<M<.tt47_IO*&Gfc*1'PDR7>W`?h*D,.p%M!P7t71;"*OL$IsqWi\uRu=k<2ZNp:%$e3$EIo*@CQle@@e/F_/$5aE#kM4V_3--I2S1/82CbUOS0tsnYZA7o2)NmdbX#ZNoo\L$%/Doe$+B1G(hqk<U*WVCQ%eYmZTbCLU:jNtT.CM0!*D&aP5+&t*%k=`D:8Mn7fjuJ.\fmtHQTdSF1B^hImqC79i^\8%eV",02`aLa%[MPER9'0YY`28B*pHJVsc.s_G94`tjcmOJ>RlRnDSm@UAm5`GP.8*c`!O/pcp7SqK`26;gLb0ng9jLsXLQpOt0T5,$;1'e@jceCR%MD6jj\a$5USb:NJ[B%lENh'B4$WsSa*BU_u_4Yi"eL,NXM->F>lC>4ma8Vsi14@+JBBgW/Bmr-Yb:$/=j-6L/EPA/f?*38!@n*hc%kq9-T6;JN5DW!>I$*pQnkDhVI4+$/ES7=o=S)\C)3kgn[53TM/]$)pLZ+7SBG7Cd:;`1NpA)C]\\1O35%f5`ab]AQaBPA3G=GAoF%I@'e&2_C-@qt/Z04iqfQ7.]3=a>csWK3l@"RBd=_*GY%bh,1QJ%)$f4S+9V0pL1CtlgAbj+s[L,*aNHN4.WS`D;%+P9$6)6@<="g%n"q6H.RqRI<gfBVDmYqmY(Wm=MY1rD6"/'==(71Ok%*Jplo?-nMuV=(h/OeNMHc8FUdM:]8L8M#gehS$A-ls2mbhJ`m@!C&4)04+%R>p@=96R,:DcAF>W%gAGN]ZpM0_U&9Z_+0=cPeWPf$3"+""2?NAKX"6M?4SZ(d"K>XCIggkY,9[e)@NC0XFJhLPHCU.u3B!oAuk0%khfZsX1jOW2LWc_9/LJ5"rqr45V+(H),lnaeb^J6@a<T=M]<boFVs"_+hqoCq8Z&!l5l!nk*]/fl*lP@PDY-J^6AXb%:secDtiIe%kA*<I<VZW1H-5'hMDk?'>#4K1XYWV3o[=:(Z#`Rf2o4HZCJ2^n/U?\\4l=_nF%`=je.U?G@UagkcO+`.Z5lJDSeX6+=U,9?8V+i/%+ksd5b=TD`*n5uuZGr:ogQAFg,dOP@"PRfi1oP/_T9,dt\N*_2UDK'<'t?(V:37X&I^?t;+H0W![P5&rN&c@B5N$>$i#X(C:XP#0%?jFnE!Aeb1']c=5NK@aEM1jdg!)$+cnCD/OIul`!''5#lF<mJMMaT,VG]"qJTZfu:oSd:g96IKSA2'SN6j"0[/&q?<9].G"1#!sI%8[HUZr*PmN^6qk8eDIPE=`LDTGfWWjX+;UdPC#`c&]Ok-\ccU+6(b!b3]I^%K5'0Va&n-FG^W;6Gh/-]S>U&;.$IAVSuucKWg!XL%mP2sg)j+J33WdSl64Tdd;RUa6-BpHLZ!i#Dib1U"VAEY\KYZG,(r\j1JaoBGMDu5Hb2tKPVaP*fUh!\C<W31WNscXj5d62Lo^1=W%Bj#/iGF.'q0f2OT_\l9*<HFst+,fikAOl>'c6rZlH0Aq^$#:3ZYQ=EjUXcNaF1=5'51+t5Mbo$Ah;%0u"%Fn+NC\NOTTk-F+;`j]%.8c_"4BC;W5>Vn6PEP>T*q!<5]@q(EP77<;9hF))\?'CW'J:b#A7s87F_X>m]F^"hcuUICg.t>d"L^8B6b?qPdTNQs<1fn1H8915%-hYX!(aa'L0G.GYe\,+eeZNE83++Vro+1sM_P,a9PQlfT<Z`&/g89/r*fenD)%6$*9M?dZZn%US=_XAd.L3H_C"s?%Ag>c)Qbf>l%)]c=$,qA7PL;QVq,G_QB#E/mb=QJK<M!Z0!b2(hUjF]_)G&o;jNCLe9NG3`*X&pCT80!b$rf,K&&eQk-R[1!_cT"5S&>4DcHSXb#%CDUMnm:H`X7Vc!2'u8Y7SDlCDk[f;eQCF.$,%Am0'5LN[o%VAH@[s/k2Be5'+$k?;+:JnP9-B"Tno2bn_&BKiLp9bo^P-tT<BKDt%d#k3k$k')-^i-u%D=_9PqI1#eVf8WD-7kBP@8qjg$Tp=4W"7$6Ke:+QMo0SA3a+DI[X]JM_R5<7@1'c8h#lJdY\#UWVqh"iV:$+p%"KB+3ol\g'U3<[hT.^c(cl(ermu"EPa#oo77;kl?/q"ZRN$?@?B^WSD`.j-4mJ*&I/,HMqpRSq<@o<1hmE3L0jr2Xm<C(`nX<=sO%1[EYYNh'AuTGu4[N/=*0l:AF(C?aB]8D.Tf4tZ'a`;ZY!BnXs80^<),%!q"Bk$4Pa4K=?#C00OA/W_hLcp*g&Q81iqYB\`5kRgM#%8+B.Y0MTL2#*H>K1$7OqXb*GU,pc^dKR,$n$;46r$3kW-aRR.-0Y1tmnC.LGg4>uM<td;a"r*E#'tfq_Q5H_"$h[9!G^u#raXN]O%f)fI7<\Zboh<NbtTb:Zun-iD/E8fW*k\oV*.(WDUmSZQRimagGSDK?>5R$%6h,ZZp\7r1rn/2#[8Q_)*'/;-E6H;a"X8k-G`-R]+%^$Zf9m,>>-`^iE5(4Jg>1<Y"s82t(;$V'\7DhQ"s0aCZUN]n,G4/Cc&2[_\lMk3NBJ\o_>8!YgC&UYL.Z]c&E'uR<jP6Z`9aGK.]%35OuQ@sM70m`!2CR);/i`k%r;?m#shbJ<8,Yt'=Tf-]kN.5$pn9kBaS8#`n?&,+:[<b:\_?@%O(MTqPF)&>@^SU;9uct'SKjf)'`%!hp<BfNd?pR`JG0QSqRS)'EIh#(OCn=daGip0g@%^6X1tWp3T<55-$uA7$"$K^gVjBMS*=Pl9OH9n=Ol[U_Qu40439P19r>i'QM_%&Go_?/Mj[e&Q?+Vj[+ErE[T:N\qC(4j#(eUbKCSg7EQeTQ@u[<XD/D4mj4@0;MD@E-V)cimHtpr7507s>S)OOeJ8LQTi$VcPCOn$%9j8arC(u?T@%2bnXOJaTfTa!JR''pKI8_1-a#@'g-`IZ_&hpgPeCc)`i.1IiXo;JE\)N4="sYW8UU154Qn,t7,o1j7$=4]1R*8I$%BICRt'g,6UOtH3kAlr^^2*QOc#MGdN(Ig8U%ia)<kIdTToA*t4$Re>WA/[50iT+Fa_kI"'B<#XTm3[!8gW$f:2%7i&Kt+='F:N3q%VUY]T67;M>Hod21@)P'b\umf.ZAV&[+T2Sc/m(qj?'BP.&OUCLcd*rP\gj:JAV=q1/1:[tbOr\OSTgR*b_^P^&chd'7PkKl,8QDL%>T!^k.1D;rDUCdOXC_UdiqCUET[\%XFX"Jpft,&eUa[KA=ph07eEf2F\<#p#T5mA`#hAcCK:CMgP-CkkcqYM7`7WM=\Lo1:(T`K*%bEg8%3GZe?CN<C\A_p.b>?W*#g9O%$M!('/[^L!qcKj3T^t+fB)+@-H[H2rkD\P,HU.<B1>OE@P6W("4D0]N)b?,M#=^)s"g(J*G%j:Ejo%r?(h(J1dmQ3Xk4;2&?'cRfZD]k>7ZhG-Ll(Mms!6R9Tkb6(sPie4]kj\s>+>?_:nh.CML@*9MJbQClN=Bcj!H;>O!=2Od)%#I_(Z&`VGtQ\H/WgXW;JNbcN7>?eP,1$Z1*K\!WcSW(!64L!q-4DY;Ykb[BmXY!CDT/H)(Q3Xk,"IBEWV7#E9XY#[oL0@r"b6(u*%Led=84Q@2n]dN#:84Qif*n]2P>E+iSjajNc4V5*24KtZY7!Lj2aZcrjNCZ-"]$&gu^t*k,KR5c+\-4t%S40k6qZ`!2<rP1cDiU,R%,-S#t[mu:fZfR@k4'S9hH&n7],4Ep":#nH@*f7O"b;GFVBR(loc8Rd1nfBBDA;fK>CU1q,njp2K>->s_8'<.1ib5kL>9#5UA;d5E%RVZuN4H_:V2d2CsB$2JG3:D,"#p([ZOPnN,%1+(-O-&;IEX`<r/WZ"Od;f[&*\EG7i-_:u8FU;<G`e#5Y$Rp!jl&Wh>-;2-UZLH'%3a/[mUnd&1764VT?DO?HrS^26DfkOo*A%e-C#8HW.kO3[Vlk-K>]h@e9EcnZk5s1Z&#+_b]4I#Vb;2V]J?s&kAZlkjE1`4Y+4D+.%FJUPp,GR5!MFD^u\E;9(5[N4/r5+?FXp?`L_5XJ<kIBJ+1V7+eVe4rSW-0`;.>I",8,A$qN=)Q([Tj@o.XCu'_*GLt;usWRA<*DN%"%hW7@4/*>CRc-O^p.UclAs;<k1MjC#uSAtW,ScDZ!"VYFH^i<oBn"!Ge[+/!Te^TLeP#V6ZjHY;,LQq%_;j?$XuC_7s(#`C25?2%dcZ%kLY8]il-5Tu8dss4a.'o=c0/&,E\7>qft*,F:32M7q0dT\_FV/tM+8fnZD]:JL'Q.;T3jfcYcd3:4?X"C[r>Yi`e!_AE;c@7%%H]*U':t=SIVUZ6jNAoScUhJdf-sDDME.DsXOd;;M@=.1keqRR.6e<ca&O,rN4pUga4aL<nG5:25i9qO:9*"<-'o5R046%EnX-2n%C*(!?s+3'JidLc9_2=aq(_7Bh:@^'4%lDmN+0OMMK?;^CfsdT'EW>O/(Y90NmTs2Ts*4@YJ9[T&\U=DLc.24CZS-d@?[htEp"fSa%jib9FYF`M>4M1FL_p:"9A[M@Dfrb%aT3je^k2H<YX7%^6IJMt@f@OqJIXUs0Kq#(ccKkp@JfhYin*XM_.2;4BOf*^-iqjhanPEgZ%4I7.+r8lbP_qdtnrql6S\WROMAdpdN-T1Kc]d/9T:.KQ54Yd?$#I'lPoog,b$%eY>NYi:`#47lj6;AQDfI;md#W;;U0n_?5TqA8X%L>0)PS3gPf"66,3;g-mCAc_+)>li*+oqJBudf:RifEa_fegO;5"F*d<luDZ-D(:U+<I_$ka]+R5We<osX@:+OP?3ECJQ1j>R1QF;%NVQqNb-&RB@59iX,k+Vh#Hj[Uk<_/H,.^>/7+hjMEXnaHRAU/?<>6987(ln@c9QUn'gN@\5joO9j@*8Q%0kouOEWqXJoZL2)_5<Z%pjf(oXd`<08M$Jo?3PO?m0*K3bO^u9Eo=;B5N0"IQ(Ki?Z3\5**0U\fZ.k[@Z8V71\Xfn<Me9LB/A6V>7FWf49c6tfi+06/%XZ3J%QIpNe6h!.EgB9fMp&K[OMfT:R`/nFQFZ]ug7IX^Qa6soJ/\n.'kYt\c"j3Ll9kpE_nXWYfM=t7ap)2O1D6KQE;%sPn85K^+8#YqC%8!YK3Od/g$8"^;k7bQ2ji%:rIA3&R%qm4O0HG2C!36@]p;T:1NJ2(9KQK&'\:dAUOAg(PUnU55E*/qfO#3bY&W,T+X>)B`sR0L(Q%Z&De&JY*9"H%TY,<gF!U=cZ`':g`AR>d]ME*DhhZ[T8\YTdYNL2L_j7k5uRQ0ZoSTD0X2FJY\e-+V4gUVT(]ii32cu/\m"">c%1R%afajdb7hhBV^k%0G.`=(kdgj9P$p"s;k"(I9XOp9EQ^eQ.GAaQ5XcT52+D^T!EZ4,S2HN6#&oHZ4gc:AAPePlaY;*C<,oTF:(af&%.eqlI.CbjVZA^1"@(t:^UVE`UR#VA1SDjCX`i8?s`V.UHrY=&J+_7S[b._+'41Us+P4AYLb^ms7jqnSYPAH'1[7s_:#[6LaLT+!I%BE1a0P)=hlg[ajojdTpW/&9TLb@n8cj;i&E4mO%`FOoTD:j6'B9!`eW1FGFhg)#DR_FXakJE)SBH&FXW\ZB;[N5p,Hn+tl1r9GrC%s6g7,`7q`I]j=H),q#`>*hIkNc#;LQ_sNX0T)@o<=+?e*jRJ0i%-Fc'Mn*9!dt(JDW9h]ai+.0rnaDs^`l%iFV)6I6Nt(mO'"kO,%O#Z`Kr:'.kZg'2npp]Y]>kRVJig#n_,q5\b,p>r?8,B*Eom6^;T<Flg&G*@lbPT*h(0"QP!%K+h1,Voo,U\qO!rQ0e!Ks5I7%Xhj%.>S<(qmZd9Q$R1"J'W'BY(5p4#8EHtdTPZS#oLf_a,q69<U=p9dWb<Ml($L7OOS+&f)`m^M7/*Le%e%#)X..+i`[kJr:'#"'?XA$%\D'lpQnRMc_i]I9M%^^Bm8BW)Zm/;$AAY2WV[f@M_sR<B$K6@"S&@lbIMpEGkVs*<_nWb&K(0@Jd$PKtQMZsjRbS730>BWJQr+4B%$e`e/kYW(fgS#GQMKWUiFqRrIjpR'&_"@$Ek0t5\r*K(NIik""f$**E/`uM$6;N,rci]/G490%t+-oKqW;k8>^--8nZYtPL'3.5Y%Lr]6E$=/7TFTB8>q?jK>kK]8#1_FH/i$1QDq<o4)XhCJ9b0FccoGt\b])c'2&)LHmJ&RD0hO.n]5E`"+&hRYTHKI0embJ79?4\mj%<0WN#c]bVlM5KMKaZJ>?1cg.>)csp)aAgOcs4;EO4d+PhoH%E>_d)nK6kUqt*1akG$j9*2ak<&g#AXF1h-bEd,l^&SmhLc2dhAA-%8%iM-'L`dqp$mq:D'8nc(l*]@]UG5sKK5$QYnj:rb`l2(YWeC)j2&7T<%"g8dT*h).*@M7#^p3-QNLKu$nn$1`Kdi:REcL5q"uMT%TJQoKUgB.&m;7`:F9s'PSgGXp$NN(SSDJXD];r%NkDmK`]uqJ9:J>Om=VZ`%L7aFKh3(1Ud'?C5!Lt1d6j>a-/2A6AZ70Ep!fP\=%3HYKKUB5NS%3[mU775E`DGnN2jK[jZph0j56PN,uUtt<09qW!%V?o,B6hNm,hZ1ajj-"?d!>.1g=HF+\5mZ47B*$G0"]T[%Y0[+b%0u.V"MKh)3YgKEiW[#OF9$taJ'FMsP\d8_J2]gQZd*dF`/[c6#"sOCt8Tk=UrhMafL`mhLnH-.T@Aa.A<=3,Dg*R6oa=q#r&Ffd*%l!DkH'&?>kdIcCi**NnaNKL8E,K4^S+2*=fGIa9!GEcPnX?qV0WXo6r3Q6?BOP^e_Kn[N/H^JWC!e[2IoDkD&YM^6r6Q6T>FPVYB%'p'\<Y:,iZe/K7hMJ%./ofud69nT]f=r.5o.7hi@&X^M^_f%n2,Wlnc*2DARl0/;CGi9,egH_[oD/(4uV6bu:T$3X9g=Qf6PmmB'%DLH#`^]`AIAY5&E(Ei`>qSJc.NI0/(!O`;*Mnj>L+afG^/"[uFfAA"2ZG$6RGFB/8[&,/n)J_?$Le6J9TE`<#b3K0iGbhR4D41fJ%!hesCJMpVZ,Gb8Bqe=o(5'3b1W6jp^%3L;\Cr<S"Y)s@Lc/oPPEXTLINUWSj6"t7JeNRl*iGq"8pY0PX5@a,t'L:5e/.AC+K0^5&%Uog@Z-33'>!'$;bi+gs]8-s4p9;TdB++Y`IG.!iJA_;5O3"P%)"Ok*goq-=k!(9V@*M"Z2bUA;@Ur(FX&jYO*_Bt=!Z"\G>!H>N>%/l$6R'Qr90-t+CKb2'5'=mS]Z),NVl,6/ceMm3dYQ[i#&5hj<[,n0:6^)SsM$5",BTnU0b5o0:O/5q[c>Zgh6kX!cIgA)QM6[LJl%>Vf-3,@'pd#K"iU$s6ME+9H'K%#?a^[G.B*-!B!eIY2gLS)omA>EG/QgPtUM85"0U_r4j73/GpZ@kYtY*:'k47A6mF0G_&HAW'k,%3--Ht":7\&LB\,@cGbK9\EQ9/<n3RV5g!'d4;r&p"a])Z$TQc`YV+-+M\+2[fJSb%#_3o61aju!!h;.F[Tp;(l%ZT>E,6&8Kb9r\%+K((D:q&mc$[?N/"@dp`"oOEI1`#Yr9<+F)=C7T54o7*DM"XV_OV"rNgFuN8!/R6NhNcO/EpH_Xa\"r++KBO)0G1ooXoZru`\0$=%C+@eS]+jZZ*2SGf0b0fYM%8#$1(ZCD]E^.)/!sV2eOjqi9C5?ZFL+WJXKl5WJ[lM1Sss!c^a%o`QN7468nd5bM5)7[B0l;+k0P"T%0=XIfh"!4N@!VhV\tWSZ_4u1n\%(h%G4C6r?):_\5m0)%UGu4@"7EUaRV@S$du.K:bDRN]l[YZGb1ZuUl2Us68?JmClK=.1bn`2g%0==AQ%[NGrosX!g\rtbl?l;$92&rnoSX(&t01=G$b=c(#J-qU/B"=jXH,8*a6dna_!sj(7d)H+RNY)g-<.lO:L@GF'&9VdEp]<]0%eo#kL<ZfQq/!pj`oR]pO7sp!RRs*6gk,N-$1qek6@!W,RBR92+0ha7.Mad,U]4QO#dgJ@SBI;O,Jk:QbaA";gT]r;]Oh9SL(XBB>%:K'ogZ9V0XW!mgQ^!rdX*Oi_tQNVrT)d`d\X=rFBQs\bT^e*>+03E(JC!pmJ_9.:cj/*R`(U!-32!+*-o*Z<8o%2^qK!gY%&i[Q6%+IHNKbqQm45X)]I?N;K'rT5?[;'C\>`)W/C*V^6ibNChdUa":XR\PG=fW]3&JA[Rd=g-O=J5X5TH5AMfr(g@0h1=s[obl,6EO-i*%ju)AFE(Sf7>t\#3]]UkI-$S?p5r@F$Z@jY+1EfR)!MBGrZ5Jcne8';CYm7V=8b<0VJ@6'#)^-8Z-@ia.%>3/c!F3K\cSbuD8f!=M%;C'J>bcc+rhXn2@iQT7$8k"[E!!IC@gamRL[T%7.*mbV`8O]a*^^PfCn95Iq9aP!j'fT^5Y+l^)(3[B\kq2tq)i+bJ$b7kS.d<HR%;Uf;p!USFd2Z89XF]3$f0l9VBHl3q2,/i:6c4W5@jNQl2n8^dG)^4IN:"m1daZ@$e%5A!qXf@rIXM3R_RHmuj@Abk>&6IA!JM^i;%,".`E=6@*a4M!;'\CnMa>n1I+r8bF/_CDle]@,dF&Ce#4`W>5h:LG+UQP#r&g6FYu<7$CU2h7RF!QqKFmE-E?eU,g-\s6064ftpI%`1Oi>BWn)PiH&N"\1ZC5BXD$4)aMd4"uOqqZ-?(;/'T6?\Lot:X)hC[<P!h4\\88`QINGY>.;#/):#l!cPf!MaEf)L\lu8^oqVkG%U!Cc?4OsVb3P)aq!]2,TPDC5'@/s_eLGfXhCDqc;O`E'@,f+JC%R?3?;Si^qlYD@B*8U\S_7o-ZG@[!9#c'%h;)!*mjm*6o!1X@M%68u'"65Q(eU%<sm'KQ4ge)B]*r@J^EbR*Bn\3^E+FsgAT![*N:APhX&6H?X&g=5"6ZJALZ!O/S5;!;T+D,[&o7!A%8R5TSgcZu"R%ca?4L4'1U6)]`4TCK>T/<AjCarh0VIV+5B_lQAu7%^Kc3F%sg4!.luhD2'eNM1L/g1.O!WCd)c%^tjEQOK9s'<CGLh.jre##;RVC%YB-&DEc(DOEtHCVfS$lP]>2j\Ej\h"".0Z<NS5;$XjXr#N*t(Uf#:G"en3TZMdT'gcfH-KaHqMJE%Zqi(Q?Bj]BiA51.SoE]n-KO%r1*Q34$O4<T]m6V^'B3^D5Ca!;3(_@%)mt@);2isbODOWW7N<'<D8ZQb)k<0+TrgYIk=;IbVi/nj@p2ZH3G]*AO9CuXRe'pFp/5_%or<4-#!P@8Not?cmJZ=8'UB#tm6c:@6UTJX!=1.;qRCRg<9CQ<bDoF<i.Y>:+DWj9R'R6X7?'1T_GKSdB@k\;VWrTcD%\bi4425H%s,*=Fa904QfrP_pk"$pm0eTlYCRX0`9R&J;.ac=5Bh'6ONi"jkQeP$fd1!0Jg!NW.E%pB]!6JOX#981:G:`(pE#5h8pAcUnN31^)%:,3]8lt(O&rF`8)bO)(nH3@e109U!_.sunRS5sQ`NWAGj3]Iri8=$IR+TE[\I$_4R&)jlNjA"If"8ksh<6X[R&fIVj:]Kn,6fn*?%#p"OG-5_r)(M8WW?)9:4KpkQKW_q'GXSjRo!:U]d!,^G:jfK!OphoDh-8YbAG,B4qc_gSk[`6Z75g6Q=Z#=iTb6pE7\F3#p>6&^0%j$!Q[+KP.HC^:5Iq/AJ'R=n9Ak31-A_E/mhP90&Z;SC8gU0?OYi1@?@AY%160*)2#m^)+FZ0[D:9CA#N^i%NCnRYN0)$TWZ2\l3R%5ND`F]th5\QNnA9i-gu0`\]s&;,C%a?l`L&'>imX/n7QU7*5M^[dt2R28'i6oQJ+-1MYUQQ$iL9n60VM.1U&l`AMc-PVO7bA3C$D%4`%>7BFDKq'ACMeK5B.u=c;RG:d-V.GtSgDUMGVhk"o8m*6;/&G$`)X>><Xf#]qLLkc/\%U>QE6K4jk+'e^l)K<<d5&O=H>f@Ro\%\K.Z]COZ'&GY+.HXpBPh"SpJK>25bQd$?]*Tc*+d+E_J!mmBOh!EI';flBP-_Q-j#:;oR7@F!a3F9Dk\2>.&NecW)_aCqYg]Fd]m%*Q=aXS,PhQ.rS.n><j4l]t*-kC&&7S*?tgCJC:GLcW=ZZM`rKI=HrsoX4#a](!!uVF/,6uYReVC$,HtVV(%1&m1i:ilJk\NhgDUh%YKPXBDj&Ig?*\XN6O2MVn(WKq+D>m!7Rb=:(I]Pa-A3cO5+TaCau&2%i?1-\"IPaqnI^H6]iDrn7T3@c`EgK9&sP_#0P>#R\#s7(%D9,/]oE7F"%"(5m:HNOpWJU%m[Md3/\-pr1k^uie;c4.@0V&10%$Gi`'2D8`h(:ZC$,GV*L072@'DYF6q3+R(orY.I!4*;4.5!Q,%Gi>L3q>bHKgZA--hG8)U@H+:Z>s-Lf%jT$r:sMZ6A,'=4(i\Vf13Q3X)qmj'_MqER+Te^%Db#TgSBA]CGZ#1Yp:Mso5@dS^b*G"G%2D%jBCZKe:Le"KSLg*I,*J'ahfDqI'i=1Z]17s4,ChBWTlRcn1T*S.P\-;-s!PmWHIWS,_P_T7M);fc]"Y;bdBB,8SBpZJdJ.r3t%aO22Of=YGkga,[&)oO:6*oU>8!d8+]3kuKMdROcfa<fO2Z;1b]7^-n7W2O(l!9dQA$];gU`jn;VhWN\beI'uPFN>?q/;nRCJ7[5o%h.ApM..<j('cX8>-sK,;rlP"Lck2pC4WkpsW^@M]K\>$PNYTZpX:/J:fBOPHEJ"`)m*tM`\")C0+b0XGS!Nu*+=8\-Keae"/[J;N%o<[(,o:9%l#ih1h\3B@I;N2!5:XN(9%&k_rbs7I]h5@-+;oiPaKSb'hjY0gKg(W5F(AGE@F8kj1!GR.=]*n\jPW6ui>(,Be6b(EF%_k1>YMXrb.XL"XSeH+&RE!9'>LZ55B\ojSsc>crP1l64FSQQ:s#K]-gplW]SD^1jfH+f-Y+[.rd-=6pd545\5C#-Ou?#t#YZ3H-4%L>Y/64]Z,=)1\["c0Qh_fhBGt-7^u8>833E/MJfd1?<n>>bm[fAA[#!=lDdSe^YMA@GjK59'Kegk8?>_B:#*"NBp!4L5ZU5+sGk;%PtTPsAAI=#iHKT$C=jj6_Ku`f$r<$2O?U3<`bS8@ffoS;;3C3U[_WG?d9*d/9HZ+lP%.um&t9[!dVAFa=@o[$A42sg`=jh1%_7=Q%m%lREJeDGI#`";CVAP2r`m/aI0#SQX0n)bsD&0==Tcce=?H81##bonrBb%OfZW\O^&^GVp?FMrEMM5"aN1rS4$1*rkj$<;`OT87S%\b<K[SaRFF<f?LYYG6<_o(F^IfoK6o$+uZEQ^c*;5IHIXramH*8s.6iKi/;@\q#Yno1:O(MfG<aToL#`g-&M!<=_V*6uG2Ei^GJ-%A^*p*"nmUp\^tZi#R7BBkUX)n%n1(UG/GAP9q^-;XWn%<I"e#LB]=I^'bG>@;OIMGicl'CgW7'G!9H%9=@8:cZ0T$CJhTgdn.=7E%CsLoO8M^,a\4]0=ZAeF<bZG>`,r][[p:t/=!3VgtnFYX(I&kZ7JQ54D#ZOeZS>0T@iT&$>F!'g=<I4!E)(OVeT>7bWZ/8^0[*6?V%lA+T"]b:JTVu?4*4A\bf8dcb0)%6lQ[T:RJ*m%N=p_'mT0i#1hOgTRQ9IE(IEWl5tVC.Okfu="Wm/$bo5s2/@'G.V9Q/Bmc454DQ%qa81'$\u*)=?jU+kg0nabBGug#!p3c['mVB#QP3c^'c4Jq*p/UbQuQS>HA5Z!4iaqZTk,==Cf>f0CfU+k02:B,V_WU!g;X@*s`]d%=A7i=H;RrCjWQs4lLHR8e/O3[B$e&NoHDdL_2V*[QZ+)7]'TK"_1=Pl=.hEr5(g*hor9AD*ENeNhBR]WYdDIHc3*QE1#N\acCj3@%Wn`fBKlpX`NDA?5VP-:a)NkQ-O`]XN+7Equd$Yom$d-Yb&8J81*rRe]5m>(L-2M`?KD^euMg5i=:)pbA]$i20h8p*)r.g%<hgW??%nD0uas8;NHkLXXdH2-mfY>674s7Z<]oC;bTnF=]N0@,\TT0D3dci6+WH2RI6r8m8-fB:1-5CNMiORk-#q6rS;rl=U@h]KnR^3k?W%3a;Q%hYm!=?_:\4If=HGi:5k!f>m(S4C<Q8Q=#)eqXNq=frG!CX$;%s5/2RHE^&c)=FR+*"^UtihiHr-Sr`:=p?BJMn,DmUL]7B&_ffV~>%AI9_PrivateDataEnd