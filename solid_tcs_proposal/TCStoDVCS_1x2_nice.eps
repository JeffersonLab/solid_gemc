%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TCStoDVCS_1x2_nice.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 04/01/13
%%BoundingBox: 0 0 463 134
%%HiResBoundingBox: 0 0 462.9448 133.5581
%%CropBox: 0 0 462.9448 133.5581
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-01-04T13:19:27+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>76</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgATAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qlPmaLzNJYIPLs1vD&#xA;fCQF2ugTGY+JqKKrGvKnh/DFUFY6Aky3M4m+N7u5ZUkghdB+/fY809Rh8nHtthtmJDqFc2BtyDc6&#xA;Va3ca1PrWsao49/RkrsB/LIT7Y7JqJ5GkVaWvl68Bkt7a3do/hdfSVXQmh4ujAMp9mFcFMZRI5qh&#xA;0LRjT/QYPhUoB6a04tSopT/JxYtnRNGLcjYwVrWvpp129v8AJGKtx6LpEcaxrZQcUAVaxqTQbdSK&#xA;nFW/0PpPIN9SgqAQD6SdD9HtirR0bSDyrYwHkOLfu03G/t74q0dE0cuXNlAWIUH92tPhJI2pTqcV&#xA;WvoOiOrK1jBRgQaRqDvWu4FR9o4qq/onSv8Alig/5FJ/TFWv0PpPIt9SgqQAT6SdB9HvirR0bSCG&#xA;BsYKP9r92m+1PDFVLSLeKCfU0iRY0+tAhEQoorbw9BWh+Y2+nFUxxV2KsTfV9Q1WzEOp6JLYwCW0&#xA;djI6MrSi+UCIBwlfhVHrSnxcRuMVZF+idK/5YoP+RSf0xVoaPpKigsoAKk/3SdSa+GKtDRtIAUCx&#xA;gon2f3abbU8MVWjQtGA/3hg2JYVjU7s3I9R44q79BaNyVvqMAZTyFI1G5r123+2cVVP0TpX/ACxQ&#xA;f8ik/piq39DaRw4fUYOFONPTTp08MVb/AEPpPIN9SgqAQD6SdD9HtiqxNC0ZEVBYwUUKorGpNE+z&#xA;uRU4q5dC0ZXDrYwAqCo/drShp2pT9kYqvbR9JZSpsoCCKEeknQ/Rirjo+ksKGygIqD/dJ1Br4Yql&#xA;+v6TpC6Nfv8AU4lJgYckSNWGxoQzUApWvj4b4qmjX9itublrmJbccqzF1CfBXn8VafDxNfCmKuvr&#xA;+ysLV7u9mS3to6c5pCFUcmCrUnxYgDFUFpH1lraf05otrm6HRpKH15aA/GPFdvY+Ox2VHPHeHkFm&#xA;RQa0IjJIryp1em1V7dj47NhUHe6O9zIJ1uWgukBEVzEqiRQS5Ck9HUcl+FgQePTfCJBlGZHuUU1H&#xA;VbWcW+oLC7OQtvOgaKOVvioORMnCRvgUI3uQxrxU0CyMQd4plDdRyN6ZDRy7/upBRiFpUjsw+Ibq&#xA;T1yJDWrYFdirsVdirsVdirsVdiqB05la71PiQaXSg0blQi3h2I/Z+X098VRJvLQQvOZ4xDGxWSUs&#xA;vFWVuLAtWgIbY++KqisrKGUhlYVVhuCD3GKsVj81pq9uqLYXdmyvaTFbpPSYVvhGENWUcjw5U5dC&#xA;KjehVZXirsVdirsVdirsVdirsVdirsVdirsVS/zC4TRL01oTC4G4HVT4sn68VePWsGoPper6b9aj&#xA;j0XQjKrQNYvHbPcr68zTQFGN5xhWLghoxVxsW4bqs78iWl9rPluZtef67pd76a2emXdrDbyW8UIo&#xA;Y5Y4vgr6i8lFAVFAdxUqsp0nl9WkrX/em5pyp0+sP0p2xVG4q7FVk0EM8LwzIssMgKyRuAysD1BB&#xA;64pBrklFwkunxmO5keTTB/dX1eU9qegMjMG5Iv8Avw9P26irZIFsoS5fUmMN0RL6M5UO5/cSKCFk&#xA;Ury+GtRyFG+HkTQcunRI6hqRORV2KuxV2KuxV2KuxVB2HL61qVa0+sLxrSlPq8PSnb54q8miTUwf&#xA;MWnwXEMOjWU8kl9bSWbLaSsJYk/cuJBd0j4NUryVdkQ0UYqy38qJ9cuNFaS+uHewgitrOxtJ7eO2&#xA;nia2hCXDOsZNFkc1jVgGVaVxVGxeddH1uMQ6e0hlSS2mcFRUIL1YiCF9Qgnj3G46HY0VZXirsVdi&#xA;rsVdirsVdirsVdirsVdiqF1DUrSwiElw9C5CRRjd5HPRUXuf1d9sIFsoxJSS8gu7nTLrV79DHN9W&#xA;kFlaAMTbpItCW+Fv3jLTkePwio8ThO2wTKQqgxzTtB83WureZr1JNO/Smp3arZGKR2RZo7Sf0zcg&#xA;26lWEMkI25igG1al4sE28p6Xr+jflvZ2empZz6pHG0lqiSu1mUmnMi8JGjifj6T/AA8lqDsS32iq&#xA;yTRhS2m6UN1dEUUp/u9+tep98VR2KuxV2KuxVJ57GSwX/Ro2m03kGe0Qn1ISDXnb+KjvF4fZ/laQ&#xA;LbYlz5/jn+v5ozTr9LmNQHElQWimUgrJGDQMKd9wGFB8VdqYyDWQQaKMyKHYq7FXYq7FXYqgdOFL&#xA;vU60qbpSSFK/8e8NKk15bd8VYoui63a+YNe1p47drm9e2Fnbi4dhximSO3ElYV9MSCLk3HlRmbrQ&#xA;VVRn5d6M+gaDPb3dxDIz3bkzpIXVpFVIZKs6x/F6sTVFPliqMm8xaLqtlGbKf1E9a0m5vHJGnAXq&#xA;x15SJxrzjYAdfl1xVkOKuxV2KuxV2KuxV2KuxV2KuxVJ59daeYWukp9ZkJAkuaEwxg1+LYrz+y37&#xA;QWoK8uXwmYj1LZwAfV8vxyVNM0X0Jje3j/WNQdV5St8XDbdUai7VJ+yqj/JrUlMugRKZO3RU8wcP&#xA;0Hfcyqj0XFXIAqRtuwYdfbIMGIJ5j1iTyemtxpYJrLXclWVZhayuI3ijYAkSNziCBakVNPs9lWYa&#xA;fd2cOhWt0/p2dmltHIan04ooxGD+1TiqjxxVdpPL6tJWv+9NzTlTp9YfpTtiqNxV2KuxV2KuxVKr&#xA;/Rj6wvLDglyr+q0L1EUj0K8qgExyFWK81G4NGDDJCTYJAiiqaVq6XRNrcD0NSiXlNauOL8QacwKk&#xA;FT4qzKOnI4yj1HJjKBHuTHIsXYq7FXYq7FUHYcvrWpVrT6wvGtKU+rw9KdvnirEz5kv7nypqepM9&#xA;gNTtLuO3jmVn+qVWaN4A7sRUD1hyPJffgaqqrJvLdxHdaBYXqIkf16BLx1i5BOdyPWkK8wGoXkJ3&#xA;FcVSySbyo0Kz6S1l60klm7y23pBmh+uqgJZCpKc0YdaVB69MVZLirsVdirsVdirsVdirsVQOpazY&#xA;2FFlYyXDCsdrEOcrjxC9h25Gg98IiSyjAn3IFtP1XVX/ANyRFtZA/wC8MZ5c6MP71qfGrAHbpQ9D&#xA;1yVgMuIR+n5pxb20NvEsUK8UX6Sfck9T75Em2tUwKl/mBwmh3xLcR6LipNNyKDfkn68VeLad+X2i&#xA;3B8yaJ+i43n0kNp9hpaXE4/czRz3sYmuHco8tw5VnbhstFLGrYqzn8uvK+h6h5LmnvraC7HmIB9T&#xA;jUSfVpDHVB6SSvIyAFeQPwty+MgMTirMtGVVtpuKgcrq6LUUpU+u+5r1Pv3xVHYq7FXYq7FXYq7F&#xA;UJqWlWmoRqs4KyxHlb3EZ4yxP/Mjdvl0PcEYQaZRkQgjqOoaZ8Oqx+vaD7OpQKTQD/lohFSn+slV&#xA;7nh0w1fJlwiXL5JrDNDPEssLrLE4qkiEMpHiCNjkWBFc1+KHYq7FUDpyqt3qfEAVulJovGpNvDuT&#xA;+18/o7Yq8kHk6zudR8w6TJZili7LYWkbFZHFzPEyerc+r1cGqLx+BWBqDirJ/wAqtJ0+50m8v7mK&#xA;GS5nkgt54I46Wq/UYgIXhRnlqWEnMybFq9PFVkB07y1awJJpMNsksk1qOVuRyMYvEBFUqeAeu32a&#xA;1r3xVkWKuxV2KuxV2KuxVB3usWFmzJJJynVeRt4wZJOP8xValV/ymovicIFsxAn3Je0vmDUnCwAa&#xA;ZZHrK1HnbdgQOqL9ntUEEFXyVAc0+keZ+xHadotjY1aJC87nlJcSEvIzUUEsxqSTxGAyJYykTzR2&#xA;RYuxV2KoHXf+ONfbE/uJNgWB+ye6gnFUgg/LmzhOrFdVv3fWDWaSSSNpItpwwgfhyRT9ZYhSSFO4&#xA;oS1VUbb6Rd+WfKb2WhJLqd5bmSSBbgxmWaSaYyMZXLW6sfjNXLVPU8m6qploxrbTdKC6ugKMX/3e&#xA;/WvQ+2Ko7FXYq7FXYq7FXYq7FXEAggioPUYqlM+gmOZ7nSrhrC4kfnKqjnDISwLGSI7EkftCje+T&#xA;4u9mJ9DuFi69cWj+lrVqbbYUvIay2zbVO9A6dCfiFAOpx4e5PADyKbQzwzxLNBIssTiqSIQykeII&#xA;2OQYEVzX4oQOnGt3qdaVF0oIDFv+PeGlQacdu2KpLB5G9DUtY1NdWumvtYZWMjLb8bcxuDD6KLEq&#xA;n00RE/ecuXEVrviqv5W8k6b5e0c6TFPPe23rCdJLplMoKoiKC0axghRGKbYqpP5Q8vaTEs2n2npS&#xA;PJaW7VeWUekL1ZePGQyCgd2PTv1GKsmxV2KqVzeWlqnqXM8cEf8APIyoPvYjGkiJPJC/puwb/ecy&#xA;XVfstbxvKhPh6igxj6Ww0y8M9dkPLrF85KQWyRMNmEr+rKv29/RthNUVjYbuu4p1yQgtRHMtfo/V&#xA;br/ey5cJX4kQ+gmx7LCxk3A7z99x2x2CeMDkP0ouz0ewtFVYohRTyAoAvKiguEUKgY8a1A64DIsD&#xA;Inmjcih2KuxV2KuxVL/MCB9DvgV5D0XNCK7gVG3F/wBWKphiqyaaGGMyTOsca/adyFUVNNycVQuk&#xA;8vq0la/703NOVOn1h+lO2Ko3FXYq7FXYq7FXYq7FXYq7FXMoYFWFQdiD0IxVLJvL1iZ3ubN5NOuZ&#xA;GLyS2hCB2JJLPGweJ2JYmrITkuLvZiZ5HcLQfMtsACLbUU2+IFrWUDbt++Rz17pjsvpPkraU8kkt&#xA;+7xvEzTofSk4ErW2hqv7ssNj13O/tTIsCj8VU7i3jnQI5cAMGrHI8ZqN+qFTT26YqxCXyTpuiQGf&#xA;T57pZpnsbTkHiqsS3/q0XkEFec7bmp7b9MISCnwsdRk/vLi4ZD+w8sUTb0rvbxDxI+1/XDsy4/IO&#xA;OiB9mJ490lnubhD81eRV7+GNhfEP4AVLbRLeCQyRLFbyeNtBFH95Ic/jjxIMyeZRLafauT6qmYEU&#xA;KyszoftD7DErvzPb+GPEWKuqqoooAHgNuu+RVvFXYq7FXYq7FXYq7FUv8wU/Qd9U0pC+4PHt4hk/&#xA;XiqYYqkvnK2jufLd3byaadWST0lbT1d4jJ+9T9tKsvH7VfbfbFVLStNumNvM9r9St7qKW6voFubj&#xA;1Uu5mjkoACi0q8vL5LTbFU1/Rlt/PP8A9JE//NeKu/Rlt/PP/wBJE/8AzXirv0Zbfzz/APSRP/zX&#xA;iqU+ZDeabZRzabY3Op3DyemYFurhOK8GbmSC/dQPpxVFWulXCXLpKStgsUa2wS6umlEgLh+ZZgCv&#xA;Hhx715V7YqjP0Zbfzz/9JE//ADXirv0Zbfzz/wDSRP8A814q79GW388//SRP/wA14qk+vfWrW4sb&#xA;Wz0651CK+cxXUwvLiNYEJVebFefZz4dPuVTC00+VvV+th4yGX0hHdXDjj6aFqsWWtJC4Gw2ptiqh&#xA;q02m6YLT1jdSSX1zHZ20Uc8xZpJKnvIqgKis7EnoNqmgKqP/AEZbfzz/APSRP/zXiq6zsLWz9X6u&#xA;pUzyerMWZnLPxVKkuWP2UGKojFVO4iklQKkzwEMDzjCEkD9n41cUPyrirC49L1oeap7K5hub3S50&#xA;En1v6zNbxRus/wBZXiFq1Ueiij1psaitFWT2WmyG3U3jOLirchFcXHGnI8PtPWvGlffFVf8ARlt/&#xA;PP8A9JE//NeKu/Rlt/PP/wBJE/8AzXirv0Zbfzz/APSRP/zXirH4DrF1rN7ZnS5oLS0Bay1GW9uQ&#xA;kj0KiqAgkHl2Pj/k1VTu10w/VYfrbyfWuC/WPSuLj0/UoOfDk9eNelcVVf0Zbfzz/wDSRP8A814q&#xA;79GW388//SRP/wA14q79GW388/8A0kT/APNeKsf059Wvru9WTSp7JLQtHbXMt9ckTgnYpHRNjwBN&#xA;TtUdTUBVkH6Mtv55/wDpIn/5rxVAaJNpus6dHqNr9bW2mZxC0k8yl0RygkUCQ/C/Hktd6dhiqMm0&#xA;aymiaKRp2jcUZfrNwKjw2kxVG4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqlXmD9AcdP8A0xxr9et/&#xA;0b9vn9c5H0vT9P4605cu3Dly+Dliqa4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUo8p/4e&#xA;/QUP+HafofnN9V4ep6f98/P0vU/3Xz5cOPwcacPhpiqb4q//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-01-04T13:19:28+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-01-04T13:19:28+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0280117407206811994CB34D1D6C825B</stEvt:instanceID>
                  <stEvt:when>2013-01-04T13:19:28+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:0280117407206811994CB34D1D6C825B</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:0280117407206811994CB34D1D6C825B</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:0280117407206811994CB34D1D6C825B</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -133.558 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 133.558 li
462.945 133.558 li
462.945 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.8 lw
2 lc
0 lj
3.25 ml
[.72 2.88 ] 0 dsh
true sadj
31.5674 21.4219 mo
35.0967 21.3857 li
38.6255 21.3159 li
42.1538 21.1318 li
45.6826 20.9019 li
49.2114 20.6206 li
52.7397 20.3066 li
56.2686 20.0576 li
59.7974 19.8628 li
63.3257 19.6909 li
66.8545 19.7197 li
70.3838 19.8716 li
73.9116 20.2139 li
77.4404 20.8228 li
80.9697 21.7358 li
84.4976 22.8926 li
88.0264 24.5298 li
91.5557 26.418 li
95.0835 28.7158 li
98.6128 31.3579 li
102.142 34.3315 li
105.669 37.585 li
109.199 41.0659 li
112.728 44.6958 li
116.255 48.4849 li
119.785 52.3076 li
123.313 56.1099 li
126.842 59.8477 li
130.371 63.4956 li
133.899 67.0122 li
137.428 70.3501 li
140.957 73.5132 li
144.485 76.4985 li
148.014 79.3179 li
151.542 81.9019 li
155.072 84.396 li
158.6 86.6821 li
162.128 88.8188 li
165.658 90.8696 li
169.187 92.7388 li
172.715 94.5854 li
176.244 96.271 li
179.772 97.9331 li
183.301 99.4897 li
186.83 100.99 li
190.358 102.424 li
193.887 103.788 li
197.416 105.082 li
200.944 106.297 li
204.473 107.437 li
208.001 108.498 li
211.531 109.484 li
215.059 110.4 li
218.587 111.25 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
31.5674 3.64502 mo
35.0967 4.15869 li
38.6255 4.81885 li
42.1538 5.64355 li
45.6826 6.62061 li
49.2114 7.77002 li
52.7397 9.09863 li
56.2686 10.6206 li
59.7974 12.313 li
63.3257 14.2026 li
66.8545 16.2739 li
70.3838 18.5029 li
73.9116 20.8979 li
77.4404 23.4507 li
80.9697 26.1279 li
84.4976 28.9229 li
88.0264 31.8149 li
91.5557 34.7827 li
95.0835 37.8027 li
98.6128 40.855 li
102.142 43.9238 li
105.669 46.9829 li
109.199 50.022 li
112.728 53.0117 li
116.255 55.9556 li
119.785 58.8369 li
123.313 61.644 li
126.842 64.3687 li
130.371 67.0142 li
133.899 69.5747 li
137.428 72.0415 li
140.957 74.4282 li
144.485 76.7271 li
148.014 78.9517 li
151.542 81.0972 li
155.072 83.1714 li
158.6 85.1831 li
162.128 87.1411 li
165.658 89.0435 li
169.187 90.9038 li
172.715 92.7144 li
176.244 94.4888 li
179.772 96.2202 li
183.301 97.9087 li
186.83 99.5503 li
190.358 101.133 li
193.887 102.656 li
197.416 104.106 li
200.944 105.472 li
204.473 106.751 li
208.001 107.942 li
211.531 109.042 li
215.059 110.058 li
218.587 111 li
.6 .239216 .443137 rgb
@
.4 lw
222.043 1.29053 mo
222.043 119.011 li
31.5674 1.29053 mo
222.043 1.29053 li
31.5674 119.011 mo
31.5674 1.29053 li
222.043 119.011 mo
31.5674 119.011 li
0 0 0 rgb
@
0 lc
172.715 119.011 mo
172.715 116.75 li
@
167.711 123.076 mo
167.712 123.081 167.712 123.092 167.712 123.112 cv
167.712 126.921 li
167.712 127.083 167.756 127.187 167.843 127.231 cv
167.93 127.276 168.092 127.302 168.33 127.31 cv
168.33 127.399 li
166.542 127.399 li
166.542 127.304 li
166.797 127.292 166.964 127.256 167.042 127.2 cv
167.12 127.143 167.159 127.019 167.159 126.83 cv
167.159 123.9 li
167.159 123.798 167.146 123.721 167.121 123.668 cv
167.096 123.616 167.041 123.589 166.957 123.589 cv
166.901 123.589 166.83 123.605 166.743 123.635 cv
166.655 123.666 166.573 123.698 166.498 123.732 cv
166.498 123.643 li
167.659 123.051 li
167.697 123.051 li
167.705 123.062 167.71 123.07 167.711 123.076 cv
cp
.137255 .121569 .12549 rgb
f
170.969 126.77 mo
171.085 126.43 171.143 125.939 171.143 125.296 cv
171.143 124.784 171.108 124.375 171.039 124.07 cv
170.908 123.5 170.663 123.216 170.304 123.216 cv
169.946 123.216 169.7 123.509 169.567 124.095 cv
169.498 124.407 169.463 124.818 169.463 125.328 cv
169.463 125.806 169.499 126.189 169.57 126.476 cv
169.705 127.011 169.958 127.279 170.33 127.279 cv
170.64 127.279 170.853 127.109 170.969 126.77 cv
cp
171.45 123.808 mo
171.663 124.219 171.77 124.692 171.77 125.225 cv
171.77 125.645 171.704 126.041 171.573 126.412 cv
171.326 127.11 170.899 127.459 170.292 127.459 cv
169.876 127.459 169.534 127.27 169.267 126.893 cv
168.979 126.49 168.836 125.943 168.836 125.25 cv
168.836 124.707 168.932 124.238 169.124 123.845 cv
169.384 123.312 169.782 123.045 170.32 123.045 cv
170.805 123.045 171.182 123.299 171.45 123.808 cv
cp
f
172.841 123.945 mo
172.841 123.687 li
175.201 123.687 li
175.201 123.945 li
172.841 123.945 li
cp
f
178.409 121.93 mo
178.409 121.934 178.41 121.943 178.41 121.957 cv
178.41 124.662 li
178.41 124.777 178.44 124.85 178.502 124.881 cv
178.564 124.913 178.679 124.931 178.848 124.938 cv
178.848 125 li
177.579 125 li
177.579 124.933 li
177.76 124.924 177.878 124.899 177.934 124.859 cv
177.989 124.819 178.017 124.731 178.017 124.596 cv
178.017 122.516 li
178.017 122.444 178.008 122.389 177.99 122.352 cv
177.972 122.314 177.933 122.295 177.873 122.295 cv
177.834 122.295 177.783 122.306 177.721 122.329 cv
177.659 122.35 177.601 122.373 177.547 122.397 cv
177.547 122.333 li
178.372 121.914 li
178.398 121.914 li
178.404 121.921 178.408 121.927 178.409 121.93 cv
cp
f
102.142 119.011 mo
102.142 116.75 li
0 0 0 rgb
@
97.1484 122.85 mo
97.1494 122.855 97.1499 122.867 97.1499 122.886 cv
97.1499 126.696 li
97.1499 126.858 97.1934 126.961 97.2803 127.005 cv
97.3672 127.05 97.5293 127.077 97.7671 127.084 cv
97.7671 127.173 li
95.9795 127.173 li
95.9795 127.079 li
96.2344 127.066 96.4014 127.031 96.4795 126.974 cv
96.5571 126.917 96.5962 126.793 96.5962 126.604 cv
96.5962 123.674 li
96.5962 123.573 96.5835 123.496 96.5586 123.443 cv
96.5332 123.39 96.478 123.364 96.394 123.364 cv
96.3389 123.364 96.2676 123.379 96.1802 123.41 cv
96.0928 123.44 96.0107 123.472 95.9351 123.506 cv
95.9351 123.417 li
97.0962 122.826 li
97.1343 122.826 li
97.1426 122.836 97.1475 122.844 97.1484 122.85 cv
cp
.137255 .121569 .12549 rgb
f
100.406 126.544 mo
100.522 126.205 100.581 125.713 100.581 125.071 cv
100.581 124.558 100.545 124.15 100.476 123.844 cv
100.345 123.275 100.101 122.991 99.7417 122.991 cv
99.3833 122.991 99.1377 123.284 99.0049 123.87 cv
98.9351 124.181 98.9004 124.592 98.9004 125.102 cv
98.9004 125.581 98.936 125.963 99.0078 126.25 cv
99.1426 126.786 99.396 127.053 99.7671 127.053 cv
100.077 127.053 100.291 126.883 100.406 126.544 cv
cp
100.887 123.583 mo
101.1 123.994 101.207 124.466 101.207 125 cv
101.207 125.419 101.142 125.815 101.011 126.186 cv
100.764 126.884 100.337 127.234 99.729 127.234 cv
99.3135 127.234 98.9717 127.044 98.7041 126.667 cv
98.417 126.264 98.2739 125.717 98.2739 125.025 cv
98.2739 124.481 98.3696 124.012 98.5615 123.62 cv
98.8213 123.086 99.2197 122.82 99.7578 122.82 cv
100.243 122.82 100.619 123.074 100.887 123.583 cv
cp
f
102.263 123.719 mo
102.263 123.461 li
104.623 123.461 li
104.623 123.719 li
102.263 123.719 li
cp
f
106.604 124.723 mo
107.152 124.155 107.524 123.737 107.72 123.47 cv
107.917 123.205 108.015 122.945 108.015 122.692 cv
108.015 122.47 107.955 122.301 107.835 122.186 cv
107.715 122.07 107.572 122.011 107.406 122.011 cv
107.201 122.011 107.034 122.086 106.907 122.236 cv
106.837 122.319 106.77 122.445 106.705 122.616 cv
106.608 122.595 li
106.683 122.25 106.81 122.012 106.989 121.877 cv
107.168 121.744 107.36 121.677 107.565 121.677 cv
107.818 121.677 108.023 121.756 108.18 121.916 cv
108.336 122.076 108.415 122.27 108.415 122.5 cv
108.415 122.747 108.33 122.983 108.161 123.21 cv
107.991 123.437 107.624 123.842 107.057 124.424 cv
108.089 124.424 li
108.232 124.424 108.333 124.408 108.392 124.373 cv
108.451 124.338 108.517 124.254 108.59 124.122 cv
108.648 124.148 li
108.399 124.775 li
106.604 124.775 li
106.604 124.723 li
cp
f
31.5674 119.011 mo
31.5674 116.75 li
0 0 0 rgb
@
26.5703 122.85 mo
26.5713 122.855 26.5718 122.867 26.5718 122.886 cv
26.5718 126.696 li
26.5718 126.858 26.6152 126.961 26.7021 127.005 cv
26.7891 127.05 26.9512 127.077 27.189 127.084 cv
27.189 127.173 li
25.4014 127.173 li
25.4014 127.079 li
25.6563 127.066 25.8232 127.031 25.9014 126.974 cv
25.979 126.917 26.0181 126.793 26.0181 126.604 cv
26.0181 123.674 li
26.0181 123.573 26.0054 123.496 25.9805 123.443 cv
25.9551 123.39 25.8999 123.364 25.8159 123.364 cv
25.7607 123.364 25.6895 123.379 25.6021 123.41 cv
25.5146 123.44 25.4326 123.472 25.3569 123.506 cv
25.3569 123.417 li
26.5181 122.826 li
26.5562 122.826 li
26.5645 122.836 26.5693 122.844 26.5703 122.85 cv
cp
.137255 .121569 .12549 rgb
f
29.8281 126.544 mo
29.9443 126.205 30.0024 125.713 30.0024 125.071 cv
30.0024 124.558 29.9673 124.15 29.8979 123.844 cv
29.7671 123.275 29.5225 122.991 29.1636 122.991 cv
28.8052 122.991 28.5596 123.284 28.4268 123.87 cv
28.3569 124.181 28.3223 124.592 28.3223 125.102 cv
28.3223 125.581 28.3579 125.963 28.4297 126.25 cv
28.5645 126.786 28.8179 127.053 29.189 127.053 cv
29.499 127.053 29.7124 126.883 29.8281 126.544 cv
cp
30.3091 123.583 mo
30.522 123.994 30.6289 124.466 30.6289 125 cv
30.6289 125.419 30.5635 125.815 30.4326 126.186 cv
30.1855 126.884 29.7588 127.234 29.1509 127.234 cv
28.7354 127.234 28.3936 127.044 28.126 126.667 cv
27.8389 126.264 27.6958 125.717 27.6958 125.025 cv
27.6958 124.481 27.7915 124.012 27.9834 123.62 cv
28.2432 123.086 28.6416 122.82 29.1797 122.82 cv
29.6646 122.82 30.041 123.074 30.3091 123.583 cv
cp
f
31.7007 123.719 mo
31.7007 123.461 li
34.0601 123.461 li
34.0601 123.719 li
31.7007 123.719 li
cp
f
36.5728 124.513 mo
36.7085 124.599 36.8232 124.642 36.9175 124.642 cv
37.1274 124.642 37.2832 124.572 37.3848 124.43 cv
37.4868 124.288 37.5376 124.134 37.5376 123.967 cv
37.5376 123.807 37.4966 123.666 37.4141 123.544 cv
37.2749 123.338 37.0396 123.236 36.7085 123.236 cv
36.689 123.236 36.6704 123.237 36.6523 123.237 cv
36.6348 123.238 36.6138 123.24 36.5898 123.243 cv
36.585 123.184 li
36.8247 123.097 37.0137 122.998 37.1514 122.885 cv
37.2891 122.773 37.3579 122.625 37.3579 122.441 cv
37.3579 122.278 37.3037 122.153 37.1948 122.068 cv
37.0864 121.982 36.9624 121.94 36.8232 121.94 cv
36.6587 121.94 36.5132 122 36.3872 122.122 cv
36.3184 122.188 36.2441 122.29 36.165 122.427 cv
36.0952 122.412 li
36.1553 122.184 36.2666 122.001 36.4302 121.866 cv
36.5933 121.729 36.7822 121.662 36.9961 121.662 cv
37.2256 121.662 37.4023 121.724 37.5273 121.85 cv
37.6528 121.976 37.7153 122.121 37.7153 122.286 cv
37.7153 122.431 37.6636 122.564 37.5601 122.686 cv
37.502 122.754 37.4111 122.832 37.2881 122.917 cv
37.4321 122.978 37.5474 123.05 37.6343 123.132 cv
37.7974 123.29 37.8789 123.489 37.8789 123.73 cv
37.8789 124.015 37.7671 124.266 37.5435 124.483 cv
37.3193 124.7 37.0005 124.809 36.5874 124.809 cv
36.4033 124.809 36.2739 124.782 36.1997 124.727 cv
36.1255 124.672 36.0884 124.613 36.0884 124.55 cv
36.0884 124.511 36.1011 124.474 36.1255 124.438 cv
36.1504 124.402 36.1904 124.384 36.2461 124.384 cv
36.3281 124.384 36.437 124.427 36.5728 124.513 cv
cp
f
31.5674 116.657 mo
33.8296 116.657 li
0 0 0 rgb
@
27.8516 118.646 mo
27.9678 118.306 28.0259 117.815 28.0259 117.172 cv
28.0259 116.66 27.9907 116.251 27.9214 115.946 cv
27.7905 115.376 27.5459 115.092 27.187 115.092 cv
26.8286 115.092 26.583 115.385 26.4502 115.971 cv
26.3804 116.283 26.3457 116.694 26.3457 117.204 cv
26.3457 117.682 26.3813 118.065 26.4531 118.352 cv
26.5879 118.887 26.8413 119.155 27.2124 119.155 cv
27.5225 119.155 27.7358 118.985 27.8516 118.646 cv
cp
28.3325 115.684 mo
28.5454 116.095 28.6523 116.568 28.6523 117.101 cv
28.6523 117.521 28.5869 117.917 28.4561 118.288 cv
28.209 118.986 27.7822 119.335 27.1743 119.335 cv
26.7588 119.335 26.417 119.146 26.1494 118.769 cv
25.8623 118.366 25.7192 117.819 25.7192 117.126 cv
25.7192 116.583 25.8149 116.114 26.0068 115.721 cv
26.2666 115.188 26.665 114.921 27.2031 114.921 cv
27.688 114.921 28.0645 115.175 28.3325 115.684 cv
cp
.137255 .121569 .12549 rgb
f
31.5674 94.603 mo
33.8296 94.603 li
31.5674 100.116 mo
32.9248 100.116 li
31.5674 105.629 mo
32.9248 105.629 li
31.5674 111.143 mo
32.9248 111.143 li
0 0 0 rgb
@
25.855 97.147 mo
26.627 96.3462 27.1514 95.7583 27.4277 95.3833 cv
27.7041 95.0083 27.8423 94.6421 27.8423 94.2866 cv
27.8423 93.9741 27.7578 93.7368 27.5889 93.5737 cv
27.4204 93.4097 27.2188 93.3286 26.9849 93.3286 cv
26.6958 93.3286 26.4614 93.4341 26.2822 93.644 cv
26.1831 93.7603 26.0884 93.939 25.9976 94.1792 cv
25.8613 94.1499 li
25.9668 93.6655 26.1455 93.3286 26.3979 93.1401 cv
26.6499 92.9517 26.9204 92.8569 27.2095 92.8569 cv
27.5659 92.8569 27.8545 92.9692 28.0747 93.1938 cv
28.2949 93.4185 28.4053 93.6929 28.4053 94.0171 cv
28.4053 94.3628 28.2861 94.6958 28.0479 95.0161 cv
27.8091 95.3364 27.291 95.9067 26.4937 96.7271 cv
27.9463 96.7271 li
28.1489 96.7271 28.2915 96.7026 28.3735 96.6538 cv
28.4561 96.606 28.5488 96.4878 28.6523 96.3003 cv
28.7344 96.3374 li
28.3833 97.2202 li
25.855 97.2202 li
25.855 97.147 li
cp
.137255 .121569 .12549 rgb
f
31.5674 72.5483 mo
33.8296 72.5483 li
31.5674 78.063 mo
32.9248 78.063 li
31.5674 83.5757 mo
32.9248 83.5757 li
31.5674 89.0894 mo
32.9248 89.0894 li
0 0 0 rgb
@
27.5513 71.479 mo
25.998 73.6733 li
27.5513 73.6733 li
27.5513 71.479 li
cp
27.7598 70.8257 mo
28.0605 70.8257 li
28.0605 73.6733 li
28.7217 73.6733 li
28.7217 74.0942 li
28.0605 74.0942 li
28.0605 75.1733 li
27.5576 75.1733 li
27.5576 74.0942 li
25.7349 74.0942 li
25.7349 73.6733 li
27.7598 70.8257 li
cp
.137255 .121569 .12549 rgb
f
31.5674 50.4946 mo
33.8296 50.4946 li
31.5674 56.0088 mo
32.9248 56.0088 li
31.5674 61.522 mo
32.9248 61.522 li
31.5674 67.0356 mo
32.9248 67.0356 li
0 0 0 rgb
@
27.9814 51.1758 mo
27.8335 50.813 27.5825 50.6318 27.2285 50.6318 cv
26.9014 50.6318 26.6841 50.7285 26.5767 50.9229 cv
26.5132 51.0366 26.4814 51.2266 26.4814 51.4922 cv
26.4814 51.8359 26.5547 52.1724 26.7017 52.5015 cv
26.8481 52.8306 27.0796 52.9951 27.396 52.9951 cv
27.647 52.9951 27.8296 52.8882 27.9434 52.6743 cv
28.0571 52.46 28.1143 52.2095 28.1143 51.9229 cv
28.1143 51.6421 28.0698 51.3931 27.9814 51.1758 cv
cp
28.3213 52.7231 mo
28.0737 53.0332 27.7515 53.1885 27.355 53.1885 cv
26.9834 53.1885 26.6455 53.0142 26.3408 52.666 cv
26.0361 52.3184 25.8838 51.855 25.8838 51.2773 cv
25.8838 50.5327 26.1787 49.8936 26.7695 49.3599 cv
27.2969 48.9126 27.8896 48.689 28.5479 48.689 cv
28.5635 48.7935 li
28.2998 48.8418 28.0728 48.9077 27.8818 48.9912 cv
27.6909 49.0747 27.5205 49.1909 27.3706 49.3408 cv
27.2168 49.4927 27.0723 49.6855 26.937 49.9199 cv
26.8022 50.1538 26.7095 50.3862 26.6587 50.6157 cv
26.7896 50.5356 26.9023 50.4766 26.9976 50.4385 cv
27.166 50.3711 27.3359 50.3374 27.5068 50.3374 cv
27.8423 50.3374 28.1235 50.4536 28.3516 50.6855 cv
28.5796 50.9175 28.6934 51.2485 28.6934 51.6792 cv
28.6934 52.0649 28.5693 52.4131 28.3213 52.7231 cv
cp
.137255 .121569 .12549 rgb
f
31.5674 28.4409 mo
33.8296 28.4409 li
31.5674 33.9546 mo
32.9248 33.9546 li
31.5674 39.4678 mo
32.9248 39.4678 li
31.5674 44.9819 mo
32.9248 44.9819 li
0 0 0 rgb
@
27.7441 28.1968 mo
27.875 28.0347 27.9404 27.8389 27.9404 27.6094 cv
27.9404 27.4092 27.8784 27.2393 27.7554 27.0991 cv
27.6318 26.959 27.4443 26.8887 27.1934 26.8887 cv
26.9995 26.8887 26.8394 26.9502 26.7124 27.0723 cv
26.5859 27.1943 26.5229 27.3428 26.5229 27.5176 cv
26.5229 27.7153 26.5972 27.8994 26.7456 28.0688 cv
26.8945 28.2383 27.0903 28.3979 27.3325 28.5474 cv
27.5308 28.4087 27.668 28.2915 27.7441 28.1968 cv
cp
27.8423 30.7588 mo
27.9668 30.624 28.0288 30.4556 28.0288 30.2534 cv
28.0288 30.0239 27.9629 29.8379 27.8311 29.6958 cv
27.6992 29.5537 27.4287 29.3384 27.0195 29.0498 cv
26.8379 29.1636 26.7061 29.311 26.624 29.4922 cv
26.5415 29.6733 26.5005 29.8481 26.5005 30.0166 cv
26.5005 30.3052 26.5747 30.5347 26.7236 30.7051 cv
26.8726 30.876 27.0615 30.9609 27.2915 30.9609 cv
27.5342 30.9609 27.7178 30.8936 27.8423 30.7588 cv
cp
26.2759 28.3794 mo
26.1196 28.1768 26.042 27.9531 26.042 27.7085 cv
26.042 27.4302 26.1572 27.1938 26.3882 26.9995 cv
26.6191 26.8057 26.9194 26.7085 27.2886 26.7085 cv
27.6279 26.7085 27.8979 26.8003 28.0986 26.9839 cv
28.2988 27.1675 28.3989 27.3804 28.3989 27.623 cv
28.3989 27.8701 28.2969 28.0913 28.0923 28.2876 cv
27.9741 28.3994 27.7832 28.5283 27.5195 28.6738 cv
27.8779 28.9395 28.1348 29.1709 28.29 29.3682 cv
28.4448 29.5654 28.5225 29.7979 28.5225 30.0659 cv
28.5225 30.3696 28.4082 30.6245 28.1792 30.8315 cv
27.9502 31.0381 27.644 31.1416 27.2598 31.1416 cv
26.916 31.1416 26.6211 31.0459 26.3755 30.855 cv
26.1299 30.6641 26.0068 30.4126 26.0068 30.1006 cv
26.0068 29.8325 26.0923 29.5962 26.2632 29.3916 cv
26.375 29.2588 26.5693 29.0996 26.8457 28.9141 cv
26.5669 28.6904 26.377 28.5122 26.2759 28.3794 cv
cp
.137255 .121569 .12549 rgb
f
31.5674 6.38672 mo
33.8296 6.38672 li
31.5674 11.9009 mo
32.9248 11.9009 li
31.5674 17.4136 mo
32.9248 17.4136 li
31.5674 22.9277 mo
32.9248 22.9277 li
0 0 0 rgb
@
24.5938 4.68555 mo
24.5947 4.69092 24.5952 4.70313 24.5952 4.72217 cv
24.5952 8.53174 li
24.5952 8.69385 24.6387 8.79736 24.7256 8.8418 cv
24.8125 8.88574 24.9746 8.91211 25.2124 8.9209 cv
25.2124 9.00928 li
23.4248 9.00928 li
23.4248 8.91455 li
23.6797 8.90186 23.8467 8.8667 23.9248 8.81006 cv
24.0024 8.75293 24.0415 8.62939 24.0415 8.43994 cv
24.0415 5.50977 li
24.0415 5.40869 24.0288 5.33154 24.0039 5.27881 cv
23.9785 5.22607 23.9233 5.19971 23.8394 5.19971 cv
23.7842 5.19971 23.7129 5.21484 23.6255 5.24561 cv
23.5381 5.27637 23.4561 5.30859 23.3804 5.34229 cv
23.3804 5.25342 li
24.5415 4.66162 li
24.5796 4.66162 li
24.5879 4.67236 24.5928 4.68018 24.5938 4.68555 cv
cp
.137255 .121569 .12549 rgb
f
27.8516 8.37988 mo
27.9678 8.04053 28.0259 7.5498 28.0259 6.90674 cv
28.0259 6.39453 27.9907 5.98584 27.9214 5.68018 cv
27.7905 5.11084 27.5459 4.82617 27.187 4.82617 cv
26.8286 4.82617 26.583 5.11914 26.4502 5.70508 cv
26.3804 6.01709 26.3457 6.42822 26.3457 6.93848 cv
26.3457 7.41699 26.3813 7.79932 26.4531 8.08594 cv
26.5879 8.62158 26.8413 8.88916 27.2124 8.88916 cv
27.5225 8.88916 27.7358 8.71924 27.8516 8.37988 cv
cp
28.3325 5.41797 mo
28.5454 5.82959 28.6523 6.30176 28.6523 6.83545 cv
28.6523 7.25537 28.5869 7.65088 28.4561 8.02197 cv
28.209 8.72021 27.7822 9.06934 27.1743 9.06934 cv
26.7588 9.06934 26.417 8.88086 26.1494 8.50293 cv
25.8623 8.1001 25.7192 7.55273 25.7192 6.86084 cv
25.7192 6.31689 25.8149 5.84814 26.0068 5.45605 cv
26.2666 4.92236 26.665 4.65576 27.2031 4.65576 cv
27.688 4.65576 28.0645 4.90967 28.3325 5.41797 cv
cp
f
222.043 1.29053 mo
222.043 3.55176 li
172.715 1.29053 mo
172.715 3.55176 li
151.47 1.29053 mo
151.47 3.55176 li
102.142 1.29053 mo
102.142 3.55176 li
80.8965 1.29053 mo
80.8965 3.55176 li
31.5674 1.29053 mo
31.5674 3.55176 li
0 0 0 rgb
@
.19 lw
215.205 1.29053 mo
215.205 2.00488 li
206.387 1.29053 mo
206.387 2.00488 li
193.959 1.29053 mo
193.959 2.00488 li
169.485 1.29053 mo
169.485 2.00488 li
165.875 1.29053 mo
165.875 2.00488 li
161.783 1.29053 mo
161.783 2.00488 li
157.059 1.29053 mo
157.059 2.00488 li
144.63 1.29053 mo
144.63 2.00488 li
135.813 1.29053 mo
135.813 2.00488 li
123.386 1.29053 mo
123.386 2.00488 li
98.9116 1.29053 mo
98.9116 2.00488 li
95.3018 1.29053 mo
95.3018 2.00488 li
91.2095 1.29053 mo
91.2095 2.00488 li
86.4844 1.29053 mo
86.4844 2.00488 li
74.0576 1.29053 mo
74.0576 2.00488 li
65.2397 1.29053 mo
65.2397 2.00488 li
52.8125 1.29053 mo
52.8125 2.00488 li
@
.4 lw
222.043 6.38672 mo
219.782 6.38672 li
222.043 11.9009 mo
220.687 11.9009 li
222.043 17.4136 mo
220.687 17.4136 li
222.043 22.9277 mo
220.687 22.9277 li
222.043 28.4409 mo
219.782 28.4409 li
222.043 33.9546 mo
220.687 33.9546 li
222.043 39.4678 mo
220.687 39.4678 li
222.043 44.9819 mo
220.687 44.9819 li
222.043 50.4946 mo
219.782 50.4946 li
222.043 56.0088 mo
220.687 56.0088 li
222.043 61.522 mo
220.687 61.522 li
222.043 67.0356 mo
220.687 67.0356 li
222.043 72.5483 mo
219.782 72.5483 li
222.043 78.063 mo
220.687 78.063 li
222.043 83.5757 mo
220.687 83.5757 li
222.043 89.0894 mo
220.687 89.0894 li
222.043 94.603 mo
219.782 94.603 li
222.043 100.116 mo
220.687 100.116 li
222.043 105.629 mo
220.687 105.629 li
222.043 111.143 mo
220.687 111.143 li
222.043 116.657 mo
219.782 116.657 li
@
.8 lw
2 lc
[.72 2.88 ] 0 dsh
271.289 110.91 mo
274.818 110.622 li
278.345 110.321 li
281.875 110.005 li
285.404 109.674 li
288.931 109.324 li
292.46 108.949 li
295.99 108.544 li
299.517 108.111 li
303.046 107.644 li
306.576 107.137 li
310.105 106.591 li
313.632 106.003 li
317.162 105.366 li
320.691 104.678 li
324.218 103.939 li
327.748 103.138 li
331.277 102.285 li
334.804 101.364 li
338.333 100.384 li
341.863 99.3413 li
345.39 98.2261 li
348.919 97.0493 li
352.449 95.8052 li
355.976 94.4888 li
359.505 93.104 li
363.035 91.6558 li
366.562 90.1401 li
370.091 88.5562 li
373.621 86.9097 li
377.148 85.2036 li
380.677 83.439 li
384.207 81.6206 li
387.734 79.7446 li
391.263 77.8462 li
394.792 75.8716 li
398.32 73.8804 li
401.849 71.8677 li
405.378 69.8052 li
408.906 67.7476 li
412.435 65.6108 li
415.964 63.5366 li
419.492 61.4067 li
423.021 59.1978 li
426.55 56.9985 li
430.078 54.7178 li
433.607 52.3818 li
437.136 49.9277 li
440.666 47.3408 li
444.193 44.6089 li
447.722 41.5938 li
451.251 38.2188 li
454.779 34.3896 li
458.308 29.6689 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
271.289 106.052 mo
274.818 105.798 li
278.345 105.523 li
281.875 105.221 li
285.404 104.895 li
288.931 104.54 li
292.46 104.158 li
295.99 103.744 li
299.517 103.299 li
303.046 102.821 li
306.576 102.308 li
310.105 101.759 li
313.632 101.173 li
317.162 100.547 li
320.691 99.8823 li
324.218 99.1743 li
327.748 98.4233 li
331.277 97.6265 li
334.804 96.7827 li
338.333 95.8911 li
341.863 94.9478 li
345.39 93.9517 li
348.919 92.9028 li
352.449 91.7964 li
355.976 90.6313 li
359.505 89.4058 li
363.035 88.1177 li
366.562 86.7651 li
370.091 85.3452 li
373.621 83.853 li
377.148 82.2886 li
380.677 80.6548 li
384.207 78.9458 li
387.734 77.1616 li
391.263 75.3032 li
394.792 73.3726 li
398.32 71.3735 li
401.849 69.312 li
405.378 67.1919 li
408.906 65.021 li
412.435 62.811 li
415.964 60.5747 li
419.492 58.3188 li
423.021 56.0586 li
426.55 53.7959 li
430.078 51.5356 li
433.607 49.2676 li
437.136 46.979 li
440.666 44.6396 li
444.193 42.1836 li
447.722 39.5469 li
451.251 36.6016 li
454.779 33.1479 li
458.308 28.835 li
.6 .239216 .443137 rgb
@
.4 lw
461.765 1.29053 mo
461.765 119.011 li
271.289 1.29053 mo
461.765 1.29053 li
271.289 119.011 mo
271.289 1.29053 li
461.765 119.011 mo
271.289 119.011 li
0 0 0 rgb
@
0 lc
412.435 119.011 mo
412.435 116.744 li
@
407.437 123.076 mo
407.439 123.081 407.439 123.092 407.439 123.112 cv
407.439 126.921 li
407.439 127.083 407.482 127.187 407.57 127.231 cv
407.656 127.276 407.818 127.302 408.056 127.31 cv
408.056 127.399 li
406.269 127.399 li
406.269 127.304 li
406.523 127.292 406.691 127.256 406.769 127.2 cv
406.847 127.143 406.886 127.019 406.886 126.83 cv
406.886 123.9 li
406.886 123.798 406.873 123.721 406.847 123.668 cv
406.822 123.616 406.767 123.589 406.683 123.589 cv
406.628 123.589 406.556 123.605 406.47 123.635 cv
406.382 123.666 406.3 123.698 406.224 123.732 cv
406.224 123.643 li
407.386 123.051 li
407.423 123.051 li
407.431 123.062 407.437 123.07 407.437 123.076 cv
cp
.137255 .121569 .12549 rgb
f
410.695 126.77 mo
410.812 126.43 410.869 125.939 410.869 125.296 cv
410.869 124.784 410.835 124.375 410.765 124.07 cv
410.634 123.5 410.39 123.216 410.031 123.216 cv
409.671 123.216 409.427 123.509 409.294 124.095 cv
409.224 124.407 409.189 124.818 409.189 125.328 cv
409.189 125.806 409.226 126.189 409.296 126.476 cv
409.431 127.011 409.685 127.279 410.056 127.279 cv
410.367 127.279 410.58 127.109 410.695 126.77 cv
cp
411.177 123.808 mo
411.39 124.219 411.496 124.692 411.496 125.225 cv
411.496 125.645 411.431 126.041 411.3 126.412 cv
411.052 127.11 410.626 127.459 410.019 127.459 cv
409.603 127.459 409.261 127.27 408.994 126.893 cv
408.707 126.49 408.562 125.943 408.562 125.25 cv
408.562 124.707 408.66 124.238 408.851 123.845 cv
409.111 123.312 409.509 123.045 410.046 123.045 cv
410.533 123.045 410.908 123.299 411.177 123.808 cv
cp
f
412.568 123.945 mo
412.568 123.687 li
414.927 123.687 li
414.927 123.945 li
412.568 123.945 li
cp
f
418.126 121.93 mo
418.128 121.934 418.128 121.943 418.128 121.957 cv
418.128 124.662 li
418.128 124.777 418.16 124.85 418.22 124.881 cv
418.283 124.913 418.398 124.931 418.566 124.938 cv
418.566 125 li
417.296 125 li
417.296 124.933 li
417.478 124.924 417.597 124.899 417.652 124.859 cv
417.708 124.819 417.736 124.731 417.736 124.596 cv
417.736 122.516 li
417.736 122.444 417.726 122.389 417.708 122.352 cv
417.691 122.314 417.652 122.295 417.591 122.295 cv
417.552 122.295 417.501 122.306 417.441 122.329 cv
417.378 122.35 417.32 122.373 417.265 122.397 cv
417.265 122.333 li
418.089 121.914 li
418.117 121.914 li
418.123 121.921 418.126 121.927 418.126 121.93 cv
cp
f
341.863 119.011 mo
341.863 116.744 li
0 0 0 rgb
@
336.859 122.85 mo
336.861 122.855 336.861 122.867 336.861 122.886 cv
336.861 126.696 li
336.861 126.858 336.904 126.961 336.992 127.005 cv
337.078 127.05 337.24 127.077 337.478 127.084 cv
337.478 127.173 li
335.691 127.173 li
335.691 127.079 li
335.945 127.066 336.113 127.031 336.191 126.974 cv
336.269 126.917 336.308 126.793 336.308 126.604 cv
336.308 123.674 li
336.308 123.573 336.294 123.496 336.269 123.443 cv
336.244 123.39 336.189 123.364 336.105 123.364 cv
336.05 123.364 335.978 123.379 335.892 123.41 cv
335.804 123.44 335.722 123.472 335.646 123.506 cv
335.646 123.417 li
336.808 122.826 li
336.845 122.826 li
336.853 122.836 336.859 122.844 336.859 122.85 cv
cp
.137255 .121569 .12549 rgb
f
340.117 126.544 mo
340.234 126.205 340.291 125.713 340.291 125.071 cv
340.291 124.558 340.257 124.15 340.187 123.844 cv
340.056 123.275 339.812 122.991 339.453 122.991 cv
339.093 122.991 338.849 123.284 338.716 123.87 cv
338.646 124.181 338.611 124.592 338.611 125.102 cv
338.611 125.581 338.648 125.963 338.718 126.25 cv
338.853 126.786 339.107 127.053 339.478 127.053 cv
339.789 127.053 340.001 126.883 340.117 126.544 cv
cp
340.599 123.583 mo
340.812 123.994 340.917 124.466 340.917 125 cv
340.917 125.419 340.853 125.815 340.722 126.186 cv
340.474 126.884 340.048 127.234 339.441 127.234 cv
339.025 127.234 338.683 127.044 338.416 126.667 cv
338.128 126.264 337.984 125.717 337.984 125.025 cv
337.984 124.481 338.082 124.012 338.273 123.62 cv
338.533 123.086 338.931 122.82 339.468 122.82 cv
339.955 122.82 340.33 123.074 340.599 123.583 cv
cp
f
341.998 123.719 mo
341.998 123.461 li
344.357 123.461 li
344.357 123.719 li
341.998 123.719 li
cp
f
346.322 124.723 mo
346.871 124.155 347.244 123.737 347.439 123.47 cv
347.636 123.205 347.734 122.945 347.734 122.692 cv
347.734 122.47 347.673 122.301 347.554 122.186 cv
347.433 122.07 347.291 122.011 347.125 122.011 cv
346.919 122.011 346.753 122.086 346.626 122.236 cv
346.556 122.319 346.488 122.445 346.423 122.616 cv
346.328 122.595 li
346.402 122.25 346.529 122.012 346.708 121.877 cv
346.886 121.744 347.08 121.677 347.285 121.677 cv
347.537 121.677 347.742 121.756 347.898 121.916 cv
348.054 122.076 348.134 122.27 348.134 122.5 cv
348.134 122.747 348.048 122.983 347.878 123.21 cv
347.71 123.437 347.341 123.842 346.777 124.424 cv
347.808 124.424 li
347.951 124.424 348.052 124.408 348.111 124.373 cv
348.169 124.338 348.236 124.254 348.308 124.122 cv
348.367 124.148 li
348.117 124.775 li
346.322 124.775 li
346.322 124.723 li
cp
f
271.289 119.011 mo
271.289 116.744 li
0 0 0 rgb
@
266.289 122.85 mo
266.291 122.855 266.291 122.867 266.291 122.886 cv
266.291 126.696 li
266.291 126.858 266.333 126.961 266.421 127.005 cv
266.507 127.05 266.669 127.077 266.908 127.084 cv
266.908 127.173 li
265.121 127.173 li
265.121 127.079 li
265.375 127.066 265.542 127.031 265.621 126.974 cv
265.699 126.917 265.738 126.793 265.738 126.604 cv
265.738 123.674 li
265.738 123.573 265.724 123.496 265.699 123.443 cv
265.673 123.39 265.619 123.364 265.535 123.364 cv
265.48 123.364 265.408 123.379 265.322 123.41 cv
265.234 123.44 265.152 123.472 265.076 123.506 cv
265.076 123.417 li
266.238 122.826 li
266.275 122.826 li
266.283 122.836 266.289 122.844 266.289 122.85 cv
cp
.137255 .121569 .12549 rgb
f
269.546 126.544 mo
269.664 126.205 269.72 125.713 269.72 125.071 cv
269.72 124.558 269.687 124.15 269.617 123.844 cv
269.486 123.275 269.242 122.991 268.882 122.991 cv
268.523 122.991 268.279 123.284 268.146 123.87 cv
268.076 124.181 268.041 124.592 268.041 125.102 cv
268.041 125.581 268.078 125.963 268.148 126.25 cv
268.283 126.786 268.537 127.053 268.908 127.053 cv
269.218 127.053 269.431 126.883 269.546 126.544 cv
cp
270.029 123.583 mo
270.242 123.994 270.347 124.466 270.347 125 cv
270.347 125.419 270.283 125.815 270.152 126.186 cv
269.904 126.884 269.478 127.234 268.871 127.234 cv
268.455 127.234 268.113 127.044 267.845 126.667 cv
267.558 126.264 267.414 125.717 267.414 125.025 cv
267.414 124.481 267.511 124.012 267.703 123.62 cv
267.962 123.086 268.361 122.82 268.898 122.82 cv
269.384 122.82 269.759 123.074 270.029 123.583 cv
cp
f
271.419 123.719 mo
271.419 123.461 li
273.779 123.461 li
273.779 123.719 li
271.419 123.719 li
cp
f
276.308 124.513 mo
276.443 124.599 276.558 124.642 276.652 124.642 cv
276.861 124.642 277.017 124.572 277.119 124.43 cv
277.22 124.288 277.273 124.134 277.273 123.967 cv
277.273 123.807 277.23 123.666 277.148 123.544 cv
277.009 123.338 276.775 123.236 276.443 123.236 cv
276.423 123.236 276.406 123.237 276.386 123.237 cv
276.369 123.238 276.347 123.24 276.324 123.243 cv
276.32 123.184 li
276.56 123.097 276.748 122.998 276.886 122.885 cv
277.023 122.773 277.093 122.625 277.093 122.441 cv
277.093 122.278 277.039 122.153 276.929 122.068 cv
276.822 121.982 276.697 121.94 276.558 121.94 cv
276.392 121.94 276.248 122 276.123 122.122 cv
276.052 122.188 275.978 122.29 275.9 122.427 cv
275.83 122.412 li
275.89 122.184 276.001 122.001 276.164 121.866 cv
276.328 121.729 276.517 121.662 276.73 121.662 cv
276.96 121.662 277.136 121.724 277.261 121.85 cv
277.386 121.976 277.449 122.121 277.449 122.286 cv
277.449 122.431 277.398 122.564 277.294 122.686 cv
277.236 122.754 277.146 122.832 277.023 122.917 cv
277.166 122.978 277.283 123.05 277.369 123.132 cv
277.533 123.29 277.613 123.489 277.613 123.73 cv
277.613 124.015 277.501 124.266 277.277 124.483 cv
277.054 124.7 276.736 124.809 276.322 124.809 cv
276.138 124.809 276.009 124.782 275.935 124.727 cv
275.861 124.672 275.824 124.613 275.824 124.55 cv
275.824 124.511 275.835 124.474 275.861 124.438 cv
275.884 124.402 275.925 124.384 275.98 124.384 cv
276.062 124.384 276.171 124.427 276.308 124.513 cv
cp
f
271.289 119.011 mo
273.556 119.011 li
0 0 0 rgb
@
256.058 120.141 mo
256.058 119.778 li
259.378 119.778 li
259.378 120.141 li
256.058 120.141 li
cp
.137255 .121569 .12549 rgb
f
262.812 117.303 mo
262.814 117.308 262.814 117.32 262.814 117.339 cv
262.814 121.149 li
262.814 121.311 262.857 121.415 262.945 121.458 cv
263.031 121.503 263.193 121.53 263.431 121.538 cv
263.431 121.626 li
261.644 121.626 li
261.644 121.532 li
261.898 121.519 262.066 121.484 262.144 121.427 cv
262.222 121.371 262.261 121.247 262.261 121.057 cv
262.261 118.127 li
262.261 118.026 262.248 117.949 262.222 117.896 cv
262.197 117.843 262.142 117.817 262.058 117.817 cv
262.003 117.817 261.931 117.833 261.845 117.863 cv
261.757 117.893 261.675 117.925 261.599 117.959 cv
261.599 117.871 li
262.761 117.279 li
262.798 117.279 li
262.806 117.29 262.812 117.297 262.812 117.303 cv
cp
f
264.681 121.596 mo
264.611 121.526 264.578 121.441 264.578 121.341 cv
264.578 121.243 264.613 121.158 264.683 121.088 cv
264.753 121.019 264.839 120.984 264.937 120.984 cv
265.037 120.984 265.121 121.019 265.191 121.088 cv
265.261 121.158 265.294 121.243 265.294 121.341 cv
265.294 121.441 265.261 121.526 265.193 121.596 cv
265.125 121.667 265.039 121.703 264.937 121.703 cv
264.835 121.703 264.751 121.667 264.681 121.596 cv
cp
f
267.57 120.998 mo
267.687 120.658 267.744 120.167 267.744 119.524 cv
267.744 119.011 267.71 118.603 267.64 118.297 cv
267.509 117.728 267.265 117.444 266.906 117.444 cv
266.546 117.444 266.302 117.737 266.169 118.323 cv
266.099 118.634 266.064 119.045 266.064 119.555 cv
266.064 120.034 266.101 120.417 266.171 120.704 cv
266.306 121.239 266.56 121.506 266.931 121.506 cv
267.242 121.506 267.455 121.336 267.57 120.998 cv
cp
268.052 118.036 mo
268.265 118.447 268.371 118.919 268.371 119.453 cv
268.371 119.873 268.306 120.268 268.175 120.639 cv
267.927 121.337 267.501 121.687 266.894 121.687 cv
266.478 121.687 266.136 121.498 265.869 121.121 cv
265.582 120.717 265.437 120.17 265.437 119.478 cv
265.437 118.934 265.535 118.465 265.726 118.073 cv
265.986 117.54 266.384 117.273 266.921 117.273 cv
267.408 117.273 267.783 117.527 268.052 118.036 cv
cp
f
271.289 103.315 mo
273.556 103.315 li
271.289 107.239 mo
272.65 107.239 li
271.289 111.163 mo
272.65 111.163 li
271.289 115.086 mo
272.65 115.086 li
0 0 0 rgb
@
256.058 104.446 mo
256.058 104.083 li
259.378 104.083 li
259.378 104.446 li
256.058 104.446 li
cp
.137255 .121569 .12549 rgb
f
263.07 105.302 mo
263.187 104.962 263.244 104.471 263.244 103.829 cv
263.244 103.316 263.21 102.908 263.14 102.602 cv
263.009 102.033 262.765 101.749 262.406 101.749 cv
262.046 101.749 261.802 102.042 261.669 102.627 cv
261.599 102.939 261.564 103.35 261.564 103.86 cv
261.564 104.338 261.601 104.721 261.671 105.008 cv
261.806 105.543 262.06 105.811 262.431 105.811 cv
262.742 105.811 262.955 105.641 263.07 105.302 cv
cp
263.552 102.34 mo
263.765 102.751 263.871 103.224 263.871 103.757 cv
263.871 104.177 263.806 104.573 263.675 104.944 cv
263.427 105.642 263.001 105.992 262.394 105.992 cv
261.978 105.992 261.636 105.802 261.369 105.425 cv
261.082 105.022 260.937 104.475 260.937 103.783 cv
260.937 103.239 261.035 102.77 261.226 102.377 cv
261.486 101.844 261.884 101.578 262.421 101.578 cv
262.908 101.578 263.283 101.832 263.552 102.34 cv
cp
f
264.681 105.901 mo
264.611 105.831 264.578 105.746 264.578 105.646 cv
264.578 105.547 264.613 105.462 264.683 105.393 cv
264.753 105.324 264.839 105.289 264.937 105.289 cv
265.037 105.289 265.121 105.324 265.191 105.393 cv
265.261 105.462 265.294 105.547 265.294 105.646 cv
265.294 105.746 265.261 105.831 265.193 105.901 cv
265.125 105.972 265.039 106.007 264.937 106.007 cv
264.835 106.007 264.751 105.972 264.681 105.901 cv
cp
f
267.462 103.056 mo
267.593 102.894 267.66 102.698 267.66 102.468 cv
267.66 102.268 267.597 102.098 267.474 101.958 cv
267.351 101.818 267.164 101.749 266.912 101.749 cv
266.718 101.749 266.558 101.809 266.431 101.931 cv
266.304 102.053 266.242 102.203 266.242 102.376 cv
266.242 102.575 266.316 102.758 266.464 102.928 cv
266.613 103.098 266.808 103.257 267.052 103.407 cv
267.25 103.268 267.386 103.151 267.462 103.056 cv
cp
267.56 105.619 mo
267.685 105.484 267.748 105.315 267.748 105.113 cv
267.748 104.883 267.681 104.698 267.55 104.555 cv
267.417 104.413 267.148 104.198 266.738 103.909 cv
266.556 104.023 266.425 104.17 266.343 104.351 cv
266.261 104.533 266.22 104.708 266.22 104.875 cv
266.22 105.165 266.294 105.394 266.443 105.565 cv
266.591 105.735 266.781 105.821 267.011 105.821 cv
267.253 105.821 267.437 105.753 267.56 105.619 cv
cp
265.996 103.239 mo
265.839 103.036 265.761 102.812 265.761 102.568 cv
265.761 102.29 265.876 102.053 266.107 101.859 cv
266.337 101.665 266.638 101.568 267.007 101.568 cv
267.347 101.568 267.617 101.66 267.818 101.843 cv
268.017 102.027 268.119 102.24 268.119 102.483 cv
268.119 102.729 268.015 102.951 267.81 103.147 cv
267.693 103.259 267.501 103.387 267.238 103.533 cv
267.597 103.799 267.853 104.031 268.009 104.228 cv
268.164 104.425 268.242 104.658 268.242 104.925 cv
268.242 105.229 268.126 105.484 267.898 105.691 cv
267.669 105.897 267.363 106 266.978 106 cv
266.634 106 266.339 105.906 266.095 105.714 cv
265.849 105.524 265.726 105.272 265.726 104.959 cv
265.726 104.692 265.812 104.456 265.982 104.251 cv
266.093 104.118 266.289 103.958 266.564 103.773 cv
266.287 103.549 266.095 103.372 265.996 103.239 cv
cp
f
271.289 87.6187 mo
273.556 87.6187 li
271.289 91.5425 mo
272.65 91.5425 li
271.289 95.4663 mo
272.65 95.4663 li
271.289 99.3911 mo
272.65 99.3911 li
0 0 0 rgb
@
256.058 88.7505 mo
256.058 88.3872 li
259.378 88.3872 li
259.378 88.7505 li
256.058 88.7505 li
cp
.137255 .121569 .12549 rgb
f
263.07 89.6069 mo
263.187 89.2671 263.244 88.7759 263.244 88.1333 cv
263.244 87.6206 263.21 87.2124 263.14 86.9067 cv
263.009 86.3374 262.765 86.0532 262.406 86.0532 cv
262.046 86.0532 261.802 86.3462 261.669 86.9321 cv
261.599 87.2437 261.564 87.6548 261.564 88.1646 cv
261.564 88.6431 261.601 89.0259 261.671 89.313 cv
261.806 89.8481 262.06 90.1157 262.431 90.1157 cv
262.742 90.1157 262.955 89.9458 263.07 89.6069 cv
cp
263.552 86.645 mo
263.765 87.0562 263.871 87.5288 263.871 88.062 cv
263.871 88.4819 263.806 88.8774 263.675 89.2485 cv
263.427 89.9468 263.001 90.2964 262.394 90.2964 cv
261.978 90.2964 261.636 90.1069 261.369 89.73 cv
261.082 89.3267 260.937 88.7798 260.937 88.0874 cv
260.937 87.5435 261.035 87.0747 261.226 86.6821 cv
261.486 86.1489 261.884 85.8823 262.421 85.8823 cv
262.908 85.8823 263.283 86.1362 263.552 86.645 cv
cp
f
264.681 90.2056 mo
264.611 90.1353 264.578 90.0503 264.578 89.9507 cv
264.578 89.8521 264.613 89.7671 264.683 89.6978 cv
264.753 89.6284 264.839 89.5933 264.937 89.5933 cv
265.037 89.5933 265.121 89.6284 265.191 89.6978 cv
265.261 89.7671 265.294 89.8521 265.294 89.9507 cv
265.294 90.0503 265.261 90.1353 265.193 90.2056 cv
265.125 90.2769 265.039 90.312 264.937 90.312 cv
264.835 90.312 264.751 90.2769 264.681 90.2056 cv
cp
f
267.701 88.2935 mo
267.552 87.9302 267.302 87.7485 266.947 87.7485 cv
266.621 87.7485 266.404 87.8462 266.294 88.0396 cv
266.232 88.1538 266.201 88.3433 266.201 88.6099 cv
266.201 88.9536 266.273 89.2896 266.419 89.6187 cv
266.566 89.9478 266.798 90.1128 267.115 90.1128 cv
267.367 90.1128 267.548 90.0054 267.662 89.7915 cv
267.777 89.5776 267.833 89.3267 267.833 89.0396 cv
267.833 88.7593 267.789 88.5103 267.701 88.2935 cv
cp
268.041 89.8403 mo
267.792 90.1509 267.47 90.3052 267.074 90.3052 cv
266.703 90.3052 266.365 90.1313 266.06 89.7837 cv
265.755 89.4351 265.603 88.9722 265.603 88.394 cv
265.603 87.6499 265.898 87.0103 266.488 86.4771 cv
267.015 86.0298 267.609 85.8062 268.267 85.8062 cv
268.283 85.9106 li
268.019 85.9595 267.791 86.0249 267.601 86.1079 cv
267.41 86.1919 267.24 86.3081 267.089 86.4575 cv
266.935 86.6099 266.791 86.8032 266.656 87.0366 cv
266.521 87.271 266.427 87.5034 266.378 87.7329 cv
266.509 87.6528 266.621 87.5942 266.716 87.5562 cv
266.884 87.4888 267.054 87.4546 267.226 87.4546 cv
267.56 87.4546 267.843 87.5708 268.07 87.8022 cv
268.298 88.0347 268.412 88.3657 268.412 88.7964 cv
268.412 89.1821 268.289 89.5298 268.041 89.8403 cv
cp
f
271.289 71.9224 mo
273.556 71.9224 li
271.289 75.8472 mo
272.65 75.8472 li
271.289 79.771 mo
272.65 79.771 li
271.289 83.6948 mo
272.65 83.6948 li
0 0 0 rgb
@
256.058 73.063 mo
256.058 72.6997 li
259.378 72.6997 li
259.378 73.063 li
256.058 73.063 li
cp
.137255 .121569 .12549 rgb
f
263.07 73.9194 mo
263.187 73.5796 263.244 73.0884 263.244 72.4458 cv
263.244 71.9331 263.21 71.5249 263.14 71.2192 cv
263.009 70.6499 262.765 70.3657 262.406 70.3657 cv
262.046 70.3657 261.802 70.6587 261.669 71.2446 cv
261.599 71.5562 261.564 71.9673 261.564 72.4771 cv
261.564 72.9556 261.601 73.3384 261.671 73.6255 cv
261.806 74.1606 262.06 74.4282 262.431 74.4282 cv
262.742 74.4282 262.955 74.2583 263.07 73.9194 cv
cp
263.552 70.9575 mo
263.765 71.3687 263.871 71.8413 263.871 72.3745 cv
263.871 72.7944 263.806 73.1899 263.675 73.561 cv
263.427 74.2593 263.001 74.6089 262.394 74.6089 cv
261.978 74.6089 261.636 74.4194 261.369 74.0425 cv
261.082 73.6392 260.937 73.0923 260.937 72.3999 cv
260.937 71.856 261.035 71.3872 261.226 70.9946 cv
261.486 70.4614 261.884 70.1948 262.421 70.1948 cv
262.908 70.1948 263.283 70.4487 263.552 70.9575 cv
cp
f
264.681 74.5181 mo
264.611 74.4478 264.578 74.3628 264.578 74.2632 cv
264.578 74.1646 264.613 74.0796 264.683 74.0103 cv
264.753 73.9409 264.839 73.9058 264.937 73.9058 cv
265.037 73.9058 265.121 73.9409 265.191 74.0103 cv
265.261 74.0796 265.294 74.1646 265.294 74.2632 cv
265.294 74.3628 265.261 74.4478 265.193 74.5181 cv
265.125 74.5894 265.039 74.6245 264.937 74.6245 cv
264.835 74.6245 264.751 74.5894 264.681 74.5181 cv
cp
f
267.269 70.854 mo
265.716 73.0483 li
267.269 73.0483 li
267.269 70.854 li
cp
267.478 70.2007 mo
267.779 70.2007 li
267.779 73.0483 li
268.441 73.0483 li
268.441 73.4692 li
267.779 73.4692 li
267.779 74.5483 li
267.277 74.5483 li
267.277 73.4692 li
265.455 73.4692 li
265.455 73.0483 li
267.478 70.2007 li
cp
f
271.289 56.2266 mo
273.556 56.2266 li
271.289 60.1509 mo
272.65 60.1509 li
271.289 64.0747 mo
272.65 64.0747 li
271.289 67.9985 mo
272.65 67.9985 li
0 0 0 rgb
@
256.058 57.3604 mo
256.058 56.9971 li
259.378 56.9971 li
259.378 57.3604 li
256.058 57.3604 li
cp
.137255 .121569 .12549 rgb
f
263.07 58.2158 mo
263.187 57.8765 263.244 57.3857 263.244 56.7427 cv
263.244 56.2305 263.21 55.8218 263.14 55.5161 cv
263.009 54.9468 262.765 54.6621 262.406 54.6621 cv
262.046 54.6621 261.802 54.9551 261.669 55.541 cv
261.599 55.853 261.564 56.2642 261.564 56.7744 cv
261.564 57.2529 261.601 57.6353 261.671 57.9219 cv
261.806 58.4575 262.06 58.7251 262.431 58.7251 cv
262.742 58.7251 262.955 58.5552 263.07 58.2158 cv
cp
263.552 55.2539 mo
263.765 55.6655 263.871 56.1377 263.871 56.6714 cv
263.871 57.0913 263.806 57.4868 263.675 57.8579 cv
263.427 58.5562 263.001 58.9053 262.394 58.9053 cv
261.978 58.9053 261.636 58.7168 261.369 58.3389 cv
261.082 57.936 260.937 57.3887 260.937 56.6968 cv
260.937 56.1528 261.035 55.6841 261.226 55.292 cv
261.486 54.7583 261.884 54.4917 262.421 54.4917 cv
262.908 54.4917 263.283 54.7456 263.552 55.2539 cv
cp
f
264.681 58.8149 mo
264.611 58.7446 264.578 58.6597 264.578 58.5605 cv
264.578 58.4614 264.613 58.377 264.683 58.3071 cv
264.753 58.2378 264.839 58.2031 264.937 58.2031 cv
265.037 58.2031 265.121 58.2378 265.191 58.3071 cv
265.261 58.377 265.294 58.4614 265.294 58.5605 cv
265.294 58.6597 265.261 58.7446 265.193 58.8149 cv
265.125 58.8857 265.039 58.9214 264.937 58.9214 cv
264.835 58.9214 264.751 58.8857 264.681 58.8149 cv
cp
f
265.574 58.7725 mo
266.345 57.9712 266.871 57.3833 267.146 57.0083 cv
267.423 56.6328 267.56 56.2676 267.56 55.9111 cv
267.56 55.5996 267.476 55.3618 267.308 55.1982 cv
267.138 55.0352 266.937 54.9536 266.703 54.9536 cv
266.414 54.9536 266.181 55.0586 266.001 55.2695 cv
265.902 55.3853 265.806 55.5635 265.716 55.8037 cv
265.58 55.7754 li
265.685 55.2905 265.865 54.9536 266.117 54.7651 cv
266.369 54.5762 266.638 54.4819 266.927 54.4819 cv
267.285 54.4819 267.574 54.5942 267.792 54.8188 cv
268.013 55.043 268.125 55.3179 268.125 55.6421 cv
268.125 55.9878 268.005 56.3208 267.767 56.6411 cv
267.529 56.9614 267.009 57.5317 266.212 58.3516 cv
267.666 58.3516 li
267.867 58.3516 268.009 58.3276 268.093 58.2788 cv
268.175 58.2305 268.267 58.1123 268.371 57.9248 cv
268.453 57.9629 li
268.101 58.8452 li
265.574 58.8452 li
265.574 58.7725 li
cp
f
271.289 40.5308 mo
273.556 40.5308 li
271.289 44.4546 mo
272.65 44.4546 li
271.289 48.3789 mo
272.65 48.3789 li
271.289 52.3027 mo
272.65 52.3027 li
0 0 0 rgb
@
263.07 42.5205 mo
263.187 42.1812 263.244 41.6904 263.244 41.0474 cv
263.244 40.5352 263.21 40.1265 263.14 39.8208 cv
263.009 39.2515 262.765 38.9668 262.406 38.9668 cv
262.046 38.9668 261.802 39.2598 261.669 39.8457 cv
261.599 40.1577 261.564 40.5688 261.564 41.0791 cv
261.564 41.5576 261.601 41.9399 261.671 42.2266 cv
261.806 42.7622 262.06 43.0298 262.431 43.0298 cv
262.742 43.0298 262.955 42.8599 263.07 42.5205 cv
cp
263.552 39.5586 mo
263.765 39.9702 263.871 40.4424 263.871 40.9761 cv
263.871 41.396 263.806 41.7915 263.675 42.1626 cv
263.427 42.8608 263.001 43.21 262.394 43.21 cv
261.978 43.21 261.636 43.0215 261.369 42.6436 cv
261.082 42.2407 260.937 41.6934 260.937 41.0015 cv
260.937 40.4575 261.035 39.9888 261.226 39.5967 cv
261.486 39.063 261.884 38.7964 262.421 38.7964 cv
262.908 38.7964 263.283 39.0503 263.552 39.5586 cv
cp
.137255 .121569 .12549 rgb
f
264.681 43.1196 mo
264.611 43.0493 264.578 42.9644 264.578 42.8652 cv
264.578 42.7661 264.613 42.6816 264.683 42.6118 cv
264.753 42.5425 264.839 42.5078 264.937 42.5078 cv
265.037 42.5078 265.121 42.5425 265.191 42.6118 cv
265.261 42.6816 265.294 42.7661 265.294 42.8652 cv
265.294 42.9644 265.261 43.0493 265.193 43.1196 cv
265.125 43.1904 265.039 43.2261 264.937 43.2261 cv
264.835 43.2261 264.751 43.1904 264.681 43.1196 cv
cp
f
267.57 42.5205 mo
267.687 42.1812 267.744 41.6904 267.744 41.0474 cv
267.744 40.5352 267.71 40.1265 267.64 39.8208 cv
267.509 39.2515 267.265 38.9668 266.906 38.9668 cv
266.546 38.9668 266.302 39.2598 266.169 39.8457 cv
266.099 40.1577 266.064 40.5688 266.064 41.0791 cv
266.064 41.5576 266.101 41.9399 266.171 42.2266 cv
266.306 42.7622 266.56 43.0298 266.931 43.0298 cv
267.242 43.0298 267.455 42.8599 267.57 42.5205 cv
cp
268.052 39.5586 mo
268.265 39.9702 268.371 40.4424 268.371 40.9761 cv
268.371 41.396 268.306 41.7915 268.175 42.1626 cv
267.927 42.8608 267.501 43.21 266.894 43.21 cv
266.478 43.21 266.136 43.0215 265.869 42.6436 cv
265.582 42.2407 265.437 41.6934 265.437 41.0015 cv
265.437 40.4575 265.535 39.9888 265.726 39.5967 cv
265.986 39.063 266.384 38.7964 266.921 38.7964 cv
267.408 38.7964 267.783 39.0503 268.052 39.5586 cv
cp
f
271.289 24.835 mo
273.556 24.835 li
271.289 28.7588 mo
272.65 28.7588 li
271.289 32.6826 mo
272.65 32.6826 li
271.289 36.6069 mo
272.65 36.6069 li
0 0 0 rgb
@
263.07 26.8252 mo
263.187 26.4858 263.244 25.9951 263.244 25.3521 cv
263.244 24.8398 263.21 24.4312 263.14 24.1255 cv
263.009 23.5562 262.765 23.2715 262.406 23.2715 cv
262.046 23.2715 261.802 23.5645 261.669 24.1504 cv
261.599 24.4624 261.564 24.8735 261.564 25.3838 cv
261.564 25.8623 261.601 26.2446 261.671 26.5313 cv
261.806 27.0669 262.06 27.3345 262.431 27.3345 cv
262.742 27.3345 262.955 27.1646 263.07 26.8252 cv
cp
263.552 23.8633 mo
263.765 24.2749 263.871 24.7471 263.871 25.2808 cv
263.871 25.7007 263.806 26.0962 263.675 26.4673 cv
263.427 27.1655 263.001 27.5146 262.394 27.5146 cv
261.978 27.5146 261.636 27.3262 261.369 26.9482 cv
261.082 26.5454 260.937 25.998 260.937 25.3062 cv
260.937 24.7622 261.035 24.2935 261.226 23.9014 cv
261.486 23.3677 261.884 23.1011 262.421 23.1011 cv
262.908 23.1011 263.283 23.355 263.552 23.8633 cv
cp
.137255 .121569 .12549 rgb
f
264.681 27.4243 mo
264.611 27.354 264.578 27.269 264.578 27.1699 cv
264.578 27.0708 264.613 26.9863 264.683 26.9165 cv
264.753 26.8472 264.839 26.8125 264.937 26.8125 cv
265.037 26.8125 265.121 26.8472 265.191 26.9165 cv
265.261 26.9863 265.294 27.0708 265.294 27.1699 cv
265.294 27.269 265.261 27.354 265.193 27.4243 cv
265.125 27.4951 265.039 27.5308 264.937 27.5308 cv
264.835 27.5308 264.751 27.4951 264.681 27.4243 cv
cp
f
265.574 27.3818 mo
266.345 26.5806 266.871 25.9927 267.146 25.6177 cv
267.423 25.2422 267.56 24.877 267.56 24.5205 cv
267.56 24.209 267.476 23.9712 267.308 23.8076 cv
267.138 23.6445 266.937 23.563 266.703 23.563 cv
266.414 23.563 266.181 23.668 266.001 23.8789 cv
265.902 23.9946 265.806 24.1729 265.716 24.4131 cv
265.58 24.3848 li
265.685 23.8999 265.865 23.563 266.117 23.3745 cv
266.369 23.1855 266.638 23.0913 266.927 23.0913 cv
267.285 23.0913 267.574 23.2036 267.792 23.4282 cv
268.013 23.6523 268.125 23.9272 268.125 24.2515 cv
268.125 24.5972 268.005 24.9302 267.767 25.2505 cv
267.529 25.5708 267.009 26.1411 266.212 26.9609 cv
267.666 26.9609 li
267.867 26.9609 268.009 26.937 268.093 26.8882 cv
268.175 26.8398 268.267 26.7217 268.371 26.5342 cv
268.453 26.5723 li
268.101 27.4546 li
265.574 27.4546 li
265.574 27.3818 li
cp
f
271.289 9.13867 mo
273.556 9.13867 li
271.289 13.063 mo
272.65 13.063 li
271.289 16.9868 mo
272.65 16.9868 li
271.289 20.9106 mo
272.65 20.9106 li
0 0 0 rgb
@
263.07 11.1221 mo
263.187 10.7827 263.244 10.292 263.244 9.64893 cv
263.244 9.13672 263.21 8.72803 263.14 8.42236 cv
263.009 7.85303 262.765 7.56836 262.406 7.56836 cv
262.046 7.56836 261.802 7.86133 261.669 8.44727 cv
261.599 8.75928 261.564 9.17041 261.564 9.68066 cv
261.564 10.1592 261.601 10.5415 261.671 10.8281 cv
261.806 11.3638 262.06 11.6313 262.431 11.6313 cv
262.742 11.6313 262.955 11.4614 263.07 11.1221 cv
cp
263.552 8.16016 mo
263.765 8.57178 263.871 9.04395 263.871 9.57764 cv
263.871 9.99756 263.806 10.3931 263.675 10.7642 cv
263.427 11.4624 263.001 11.8115 262.394 11.8115 cv
261.978 11.8115 261.636 11.623 261.369 11.2451 cv
261.082 10.8423 260.937 10.2949 260.937 9.60303 cv
260.937 9.05908 261.035 8.59033 261.226 8.19824 cv
261.486 7.66455 261.884 7.39795 262.421 7.39795 cv
262.908 7.39795 263.283 7.65186 263.552 8.16016 cv
cp
.137255 .121569 .12549 rgb
f
264.681 11.7212 mo
264.611 11.6509 264.578 11.5659 264.578 11.4668 cv
264.578 11.3677 264.613 11.2832 264.683 11.2134 cv
264.753 11.144 264.839 11.1094 264.937 11.1094 cv
265.037 11.1094 265.121 11.144 265.191 11.2134 cv
265.261 11.2832 265.294 11.3677 265.294 11.4668 cv
265.294 11.5659 265.261 11.6509 265.193 11.7212 cv
265.125 11.792 265.039 11.8276 264.937 11.8276 cv
264.835 11.8276 264.751 11.792 264.681 11.7212 cv
cp
f
267.269 8.05713 mo
265.716 10.2515 li
267.269 10.2515 li
267.269 8.05713 li
cp
267.478 7.40381 mo
267.779 7.40381 li
267.779 10.2515 li
268.441 10.2515 li
268.441 10.6724 li
267.779 10.6724 li
267.779 11.7515 li
267.277 11.7515 li
267.277 10.6724 li
265.455 10.6724 li
265.455 10.2515 li
267.478 7.40381 li
cp
f
461.765 1.29053 mo
461.765 3.55762 li
412.435 1.29053 mo
412.435 3.55762 li
391.191 1.29053 mo
391.191 3.55762 li
341.863 1.29053 mo
341.863 3.55762 li
320.617 1.29053 mo
320.617 3.55762 li
271.289 1.29053 mo
271.289 3.55762 li
271.289 1.29053 mo
272.65 1.29053 li
271.289 5.21484 mo
272.65 5.21484 li
0 0 0 rgb
@
.19 lw
454.925 1.29053 mo
454.925 2.00488 li
446.107 1.29053 mo
446.107 2.00488 li
433.681 1.29053 mo
433.681 2.00488 li
409.207 1.29053 mo
409.207 2.00488 li
405.597 1.29053 mo
405.597 2.00488 li
401.503 1.29053 mo
401.503 2.00488 li
396.779 1.29053 mo
396.779 2.00488 li
384.351 1.29053 mo
384.351 2.00488 li
375.535 1.29053 mo
375.535 2.00488 li
363.107 1.29053 mo
363.107 2.00488 li
338.632 1.29053 mo
338.632 2.00488 li
335.023 1.29053 mo
335.023 2.00488 li
330.931 1.29053 mo
330.931 2.00488 li
326.207 1.29053 mo
326.207 2.00488 li
313.779 1.29053 mo
313.779 2.00488 li
304.96 1.29053 mo
304.96 2.00488 li
292.533 1.29053 mo
292.533 2.00488 li
@
.4 lw
461.765 1.29053 mo
460.404 1.29053 li
461.765 5.21484 mo
460.404 5.21484 li
461.765 9.13867 mo
459.496 9.13867 li
461.765 13.063 mo
460.404 13.063 li
461.765 16.9868 mo
460.404 16.9868 li
461.765 20.9106 mo
460.404 20.9106 li
461.765 24.835 mo
459.496 24.835 li
461.765 28.7588 mo
460.404 28.7588 li
461.765 32.6826 mo
460.404 32.6826 li
461.765 36.6069 mo
460.404 36.6069 li
461.765 40.5308 mo
459.496 40.5308 li
461.765 44.4546 mo
460.404 44.4546 li
461.765 48.3789 mo
460.404 48.3789 li
461.765 52.3027 mo
460.404 52.3027 li
461.765 56.2266 mo
459.496 56.2266 li
461.765 60.1509 mo
460.404 60.1509 li
461.765 64.0747 mo
460.404 64.0747 li
461.765 67.9985 mo
460.404 67.9985 li
461.765 71.9224 mo
459.496 71.9224 li
461.765 75.8472 mo
460.404 75.8472 li
461.765 79.771 mo
460.404 79.771 li
461.765 83.6948 mo
460.404 83.6948 li
461.765 87.6187 mo
459.496 87.6187 li
461.765 91.5425 mo
460.404 91.5425 li
461.765 95.4663 mo
460.404 95.4663 li
461.765 99.3911 mo
460.404 99.3911 li
461.765 103.315 mo
459.496 103.315 li
461.765 107.239 mo
460.404 107.239 li
461.765 111.163 mo
460.404 111.163 li
461.765 115.086 mo
460.404 115.086 li
461.765 119.011 mo
459.496 119.011 li
@
gsave
197.014 133.558 mo
201.392 133.558 li
201.392 124.531 li
197.014 124.531 li
197.014 133.558 li
cp
clp
199.267 128.392 mo
199.493 128.333 199.708 128.333 199.826 128.333 cv
200.169 128.333 200.208 128.343 200.386 128.392 cv
200.308 128.431 200.208 128.47 199.757 128.47 cv
199.532 128.47 199.444 128.47 199.268 128.392 cv
199.267 128.392 li
cp
200.033 125.728 mo
200.189 125.679 200.396 125.679 200.503 125.679 cv
200.837 125.679 200.876 125.689 201.052 125.738 cv
200.974 125.767 200.876 125.816 200.445 125.816 cv
200.258 125.816 200.14 125.816 200.033 125.728 cv
200.033 125.728 li
cp
198.444 128.537 mo
197.39 129.244 197.178 130.167 197.178 130.521 cv
197.178 130.992 197.44 131.267 197.46 131.296 cv
197.771 131.621 197.858 131.66 198.588 131.935 cv
199.765 132.396 li
199.911 132.466 200.105 132.535 200.105 132.82 cv
200.105 133.044 199.929 133.339 199.626 133.339 cv
199.196 133.339 198.874 133.097 198.766 133.017 cv
198.708 132.976 198.698 132.966 198.659 132.966 cv
198.58 132.966 198.561 133.037 198.561 133.078 cv
198.561 133.197 199.081 133.558 199.631 133.558 cv
200.24 133.558 200.654 132.988 200.654 132.505 cv
200.654 132.035 200.291 131.857 200.183 131.808 cv
200.045 131.759 199.712 131.63 199.585 131.582 cv
199.391 131.503 199.195 131.423 198.99 131.355 cv
198.403 131.119 li
197.963 130.943 197.67 130.658 197.67 130.244 cv
197.67 129.839 198.053 128.984 198.877 128.57 cv
199.24 128.689 199.535 128.689 199.74 128.689 cv
200.035 128.689 200.654 128.689 200.654 128.382 cv
200.654 128.134 200.232 128.115 199.851 128.115 cv
199.675 128.115 199.392 128.115 199.031 128.246 cv
198.776 127.992 198.737 127.667 198.737 127.482 cv
198.737 126.933 199.088 126.179 199.818 125.816 cv
199.994 126.035 200.217 126.035 200.441 126.035 cv
200.685 126.035 201.308 126.035 201.308 125.728 cv
201.308 125.47 200.88 125.46 200.5 125.46 cv
200.374 125.46 200.14 125.46 199.886 125.509 cv
199.857 125.421 199.837 125.353 199.837 125.185 cv
199.837 125.048 199.886 124.841 199.886 124.822 cv
199.886 124.744 199.836 124.695 199.766 124.695 cv
199.585 124.695 199.585 125.148 199.585 125.177 cv
199.585 125.375 199.64 125.521 199.65 125.56 cv
198.607 125.855 197.944 126.64 197.944 127.398 cv
197.944 127.761 198.117 128.173 198.571 128.439 cv
198.444 128.537 li
cp
f
grestore
gsave
434.126 133.47 mo
438.505 133.47 li
438.505 124.441 li
434.126 124.441 li
434.126 133.47 li
cp
clp
436.38 128.302 mo
436.607 128.246 436.822 128.246 436.939 128.246 cv
437.283 128.246 437.322 128.255 437.5 128.302 cv
437.421 128.343 437.322 128.382 436.871 128.382 cv
436.646 128.382 436.558 128.382 436.38 128.302 cv
436.38 128.302 li
cp
437.146 125.638 mo
437.302 125.589 437.509 125.589 437.617 125.589 cv
437.951 125.589 437.99 125.601 438.166 125.648 cv
438.087 125.679 437.99 125.728 437.558 125.728 cv
437.373 125.728 437.253 125.728 437.146 125.638 cv
437.146 125.638 li
cp
435.558 128.447 mo
434.503 129.156 434.291 130.08 434.291 130.433 cv
434.291 130.904 434.554 131.179 434.574 131.208 cv
434.884 131.533 434.972 131.572 435.701 131.847 cv
436.878 132.308 li
437.025 132.378 437.218 132.447 437.218 132.732 cv
437.218 132.957 437.042 133.251 436.74 133.251 cv
436.31 133.251 435.988 133.009 435.88 132.929 cv
435.822 132.888 435.812 132.878 435.773 132.878 cv
435.693 132.878 435.673 132.949 435.673 132.99 cv
435.673 133.109 436.195 133.47 436.746 133.47 cv
437.353 133.47 437.767 132.9 437.767 132.417 cv
437.767 131.947 437.404 131.769 437.296 131.72 cv
437.16 131.671 436.826 131.542 436.699 131.494 cv
436.503 131.416 436.308 131.335 436.103 131.267 cv
435.517 131.031 li
435.078 130.855 434.785 130.57 434.785 130.156 cv
434.785 129.751 435.166 128.896 435.992 128.482 cv
436.353 128.601 436.648 128.601 436.853 128.601 cv
437.148 128.601 437.767 128.601 437.767 128.294 cv
437.767 128.046 437.345 128.025 436.964 128.025 cv
436.789 128.025 436.505 128.025 436.144 128.158 cv
435.89 127.904 435.851 127.58 435.851 127.394 cv
435.851 126.845 436.201 126.089 436.931 125.728 cv
437.107 125.947 437.332 125.947 437.554 125.947 cv
437.798 125.947 438.421 125.947 438.421 125.638 cv
438.421 125.382 437.994 125.373 437.613 125.373 cv
437.488 125.373 437.253 125.373 437 125.421 cv
436.97 125.332 436.951 125.263 436.951 125.097 cv
436.951 124.958 437 124.753 437 124.734 cv
437 124.654 436.951 124.605 436.88 124.605 cv
436.699 124.605 436.699 125.06 436.699 125.089 cv
436.699 125.285 436.753 125.433 436.763 125.472 cv
435.72 125.767 435.058 126.552 435.058 127.308 cv
435.058 127.671 435.23 128.085 435.685 128.349 cv
435.558 128.447 li
cp
f
grestore
4.15137 89.2896 mo
3.95898 88.5112 3.4707 87.8843 2.84668 87.8843 cv
2.0791 87.8843 1.40527 88.7983 1.40527 89.9761 cv
1.40527 92.4917 li
1.65137 92.4917 li
1.65137 92.3013 li
1.65137 91.6938 1.73926 91.6782 2.02734 91.6782 cv
6.25 91.6782 li
6.53809 91.6782 6.62695 91.6938 6.62695 92.3013 cv
6.62695 92.4917 li
6.87207 92.4917 li
6.84766 92.2036 6.84766 91.6353 6.84766 91.3228 cv
6.84766 91.0112 6.84766 90.4429 6.87207 90.1548 cv
6.62695 90.1548 li
6.62695 90.3481 li
6.62695 90.9702 6.53809 90.9868 6.24902 90.9868 cv
4.2168 90.9868 li
4.2168 90.0581 li
4.2168 89.9292 4.2168 89.5903 4.48926 89.3081 cv
4.77832 89.0015 5.02734 89.0015 5.56543 89.0015 cv
6.08691 89.0015 6.4082 89.0015 6.71289 88.6763 cv
7.00195 88.3521 7.0498 87.9165 7.0498 87.6792 cv
7.0498 87.061 6.39258 86.9263 6.16797 86.9263 cv
6.12012 86.9263 6.03125 86.9263 6.03125 87.0308 cv
6.03125 87.1187 6.10352 87.1187 6.15918 87.1265 cv
6.72754 87.1753 6.87207 87.4536 6.87207 87.6519 cv
6.87207 88.0415 6.46387 88.106 5.71973 88.2173 cv
5.0791 88.3208 li
4.56738 88.4634 4.30273 88.853 4.15039 89.2905 cv
4.15137 89.2896 li
cp
4.03809 90.9858 mo
1.9707 90.9858 li
1.78711 90.9858 1.69141 90.9858 1.66699 90.8091 cv
1.65137 90.729 1.65137 90.4956 1.65137 90.3354 cv
1.65137 89.6118 1.68359 88.7104 2.84082 88.7104 cv
3.3916 88.7104 4.03809 88.9038 4.03809 90.0942 cv
4.03809 90.9858 li
cp
f
5.01953 85.9878 mo
5.01953 83.7563 li
5.01953 83.5806 5.01953 83.5562 4.8418 83.5562 cv
4.05273 83.5562 3.28027 83.9897 3.28027 84.9907 cv
3.28027 85.9204 4.10645 86.6577 5.10938 86.6577 cv
6.18359 86.6577 6.96094 85.8159 6.96094 84.895 cv
6.96094 83.9175 6.07227 83.5562 5.91992 83.5562 cv
5.83984 83.5562 5.82324 83.6177 5.82324 83.6567 cv
5.82324 83.7261 5.87207 83.7417 5.93555 83.7573 cv
6.75977 84.0376 6.75977 84.7603 6.75977 84.8403 cv
6.75977 85.2417 6.51953 85.563 6.22266 85.7476 cv
5.83789 85.9878 5.30859 85.9878 5.01953 85.9878 cv
5.01953 85.9878 li
cp
4.8418 85.9878 mo
3.65723 85.9399 3.45898 85.2681 3.45898 84.9966 cv
3.45898 84.1724 4.53125 84.0923 4.8418 84.0923 cv
4.8418 85.9878 li
cp
f
4.19141 80.6851 mo
3.81445 80.5806 3.40625 80.4771 3.02148 80.397 cv
2.48535 80.3003 1.94824 80.2446 1.85156 80.2446 cv
1.40527 80.2446 1.40527 80.6851 1.40527 80.7808 cv
1.40527 81.3892 1.62988 81.9331 1.88574 82.3091 cv
2.32715 82.9565 2.86328 83.1655 2.90332 83.1655 cv
2.95898 83.1655 2.95898 83.1089 2.95898 83.0845 cv
2.95898 83.021 2.86328 82.645 2.56055 82.4761 cv
2.15527 82.2603 1.85254 82.0288 1.85254 81.3081 cv
1.85254 80.98 2.07617 80.9243 2.2041 80.9243 cv
2.21191 80.9243 2.58789 80.9487 3.13965 81.0444 cv
3.36328 81.0845 3.50684 81.1089 4.19434 81.2769 cv
4.19434 81.564 li
4.20313 81.7886 4.45801 82.1567 4.57813 82.1567 cv
4.62598 82.1567 4.63477 82.1489 4.63477 81.9731 cv
4.63477 81.397 li
5.19434 81.564 5.96191 81.7886 6.93652 82.1567 cv
7.12109 82.229 7.13672 82.229 7.14453 82.229 cv
7.20117 82.229 7.20117 82.1646 7.20117 82.1489 cv
7.20117 82.0366 7.09668 81.7886 6.93652 81.6284 cv
6.88867 81.5884 6.87305 81.5728 6.79297 81.5405 cv
6.08984 81.2603 5.37012 81.02 4.63477 80.812 cv
4.63477 79.0112 li
4.63477 78.9233 4.63477 78.772 4.55469 78.6431 cv
4.89063 78.731 6.19336 79.0591 6.8252 79.0591 cv
7.05664 79.0591 7.26465 78.9233 7.26465 78.5796 cv
7.26465 77.5151 6.60059 76.9233 6.34473 76.9233 cv
6.29688 76.9233 6.28027 76.9634 6.28027 77.0034 cv
6.28027 77.0669 6.39355 77.4907 6.70898 77.6108 cv
6.77344 77.6431 6.78125 77.6509 6.80566 77.8032 cv
6.81836 77.8921 6.82422 78.0435 6.82422 78.0513 cv
6.82422 78.1958 6.72852 78.3794 6.48047 78.3794 cv
6.38477 78.3794 5.94434 78.3237 5.76855 78.2993 cv
4.87988 78.1636 3.37598 77.771 1.55078 77.0825 cv
1.49512 77.0591 1.47949 77.0591 1.46289 77.0591 cv
1.40625 77.0591 1.40625 77.1069 1.40625 77.1392 cv
1.40625 77.2593 1.51855 77.4907 1.6543 77.6431 cv
1.66992 77.6509 1.70996 77.6987 1.7832 77.731 cv
2.56738 78.0513 3.37598 78.2993 4.19141 78.5396 cv
4.19141 80.6851 li
cp
f
.240234 75.0435 mo
.162109 75.105 .15625 75.1108 .15625 75.2231 cv
.15625 76.1919 li
.356445 76.1919 li
.356445 76.0239 li
.356445 75.7817 .384766 75.6411 .390625 75.6138 cv
3.36816 75.6138 li
3.51953 75.6138 3.77051 75.6138 3.77051 76.1919 cv
3.97168 76.1919 li
3.95508 75.9624 3.94922 75.7388 3.94922 75.5093 cv
3.94922 75.2788 3.95508 75.0552 3.97168 74.8257 cv
3.77051 74.8257 li
3.77051 75.3901 3.51855 75.3901 3.36719 75.3901 cv
.538086 75.3901 li
3.8877 72.9038 li
3.96582 72.8481 3.97168 72.8423 3.97168 72.7749 cv
3.97168 72.6685 3.92188 72.6685 3.81543 72.6685 cv
.759766 72.6685 li
.608398 72.6685 .357422 72.6685 .357422 72.103 cv
.15625 72.103 li
.172852 72.3325 .178711 72.5571 .178711 72.7866 cv
.178711 73.0161 .172852 73.2407 .15625 73.4702 cv
.357422 73.4702 li
.357422 72.8911 .608398 72.8911 .759766 72.8911 cv
3.12598 72.8911 li
.240234 75.0435 li
cp
f
2.49805 68.1284 mo
2.49805 68.3188 li
3.04785 68.3804 3.77051 68.4644 3.77051 69.52 cv
3.77051 70.0796 li
3.77051 70.3413 3.72559 70.3472 3.55273 70.3472 cv
.614258 70.3472 li
.429688 70.3472 .356445 70.3472 .356445 69.8247 cv
.356445 69.6294 li
.15625 69.6294 li
.162109 69.7476 .178711 70.4644 .178711 70.6099 cv
.178711 70.8228 .15625 71.4565 .15625 71.4614 cv
.356445 71.4614 li
.356445 71.3267 li
.356445 70.894 .413086 70.8833 .608398 70.8833 cv
3.51953 70.8833 li
3.70898 70.8833 3.77051 70.894 3.77051 71.3267 cv
3.77051 71.4614 li
3.97168 71.4614 li
3.97168 68.2964 li
2.49805 68.1284 li
cp
f
3.9043 65.3501 mo
3.9043 65.9995 3.37305 66.7993 1.99707 66.7993 cv
.699219 66.7993 .222656 65.9829 .222656 65.3501 cv
.222656 64.7163 .699219 63.8989 1.99707 63.8989 cv
3.37305 63.8989 3.9043 64.6997 3.9043 65.3501 cv
3.9043 65.3501 li
cp
2.08398 63.2974 mo
.966797 63.2974 .0439453 64.2124 .0439453 65.3501 cv
.0439453 66.4937 .966797 67.4028 2.08398 67.4028 cv
3.17773 67.4028 4.08301 66.4937 4.08301 65.3501 cv
4.08301 64.2065 3.17773 63.2974 2.08398 63.2974 cv
2.08398 63.2974 li
cp
f
6.91699 75.4341 mo
6.91699 74.5728 li
6.71582 74.5728 li
6.71582 75.4341 li
5.68945 75.4341 li
5.68945 75.6274 li
6.19141 75.6333 6.74414 75.8657 6.76074 76.4106 cv
6.91699 76.4106 li
6.91699 75.8813 li
8.43457 75.8813 li
9.06348 75.8813 9.19238 75.4146 9.19238 75.103 cv
9.19238 74.731 8.87012 74.4751 8.42285 74.4751 cv
8.1123 74.4751 li
8.1123 74.6763 li
8.41797 74.6763 li
8.80371 74.6763 9.01465 74.8491 9.01465 75.061 cv
9.01465 75.4341 8.54199 75.4341 8.44043 75.4341 cv
6.91699 75.4341 li
cp
f
5.24316 72.9136 mo
5.30566 73.7603 li
5.51074 73.7603 li
5.51074 73.3833 5.55078 73.3374 5.82422 73.3374 cv
8.68457 73.3374 li
8.9248 73.3374 8.9248 73.394 8.9248 73.7603 cv
9.12598 73.7603 li
9.12598 73.7495 9.10352 73.3569 9.10352 73.1333 cv
9.10352 72.9194 9.1084 72.7124 9.12598 72.4995 cv
8.9248 72.4995 li
8.9248 72.8589 8.9248 72.9136 8.68457 72.9136 cv
5.24316 72.9136 li
cp
f
5.01953 55.4565 mo
5.01953 55.3208 5.01953 55.1753 4.86426 55.1753 cv
4.70801 55.1753 4.70801 55.3198 4.70801 55.4565 cv
4.70801 59.7837 li
4.70801 59.9194 4.70801 60.063 4.86426 60.063 cv
5.01953 60.063 5.01953 59.9194 5.01953 59.7837 cv
5.01953 55.4565 li
cp
f
4.15137 49.2397 mo
3.95898 48.4614 3.4707 47.8345 2.84668 47.8345 cv
2.0791 47.8345 1.40527 48.7485 1.40527 49.9263 cv
1.40527 52.4409 li
1.65137 52.4409 li
1.65137 52.2515 li
1.65137 51.644 1.73926 51.6284 2.02734 51.6284 cv
6.25 51.6284 li
6.53809 51.6284 6.62695 51.644 6.62695 52.2515 cv
6.62695 52.4409 li
6.87207 52.4409 li
6.84766 52.1528 6.84766 51.5845 6.84766 51.2729 cv
6.84766 50.9604 6.84766 50.3921 6.87207 50.105 cv
6.62695 50.105 li
6.62695 50.2983 li
6.62695 50.9204 6.53809 50.936 6.24902 50.936 cv
4.2168 50.936 li
4.2168 50.0083 li
4.2168 49.8794 4.2168 49.5405 4.48926 49.2573 cv
4.77832 48.9507 5.02734 48.9507 5.56543 48.9507 cv
6.08691 48.9507 6.4082 48.9507 6.71289 48.6265 cv
7.00195 48.3013 7.0498 47.8667 7.0498 47.6284 cv
7.0498 47.0112 6.39258 46.8765 6.16797 46.8765 cv
6.12012 46.8765 6.03125 46.8765 6.03125 46.98 cv
6.03125 47.0688 6.10352 47.0688 6.15918 47.0767 cv
6.72754 47.1255 6.87207 47.4028 6.87207 47.6021 cv
6.87207 47.9917 6.46387 48.0562 5.71973 48.1675 cv
5.0791 48.27 li
4.56738 48.4136 4.30273 48.8032 4.15039 49.2407 cv
4.15137 49.2397 li
cp
4.03809 50.936 mo
1.9707 50.936 li
1.78711 50.936 1.69141 50.936 1.66699 50.7593 cv
1.65137 50.6792 1.65137 50.4458 1.65137 50.2847 cv
1.65137 49.561 1.68359 48.6606 2.84082 48.6606 cv
3.3916 48.6606 4.03809 48.854 4.03809 50.0435 cv
4.03809 50.936 li
cp
f
5.01953 45.938 mo
5.01953 43.7065 li
5.01953 43.5308 5.01953 43.5063 4.8418 43.5063 cv
4.05273 43.5063 3.28027 43.9399 3.28027 44.9409 cv
3.28027 45.8706 4.10645 46.6069 5.10938 46.6069 cv
6.18359 46.6069 6.96094 45.7661 6.96094 44.8452 cv
6.96094 43.8667 6.07227 43.5063 5.91992 43.5063 cv
5.83984 43.5063 5.82324 43.5679 5.82324 43.606 cv
5.82324 43.6763 5.87207 43.6919 5.93555 43.7065 cv
6.75977 43.9878 6.75977 44.7104 6.75977 44.7905 cv
6.75977 45.1919 6.51953 45.5122 6.22266 45.6968 cv
5.83789 45.938 5.30859 45.938 5.01953 45.938 cv
5.01953 45.938 li
cp
4.8418 45.938 mo
3.65723 45.8901 3.45898 45.2183 3.45898 44.9458 cv
3.45898 44.1226 4.53125 44.0415 4.8418 44.0415 cv
4.8418 45.938 li
cp
f
4.19141 40.6343 mo
3.81445 40.5308 3.40625 40.4263 3.02148 40.3462 cv
2.48535 40.2505 1.94824 40.1938 1.85156 40.1938 cv
1.40527 40.1938 1.40527 40.6343 1.40527 40.73 cv
1.40527 41.3384 1.62988 41.8823 1.88574 42.2583 cv
2.32715 42.9067 2.86328 43.1147 2.90332 43.1147 cv
2.95898 43.1147 2.95898 43.0591 2.95898 43.0347 cv
2.95898 42.9712 2.86328 42.5942 2.56055 42.4263 cv
2.15527 42.2104 1.85254 41.978 1.85254 41.2583 cv
1.85254 40.9302 2.07617 40.8745 2.2041 40.8745 cv
2.21191 40.8745 2.58789 40.8979 3.13965 40.9946 cv
3.36328 41.0347 3.50684 41.0581 4.19434 41.2261 cv
4.19434 41.5142 li
4.20313 41.7388 4.45801 42.1069 4.57813 42.1069 cv
4.62598 42.1069 4.63477 42.0981 4.63477 41.9224 cv
4.63477 41.3462 li
5.19434 41.5142 5.96191 41.7388 6.93652 42.1069 cv
7.12109 42.1792 7.13672 42.1792 7.14453 42.1792 cv
7.20117 42.1792 7.20117 42.1147 7.20117 42.0981 cv
7.20117 41.9868 7.09668 41.7388 6.93652 41.5786 cv
6.88867 41.5386 6.87305 41.522 6.79297 41.4907 cv
6.08984 41.2104 5.37012 40.9702 4.63477 40.7622 cv
4.63477 38.9614 li
4.63477 38.8735 4.63477 38.7212 4.55469 38.5933 cv
4.89063 38.6812 6.19336 39.0093 6.8252 39.0093 cv
7.05664 39.0093 7.26465 38.8735 7.26465 38.5288 cv
7.26465 37.4653 6.60059 36.8726 6.34473 36.8726 cv
6.29688 36.8726 6.28027 36.9126 6.28027 36.9526 cv
6.28027 37.0171 6.39355 37.4409 6.70898 37.561 cv
6.77344 37.5933 6.78125 37.6011 6.80566 37.7534 cv
6.81836 37.8413 6.82422 37.9937 6.82422 38.0015 cv
6.82422 38.145 6.72852 38.3296 6.48047 38.3296 cv
6.38477 38.3296 5.94434 38.2739 5.76855 38.2495 cv
4.87988 38.1138 3.37598 37.7212 1.55078 37.0327 cv
1.49512 37.0093 1.47949 37.0093 1.46289 37.0093 cv
1.40625 37.0093 1.40625 37.0571 1.40625 37.0894 cv
1.40625 37.2095 1.51855 37.4409 1.6543 37.5933 cv
1.66992 37.6011 1.70996 37.6489 1.7832 37.6812 cv
2.56738 38.0015 3.37598 38.2495 4.19141 38.4897 cv
4.19141 40.6343 li
cp
f
2.49805 32.7866 mo
2.49805 32.9771 li
3.04785 33.0386 3.77051 33.1226 3.77051 34.1782 cv
3.77051 34.7368 li
3.77051 34.9995 3.72559 35.0054 3.55273 35.0054 cv
.614258 35.0054 li
.429688 35.0054 .356445 35.0054 .356445 34.4819 cv
.356445 34.2876 li
.15625 34.2876 li
.162109 34.4048 .178711 35.1226 .178711 35.2681 cv
.178711 35.481 .15625 36.1138 .15625 36.1196 cv
.356445 36.1196 li
.356445 35.9849 li
.356445 35.5522 .413086 35.5405 .608398 35.5405 cv
3.51953 35.5405 li
3.70898 35.5405 3.77051 35.5522 3.77051 35.9849 cv
3.77051 36.1196 li
3.97168 36.1196 li
3.97168 32.9546 li
2.49805 32.7866 li
cp
f
3.9043 30.0298 mo
3.9043 30.6802 3.37305 31.48 1.99707 31.48 cv
.699219 31.48 .222656 30.6636 .222656 30.0298 cv
.222656 29.397 .699219 28.5796 1.99707 28.5796 cv
3.37305 28.5796 3.9043 29.3804 3.9043 30.0298 cv
3.9043 30.0298 li
cp
2.08398 27.9771 mo
.966797 27.9771 .0439453 28.8931 .0439453 30.0298 cv
.0439453 31.1733 .966797 32.0825 2.08398 32.0825 cv
3.17773 32.0825 4.08301 31.1733 4.08301 30.0298 cv
4.08301 28.8872 3.17773 27.9771 2.08398 27.9771 cv
2.08398 27.9771 li
cp
f
6.91699 35.3843 mo
6.91699 34.5229 li
6.71582 34.5229 li
6.71582 35.3843 li
5.68945 35.3843 li
5.68945 35.5776 li
6.19141 35.5825 6.74414 35.8159 6.76074 36.3599 cv
6.91699 36.3599 li
6.91699 35.8306 li
8.43457 35.8306 li
9.06348 35.8306 9.19238 35.3647 9.19238 35.0532 cv
9.19238 34.6812 8.87012 34.4253 8.42285 34.4253 cv
8.1123 34.4253 li
8.1123 34.6265 li
8.41797 34.6265 li
8.80371 34.6265 9.01465 34.7993 9.01465 35.0112 cv
9.01465 35.3843 8.54199 35.3843 8.44043 35.3843 cv
6.91699 35.3843 li
cp
f
5.24316 32.8638 mo
5.30566 33.7104 li
5.51074 33.7104 li
5.51074 33.3325 5.55078 33.2876 5.82422 33.2876 cv
8.68457 33.2876 li
8.9248 33.2876 8.9248 33.3442 8.9248 33.7104 cv
9.12598 33.7104 li
9.12598 33.6987 9.10352 33.3062 9.10352 33.0825 cv
9.10352 32.8696 9.1084 32.6626 9.12598 32.4497 cv
8.9248 32.4497 li
8.9248 32.8081 8.9248 32.8638 8.68457 32.8638 cv
5.24316 32.8638 li
cp
f
.5 lw
10 ml
10.2783 92.7778 mo
10.2783 27.1694 li
@
15.2627 89.2896 mo
15.0703 88.5112 14.582 87.8843 13.958 87.8843 cv
13.1904 87.8843 12.5166 88.7983 12.5166 89.9761 cv
12.5166 92.4917 li
12.7627 92.4917 li
12.7627 92.3013 li
12.7627 91.6938 12.8506 91.6782 13.1387 91.6782 cv
17.3613 91.6782 li
17.6494 91.6782 17.7383 91.6938 17.7383 92.3013 cv
17.7383 92.4917 li
17.9834 92.4917 li
17.959 92.2036 17.959 91.6353 17.959 91.3228 cv
17.959 91.0112 17.959 90.4429 17.9834 90.1548 cv
17.7383 90.1548 li
17.7383 90.3481 li
17.7383 90.9702 17.6494 90.9868 17.3604 90.9868 cv
15.3281 90.9868 li
15.3281 90.0581 li
15.3281 89.9292 15.3281 89.5903 15.6006 89.3081 cv
15.8896 89.0015 16.1387 89.0015 16.6768 89.0015 cv
17.1982 89.0015 17.5195 89.0015 17.8242 88.6763 cv
18.1133 88.3521 18.1611 87.9165 18.1611 87.6792 cv
18.1611 87.061 17.5039 86.9263 17.2793 86.9263 cv
17.2314 86.9263 17.1426 86.9263 17.1426 87.0308 cv
17.1426 87.1187 17.2148 87.1187 17.2705 87.1265 cv
17.8389 87.1753 17.9834 87.4536 17.9834 87.6519 cv
17.9834 88.0415 17.5752 88.106 16.8311 88.2173 cv
16.1904 88.3208 li
15.6787 88.4634 15.4141 88.853 15.2627 89.2905 cv
15.2627 89.2896 li
cp
15.1494 90.9858 mo
13.082 90.9858 li
12.8984 90.9858 12.8027 90.9858 12.7783 90.8091 cv
12.7627 90.729 12.7627 90.4956 12.7627 90.3354 cv
12.7627 89.6118 12.7949 88.7104 13.9521 88.7104 cv
14.5029 88.7104 15.1494 88.9038 15.1494 90.0942 cv
15.1494 90.9858 li
cp
f
16.1309 85.9878 mo
16.1309 83.7563 li
16.1309 83.5806 16.1309 83.5562 15.9531 83.5562 cv
15.1641 83.5562 14.3916 83.9897 14.3916 84.9907 cv
14.3916 85.9204 15.2178 86.6577 16.2207 86.6577 cv
17.2949 86.6577 18.0723 85.8159 18.0723 84.895 cv
18.0723 83.9175 17.1836 83.5562 17.0313 83.5562 cv
16.9512 83.5562 16.9346 83.6177 16.9346 83.6567 cv
16.9346 83.7261 16.9834 83.7417 17.0469 83.7573 cv
17.8711 84.0376 17.8711 84.7603 17.8711 84.8403 cv
17.8711 85.2417 17.6309 85.563 17.334 85.7476 cv
16.9492 85.9878 16.4199 85.9878 16.1309 85.9878 cv
16.1309 85.9878 li
cp
15.9531 85.9878 mo
14.7686 85.9399 14.5703 85.2681 14.5703 84.9966 cv
14.5703 84.1724 15.6426 84.0923 15.9531 84.0923 cv
15.9531 85.9878 li
cp
f
15.3027 80.6851 mo
14.9258 80.5806 14.5176 80.4771 14.1328 80.397 cv
13.5967 80.3003 13.0596 80.2446 12.9629 80.2446 cv
12.5166 80.2446 12.5166 80.6851 12.5166 80.7808 cv
12.5166 81.3892 12.7412 81.9331 12.998 82.3091 cv
13.4385 82.9565 13.9746 83.1655 14.0146 83.1655 cv
14.0703 83.1655 14.0703 83.1089 14.0703 83.0845 cv
14.0703 83.021 13.9746 82.645 13.6719 82.4761 cv
13.2666 82.2603 12.9639 82.0288 12.9639 81.3081 cv
12.9639 80.98 13.1875 80.9243 13.3154 80.9243 cv
13.3232 80.9243 13.6992 80.9487 14.251 81.0444 cv
14.4746 81.0845 14.6182 81.1089 15.3057 81.2769 cv
15.3057 81.564 li
15.3145 81.7886 15.5693 82.1567 15.6895 82.1567 cv
15.7383 82.1567 15.7461 82.1489 15.7461 81.9731 cv
15.7461 81.397 li
16.3057 81.564 17.0732 81.7886 18.0479 82.1567 cv
18.2324 82.229 18.248 82.229 18.2559 82.229 cv
18.3115 82.229 18.3115 82.1646 18.3115 82.1489 cv
18.3115 82.0366 18.208 81.7886 18.0479 81.6284 cv
18 81.5884 17.9844 81.5728 17.9043 81.5405 cv
17.2012 81.2603 16.4814 81.02 15.7461 80.812 cv
15.7461 79.0112 li
15.7461 78.9233 15.7461 78.772 15.666 78.6431 cv
16.002 78.731 17.3047 79.0591 17.9365 79.0591 cv
18.168 79.0591 18.376 78.9233 18.376 78.5796 cv
18.376 77.5151 17.7119 76.9233 17.4561 76.9233 cv
17.4082 76.9233 17.3916 76.9634 17.3916 77.0034 cv
17.3916 77.0669 17.5049 77.4907 17.8203 77.6108 cv
17.8848 77.6431 17.8926 77.6509 17.917 77.8032 cv
17.9297 77.8921 17.9355 78.0435 17.9355 78.0513 cv
17.9355 78.1958 17.8398 78.3794 17.5918 78.3794 cv
17.4961 78.3794 17.0557 78.3237 16.8799 78.2993 cv
15.9912 78.1636 14.4873 77.771 12.6621 77.0825 cv
12.6064 77.0591 12.5908 77.0591 12.5742 77.0591 cv
12.5176 77.0591 12.5176 77.1069 12.5176 77.1392 cv
12.5176 77.2593 12.6299 77.4907 12.7656 77.6431 cv
12.7822 77.6509 12.8223 77.6987 12.8945 77.731 cv
13.6787 78.0513 14.4873 78.2993 15.3037 78.5396 cv
15.3027 80.6851 li
cp
f
11.4854 75.0435 mo
11.4072 75.105 11.4014 75.1108 11.4014 75.2231 cv
11.4014 76.1919 li
11.6025 76.1919 li
11.6025 76.0239 li
11.6025 75.7817 11.6309 75.6411 11.6357 75.6138 cv
14.6133 75.6138 li
14.7646 75.6138 15.0156 75.6138 15.0156 76.1919 cv
15.2168 76.1919 li
15.2002 75.9624 15.1943 75.7388 15.1943 75.5093 cv
15.1943 75.2788 15.2002 75.0552 15.2168 74.8257 cv
15.0156 74.8257 li
15.0156 75.3901 14.7637 75.3901 14.6133 75.3901 cv
11.7832 75.3901 li
15.1328 72.9038 li
15.2109 72.8481 15.2168 72.8423 15.2168 72.7749 cv
15.2168 72.6685 15.167 72.6685 15.0605 72.6685 cv
12.0049 72.6685 li
11.8535 72.6685 11.6025 72.6685 11.6025 72.103 cv
11.4014 72.103 li
11.418 72.3325 11.4238 72.5571 11.4238 72.7866 cv
11.4238 73.0161 11.418 73.2407 11.4014 73.4702 cv
11.6025 73.4702 li
11.6025 72.8911 11.8545 72.8911 12.0049 72.8911 cv
14.3711 72.8911 li
11.4854 75.0435 li
cp
f
13.7432 68.1284 mo
13.7432 68.3188 li
14.293 68.3804 15.0156 68.4644 15.0156 69.52 cv
15.0156 70.0796 li
15.0156 70.3413 14.9707 70.3472 14.7979 70.3472 cv
11.8594 70.3472 li
11.6748 70.3472 11.6025 70.3472 11.6025 69.8247 cv
11.6025 69.6294 li
11.4014 69.6294 li
11.4072 69.7476 11.4238 70.4644 11.4238 70.6099 cv
11.4238 70.8228 11.4014 71.4565 11.4014 71.4614 cv
11.6025 71.4614 li
11.6025 71.3267 li
11.6025 70.894 11.6582 70.8833 11.8535 70.8833 cv
14.7646 70.8833 li
14.9541 70.8833 15.0156 70.894 15.0156 71.3267 cv
15.0156 71.4614 li
15.2168 71.4614 li
15.2168 68.2964 li
13.7432 68.1284 li
cp
f
15.1494 65.3501 mo
15.1494 65.9995 14.6182 66.7993 13.2422 66.7993 cv
11.9443 66.7993 11.4678 65.9829 11.4678 65.3501 cv
11.4678 64.7163 11.9443 63.8989 13.2422 63.8989 cv
14.6182 63.8989 15.1494 64.6997 15.1494 65.3501 cv
15.1494 65.3501 li
cp
13.3291 63.2974 mo
12.2119 63.2974 11.29 64.2124 11.29 65.3501 cv
11.29 66.4937 12.2119 67.4028 13.3291 67.4028 cv
14.4238 67.4028 15.3281 66.4937 15.3281 65.3501 cv
15.3281 64.2065 14.4238 63.2974 13.3291 63.2974 cv
13.3291 63.2974 li
cp
f
18.04 74.4497 mo
17.9443 74.4497 17.8945 74.4497 17.8945 74.5278 cv
17.8945 74.5562 17.8945 74.5679 17.9619 74.6411 cv
17.9668 74.6519 18.0176 74.7085 18.0459 74.7427 cv
17.9277 74.9106 17.8945 75.1245 17.8945 75.3325 cv
17.8945 76.1362 18.3174 76.3276 18.5986 76.3276 cv
18.7783 76.3276 18.9248 76.2485 19.0381 76.1147 cv
19.2236 75.9019 19.2627 75.689 19.3193 75.3423 cv
19.3701 75.063 19.4482 74.6089 19.8252 74.6089 cv
20.0449 74.6089 20.3047 74.7603 20.3047 75.2983 cv
20.3047 75.8345 19.9463 76.0308 19.5605 76.1313 cv
19.4863 76.1479 19.4639 76.1538 19.4639 76.2319 cv
19.4639 76.3276 19.5039 76.3276 19.6172 76.3276 cv
20.3135 76.3276 li
20.4102 76.3276 20.4609 76.3276 20.4609 76.2485 cv
20.4609 76.1978 20.3379 76.0913 20.209 75.979 cv
20.4492 75.7329 20.4609 75.4302 20.4609 75.2954 cv
20.4609 74.5659 20.0664 74.2974 19.667 74.2974 cv
19.4531 74.2974 19.2842 74.3921 19.1494 74.5376 cv
18.9521 74.7505 18.9072 75.0083 18.873 75.2036 cv
18.7939 75.6509 18.7275 76.0151 18.4287 76.0151 cv
18.249 76.0151 18.0293 75.8638 18.0293 75.3306 cv
18.0293 74.6802 18.4834 74.6519 18.6465 74.6411 cv
18.708 74.6353 18.708 74.5679 18.708 74.5454 cv
18.708 74.4497 18.6689 74.4497 18.5625 74.4497 cv
18.04 74.4497 li
cp
f
16.5107 72.8687 mo
16.5732 73.7153 li
16.7783 73.7153 li
16.7783 73.3384 16.8184 73.2925 17.0918 73.2925 cv
19.9521 73.2925 li
20.1924 73.2925 20.1924 73.3491 20.1924 73.7153 cv
20.3936 73.7153 li
20.3936 73.7046 20.3711 73.312 20.3711 73.0884 cv
20.3711 72.8755 20.377 72.6675 20.3936 72.4556 cv
20.1924 72.4556 li
20.1924 72.814 20.1924 72.8687 19.9521 72.8687 cv
16.5107 72.8687 li
cp
f
16.1309 55.4565 mo
16.1309 55.3208 16.1309 55.1753 15.9756 55.1753 cv
15.8193 55.1753 15.8193 55.3198 15.8193 55.4565 cv
15.8193 59.7837 li
15.8193 59.9194 15.8193 60.063 15.9756 60.063 cv
16.1309 60.063 16.1309 59.9194 16.1309 59.7837 cv
16.1309 55.4565 li
cp
f
15.2627 49.2397 mo
15.0703 48.4614 14.582 47.8345 13.958 47.8345 cv
13.1904 47.8345 12.5166 48.7485 12.5166 49.9263 cv
12.5166 52.4409 li
12.7627 52.4409 li
12.7627 52.2515 li
12.7627 51.644 12.8506 51.6284 13.1387 51.6284 cv
17.3613 51.6284 li
17.6494 51.6284 17.7383 51.644 17.7383 52.2515 cv
17.7383 52.4409 li
17.9834 52.4409 li
17.959 52.1528 17.959 51.5845 17.959 51.2729 cv
17.959 50.9604 17.959 50.3921 17.9834 50.105 cv
17.7383 50.105 li
17.7383 50.2983 li
17.7383 50.9204 17.6494 50.936 17.3604 50.936 cv
15.3281 50.936 li
15.3281 50.0083 li
15.3281 49.8794 15.3281 49.5405 15.6006 49.2573 cv
15.8896 48.9507 16.1387 48.9507 16.6768 48.9507 cv
17.1982 48.9507 17.5195 48.9507 17.8242 48.6265 cv
18.1133 48.3013 18.1611 47.8667 18.1611 47.6284 cv
18.1611 47.0112 17.5039 46.8765 17.2793 46.8765 cv
17.2314 46.8765 17.1426 46.8765 17.1426 46.98 cv
17.1426 47.0688 17.2148 47.0688 17.2705 47.0767 cv
17.8389 47.1255 17.9834 47.4028 17.9834 47.6021 cv
17.9834 47.9917 17.5752 48.0562 16.8311 48.1675 cv
16.1904 48.27 li
15.6787 48.4136 15.4141 48.8032 15.2627 49.2407 cv
15.2627 49.2397 li
cp
15.1494 50.936 mo
13.082 50.936 li
12.8984 50.936 12.8027 50.936 12.7783 50.7593 cv
12.7627 50.6792 12.7627 50.4458 12.7627 50.2847 cv
12.7627 49.561 12.7949 48.6606 13.9521 48.6606 cv
14.5029 48.6606 15.1494 48.854 15.1494 50.0435 cv
15.1494 50.936 li
cp
f
16.1309 45.938 mo
16.1309 43.7065 li
16.1309 43.5308 16.1309 43.5063 15.9531 43.5063 cv
15.1641 43.5063 14.3916 43.9399 14.3916 44.9409 cv
14.3916 45.8706 15.2178 46.6069 16.2207 46.6069 cv
17.2949 46.6069 18.0723 45.7661 18.0723 44.8452 cv
18.0723 43.8667 17.1836 43.5063 17.0313 43.5063 cv
16.9512 43.5063 16.9346 43.5679 16.9346 43.606 cv
16.9346 43.6763 16.9834 43.6919 17.0469 43.7065 cv
17.8711 43.9878 17.8711 44.7104 17.8711 44.7905 cv
17.8711 45.1919 17.6309 45.5122 17.334 45.6968 cv
16.9492 45.938 16.4199 45.938 16.1309 45.938 cv
16.1309 45.938 li
cp
15.9531 45.938 mo
14.7686 45.8901 14.5703 45.2183 14.5703 44.9458 cv
14.5703 44.1226 15.6426 44.0415 15.9531 44.0415 cv
15.9531 45.938 li
cp
f
15.3027 40.6343 mo
14.9258 40.5308 14.5176 40.4263 14.1328 40.3462 cv
13.5967 40.2505 13.0596 40.1938 12.9629 40.1938 cv
12.5166 40.1938 12.5166 40.6343 12.5166 40.73 cv
12.5166 41.3384 12.7412 41.8823 12.998 42.2583 cv
13.4385 42.9067 13.9746 43.1147 14.0146 43.1147 cv
14.0703 43.1147 14.0703 43.0591 14.0703 43.0347 cv
14.0703 42.9712 13.9746 42.5942 13.6719 42.4263 cv
13.2666 42.2104 12.9639 41.978 12.9639 41.2583 cv
12.9639 40.9302 13.1875 40.8745 13.3154 40.8745 cv
13.3232 40.8745 13.6992 40.8979 14.251 40.9946 cv
14.4746 41.0347 14.6182 41.0581 15.3057 41.2261 cv
15.3057 41.5142 li
15.3145 41.7388 15.5693 42.1069 15.6895 42.1069 cv
15.7383 42.1069 15.7461 42.0981 15.7461 41.9224 cv
15.7461 41.3462 li
16.3057 41.5142 17.0732 41.7388 18.0479 42.1069 cv
18.2324 42.1792 18.248 42.1792 18.2559 42.1792 cv
18.3115 42.1792 18.3115 42.1147 18.3115 42.0981 cv
18.3115 41.9868 18.208 41.7388 18.0479 41.5786 cv
18 41.5386 17.9844 41.522 17.9043 41.4907 cv
17.2012 41.2104 16.4814 40.9702 15.7461 40.7622 cv
15.7461 38.9614 li
15.7461 38.8735 15.7461 38.7212 15.666 38.5933 cv
16.002 38.6812 17.3047 39.0093 17.9365 39.0093 cv
18.168 39.0093 18.376 38.8735 18.376 38.5288 cv
18.376 37.4653 17.7119 36.8726 17.4561 36.8726 cv
17.4082 36.8726 17.3916 36.9126 17.3916 36.9526 cv
17.3916 37.0171 17.5049 37.4409 17.8203 37.561 cv
17.8848 37.5933 17.8926 37.6011 17.917 37.7534 cv
17.9297 37.8413 17.9355 37.9937 17.9355 38.0015 cv
17.9355 38.145 17.8398 38.3296 17.5918 38.3296 cv
17.4961 38.3296 17.0557 38.2739 16.8799 38.2495 cv
15.9912 38.1138 14.4873 37.7212 12.6621 37.0327 cv
12.6064 37.0093 12.5908 37.0093 12.5742 37.0093 cv
12.5176 37.0093 12.5176 37.0571 12.5176 37.0894 cv
12.5176 37.2095 12.6299 37.4409 12.7656 37.5933 cv
12.7822 37.6011 12.8223 37.6489 12.8945 37.6812 cv
13.6787 38.0015 14.4873 38.2495 15.3037 38.4897 cv
15.3027 40.6343 li
cp
f
13.7432 32.7866 mo
13.7432 32.9771 li
14.293 33.0386 15.0156 33.1226 15.0156 34.1782 cv
15.0156 34.7368 li
15.0156 34.9995 14.9707 35.0054 14.7979 35.0054 cv
11.8594 35.0054 li
11.6748 35.0054 11.6025 35.0054 11.6025 34.4819 cv
11.6025 34.2876 li
11.4014 34.2876 li
11.4072 34.4048 11.4238 35.1226 11.4238 35.2681 cv
11.4238 35.481 11.4014 36.1138 11.4014 36.1196 cv
11.6025 36.1196 li
11.6025 35.9849 li
11.6025 35.5522 11.6582 35.5405 11.8535 35.5405 cv
14.7646 35.5405 li
14.9541 35.5405 15.0156 35.5522 15.0156 35.9849 cv
15.0156 36.1196 li
15.2168 36.1196 li
15.2168 32.9546 li
13.7432 32.7866 li
cp
f
15.1494 30.0298 mo
15.1494 30.6802 14.6182 31.48 13.2422 31.48 cv
11.9443 31.48 11.4678 30.6636 11.4678 30.0298 cv
11.4678 29.397 11.9443 28.5796 13.2422 28.5796 cv
14.6182 28.5796 15.1494 29.3804 15.1494 30.0298 cv
15.1494 30.0298 li
cp
13.3291 27.9771 mo
12.2119 27.9771 11.29 28.8931 11.29 30.0298 cv
11.29 31.1733 12.2119 32.0825 13.3291 32.0825 cv
14.4238 32.0825 15.3281 31.1733 15.3281 30.0298 cv
15.3281 28.8872 14.4238 27.9771 13.3291 27.9771 cv
13.3291 27.9771 li
cp
f
18.04 34.3999 mo
17.9443 34.3999 17.8945 34.3999 17.8945 34.478 cv
17.8945 34.5063 17.8945 34.5181 17.9619 34.5913 cv
17.9668 34.6021 18.0176 34.6587 18.0459 34.6919 cv
17.9277 34.8608 17.8945 35.0747 17.8945 35.2827 cv
17.8945 36.0854 18.3174 36.2769 18.5986 36.2769 cv
18.7783 36.2769 18.9248 36.1987 19.0381 36.0649 cv
19.2236 35.8521 19.2627 35.6392 19.3193 35.2925 cv
19.3701 35.0122 19.4482 34.5591 19.8252 34.5591 cv
20.0449 34.5591 20.3047 34.7104 20.3047 35.2476 cv
20.3047 35.7847 19.9463 35.981 19.5605 36.0815 cv
19.4863 36.0981 19.4639 36.103 19.4639 36.1821 cv
19.4639 36.2769 19.5039 36.2769 19.6172 36.2769 cv
20.3135 36.2769 li
20.4102 36.2769 20.4609 36.2769 20.4609 36.1987 cv
20.4609 36.1479 20.3379 36.0415 20.209 35.9292 cv
20.4492 35.6831 20.4609 35.3794 20.4609 35.2456 cv
20.4609 34.5161 20.0664 34.2466 19.667 34.2466 cv
19.4531 34.2466 19.2842 34.3423 19.1494 34.4878 cv
18.9521 34.7007 18.9072 34.9575 18.873 35.1538 cv
18.7939 35.6011 18.7275 35.9644 18.4287 35.9644 cv
18.249 35.9644 18.0293 35.813 18.0293 35.2808 cv
18.0293 34.6304 18.4834 34.6021 18.6465 34.5913 cv
18.708 34.5854 18.708 34.5181 18.708 34.4956 cv
18.708 34.3999 18.6689 34.3999 18.5625 34.3999 cv
18.04 34.3999 li
cp
f
16.5107 32.8188 mo
16.5732 33.6655 li
16.7783 33.6655 li
16.7783 33.2886 16.8184 33.2427 17.0918 33.2427 cv
19.9521 33.2427 li
20.1924 33.2427 20.1924 33.2993 20.1924 33.6655 cv
20.3936 33.6655 li
20.3936 33.6548 20.3711 33.2622 20.3711 33.0386 cv
20.3711 32.8257 20.377 32.6177 20.3936 32.4048 cv
20.1924 32.4048 li
20.1924 32.7632 20.1924 32.8188 19.9521 32.8188 cv
16.5107 32.8188 li
cp
f
234.291 91.2993 mo
234.001 91.2993 233.914 91.2759 233.914 90.6479 cv
233.914 90.4419 li
233.668 90.4419 li
233.692 90.7212 233.692 91.354 233.692 91.6577 cv
233.692 91.9702 233.692 92.6021 233.668 92.8823 cv
233.914 92.8823 li
233.914 92.6733 li
233.914 92.0376 234.001 92.0132 234.291 92.0132 cv
238.512 92.0132 li
238.801 92.0132 238.889 92.0376 238.889 92.6733 cv
238.889 92.8823 li
239.134 92.8823 li
239.111 92.6021 239.111 91.9692 239.111 91.6655 cv
239.111 91.353 239.111 90.7212 239.134 90.4409 cv
238.889 90.4409 li
238.889 90.6479 li
238.889 91.2749 238.8 91.2993 238.512 91.2993 cv
234.291 91.2993 li
cp
f
236.373 89.3579 mo
238.527 89.3579 li
238.889 89.3579 238.889 89.4448 238.889 89.9722 cv
239.134 89.9722 li
239.126 89.6919 239.111 89.2837 239.111 89.0679 cv
239.111 88.8599 239.126 88.4429 239.134 88.1714 cv
238.889 88.1714 li
238.889 88.7114 238.889 88.8003 238.528 88.8003 cv
237.05 88.8003 li
236.215 88.8003 235.765 88.2319 235.765 87.7192 cv
235.765 87.2153 236.2 87.1265 236.658 87.1265 cv
238.528 87.1265 li
238.889 87.1265 238.889 87.2144 238.889 87.7476 cv
239.134 87.7476 li
239.126 87.4673 239.111 87.0591 239.111 86.8433 cv
239.111 86.6353 239.126 86.2183 239.134 85.9468 cv
238.889 85.9468 li
238.889 86.481 238.889 86.5679 238.528 86.5679 cv
237.05 86.5679 li
236.215 86.5679 235.765 85.9995 235.765 85.4878 cv
235.765 84.9839 236.2 84.895 236.658 84.895 cv
238.528 84.895 li
238.889 84.895 238.889 84.9839 238.889 85.5229 cv
239.134 85.5229 li
239.126 85.2427 239.111 84.8345 239.111 84.6187 cv
239.111 84.4106 239.126 83.9937 239.134 83.7222 cv
238.889 83.7222 li
238.889 84.1323 238.889 84.3296 238.648 84.3374 cv
237.114 84.3374 li
236.423 84.3374 236.173 84.3374 235.884 84.5864 cv
235.748 84.6987 235.587 84.9634 235.587 85.4282 cv
235.587 86.1011 236.074 86.4536 236.381 86.5894 cv
235.676 86.7017 235.587 87.2954 235.587 87.6558 cv
235.587 88.2407 235.935 88.6177 236.438 88.8413 cv
235.587 88.8413 li
235.674 89.9712 li
235.921 89.9712 li
235.921 89.4204 235.978 89.3579 236.373 89.3579 cv
236.373 89.3579 li
cp
f
236.454 80.9087 mo
236.078 80.8042 235.668 80.7007 235.285 80.6206 cv
234.748 80.5239 234.21 80.4683 234.115 80.4683 cv
233.668 80.4683 233.668 80.9087 233.668 81.0044 cv
233.668 81.6128 233.892 82.1567 234.149 82.5327 cv
234.589 83.1802 235.125 83.3892 235.166 83.3892 cv
235.221 83.3892 235.221 83.3325 235.221 83.3081 cv
235.221 83.2446 235.126 82.8687 234.824 82.7007 cv
234.417 82.4839 234.115 82.2524 234.115 81.5317 cv
234.115 81.2036 234.338 81.1479 234.466 81.1479 cv
234.474 81.1479 234.85 81.1724 235.402 81.2681 cv
235.625 81.3081 235.769 81.3325 236.458 81.5005 cv
236.458 81.7886 li
236.465 82.0122 236.721 82.3804 236.841 82.3804 cv
236.889 82.3804 236.897 82.3726 236.897 82.1968 cv
236.897 81.6206 li
237.457 81.7886 238.224 82.0122 239.2 82.3804 cv
239.383 82.4526 239.399 82.4526 239.407 82.4526 cv
239.463 82.4526 239.463 82.3882 239.463 82.3726 cv
239.463 82.2603 239.359 82.0122 239.2 81.8521 cv
239.151 81.812 239.135 81.7964 239.055 81.7642 cv
238.352 81.4839 237.632 81.2437 236.897 81.0356 cv
236.897 79.2349 li
236.897 79.147 236.897 78.9956 236.817 78.8667 cv
237.153 78.9556 238.457 79.2837 239.087 79.2837 cv
239.32 79.2837 239.528 79.147 239.528 78.8032 cv
239.528 77.7388 238.863 77.147 238.607 77.147 cv
238.559 77.147 238.543 77.187 238.543 77.2271 cv
238.543 77.2905 238.657 77.7153 238.971 77.8345 cv
239.036 77.8667 239.043 77.8745 239.068 78.0269 cv
239.081 78.1157 239.087 78.2671 239.087 78.2749 cv
239.087 78.4194 238.991 78.603 238.743 78.603 cv
238.647 78.603 238.207 78.5474 238.031 78.5229 cv
237.142 78.3872 235.638 77.9946 233.813 77.3062 cv
233.757 77.2827 233.742 77.2827 233.725 77.2827 cv
233.668 77.2827 233.668 77.3306 233.668 77.3628 cv
233.668 77.4829 233.781 77.7153 233.917 77.8667 cv
233.933 77.8745 233.973 77.9224 234.045 77.9546 cv
234.83 78.2749 235.638 78.5229 236.455 78.7632 cv
236.454 80.9087 li
cp
f
232.502 75.2671 mo
232.424 75.3286 232.418 75.3345 232.418 75.4468 cv
232.418 76.4155 li
232.62 76.4155 li
232.62 76.2476 li
232.62 76.0054 232.648 75.8647 232.654 75.8374 cv
235.631 75.8374 li
235.782 75.8374 236.034 75.8374 236.034 76.4155 cv
236.234 76.4155 li
236.217 76.186 236.211 75.9624 236.211 75.7329 cv
236.211 75.5024 236.217 75.2788 236.234 75.0493 cv
236.034 75.0493 li
236.034 75.6138 235.781 75.6138 235.63 75.6138 cv
232.8 75.6138 li
236.15 73.1274 li
236.229 73.0718 236.234 73.0659 236.234 72.9985 cv
236.234 72.8921 236.184 72.8921 236.078 72.8921 cv
233.022 72.8921 li
232.871 72.8921 232.62 72.8921 232.62 72.3267 cv
232.418 72.3267 li
232.436 72.5562 232.441 72.7808 232.441 73.0103 cv
232.441 73.2397 232.436 73.4644 232.418 73.6938 cv
232.62 73.6938 li
232.62 73.1147 232.872 73.1147 233.022 73.1147 cv
235.388 73.1147 li
232.502 75.2671 li
cp
f
234.761 68.353 mo
234.761 68.5425 li
235.31 68.604 236.033 68.688 236.033 69.7437 cv
236.033 70.3032 li
236.033 70.5659 235.989 70.5708 235.815 70.5708 cv
232.876 70.5708 li
232.693 70.5708 232.62 70.5708 232.62 70.0483 cv
232.62 69.853 li
232.418 69.853 li
232.424 69.9712 232.441 70.688 232.441 70.8335 cv
232.441 71.0464 232.418 71.6802 232.418 71.6851 cv
232.62 71.6851 li
232.62 71.5503 li
232.62 71.1177 232.675 71.1069 232.871 71.1069 cv
235.782 71.1069 li
235.971 71.1069 236.034 71.1177 236.034 71.5503 cv
236.034 71.6851 li
236.234 71.6851 li
236.234 68.52 li
234.761 68.353 li
cp
f
236.167 65.5737 mo
236.167 66.2231 235.635 67.0229 234.259 67.0229 cv
232.961 67.0229 232.486 66.2065 232.486 65.5737 cv
232.486 64.9399 232.961 64.1235 234.259 64.1235 cv
235.635 64.1235 236.167 64.9233 236.167 65.5737 cv
236.167 65.5737 li
cp
234.346 63.521 mo
233.229 63.521 232.307 64.436 232.307 65.5737 cv
232.307 66.7173 233.229 67.6265 234.346 67.6265 cv
235.441 67.6265 236.345 66.7173 236.345 65.5737 cv
236.345 64.4302 235.441 63.521 234.346 63.521 cv
234.346 63.521 li
cp
f
239.179 75.6577 mo
239.179 74.7964 li
238.978 74.7964 li
238.978 75.6577 li
237.953 75.6577 li
237.953 75.8511 li
238.455 75.8569 239.006 76.0894 239.023 76.6343 cv
239.179 76.6343 li
239.179 76.105 li
240.697 76.105 li
241.326 76.105 241.455 75.6382 241.455 75.3267 cv
241.455 74.9546 241.132 74.6987 240.686 74.6987 cv
240.375 74.6987 li
240.375 74.8999 li
240.681 74.8999 li
241.067 74.8999 241.277 75.0728 241.277 75.2847 cv
241.277 75.6577 240.804 75.6577 240.704 75.6577 cv
239.179 75.6577 li
cp
f
237.505 73.1372 mo
237.569 73.9839 li
237.773 73.9839 li
237.773 73.6069 237.813 73.561 238.086 73.561 cv
240.947 73.561 li
241.187 73.561 241.187 73.6177 241.187 73.9839 cv
241.388 73.9839 li
241.388 73.9731 241.366 73.5806 241.366 73.3569 cv
241.366 73.1431 241.372 72.936 241.388 72.7231 cv
241.187 72.7231 li
241.187 73.0825 241.187 73.1372 240.947 73.1372 cv
237.505 73.1372 li
cp
f
237.283 55.6802 mo
237.283 55.5444 237.283 55.3989 237.126 55.3989 cv
236.97 55.3989 236.97 55.5435 236.97 55.6802 cv
236.97 60.0073 li
236.97 60.1431 236.97 60.2866 237.126 60.2866 cv
237.283 60.2866 237.283 60.1431 237.283 60.0073 cv
237.283 55.6802 li
cp
f
234.291 51.1372 mo
234.001 51.1372 233.914 51.1138 233.914 50.4868 cv
233.914 50.2798 li
233.668 50.2798 li
233.692 50.5601 233.692 51.1919 233.692 51.4966 cv
233.692 51.8081 233.692 52.4409 233.668 52.7202 cv
233.914 52.7202 li
233.914 52.5112 li
233.914 51.8765 234.001 51.8521 234.291 51.8521 cv
238.512 51.8521 li
238.801 51.8521 238.889 51.8765 238.889 52.5112 cv
238.889 52.7202 li
239.134 52.7202 li
239.111 52.4409 239.111 51.8081 239.111 51.5044 cv
239.111 51.1919 239.111 50.5601 239.134 50.2798 cv
238.889 50.2798 li
238.889 50.4858 li
238.889 51.1138 238.8 51.1372 238.512 51.1372 cv
234.291 51.1372 li
cp
f
236.373 49.1968 mo
238.527 49.1968 li
238.889 49.1968 238.889 49.2827 238.889 49.8101 cv
239.134 49.8101 li
239.126 49.5308 239.111 49.1226 239.111 48.9058 cv
239.111 48.6978 239.126 48.2817 239.134 48.0103 cv
238.889 48.0103 li
238.889 48.5503 238.889 48.6382 238.528 48.6382 cv
237.05 48.6382 li
236.215 48.6382 235.765 48.0698 235.765 47.5581 cv
235.765 47.0532 236.2 46.9653 236.658 46.9653 cv
238.528 46.9653 li
238.889 46.9653 238.889 47.0522 238.889 47.5854 cv
239.134 47.5854 li
239.126 47.3052 239.111 46.8979 239.111 46.6812 cv
239.111 46.4731 239.126 46.0571 239.134 45.7847 cv
238.889 45.7847 li
238.889 46.3188 238.889 46.4067 238.528 46.4067 cv
237.05 46.4067 li
236.215 46.4067 235.765 45.8384 235.765 45.3257 cv
235.765 44.8218 236.2 44.7339 236.658 44.7339 cv
238.528 44.7339 li
238.889 44.7339 238.889 44.8228 238.889 45.3608 cv
239.134 45.3608 li
239.126 45.0806 239.111 44.6724 239.111 44.4565 cv
239.111 44.2485 239.126 43.8325 239.134 43.5601 cv
238.889 43.5601 li
238.889 43.9712 238.889 44.1675 238.648 44.1763 cv
237.114 44.1763 li
236.423 44.1763 236.173 44.1763 235.884 44.4243 cv
235.748 44.5366 235.587 44.8013 235.587 45.2661 cv
235.587 45.939 236.074 46.2915 236.381 46.4282 cv
235.676 46.5405 235.587 47.1333 235.587 47.4937 cv
235.587 48.0786 235.935 48.4556 236.438 48.6802 cv
235.587 48.6802 li
235.674 49.8101 li
235.921 49.8101 li
235.921 49.2593 235.978 49.1958 236.373 49.1958 cv
236.373 49.1968 li
cp
f
236.454 40.7466 mo
236.078 40.6431 235.668 40.5386 235.285 40.4585 cv
234.748 40.3628 234.21 40.3062 234.115 40.3062 cv
233.668 40.3062 233.668 40.7466 233.668 40.8423 cv
233.668 41.4507 233.892 41.9946 234.149 42.3706 cv
234.589 43.019 235.125 43.2271 235.166 43.2271 cv
235.221 43.2271 235.221 43.1714 235.221 43.147 cv
235.221 43.0825 235.126 42.7065 234.824 42.5386 cv
234.417 42.3228 234.115 42.0903 234.115 41.3706 cv
234.115 41.0425 234.338 40.9868 234.466 40.9868 cv
234.474 40.9868 234.85 41.0103 235.402 41.106 cv
235.625 41.146 235.769 41.1704 236.458 41.3384 cv
236.458 41.6265 li
236.465 41.8501 236.721 42.2183 236.841 42.2183 cv
236.889 42.2183 236.897 42.2104 236.897 42.0347 cv
236.897 41.4585 li
237.457 41.6265 238.224 41.8501 239.2 42.2183 cv
239.383 42.2905 239.399 42.2905 239.407 42.2905 cv
239.463 42.2905 239.463 42.2271 239.463 42.2104 cv
239.463 42.0991 239.359 41.8501 239.2 41.6909 cv
239.151 41.6509 239.135 41.6343 239.055 41.603 cv
238.352 41.3228 237.632 41.0825 236.897 40.8745 cv
236.897 39.0737 li
236.897 38.9858 236.897 38.8335 236.817 38.7056 cv
237.153 38.7935 238.457 39.1216 239.087 39.1216 cv
239.32 39.1216 239.528 38.9858 239.528 38.6411 cv
239.528 37.5776 238.863 36.9849 238.607 36.9849 cv
238.559 36.9849 238.543 37.0249 238.543 37.0649 cv
238.543 37.1294 238.657 37.5532 238.971 37.6733 cv
239.036 37.7056 239.043 37.7134 239.068 37.8657 cv
239.081 37.9536 239.087 38.106 239.087 38.1138 cv
239.087 38.2573 238.991 38.4419 238.743 38.4419 cv
238.647 38.4419 238.207 38.3853 238.031 38.3618 cv
237.142 38.2251 235.638 37.8335 233.813 37.145 cv
233.757 37.1216 233.742 37.1216 233.725 37.1216 cv
233.668 37.1216 233.668 37.1694 233.668 37.2007 cv
233.668 37.3208 233.781 37.5532 233.917 37.7056 cv
233.933 37.7134 233.973 37.7612 234.045 37.7935 cv
234.83 38.1138 235.638 38.3618 236.455 38.6021 cv
236.454 40.7466 li
cp
f
234.761 32.8989 mo
234.761 33.0894 li
235.31 33.1499 236.033 33.2339 236.033 34.2905 cv
236.033 34.8491 li
236.033 35.1118 235.989 35.1177 235.815 35.1177 cv
232.876 35.1177 li
232.693 35.1177 232.62 35.1177 232.62 34.5942 cv
232.62 34.3999 li
232.418 34.3999 li
232.424 34.5171 232.441 35.2349 232.441 35.3804 cv
232.441 35.5933 232.418 36.2261 232.418 36.2319 cv
232.62 36.2319 li
232.62 36.0972 li
232.62 35.6646 232.675 35.6528 232.871 35.6528 cv
235.782 35.6528 li
235.971 35.6528 236.034 35.6646 236.034 36.0972 cv
236.034 36.2319 li
236.234 36.2319 li
236.234 33.0669 li
234.761 32.8989 li
cp
f
236.167 30.1421 mo
236.167 30.7925 235.635 31.5923 234.259 31.5923 cv
232.961 31.5923 232.486 30.7749 232.486 30.1421 cv
232.486 29.5093 232.961 28.6919 234.259 28.6919 cv
235.635 28.6919 236.167 29.4917 236.167 30.1421 cv
236.167 30.1421 li
cp
234.346 28.0894 mo
233.229 28.0894 232.307 29.0044 232.307 30.1421 cv
232.307 31.2856 233.229 32.1948 234.346 32.1948 cv
235.441 32.1948 236.345 31.2856 236.345 30.1421 cv
236.345 28.9995 235.441 28.0894 234.346 28.0894 cv
234.346 28.0894 li
cp
f
239.179 35.4966 mo
239.179 34.6353 li
238.978 34.6353 li
238.978 35.4966 li
237.953 35.4966 li
237.953 35.689 li
238.455 35.6948 239.006 35.9272 239.023 36.4722 cv
239.179 36.4722 li
239.179 35.9429 li
240.697 35.9429 li
241.326 35.9429 241.455 35.4761 241.455 35.1655 cv
241.455 34.7935 241.132 34.5376 240.686 34.5376 cv
240.375 34.5376 li
240.375 34.7378 li
240.681 34.7378 li
241.067 34.7378 241.277 34.9116 241.277 35.1226 cv
241.277 35.4966 240.804 35.4966 240.704 35.4966 cv
239.179 35.4966 li
cp
f
237.505 32.9761 mo
237.569 33.8228 li
237.773 33.8228 li
237.773 33.4448 237.813 33.3999 238.086 33.3999 cv
240.947 33.3999 li
241.187 33.3999 241.187 33.4565 241.187 33.8228 cv
241.388 33.8228 li
241.388 33.811 241.366 33.4185 241.366 33.1948 cv
241.366 32.9819 241.372 32.7749 241.388 32.562 cv
241.187 32.562 li
241.187 32.9204 241.187 32.9761 240.947 32.9761 cv
237.505 32.9761 li
cp
f
242.541 93.1128 mo
242.541 27.2817 li
@
245.402 91.2993 mo
245.113 91.2993 245.025 91.2759 245.025 90.6479 cv
245.025 90.4419 li
244.78 90.4419 li
244.803 90.7212 244.803 91.354 244.803 91.6577 cv
244.803 91.9702 244.803 92.6021 244.78 92.8823 cv
245.025 92.8823 li
245.025 92.6733 li
245.025 92.0376 245.113 92.0132 245.402 92.0132 cv
249.624 92.0132 li
249.913 92.0132 250 92.0376 250 92.6733 cv
250 92.8823 li
250.246 92.8823 li
250.222 92.6021 250.222 91.9692 250.222 91.6655 cv
250.222 91.353 250.222 90.7212 250.246 90.4409 cv
250 90.4409 li
250 90.6479 li
250 91.2749 249.912 91.2993 249.624 91.2993 cv
245.402 91.2993 li
cp
f
247.484 89.3579 mo
249.638 89.3579 li
250 89.3579 250 89.4448 250 89.9722 cv
250.246 89.9722 li
250.238 89.6919 250.222 89.2837 250.222 89.0679 cv
250.222 88.8599 250.238 88.4429 250.246 88.1714 cv
250 88.1714 li
250 88.7114 250 88.8003 249.639 88.8003 cv
248.162 88.8003 li
247.327 88.8003 246.876 88.2319 246.876 87.7192 cv
246.876 87.2153 247.311 87.1265 247.769 87.1265 cv
249.639 87.1265 li
250 87.1265 250 87.2144 250 87.7476 cv
250.246 87.7476 li
250.238 87.4673 250.222 87.0591 250.222 86.8433 cv
250.222 86.6353 250.238 86.2183 250.246 85.9468 cv
250 85.9468 li
250 86.481 250 86.5679 249.639 86.5679 cv
248.162 86.5679 li
247.327 86.5679 246.876 85.9995 246.876 85.4878 cv
246.876 84.9839 247.311 84.895 247.769 84.895 cv
249.639 84.895 li
250 84.895 250 84.9839 250 85.5229 cv
250.246 85.5229 li
250.238 85.2427 250.222 84.8345 250.222 84.6187 cv
250.222 84.4106 250.238 83.9937 250.246 83.7222 cv
250 83.7222 li
250 84.1323 250 84.3296 249.759 84.3374 cv
248.225 84.3374 li
247.534 84.3374 247.285 84.3374 246.996 84.5864 cv
246.859 84.6987 246.699 84.9634 246.699 85.4282 cv
246.699 86.1011 247.185 86.4536 247.493 86.5894 cv
246.788 86.7017 246.699 87.2954 246.699 87.6558 cv
246.699 88.2407 247.046 88.6177 247.549 88.8413 cv
246.699 88.8413 li
246.786 89.9712 li
247.033 89.9712 li
247.033 89.4204 247.09 89.3579 247.484 89.3579 cv
247.484 89.3579 li
cp
f
247.565 80.9087 mo
247.189 80.8042 246.78 80.7007 246.396 80.6206 cv
245.859 80.5239 245.323 80.4683 245.226 80.4683 cv
244.78 80.4683 244.78 80.9087 244.78 81.0044 cv
244.78 81.6128 245.003 82.1567 245.26 82.5327 cv
245.701 83.1802 246.237 83.3892 246.277 83.3892 cv
246.333 83.3892 246.333 83.3325 246.333 83.3081 cv
246.333 83.2446 246.238 82.8687 245.935 82.7007 cv
245.529 82.4839 245.226 82.2524 245.226 81.5317 cv
245.226 81.2036 245.45 81.1479 245.578 81.1479 cv
245.585 81.1479 245.961 81.1724 246.513 81.2681 cv
246.737 81.3081 246.88 81.3325 247.569 81.5005 cv
247.569 81.7886 li
247.577 82.0122 247.833 82.3804 247.953 82.3804 cv
248 82.3804 248.008 82.3726 248.008 82.1968 cv
248.008 81.6206 li
248.568 81.7886 249.335 82.0122 250.311 82.3804 cv
250.495 82.4526 250.51 82.4526 250.518 82.4526 cv
250.575 82.4526 250.575 82.3882 250.575 82.3726 cv
250.575 82.2603 250.47 82.0122 250.311 81.8521 cv
250.263 81.812 250.247 81.7964 250.167 81.7642 cv
249.463 81.4839 248.744 81.2437 248.008 81.0356 cv
248.008 79.2349 li
248.008 79.147 248.008 78.9956 247.928 78.8667 cv
248.264 78.9556 249.568 79.2837 250.199 79.2837 cv
250.431 79.2837 250.639 79.147 250.639 78.8032 cv
250.639 77.7388 249.974 77.147 249.718 77.147 cv
249.67 77.147 249.655 77.187 249.655 77.2271 cv
249.655 77.2905 249.768 77.7153 250.083 77.8345 cv
250.147 77.8667 250.156 77.8745 250.179 78.0269 cv
250.192 78.1157 250.199 78.2671 250.199 78.2749 cv
250.199 78.4194 250.103 78.603 249.854 78.603 cv
249.758 78.603 249.318 78.5474 249.142 78.5229 cv
248.254 78.3872 246.75 77.9946 244.925 77.3062 cv
244.869 77.2827 244.853 77.2827 244.836 77.2827 cv
244.78 77.2827 244.78 77.3306 244.78 77.3628 cv
244.78 77.4829 244.892 77.7153 245.029 77.8667 cv
245.044 77.8745 245.084 77.9224 245.157 77.9546 cv
245.941 78.2749 246.75 78.5229 247.566 78.7632 cv
247.565 80.9087 li
cp
f
243.748 75.2671 mo
243.67 75.3286 243.664 75.3345 243.664 75.4468 cv
243.664 76.4155 li
243.865 76.4155 li
243.865 76.2476 li
243.865 76.0054 243.893 75.8647 243.899 75.8374 cv
246.876 75.8374 li
247.027 75.8374 247.279 75.8374 247.279 76.4155 cv
247.479 76.4155 li
247.462 76.186 247.457 75.9624 247.457 75.7329 cv
247.457 75.5024 247.462 75.2788 247.479 75.0493 cv
247.279 75.0493 li
247.279 75.6138 247.026 75.6138 246.875 75.6138 cv
244.045 75.6138 li
247.395 73.1274 li
247.474 73.0718 247.48 73.0659 247.48 72.9985 cv
247.48 72.8921 247.429 72.8921 247.323 72.8921 cv
244.267 72.8921 li
244.117 72.8921 243.865 72.8921 243.865 72.3267 cv
243.664 72.3267 li
243.681 72.5562 243.687 72.7808 243.687 73.0103 cv
243.687 73.2397 243.681 73.4644 243.664 73.6938 cv
243.865 73.6938 li
243.865 73.1147 244.117 73.1147 244.267 73.1147 cv
246.633 73.1147 li
243.748 75.2671 li
cp
f
246.006 68.353 mo
246.006 68.5425 li
246.555 68.604 247.278 68.688 247.278 69.7437 cv
247.278 70.3032 li
247.278 70.5659 247.234 70.5708 247.06 70.5708 cv
244.122 70.5708 li
243.938 70.5708 243.865 70.5708 243.865 70.0483 cv
243.865 69.853 li
243.664 69.853 li
243.669 69.9712 243.686 70.688 243.686 70.8335 cv
243.686 71.0464 243.664 71.6802 243.664 71.6851 cv
243.865 71.6851 li
243.865 71.5503 li
243.865 71.1177 243.921 71.1069 244.117 71.1069 cv
247.027 71.1069 li
247.216 71.1069 247.279 71.1177 247.279 71.5503 cv
247.279 71.6851 li
247.479 71.6851 li
247.479 68.52 li
246.006 68.353 li
cp
f
247.413 65.5737 mo
247.413 66.2231 246.88 67.0229 245.504 67.0229 cv
244.207 67.0229 243.731 66.2065 243.731 65.5737 cv
243.731 64.9399 244.207 64.1235 245.504 64.1235 cv
246.88 64.1235 247.413 64.9233 247.413 65.5737 cv
247.413 65.5737 li
cp
245.591 63.521 mo
244.474 63.521 243.552 64.436 243.552 65.5737 cv
243.552 66.7173 244.474 67.6265 245.591 67.6265 cv
246.686 67.6265 247.591 66.7173 247.591 65.5737 cv
247.591 64.4302 246.686 63.521 245.591 63.521 cv
245.591 63.521 li
cp
f
250.302 74.6733 mo
250.208 74.6733 250.157 74.6733 250.157 74.7524 cv
250.157 74.7808 250.157 74.7915 250.224 74.8647 cv
250.23 74.8755 250.28 74.9321 250.308 74.9663 cv
250.191 75.1343 250.157 75.3481 250.157 75.5562 cv
250.157 76.3599 250.58 76.5513 250.861 76.5513 cv
251.042 76.5513 251.188 76.4722 251.3 76.3384 cv
251.486 76.1255 251.525 75.9126 251.582 75.5659 cv
251.632 75.2866 251.711 74.8325 252.088 74.8325 cv
252.308 74.8325 252.567 74.9839 252.567 75.522 cv
252.567 76.0581 252.208 76.2544 251.823 76.355 cv
251.75 76.3716 251.726 76.3774 251.726 76.4556 cv
251.726 76.5513 251.766 76.5513 251.879 76.5513 cv
252.576 76.5513 li
252.672 76.5513 252.723 76.5513 252.723 76.4722 cv
252.723 76.4224 252.6 76.3149 252.471 76.2036 cv
252.711 75.9565 252.723 75.6538 252.723 75.519 cv
252.723 74.7896 252.33 74.521 251.929 74.521 cv
251.715 74.521 251.546 74.6157 251.412 74.7612 cv
251.214 74.9741 251.169 75.2319 251.136 75.4272 cv
251.057 75.8745 250.99 76.2388 250.691 76.2388 cv
250.511 76.2388 250.292 76.0874 250.292 75.5542 cv
250.292 74.9038 250.746 74.8755 250.909 74.8647 cv
250.97 74.8589 250.97 74.7915 250.97 74.769 cv
250.97 74.6733 250.931 74.6733 250.825 74.6733 cv
250.302 74.6733 li
cp
f
248.773 73.0923 mo
248.836 73.939 li
249.042 73.939 li
249.042 73.562 249.081 73.5161 249.354 73.5161 cv
252.214 73.5161 li
252.455 73.5161 252.455 73.5728 252.455 73.939 cv
252.656 73.939 li
252.656 73.9282 252.633 73.5356 252.633 73.312 cv
252.633 73.0991 252.639 72.8921 252.656 72.6792 cv
252.455 72.6792 li
252.455 73.0376 252.455 73.0923 252.214 73.0923 cv
248.773 73.0923 li
cp
f
248.394 55.6802 mo
248.394 55.5444 248.394 55.3989 248.238 55.3989 cv
248.082 55.3989 248.082 55.5435 248.082 55.6802 cv
248.082 60.0073 li
248.082 60.1431 248.082 60.2866 248.238 60.2866 cv
248.394 60.2866 248.394 60.1431 248.394 60.0073 cv
248.394 55.6802 li
cp
f
245.402 51.1372 mo
245.113 51.1372 245.025 51.1138 245.025 50.4868 cv
245.025 50.2798 li
244.78 50.2798 li
244.803 50.5601 244.803 51.1919 244.803 51.4966 cv
244.803 51.8081 244.803 52.4409 244.78 52.7202 cv
245.025 52.7202 li
245.025 52.5112 li
245.025 51.8765 245.113 51.8521 245.402 51.8521 cv
249.624 51.8521 li
249.913 51.8521 250 51.8765 250 52.5112 cv
250 52.7202 li
250.246 52.7202 li
250.222 52.4409 250.222 51.8081 250.222 51.5044 cv
250.222 51.1919 250.222 50.5601 250.246 50.2798 cv
250 50.2798 li
250 50.4858 li
250 51.1138 249.912 51.1372 249.624 51.1372 cv
245.402 51.1372 li
cp
f
247.484 49.1968 mo
249.638 49.1968 li
250 49.1968 250 49.2827 250 49.8101 cv
250.246 49.8101 li
250.238 49.5308 250.222 49.1226 250.222 48.9058 cv
250.222 48.6978 250.238 48.2817 250.246 48.0103 cv
250 48.0103 li
250 48.5503 250 48.6382 249.639 48.6382 cv
248.162 48.6382 li
247.327 48.6382 246.876 48.0698 246.876 47.5581 cv
246.876 47.0532 247.311 46.9653 247.769 46.9653 cv
249.639 46.9653 li
250 46.9653 250 47.0522 250 47.5854 cv
250.246 47.5854 li
250.238 47.3052 250.222 46.8979 250.222 46.6812 cv
250.222 46.4731 250.238 46.0571 250.246 45.7847 cv
250 45.7847 li
250 46.3188 250 46.4067 249.639 46.4067 cv
248.162 46.4067 li
247.327 46.4067 246.876 45.8384 246.876 45.3257 cv
246.876 44.8218 247.311 44.7339 247.769 44.7339 cv
249.639 44.7339 li
250 44.7339 250 44.8228 250 45.3608 cv
250.246 45.3608 li
250.238 45.0806 250.222 44.6724 250.222 44.4565 cv
250.222 44.2485 250.238 43.8325 250.246 43.5601 cv
250 43.5601 li
250 43.9712 250 44.1675 249.759 44.1763 cv
248.225 44.1763 li
247.534 44.1763 247.285 44.1763 246.996 44.4243 cv
246.859 44.5366 246.699 44.8013 246.699 45.2661 cv
246.699 45.939 247.185 46.2915 247.493 46.4282 cv
246.788 46.5405 246.699 47.1333 246.699 47.4937 cv
246.699 48.0786 247.046 48.4556 247.549 48.6802 cv
246.699 48.6802 li
246.786 49.8101 li
247.033 49.8101 li
247.033 49.2593 247.09 49.1958 247.484 49.1958 cv
247.484 49.1968 li
cp
f
247.565 40.7466 mo
247.189 40.6431 246.78 40.5386 246.396 40.4585 cv
245.859 40.3628 245.323 40.3062 245.226 40.3062 cv
244.78 40.3062 244.78 40.7466 244.78 40.8423 cv
244.78 41.4507 245.003 41.9946 245.26 42.3706 cv
245.701 43.019 246.237 43.2271 246.277 43.2271 cv
246.333 43.2271 246.333 43.1714 246.333 43.147 cv
246.333 43.0825 246.238 42.7065 245.935 42.5386 cv
245.529 42.3228 245.226 42.0903 245.226 41.3706 cv
245.226 41.0425 245.45 40.9868 245.578 40.9868 cv
245.585 40.9868 245.961 41.0103 246.513 41.106 cv
246.737 41.146 246.88 41.1704 247.569 41.3384 cv
247.569 41.6265 li
247.577 41.8501 247.833 42.2183 247.953 42.2183 cv
248 42.2183 248.008 42.2104 248.008 42.0347 cv
248.008 41.4585 li
248.568 41.6265 249.335 41.8501 250.311 42.2183 cv
250.495 42.2905 250.51 42.2905 250.518 42.2905 cv
250.575 42.2905 250.575 42.2271 250.575 42.2104 cv
250.575 42.0991 250.47 41.8501 250.311 41.6909 cv
250.263 41.6509 250.247 41.6343 250.167 41.603 cv
249.463 41.3228 248.744 41.0825 248.008 40.8745 cv
248.008 39.0737 li
248.008 38.9858 248.008 38.8335 247.928 38.7056 cv
248.264 38.7935 249.568 39.1216 250.199 39.1216 cv
250.431 39.1216 250.639 38.9858 250.639 38.6411 cv
250.639 37.5776 249.974 36.9849 249.718 36.9849 cv
249.67 36.9849 249.655 37.0249 249.655 37.0649 cv
249.655 37.1294 249.768 37.5532 250.083 37.6733 cv
250.147 37.7056 250.156 37.7134 250.179 37.8657 cv
250.192 37.9536 250.199 38.106 250.199 38.1138 cv
250.199 38.2573 250.103 38.4419 249.854 38.4419 cv
249.758 38.4419 249.318 38.3853 249.142 38.3618 cv
248.254 38.2251 246.75 37.8335 244.925 37.145 cv
244.869 37.1216 244.853 37.1216 244.836 37.1216 cv
244.78 37.1216 244.78 37.1694 244.78 37.2007 cv
244.78 37.3208 244.892 37.5532 245.029 37.7056 cv
245.044 37.7134 245.084 37.7612 245.157 37.7935 cv
245.941 38.1138 246.75 38.3618 247.566 38.6021 cv
247.565 40.7466 li
cp
f
246.006 32.8989 mo
246.006 33.0894 li
246.555 33.1499 247.278 33.2339 247.278 34.2905 cv
247.278 34.8491 li
247.278 35.1118 247.234 35.1177 247.06 35.1177 cv
244.122 35.1177 li
243.938 35.1177 243.865 35.1177 243.865 34.5942 cv
243.865 34.3999 li
243.664 34.3999 li
243.669 34.5171 243.686 35.2349 243.686 35.3804 cv
243.686 35.5933 243.664 36.2261 243.664 36.2319 cv
243.865 36.2319 li
243.865 36.0972 li
243.865 35.6646 243.921 35.6528 244.117 35.6528 cv
247.027 35.6528 li
247.216 35.6528 247.279 35.6646 247.279 36.0972 cv
247.279 36.2319 li
247.479 36.2319 li
247.479 33.0669 li
246.006 32.8989 li
cp
f
247.413 30.1421 mo
247.413 30.7925 246.88 31.5923 245.504 31.5923 cv
244.207 31.5923 243.731 30.7749 243.731 30.1421 cv
243.731 29.5093 244.207 28.6919 245.504 28.6919 cv
246.88 28.6919 247.413 29.4917 247.413 30.1421 cv
247.413 30.1421 li
cp
245.591 28.0894 mo
244.474 28.0894 243.552 29.0044 243.552 30.1421 cv
243.552 31.2856 244.474 32.1948 245.591 32.1948 cv
246.686 32.1948 247.591 31.2856 247.591 30.1421 cv
247.591 28.9995 246.686 28.0894 245.591 28.0894 cv
245.591 28.0894 li
cp
f
250.302 34.5112 mo
250.208 34.5112 250.157 34.5112 250.157 34.5903 cv
250.157 34.6187 250.157 34.6304 250.224 34.7026 cv
250.23 34.7144 250.28 34.77 250.308 34.8042 cv
250.191 34.9731 250.157 35.187 250.157 35.394 cv
250.157 36.1978 250.58 36.3892 250.861 36.3892 cv
251.042 36.3892 251.188 36.311 251.3 36.1763 cv
251.486 35.9644 251.525 35.7515 251.582 35.4048 cv
251.632 35.1245 251.711 34.6714 252.088 34.6714 cv
252.308 34.6714 252.567 34.8228 252.567 35.3599 cv
252.567 35.897 252.208 36.0923 251.823 36.1938 cv
251.75 36.2104 251.726 36.2153 251.726 36.2944 cv
251.726 36.3892 251.766 36.3892 251.879 36.3892 cv
252.576 36.3892 li
252.672 36.3892 252.723 36.3892 252.723 36.311 cv
252.723 36.2603 252.6 36.1538 252.471 36.0415 cv
252.711 35.7944 252.723 35.4917 252.723 35.3569 cv
252.723 34.6284 252.33 34.3589 251.929 34.3589 cv
251.715 34.3589 251.546 34.4546 251.412 34.6001 cv
251.214 34.812 251.169 35.0698 251.136 35.2651 cv
251.057 35.7134 250.99 36.0767 250.691 36.0767 cv
250.511 36.0767 250.292 35.9253 250.292 35.3931 cv
250.292 34.7427 250.746 34.7144 250.909 34.7026 cv
250.97 34.6978 250.97 34.6304 250.97 34.6079 cv
250.97 34.5122 250.931 34.5122 250.825 34.5122 cv
250.302 34.5112 li
cp
f
248.773 32.9312 mo
248.836 33.7778 li
249.042 33.7778 li
249.042 33.4009 249.081 33.355 249.354 33.355 cv
252.214 33.355 li
252.455 33.355 252.455 33.4116 252.455 33.7778 cv
252.656 33.7778 li
252.656 33.7661 252.633 33.3745 252.633 33.1499 cv
252.633 32.937 252.639 32.73 252.656 32.5171 cv
252.455 32.5171 li
252.455 32.8755 252.455 32.9312 252.214 32.9312 cv
248.773 32.9312 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (TCStoDVCS_1x2_nice.eps)%%CreationDate: 04/01/13 13:19%%Canvassize: 16383%AI9_DataStream%Gb"-6l]NU8E@(A_r=7^,RXqf?6:PKjWF$bsBrGm+=FqN49d>9*Wf'-#Fm5m.-3ZR2`]<H.iE<XE6i],0FuZ;o467=t)&Egua%q0T%o@jd7Dr0>urU\cns4OC<V`jIG*6TemqW]Fmq&aO)HhmXAak;u$"Pm3Q+XqCklb2KO`%Q$^5$VIOgjacsHZAl\r@`&lDXZH^m.?3S%cYlRn56#s,jo"cN?=$pnroNeDX7M66\OXC/nF#,_gWMP9Q+%k'`m[.6]c4)d^UudZp?)(Lb:g%Os*T),^\mG"q%V-6BcGCt?Oo^&%^0b0,(CdZ*aS%"'IW]f+iVi`2q>K]O2YT&a`VXRC8)r9GC/=d#rAWmVQdJ,=/So*/2"p%g^V.5VqqJaKoD;HM,IU7[IfFlhCQ&Gr%/b#r]0!7CN\bpi6`8qq]q`XpT^Z</E\@fQum>l5mj6aV[LS+H0rRkoFIm3[phd1d1Q65_lp?#_33[i%8b6u(pI!74<BPOn0rppGN%jd2<`4TBAC00M<IWq"F4T:YhS^Ng(B4Wc0621be\oKVmsZjGB7r[-S'0=&Xu_S=.^3@2E%o?VoC=%)k2fu?o.IuR&BSn\3<F;!X.%]?BMa=6K=E>akOjcLP]<)?7>JXd!<n8/:ZMnO^9BY4aJt?gIFVcYkK:o!?gF\3,7^GpbEEg"lTCDuX<@>mYL5&dA7$LTAV1hqu)[%+/;6&bGbI;p<D\6k=hNHql=d3U)s^@Y7UX"r9imoHS##o%iFo1S_BrjqPOkUYKsts]R-iaoe1gdmdfLa\,VXT%!?C#FLLZ8psLl7%j.jIL7PY_sbV>!O]BRa5d0(AlQEeb#+04cfGAk6FHh0&\=8h\3mbYZ\/$R#lPQ,(Cc^O`L\,T&Ba62=:?f#Ig6i?Kk^L$;DgY&dF%(iT>aRlA*l]uGkh(&sJiO!T00<qk/3fCHEHDuO<1ro'F?T"i&<VqXN9p',BJqBu9=IJN]hL[h9l\@__/mT2>s]RBGZ2sKRNGNTcp%m.?dNrpB8cXR8ju=TA6W_qY(3Zh(ZpIemM@j0S/+:\)Qr0RqgVrV4iOb70cA*Z+J;D?`VCIHR&iaSF)Mdm'J^^&*''K6uCDhjoSL%Q=%E*oD$N)(o,XT_S/C4kP*jB%XiWok5B*pINI5Wm,RJ]EIgPuGP_-kL\K\rIWp-c24Hc.Bst/u;:,?8nW(rk^s-e8A:P`98I6HP%Bs<0gj5)PiT7=cRj8[6's5NtAlL!2IkO6-1Hh#SnT(r21PPjf4Z`q0Wrp'4BmJH4WSfI=sq;)#(MlY#S^3tK\H2UWV(l^bo]c$"U%M+hRTp@e>'Uo`#]hjhHnA=N>Nr&lLDQjr12#@mD-mr/3fAY/[hI\=kkE899!HSo>r:]KmQgV;P5a6@6?55?!0*<,W/Vbd?Wr;-!V%hd:g.`S5A8?Q.%0qTZ).C`ECm+6UT6s,d9YiI!cWg[RPR34QE';L<+>s09N[EMdQG,X"3gnCaig'E$hDn`(_35Q5LbIlX@SY>>2h%YM8<d5l^?.=)@i[X&"EOrp?c8Vk`S<s7.DTW2remkW"!>IPjm(b?&rQk?iZ#c9@K9GRXW25@-L9f06rop%cpH2sbD]R<a*ARe)a7%kUT6or.f$.-3F/:r;QWE:VQbVIZJ3^YI>>3nG1nLr;FaPr;-!/gCMo6-+I>_HuXXk_feS=+e3-H4MOZA(Q?<tKIf[A=@,4mCZm-Q%DPp9[5'A-BgJ36gKXW&kYMS,@T'e93rE^ni7juEnhYud1rQE.JnG^%>(uG8fo'RO<66GtJUpI<qh1tpmZX<\0LT;s&PlEa3-A^.F%G;$_iip,pCe&<oI`kS/6`omn8>+V\go]`R!QoocUmX/u7]>+15&5n6Vrmgg(e1Yoc9$[<[Wh0L1q<I\Om`ftWjS*WilKZ8#!uXjP%C]aTXF*mGT0gqqC77_ZSo^/$k+]4:Y0<+X/GNM3jgWT1=l+sPV#=&/=Hi3S%7!2Vt5b8geBl)+>3f^@J?@Gu0]?<-"\Sm7Pr8toq%]CAlSpE[>9a0rU*5Lc7IRu;2T&)P#\]cVk)GO39ek)[fDqm_^8cAr?g)>W&'l0lXO5Q0E-\+f&m]tJ`=s6[_-HG%^5TAP%p@>OQR%cYq^oF?eQrT71s-G:rpngE?i.?N#rVqpEXRgPbYRCs;YO]0?*Km<JZmh62:l.K,lgG<XRhhYM=!p0oiRmek>!#A`o,r;E6/%*JHk%\+^E3cGp6m]?5lgc+CGt![U:T0]1.#IJ0_jB-6P[kDFPtD>NMQ3.gV=]"%`YFhUmRG]jGemq!SrJ^N,'r8RY:cfac3QnS;?I.P>E%h4)SHNsB59Wjh_X56p)LS(koc:2b'l?>eY!N;2l!M'L'iq"tr<Y[;mUr<9^`09hCnp,O`p;AmhWs/3*)T6p9Si#P/_%sR2ThI=/b%b7S@W@+-/T\ifU'r#LA6*oa&Aps=4FPlC+B0>?`h#k@M=n<io.H4#)Z:E_r'6M?rT9?@.>UEr]aI(2AGp^Z;TNT$dFjR1lRp#5o@%rMO/u?X9sk_t`b+4l-#4X0Xb5'Gp57DOID,"gsNLb[t3)IJ;kB#+(hJgkBrj51\l8L\LOQ_Mp6+)dH26mbQ^P>F=[#XtKa!s4o*l%Dj;:)>$n/>Hi*Ipg1]6XbHtX4hN.)":A1(I!jmHfrSo!W?f$9km$e5jO,!5_DSI)Wq>Td52s67JfS>-MaKM8j]RRI\'&NWXmFC<B%TK@Z'e_Bueo62jO$I.CZ7K4(p`RWet`U1oXY4jne?K`je-PQId#4*.>n(sSjhI5H9J)p9Tn;i4FHujZ/+1aS+Td%8GD*9V1GjFSP%ebQh`Dn[IPT:bT,]<AF<FEVq^U\r)J6TWmZCD'ts*><Ppp3t<\=j0[EEKH3/$`<ce[r:]Lq++$5NU?4YW7i=:]5nnC7n@pBIs$57%re7$ki>A622e2;9DX\[&-U[Y=[#QG[#AVR!b-U0\kBDE%J*ciP+J-:G%^`CjhgsMUqC+UWr5K9908H4nF8UDoci3Isrp7n[]=U;a%hRp5'hn;7,6oFbYqj3Ygqm4*\Tt&ne;Kr+(UAXb0B6Om>&'t!J.)5a6N,$]gT/pZ(0@5P>r-XEHDslI(p\0l,%EV:HIK0<B2d]g^%R<F!urU!85E=q'aIq'\=P64!D-/gC.XG]B>kIYc]r\R!Y6+@b'9CY$BD_BYYrF?1#K*/eIIJ*!lQZmBJN8?bCg;\b(hQ$,$=a].=%c^i"@LCO9."@5G0p*FU7POQqq-dOW*:`hbMm_8\qJMLp20F?L?<:>U"H"h,DPjX7C8Vl5/?$uOdJgAU[c23hsEmWSPh:eqNc^k@0%@86V)%Css.:6dp$TMK]5(tN+fStpZ3i@Ff*VrY%tW9>scOd1@f(?5@P,WD&sO-B.\07>c]k7HNg?Db7?@'JhgO*$\Cm.D=-?C_\s%8ZF!?Y"smJK+/k1C!X',+a^oDF)TrA]HC+6i;F%U:4bDH^6=TRi451uY&NJ52]",%!"tj[gmIcq"fdW'ftk#HWr1rPB4%1"rqZ,c%TcB]^&*EZ%55F31J+NL9qW[7jnMu:84PpJ@:T`>:"5Rnnf,8F=%YNHp1F#"6_ich4Hu]/Kb?p;di9a@l5>rfOK>VHgl47^GO/sF!%.eDD9<54n-o#GT.05*7F=!(r7ODtNSs8%F,%C5_XHM_S.-oWe!_'$?/*9-Db-+\<pEeDrXoAd>EhbbV?SUIXWYU#ar?Tp@-s*4DU%S7c`Rh+Ys"4IF4W=gQ>@UVD4>0?Z@tFG(bViF)]f@jbRd(DVT&Xo/rC42m`1Nst[R=0Fe2m4%u*o_R\b9r[jt>q(uS=fM\Z19-;9%IJIV>IAYl,^?(^`rCo$6M-dUBMg3iOXQ(BWeL`!m,OR]=JEO!rEh>dCT-9$N0;fg?fWS*NZCTNjMJ'&^Q8bqDZP!l5[HFl$CH5\8%lKp.`cj>uA\'rm.Y_BF3[OPD6$aG'p2^)t5<^Q2Tm^3M*S8DQ9&C4f7L"Q0)-^N(n:RtVP;6YMXa1W,O.1hE4[s<'ZmI`$sL$ck,%9]LKcftK=e-2''$]b672Zci5pQ?FDZ"!]X+/k*?Q>NV\p4%h_0pHgHZ1o7N5r:4R,m!NZMB/rJp,+XFiYe;%%[MI6'Ga:rL>oj)/%`aN90=iMP7N=k"$GW*":fVH297MK-b@mEt#=%YXaSQOt1!0%#=C%Q;%:'uhgFUVs'Q]4l/]?E\a"5;,61"uLODl@/2a!@5(R$Fc!%[P=HP(n\0pDKZoY2?pO]GM?4PXUAE!CZBd8?=b\sW/pJ-\IE@>bM+Z%(skBKh?SIIFWX^*Xe[kPF<Bn9e.])ATHT9fg1[8sTc4*&%7eao5NqNOI0ZLGXjgiu(<Z),gL3/`dP4nF&\tieKR*l"pES>REEK"BeF2F^,q!-#2NhHnaX5iNc5;k\dAtTA#Y)MV**FBE!m#=^u%g+-l2\'U,&a%K(DYd8Ct5DpPQ/(d@ODbX_$j4H28m\As!DbX_$1SF8d)jfPd8n28V\NI<S@X3o#5j-.=aYcRt](5Uca"\Ftgj%T+%n=qLDZ1Yn&bKc3n!KE\d@1@%c/WQC2O*B[uft0;"1QS*9Vm-4[^7gRR[D>"L/Eaeh0V1<5f]N(pH1%4&fZ%m-Le#KF,]r+*_4B"4%p3?jDl(QNi51UWU*pfl%)EX@Lj%Loh@4]F7T&@[+-iW0dj!2UbB?tSg(sfHl%if4i3dHqLN1nm8pJ-H!L12nS@lRsH@dNp+E5m+r%0a.f:P87Ys$tlepdRl\WS2&d+bKc^g-Xe`#?RE[)K;4\%OPu-OHGFL>5"b2C_\lrgQ-L5l=L)-GhDZ;^QaU_pa`'`,a/HHL_\q?&%QJr`V(gT]^*uIc*a")0nEh"k`Tc?)<2SKDH^iQ#_a4>0!N\gO"KLH`ufeLSp(=-t3`4>'$%if6Kl$YX6*-.C9NZ=sW5GiVb3,/;q%*>qTl].6!Q33gUA=WD&_EoJNfi&Ka6h@CT=*uhqJ,KC+'/X-J[B7*Ekl,[kad`WpV3=a?VI,Hu:#;oopMrTbW#f;oT`rR!VI6V\@%_1_[YJE)Ss8j+4U%M%jrJE*H34mhXXEQ5UOcPOWB!r0ug?o])k8NUs_d?Rt[6^FLRj#Kk)V"oT%']Cr;KLr(K^ZtZ-$Ub63Yg,dh%S,_(c]6aD9eZ50@s6YG0>,Qi]+mCOP!=@)5!?;`k5%KC&n2oL'ghK1>gEZ4AEO@N\><e2eG.lbjaW?#b:\4dCs6]OtQ+9fDb7.$"%[Y+4ip^]S(0j@"#.23fG3+q:oHcos\F_j>NPClS.\/ib?*",/D*ZXDTkH?]HCV46*Qa))8_7=k36[l.><GZL2P9NGW%2,R/=rSKq%Gic0GB'S#GY8mi83g_%?2WT8`DPK8poW_&?$sB]G9>)Xjif;'ri,Fssq"1,mcJ8JrNKo%74LT)1*>ner4$Poiot2e5[]";LNX^b-%CdGZeKL#Y*WS.USPE$-h7,BnVcU=cMG'U7"/NX*RAV_`)S77+Dj*Z<(`8VQnNVj"n*7"+=jF%GIho@]k+,3`==PL7Li'9O3ce#mp%G8bM<0-7bV4">VGbM%84Cd1.lC>1'%qHOJ6dQSohQ.Qf'L-3?S`];)"A,>;lM<u-0>oiX\IIMU$Ea6tV/tu):eHZK6jd0i;N\fhf%6G@^;8*mC`A)\'go9SGpTb$"%9rnP<]"tjkgG$'MY[OW<*V+A**XQ=0VSpl*(e#IRPl&c%mC<nWnUS2I]0<[4Yff@a5T\<KSpD6@%`8?2C<r7<]';b.@/rFXZZlsh?Y3;:p50blc>!lQDVm`-:gdG8`[V4<?kV?<:!J)XIHUjcLNcj#_'`U0Y,uhTqL]]Ci6U]W#D+Q*o%SGps5Taf+Q(uH.j_eRI)_./+5PjL^ncH%.o&?-W#m))uDN/#e73LJh8QQ8M/;!)hT@6m)hFICJ%>EmGd><X5GENLuNMF#b79rQ2U%Lm484CjhYH_SmiDcqBVKV;D$5FiXm;s$hHgFl(S6jKWP0SnJOMc:QdD"OVj8]PX.5XF"UXUVgbrItT/>A1i^+`i300\*"/=U6i$V%]Z]SR@E\L2:<scenZDYXCcF1)17lm5M#FXQ[ORn^ba+'4?KiNk3,MC@E9j!0WoN1)7f>J;G5q'o<C+LK+9'qg]3g"O-Q^R^Z0u3@%DL$&[lQ`ju1]m[pqE.r.%can!T4m]YjmVt.^*/3:<&f%gQG=]Z<\,Q9^aB8!JoJIH&6Vm=)E_OP9^;9_Ms)5p-oP=B;#Gn*>SS-F%J@8It%OJQkd:XSEB;Zr,EHuFQn"rXsqOD!qdN#lL+k`K=U+#)S[6WR[U#h5M1Q]?:XpmARM6tj@mp"0uDSiSV"!pitIP\p'"#;\V%)_K%WcqF).UG]<Mn7Z#gS>j6E7rO7?*([+'d9A/Z[5$.Yd4,UU%EoAS,Z@V%69_sQGbc7uI?Ko+]:lddU'S\4H*2mtQqZHUctr[A%/.V_=#6J,RqUiYWZ/lRUXs/]%MIe1YL0Z5t=[%``-jqQj\fCk.l1%ApNXPda<S)_gN.6rXVnVIbkCn3?q>1qu6\0@!:J\8TXqaTa%-)<-paYJlb+,g)R"KjD5D.;gXIDc32M*t5T<kSr^K#ecp&IEdH633B]<"+'sOJ00r5mGX]dUH/[ccp]b=tGcS!jp9Z`U9Y.%b$DF%&OHp]QnO"9$C=#NN<@9LQ]*eVEs>_Q;+)e%&d34dd4#P`EC;KBp6]6?7E96#RM]*T&K"2ld'tO.gI9-'@#WN7DCW;bD9S_rF;H[0%$tWX,-?Y*bF1WL]PA$"S)D=Ho-PCVdgP=_<oWaKWTH6a#7V]/E7A,CQdaK?HLeL(MiIGJHb*]CU?Tcn:*M901j47/q9!GJbKn>;c%XJi1AL]aQqCO&Lt!Hs&/F_!l$1=t]6p;(e^BP*5J7WJ&__W<Y)NWTD=P&*O0D@j]%&02+^pKa*HO;(&\&N=5W%->Da[DBog!YIW8%L#BM?p*`]_N0fDt7M!A!go[&u03*0/ggEesOR\"F:kL.9,LU?WqOD"/\I,<Lbb?'^6(6B9:fIOs<!7c[W_u4qS=FR/<BW-m\6Xqf%FYH'M-&Q"eM8lP7HE&e)$eqG%1[u?484C!e_E_?>UT94.%BCrtgiM$7``D`Q31d2rMFAsJ5Qp7'OJ0Q.,'a^I2(fhn/o@Tgco)2@%r)&dE[Xhp&[EVH7VD[`m+/qS.8\Bd/aH6-bb,.Bg```$H#.)FaN`ApJR'4m^d"Q5Ck6t"fKh+j&eV_$CI@mSb;5U-b<>I0/HM0G$%0%\.c-aPj:0G#+eY^;=e4lr]e^W>t1cJFU,5N>SrK/1RTL&(S$jdd0ZZ,"C!C4-lXZ`g!7mt[7%6bsqn<S<"t1qoZ8oi5;#j*Uoi%CR=,rnN%f#)C(:W<e0kC()>LV0U.m+$TPI=LX;cGk8_LMLhqq_W1msPkXm$B(a!912HffS6@k*P$3-pa"!j/601;C1e\tC&1a;u4%Q@gtS$<#h%^#2_pDXnkpAKkUZJ@q?S;7fL7bEG%iMOl("]#JMpF`0TJa]h55,tI?%eP7F@@R?$i\fN<KBDDa\@)sNpmasWW#[:Gf%4?(tV:dJ'!65<qQ"#;]1Ps8L$RG#O\P/MqTKJ$[+)li0(8]"Um1h72$#eQJOP.4`k[ZK%Ld<`$NOGYY?Gk^tb<<\\MX"8oHnkg*V%U-'5kZQf%1csXn*@FBjA#(rT+P16"S74g+Q/W2A`8dH]bVY\f,"Y#NQYrc^.&$@*,^p+Z4p)q21,FW*l3pURf7<*-,g46B!g%8&I%q_-UcIo'"WFYf.R8Y8g6BT*LR]#9!r>D2p29G-/*'_(Y)DJ@5e"/rcu?G)%h/Z#tQqi3Y!Z7k1N6VBtdan?cQ0tt%AT0E@U@,Ko*%$>IWT!uRJA>%7F1e;-5`qF1W3:8&`DlQ2Bdmf=0f(GmFa%oJu):q"$tH+k[C0?sY,C+6#:ci0o;R">[[+?89\?eL$'i'pXD.SH!J%5f&1sP5Kj9n8T3(0mo_7WuMWm`8JUZ%uCub3h5:^V\"nh&>m*1)4jYX98)KN8U3nsO-\uBi4GHGQi,\hm"Hb"G?Ad+qbh`a!7oKo%V6W15d-;8"iRViqnE>]dTU7X$>fN"O87$!:jPr1cK9P$d?nHfMNWr`]V0L9q`sY7V,(%@=R?kYFiBM;@])/VHqF":^7gl]:S#"ma%fsTfCo`<%7k$9$s""9nWW!&.,ftH0)*ZA9?kg:M0nFi*VK_1%@@kp*bWpRD7d0HHg;O,VVQrr?I5kffOk6k2X*'fI.8`sbFn%fCp%h'>p_c$M;/5_X*'X!hOX1*>PM(4Ds/[Zg!>b;#>8F>&p^P5V%Oq#L+ldh9e>0P,88;']d)HWUn@hit^9aOutfQ9^Ju<[VS@M^Hme%BcLKN;`rE#s!D=I8$hjJLuKEb-fnDZM0hdIDM39=Feh/$W>PW5XWLjVml^82lsSc(2'C&41@8Qd%7&2V=Jp3dd&VIX#Rj"0K<[d,%-,b?#]0;P?:cO!$^!"U)fGT6[?6SAP,)\]fgGJ"iLQ)0eA4V'kYb?'Zlc-"6!`(6%<n'sA$UX]cg8IPF)r.d.1[s)`o66D5!HC8K%R](u^LEF<4o)e\`BjF_I\Ej2(7"@Bp.f`/5aee5X8\6oV5tGN+Hu4VS1@0"Kqd%3Sn8:C,6F(%U.@EF4NY$Ol*3q:4>_#=Pkk[^i%RokY9k%r@<3%5_$?`0pM*pb>59U+F%Q'_"_iq3:aRqkOq):`+qB;N^=:$?OTFBJB='2j+"5eC\C:r\5PeIf[I<LX<m))qBX>cE8_%-tMFnF9$AU@o/!!N+Si2&%]tYC0;:EI@jH5*tY.CiJYX`R`/pWO3Wt)'To(,41QB2;Qa.Ab.;Ut'L]nD?r\<'U9<XXE]+'L*=r^V%5%YYPP),Y=C!SR'-)ePeX$Y"S;e=f1FUda[oh-Fk9ifcHMH$oNQGb9_2e(.B\#:'!R_+-,&JSR6C7CPUJ8uQjVXM+2(l*6!@d2H6%`?6$Dq)1AT#P5/_T-^QDi^C'%3T`n.fne=HM,HE<kec:(2Tc$FGKMKZBVnW],$4lH.')*\iGPsPRbBFg.-kkh8EG`ho+(iGf^dCB%TLa(A(0*2d/C3!c(3^d*^8\r-_/o[?!h<ThG749LAG=.W\S+GSe52+ko&r&XmLXeL,tqDk&b/N-BUkSY5E&JG0r-NjC]"8rqO1:d%9qUq4_=dnTQ96&dU>T8ifO8*[h8)IXNp6"kRL98&lGr?5..T8VY='9\8KbV++i4S!W.X,k(#.9L4os%NK-P*d9\jjXNL_Q#3j76K%A[a2t9+UAo'.5>1UIt-1/eAP$A+CL'nBjNZ/t=Wf?p_PY+r<7YN+uhRKGgX04LQtn!&RPXM"mPMq:bl]j'g,61da3pOG?kG'&i@7%78pk=r(uBkj/CY;bhX%K7W.3Zm>T3tqPC/2J;0W7Gn:6S%2#iF&d'B+\V>!_eL"SUZCL:.2R7G)@/Y_-Z&Km2Fk"uP>_#LRgY7;u%I9T$:E;i1bgi.Yf]ki<nm`W<I;4nT^UtOKs-:35'@:$M16O#:-Sui]0!?H`]HkSB2Aj1)(-Lh@[@]s8!DirR?UFNuL6tZZ_%]WJZ%)DSj59dcrPa%:T;0hg9s7K/Ap5]=kg5(h^0^`iId;<V,_PKJD#<KZNJ<!jVDi.8`f30%O27Xk=:Q7D6&m$lel]G!q<"$7rNqsRd/%,.j+jLh/1uM7"*(<AYF.16-WAW+CSn'GJP.^fY:#`!Pg?$gO3@Y)4.GZ.-T,M?\Y'Og0QH+W=D.\I&Y&riD+1X=^QH>\qpH%DdA/%Z-+I*rrQe!?3oF[2Y0hB!?+,S3u=h8JESJA9&N:"YbG?6gPtqBq*M+(@["[S/0aPH@H*AjI7[D8iO-m8X^RK$HoO(Dq*j5RHnm61%Z,kcm%cFRU(rCiY\I!(`hfpPGLZY'aR^'ZqOE;^W)+4od3dCO&M?>!H6p5rF<03)n<Y?cSZ]=OP9ijYkGSm<C7LQ(8lt"Co1IM:K%(ZQml+L(!%:4\`Vj9<6Z.>C*R$1Zj(nGqMC6gnF(!'iI[gQBqr&0feQkU-;S#]ZEu.Frh^E@8Qe/ckZW%'7*Gr.njX0]rB-@IIkH%rhJlQS@R@-TKg\MO=5XF-He+$^bRAtL1`%A*3$`1Ks<%k!XG`k`8g(6O$PuIqrnl^eV]_HH*3/0]e8NVK4+&Bm27]ZiTbgu66%8'%[+Bq+5f)g>fK;^kHkMkY6;$K<!SW+*`ujo!8Il!@[QA5e&!9t]lt@[dqELs,MoQ'0>YZA&dD/9a68b*\!Jb5?rg&Z&1T:dBA2?Ku%)1oi'R_Y&c84;lL;A8ocQ4sheP*t.)/mIn\eg4#s$6s-ir!`WDh^/Bkp7!Uk(0s;KPrHm.dR0cG^4d<U`KedT,@jt(9[7#M9UNuf%nQEVBN,%5<RSoE.#[D?s:_B9nYm;CMr%<=t:;8%@!"#2)SHPid*8)Zq=6+;sqQ7b2-?hAQTYD9!057*\`QC/.[7djqs.S+O*n`rH%VYFBt44BtGWYl+Q!88cCE?<TqDJgr2%8KVCDhZL?pn.ZSJ]$-6h;S*/]=MNV-:nfc(LrNt%R>S\XJo2(J@^l^b>i[5`RiSDGdu\]%bJaRQ5g_TP0go^lnb3mT*eFB"qtS#@fC(#k/<V`,[:ut/jDe!]$>&CP*gpTk[1E9Q(_re9\.HSI0n8X98h;BI&</U+^B'G:@=!7,%bbqI-Rs&4U%B5?=lu^]?"sc$WYO#9dLpV"-7GAiu&Z)7?65Xj$63*\':o+Ho=ia=u1UQB(h2HL^@%F:i!KadjC<(u/+p$'[eiQ*u%l'l@6"H^2iG=SG\O8snZes21K%$$0caeNVQZ@FlOSOK;I#tE$%^<jJ%42$LfEaD.Z;oTRU:jO<^]DJ"5'KdY80/f0@0A6/r.Jdfo%'kD[?N]C7I!=)XF.UoCt_`$F<'mGL!Sl>n6WL=Z6*EtJdLJq0`j=fIdFKtBFAM+^j(.F*k_GuJ!67"`*HS?eK#gN6S\RA%;!1N/^%W4J)a9f5p=aWW)l+K'k?31(9t6X<.6^!5FYMmjkj3XRplUl!Cq+0n)9"nQ6@(!05;UgS9IIPXgW"5NSoL`8/rHf55m)9-W;jYHr6%G)G,dZlt0[UPQjOXs)a(;AHl^/6U(S*a:mT3$[OQKT%lNqGa^c@mq_\&NMsD!X4^5,'NR%Jisg_TXt:CP?/c$,Z$at0W76:TrN[3%5k9'Z_%r.XJD[%Wdh+QWi&?3KRNakEZ,k!&G0"2-&DhskSIjtom*\KA"uPJ>b):4Zo:aNOOM:(%rkg(:h\jJ=q`WG,I?,N2/2(![%aJraUaXP5S2@eGQ>oPG_B.A;fk-jGD_r!`!LHK\&7C2K?&p<(*EHY"L'qjskdGAkT/NM'FYN^BmZ^-Sr(*f-(Gu!?([GR2Qe>=Mt%oi1iY%Zu-`&9iEKOe@H-k(4l94pJNR8R[r37Agr^CKZE-<dHo7>2Q182Dcrs%"^+Deg.,iFogC_dYkJ"W>YaFlg.pn&O_0O-!08<%6A(J;ZijHXOc1*h]!`q1f9=KILC96F-LO!-6RW"4QkZs[!FjPF1kMXa6-309EdBQ2QoeKcF;q\@l5AJjl&=G*e<7lc"5j\Y>+37`%2e>u&b'fHU&A'YcNR[9_op&YG?q\MsWc0VedUVR0@SJNM-70T;0*[4lN<m<+E@t2@<eM"4=3_UN1LcXaK!ApU]%WB#B%^)r@&STL%SO!iBhIn4q!67'Ljl+bE-HAU52j8Bg`lKTeE5@WV<^%sJR$M1KWGJ:OF4tp5FntGDPttHZI@-kGlBmA,$DDY7BK"df2"+^2[AXd!%:aO@;T2Z"71Y,P4G/q6]5MRu#iPLg/+?L6TM0)1ZAH77e'L;"EjZQFOf,KsoFHsus.0k\a]>AIC#Xlaf"/t^A!h`H0G$*=O:_7ij%3'`10CR+F!1fP-egsZY2&jnih51i>O$6U.OhfWRKOsUo]#1/K-c8ROCYajs)K4M0H^+iTBr?(;LqS/0Ci<s(Hp-9CKp4P1f?@%lf%R1Rt)!&4$r`Bs?kENJ*-k%t1RGBm^-G[fhc.k_#sF`0_C[fI<?`.e[;:K'p8L0NXrCUk8B=jUC.:lYa35$s=8[Nairp9);d>/Y2B%+:I4K&.^4=U`9J^AhRWmWA5<4-#3rO33-t^5df\Z2YCI+\u7X^*H;onT4PS-!&9Vn9T@gtM"gX/&?jiAP"'P\HOmpUDjgSf9IhWu%/H6dC!_ea=hrBm;\R>EM#u(BU7*NCnMnR[*hr??SV)\JrTHTDml-;Zb;C]lKa%tDnFUgTa2?IjA_oI>U1RPH\`\*Z:KcWDdoN"ru%KSPU5%uK%'HkTU'^."e<5.8nXhfbNdLE8X,(aHe]LQCJcqt0'nVtR]P]SRMQ3V`BK@Z7"1&+;<p.ij#=?PNA)*.3:8VjiI&AWNj;%@,U"5_"-tha?4jub*Jo[&&8fTFCT,rcSt;5!1(^r^fH&.nDUDc!b)X'Q<)^Mh9a!YE=.&4%R+;i,%K*<-YmKje%mtojl#_eE:@jE%2jI,JF7`NSW3aj.01IfWK:Hg&U!Q''Nm9q^E#)8RKF;gRX=;'h:TMFWJio`+EcGUoGbPu]`Z,8<4$iO%rIm,5j?Qq?>n@'q[.6sW%Q+DG.XFiVY9'\bgE.eViKNLGqRCWEiO=/7Dr*,2#5mKaOH-;nB$hAsi7?n*V1a,YNP9Xq"()Q$<qqtkHJf!Bt*$GYa0koB:dt0\j%gdK"uKF9gP-F!3]10W%U:utnW3$D(Ra;RV?I`5%&'BUd9G"9%b:KYCU_kE,!nq7a3')LRf(ZYj='p"@@$6uYiT#_OSV&t>7*9HhT%a0q$r!f:%9Tt`"B7t4B^VnSpr?@>?.*;bY7H1k<(]kcM&::K+qdsM'0j`:;O9(2_"PgfTo.%LT^;(`[ClDO@W3m-\[>&AS0d\:"G%UdaNR8rII:T@0Mt\<S&qoIJ18*ZRh2EZ%AKS)-?o.&VXG;*#Z\U0L197Hs38NcH%1=$OBpFAX[XDRJ^D4@_Ch4@eY#]LBB<]LD'"%4a14+9lK^rJZAIrPbjWhCT'SsYl$'44-N]rUO[OdMX`icfORQCb2in,P3h(W1$&k3ju'Gp>\AI['Y-n@ArcT^!MO$NU'-#Vh6[d;%;YUms>M]MK>'bg<A2[LGj:E.S1LOD*&`rDeDBUM.Z!JTX<`gpbHSH4h!ha-PlVd,X8C8Yi]sA+i$PC7EM2i@N@CL<hOQf(pKTupB%lS(ZU6=!DWTF?d.9E_&""Ki);:X!lG0u"W/OUhV#)-hd^B"l^D.o^/GKYLb;c4X5gF]$Wr/@c):@%SA_OIKp0!t1P7K-BPY;\WeV%R::l+NW=tT0VhoeA;HO(7"*5%S1K>eFH.D:?]?3=g$0**i>W)&A%:4dJK]t90tsNAM&oc]8_k[aQ-Uf.-3u0Fa=&oR@mkOZC"HWO%!,RU-#u]e\CO]gD1Z&hqB5*h8Q8J-A,3X14[q3LN<='nsb/+H6rKu@pHN?T_5Y9rriP5scpMrUh@:R36g/(d?,?R3-\R[HbVc_hj%mlFC_OKF6[9r(Q"Q:t%%DOJ;=E>a)cL)il1Hr6$&HeTmNV,rX/hi/qY#1RiO/Yjs.!LnISW-RCSU_c+se8@bB4R-X;PEsIQaVJC%%&<4W[$`pW<,jPu9FOPaAbaDrs@t>&6JrbX3d7#K@0t7498N05kj,Fe!Eua(CT_cQH]5Ljbo)#CN]D)kZ,19^:hgrMKn\eXZ#Nh2l%6E#h2d.kG_N0E]q);A7pFn)#]]$L\b_[<m3aE:>H2fl)RY*69!RHHUkM8._bS]j.?l,\"/\@au_3a(HH%U>of4nHI3+MZNQj>q8Q%#Y/0*B,kJ_g7)?&aU\WR;`6-t]9j)<`5^6(PNe_g6C+H/R1=i9U`eu43XBEbXG#o,:6loM?okAB)imYt<Zks-PNdV*LEk86+uqb[%T'94?HJOWU8,mgA3oIX)"/]"Yku*R9Vb)F-Ja%9=j#tk*bStrFFEZdIH_-GIUopk13E;sT^iEi[VWb?g:(LgG47JcFb*le'k7fGT%lZc/<Mk/lg'\SWX^u@AdP`%OUSLfmA#GtG?Lp?+8@QLGR*6GH%dfG6G_BpVY8Wo<b?of$\],[257$'q+#H"h#?M]6;TMk<41:.>G%F<tVj;\&0<]F=\(X#56Kia\ft1XrqUAE9/]^)3+g!rEgWPeO6c,Og#m`R?sOYFk$<.mLXHb3HdZdUp/YLFGQZ:t@pQ6=pg5_3-<8%HUJDJImC@HXi"`_g4a5Q=o`'9\gk(DFX/O.QtCh5h"e8^D3DaKWsC:8*<T#@&_\HV"_Ym4)KK2BcXTk+()X_j<eM6=n8PEpS"pD3%TaEA*k3:,?Zp^''m\:-V6<4h)LWq<U#E6\MO_D^<E'UT#mB[-OqkZ]>iKB3j95WO]+Y<dOMpMOch%L#C9n1b=ZlG@0j]Aep/[2Tt%p*4cm;=T&MT`md;\LU!n^pFA!=,24/(83$T>@,sI@'-pgZk(_>*0-(\no?.SM@-7bO%HD!!gBD,WmCghH.0?`i9_#B<G2m[X3e/K%<`Tr=!'27/$8&J*\>N>\G)/b2.tcE?`U?)HCX1q-.,)S7J>]3Q.^VILA0ng_$8$E%1Jh^!=s.i(>8>io,&,a@Ot*hT-YO5H2TUMg%.ooA:<l=,%;ZM!C644o?U+>QQikn1Dg1M.(?lYR:eL^#Y=mba\R>1gM<JFRjciRXiiN,>gp7dkZUm?3iZj*YMZj&*dl<6R`Q$EW@%pRX6UAaVD$OY0YdMc+^UBK;VXe%<!l/]OYW*A+*Sk+,KZl^K#DlA$Rj^i]$Y&R$A-\K\BjR71d"(lQ`ROc!`dNe$lc+K>$;KN<D1%KhZM5Z0)[MB6dY*W\I_#Ao\T[<UMap\cudZg4sbDj5fUf6nQOn[0!Ic[+O`,#fW5'*2WmQ+1:g[BC;Z5A=d**=i%0@..V;:#^?+G%Ok$h3l+oMjX?R(<g@f0N1(gM)2=&Qi@hZ3J/.bCkZ21dl,c,,'T66M9Rn[b+L%kd-ld#X])Ne3Q('rquB)PjT<AS<rr%'"lF27-6%,*q0q\\eMQI!.f^p8j#pZ3c$r$"WF+pT@YGQ5IRIX$+'UWC:Co*D&'a[Ic#T9e22t.TY>mV.Y@TDG<d$(9q.\JJFTd:%TC,4NlVZ%.u7p$fd"MZZWn=rBgl1(4A2c1IWC]d"eud+Q"Q..(0^Ln2>gg_4?GE+-ScW_PaK4(H$Mn7N0(DuXOO!XbS?^4!)V#PJ5i=Jcn%cM%+XsVq5\kDG-5?tbam*P3;(>uE'!"V.K\j[NQ3rH7R9>mA!,8GCFO2K-5)!]b.Mh]]Z;g$5bo]uPC1hF1;)LW(;XN9cDCnONTP49>%.7N;0/PY?2=e"],8PN_<Eaid+.egMWSr2@`oe0@<8iiDG4Y$8nm8.YcfV[*aUtTFG=p0CcOLeD9Rmj?-260$hO<G*F2(Fii,%A#T%BUu.*-AAJh_H(h]Q:_t:[^d$X=,L_ZC8mtX=KX1oqe-!l0mVNm0XJo%0kmP!q(:0u@bQj-KAd1.#ZoUTW?nU$Cg-b/q:n5W-t^jV%@'%L1X&]6-\<(OXUk3kl=PYH3"`2(l**#gPa%BD6O\9q2m4(AIibA'8?F.$9EjH!=.p+f*CKRj<h&!>jFY5RT=^&cOfTLJVFTmTR%26B=_5(t2J.qF?"Qo-@Yb0'`g.B>rP2[*cOTQ'1!b_d/]g;p@a'cTi\hWt9jH<(O)JlY9kY@tn`;m^m$=ON(T0We7@_V1_9.P4cA%&)ZZGWYMb">4PWY%<>M$MDJOjCecQu78,V$<ji'-MCUWtJ6CRJ6`b)Mc1o^fo!2QeSL&WLY&#\-`EnnpW`elH-M*N!<ZD-DSJKbY%G<K)_X2f;U,DjQ6^R7%%8<'YPVA64@@9aQ?T"q_We`6@P"DN.6nQ_B[AhF/EAsq1]@1JhU!gD\r9WOI[Rfu9J^oTF%7#]>jD>&Kn%[FkZ%[YR='TZh/WCjYJKRRl'RqTuTYX&q9sAfFP3a9!M8E7JRrI9#Uj$e<fSR;c2rV2)%L+JRDhLfqtiM&G,WD:hXjfIR"[ain5#%*8q[@dZ>04-(Xb9P-;ZhDH1_XoLK/G=_a9$()r@$RcW/gH=[;=aDqE.leO$J$S72Ikbtk%[?d6bU)!C'e1A6S_1nJK57oF$/li^J%8?(8E`)<qiO;=a'WEHrPhbC^q"r$l5XAC7fSGX/7]S*+n3D[8Pj^G//M"JWXV.T87c"b62P:gOj5)of/@^_2p*G5Q.=_X1XSmO$*%$XgH1C#ppSU<0T2ZY[9(VNka()bg[a52(A`WB.@=g>dZri?%5'o'RgZ'@TB%des2$aa50\h_/dPp`:(T+,CU=<Y6DZh4m``VtnY4%j:q.'^7mPg;8a:@g\sJNrrAHH%qc:kDU2];iZgI9Y1Y8e1H2(0-g2eMK?lPD*silhY8EGGLQL9Zja7<#Qp78jjZ?"dHiSnWOM>,0%KR@0)NQ8n=fh&l%6H"(q8F$bJkOP5)OXcbZ;M=u#FBpO;T,/&S]lK8*JS`knp__e7ZeMKJ`:oXVpe7_N9))L-]9XX"$(mSj5!TGS%Y\#?C5?c$!_P\+*r-]2?qh/\O`a3UKJ5s<A4i\+UJ,N=I?T\AUQ4!EH_Q^YTGd(%+<c(l1@624qR:OZ#HAVBD$0>Mi2)W[\\$W(d%AC<X?`<>oah,B2o6Ad8K*tX_**N%8u(mKq4=hU(0.<es5=J^?OM8??/[#1g(FFH6NK,mE[\>Ma+cV$X:f"qr05*&mWgs;D1p13BV%g'^lgQb&XN&"p-n7#Z:=gE-ulm2Zte,D4H2Mo@Q[8!dsZA4<ri-s<NC4([F1iX!9;$r8A,F&(t9o2O]P<lprh2)SJ^HVV6?)jTbM%m+lcHc!25o2&DPF%iC"IBh>MCU2VdSgJoarp,ZL0o6SKN15C_Rr4:!n7C\\:DblrS/e8PJqo=opis>CDBW>oG&ag0s$M&i0e"QdM%Un[hJep_kkT%24^>1"7sXP_Xsg9=:$ip$0gRTZ_uB!iPRLb0a]G#;r$-AKZG_\PeAl5n@l[M2&EY:piaJ^RD6"I.(E(,Cg#*\\A7%AP5`n*NoAZqQeEk[d97SdjW#:#bI<h<H6a,Iho;[,n5o'A[<#W;%[laC)pMfEOWB.;OP^rQ#&GaFk3uQ9qO5>Yh$+F8[/([V1l)B%:0Pl-;ip>i,q3FVZ_5Nn`G@OBAdR+tVW.fdR-aoa0j?QcocVa6j'?DV\oP5W4AkLs_SNk@JuXN>h-ui'Ch;hqI\b]bgNo2AIVKIe%"`9*a3M4h;=_Vp..eH_5nEHW)CYAiR.T3=G/a8GTFMRuj9BI)T3_`d-I+G]:01Ba,_R;]T7a>c"EWDPgJ6',?=>JlR;C.;PR[%a#%_!.FsQ#0Z[d^2*%[KRlGS!CEF+BmLmJ4Z/:Zt.5?/?Ypphc\[!4/fd6[^)`]fgOTZYe6bO%r%cL@T_;aMFs>BNY49WDu2jOgTm#T%d];rAUA(TA9%O/Kf60G`es;;+e_-sB!HW3o<EfsABWYIg<pE/Ss0jN%1UTl6g2aUo4WTA;]2U&u*PCueZWYnGQncUZMc-Fp$JQU5%X_`@&Rb"I.^3#>Z=\W[K>H)MnV,*go!,7oFb!C:06sPOsSHUQ<.Ua/pi:c\LnXlh#qm8+^b[0:\\UFNi1j%+kH1&P.Ep^,hJkMh;%7e?78L$>qIT4m[`33-OI6Z8=<bA5(C:lKs'*ha-m5ftEGe&7>a`'CI-`j-=E\elR])%/JqiE9;@l!cprfc1=[/?5gDmLhil$B`kh%0TP.C+Xe/1:/W1q)+[]fJP?MOigPl]I0K!]=Xju0c<,P>P(:k36cCo*PIoBc+!A46:7bAmS!!@Z%p6$I]M["T/m0.]I9k'#g'?G7%;PBO"2'S@d#9o'u&UA39Xa$jVNfMBd/d+jCU[-um,Ls`#cm=n_8DWrpd`A@tILZL-lVeI*ANF*3o">rqU0-:D_QJ"R"F6:FM/K`,%][c'8lVqR4QJ$,G+C*inQoG\>Q,S;DB"T1o'N>PJK=`aB*AGW7dZ=HfDjRpjH!:e&k[SAbc,q\BgP5(.k])TN0+o"$X?mQD&"?Zr%-^@hb<_L]-\F+c^XZ,WIZP.S,g`c:\*2\AH>1.t:CE%/+6#3>1B/pLUmp0K@.[fVg'[]eBH7dgG@ZA7Td)2j[M":5PW%HJ!gFV6C%$DrJ\1qR9\8DQL2@M[G87&iY4Mde`PTTAKGP#;-$W4"@+#Jp9e%Vup&PU/kj[Z,)J'+PdI6e)#^!f<\@Z<uI!C,Cl%M[Ua"=2Z[o%eDLCtROuNK0l8)olXDP`TOLWiR[h>,B"Fd=7>\RkMa[_VWA6Iie2"&$Q**DspbnRA%5E3*m#Gi<,]c4--lq.(e1D>mL+Zs\1"B7)%#Ps9=pBW?*9m3#^=JJ-H$I$qXM00E$VW4>;^L375AJV&ukWBI;<0E<$iWu(u4Bd#%m'U"uS;<,hRNEO"<0ZVUUId4U:&7cN(^FKY%UK>reJ]J#U<<>/k84q"*iJNoJ)7Atu[0J,W[Hm.9a=L1<U9dcen(=RMP>8*YQc5IE+c<^rqm?>ko)oAb`PTdO=$)J8]DkJ("Qu-X%@eIVGaBE`?Y[a+&;PfKjHD"7(!G.U95#<_PUs-IsX;n$7_g\id6;*uq\?1VL0b7B9+H&Dmn]BBY[.\!cVaZ7(OS4C?&[.$_ZnDb4%0Q=Fu*>UYGe8mdiBEsY2'q9Ej(6pM6[3dMbU@J^bW7XQj)ZP`6Gj[ePW8u(!F2F<#+bduXfS6>d-#$hP8lO>lLm0e/;-?bi"nIku%9+n:WUcN&dm;^`6'E]GNOY112Ho!nJ0\qRWe%RM4]^K;P&mLlieBsKSOX]@-hMJ&^hEWnu331*C&G\FCX"LEH)ED!Ld6(1\jN=PB%QR**N90si!I/V,\dSG`]s7t>bpBUgR2A?!9-HQlcaHpsG.137'?UgcX>+@=(jNFL75Y2H[UoZ(;eKS4T3DKVNC/%DZRNr&afh@]'%(-=V7<TapO#`KfZ3=cD+/UEt63[-l4+$3.Z_pX\p=u+o%hPZ9oQP$0h/diV\^*T]nOC^-N;o;"31.8iOh"-H(BP8%qJ!7j$R(=S^%Dk'rDgp$&i+b.YiX:3XjPH^0t8dD%[oK%m4`jEu>F(;]#&i#dn]ohB5-$'/%Vl@en87Ij[-'Lq1nM9j517<KsA2:WDT1R2+=!gYF%N]Ud#T#5X]>Y@+S.Wa?PHC5_>q(G2#Atj^4rppio6FWj*TmO3>E:SG\WB6PtCM`=*hl%3sM`=3pL'Gbg2'7sVL165.7*p\4c'^Cm%6=R^FUEo8t,#"''Vg",3ACreCgTE0%NM;4P.[SRom]"/'`eM&qQBGgM7?g\GQR"\k'ne"W%.m`)pC8qTU;tb7N0a)US1-qegd$^L%XHl2`CPTgNoT6%LJG%"^ad[O`;+[acYJ:55EPQDeR)IB<82-[;EmQ3XIaUkDBS0sH+94fS8i1PB+e'O!$O_,dRRNr\>DZY?6A;Y#%[Pjt&iO7)5U.Em`$^\CmB('^@.U"W+aCr'bPX3AkMKVQ32J:41,YMquoA`h"(EJ87qfGgf'$^@5&-e_GQ-s2o0hT'j?]I7-A=?si%I3jtU>-JPRPpJASioc.1<EUMC&>GCH)b@_Sf;lh2mC7eSA>dB&[Q`6</KX(@;rWE8YQps]0bu>lRR;3RmLgfPOmcf<2?Y_a6SO!i%T4>-7M+cN5FBIHeZ9)W;DLJk];Q2^W$HY'&.a+e@MeU`sjkYJK@)=[n/:M=o'I$\#1EM)Ym4!_jWq5N:-o72cMX']K@bHr>Nb"43%TU4@T`+RDBi)Yak.Wu$GAja,`M)M>rSR419s#>.g<:4mTbeQbH778J%/kuO"h)#@7dKh#%fYgH/99&6>VA>-4,[`0&6it;J5*PUU%@?X-*?rJt_4MkX-XqI+cZapA33Z@PXTc#m`35=0$Z^>hmV>,sYprZ^%au1:id<+7PV5UqD4"nIJNY++aPGJ:8.i$`YddLJV5?\s*%\ZJ?*Lh1$<=ir)6HmYh'1Ik>jE+%JC@Tj6tpXa,oW,f5$LLP"uL)i/%'#^$q.1LVhR2JYD+;F#??!kgoFC2q7"PpOPL?]#o[kp,@%]V>93L.>T8DXGJDIHr4_b[0sR,5U^b?0$AhHt"6n_Krl_4"sf<;th:<j*[3]>:ORVn>^E+)B_4Dhbl<)I]C,:Gh%"8RHf\C7pS7f%UAC0:4g.fW/LXsp#Dst<(jFgPmLf;X]]tD@&:MSu?fpOLk#>[rB;js]T^%H`"n5SFeX(CcE(3XRf+>.^/h0eJX$m1VR_;5&n+]A0%SR2'0cnh;?C:3j)BNhM]XV<R*-t_EZ;ti^@JYlVXke;2jD-a_keLSD#mTVV[S>Q3&ijIZ4Aa43aqt$-QMt`K_F9/(:]MNri[cf_<%r>j=2UjD^C1oX!Le6eFH'X*1h^K<7nfQ4X4[Hd]gIuBUD>jAL9?N"//VZ(T<m.L!ap7>34Z1>O%&5<$kX1T<f.^fH,@,ZrA&`p_&%Mm#Z/0D-,C7TPAF^ZZ+:DQj$@it43"hbs+qT),-(?N"//VZ*`a9`=YQ1So6eaqWU\EJMcaS(J^6g!Uig<I\j>^%r*f`p2(2@\o^J%k:,E@?V`!5mqV+GjS_&5-OG1]>4(IGOO?W9La`ce32>[X%?rC,F>cO@-:Y[D.`b/Sl\[=>S,lciT%+NKD75U)j9oo8Z)gB.bK)@L%$Fo@b'$R.YW(:sJ,>A)BHGH)4U,$_'UnY>MMpS..6*cRa#7H:nOte_S$Q&/4;0Q1`ajbm8Ac`W39(%a/gJrA0@2Y>1e<W`6$O[eo%ZJ?.6lc^[/1mn>,=3GF35TK98?C;(EcX%F!b*uj&.N7$EhDnW8"8cTp4(VJ7XF4YQWltM,c;`q:3]OiBI4NiCqb9H"-,$JF<Bf,4%SmnW-'/[^5Js1_h"<0P7W?aso_Pr$VMAJ"RFl#!d#N^G@9\;BZFPI\GNJ$(`iDb+Xnc=Rs,qNm!`)(U-PKF"@lLAP7G[4=0Ooeup%$)ZGGcn/P/f-tHI7A:!\e"!,H<J\+=2-#;%m>=q0>fn'OckH\UXuNMG3p35[8(O/"\6AMb_rN:X[*=\2*;u1.P*CC(D;$N$_UBuG%j1+MfaGVJ%ZZ+;[FICT5n#=I,cZL`@`TrT,%lR?^R-]JtLmm/PUlq:*AKL*EV%dWAMbge@/lS@1:<%:rr]6UIm\30r"iRX?#(l];%fQRQm`K$1]IfPbb;]>@[1/"TqYLOK`,A8rO[lVP>9+lO6<L>-gIJ3=ImJWE0%BAWgUIu,orKof'2&6l>PmU.t8TY>e[0C![\XI8-%_p,s0343?@][YNu2/Upg0tjGu3R=PR(uk4W7:gcSWWYqO]BM2_4>g?uPc-ILm$-,l:5,NY[5NdKSYRdFQrqoIRAX5@EMDiDW\kX;%:&)5t27Ph<1=f.$_6kPq4A<0&&?jY9.T:-0Op%IAR(Gjl:"psD`bRFKGtK5Y?bpB1i-g"JCq0W(@9IGU;laV8\`;1S#/\er?E7eZ%`"CI5E7rBO@_^Ea<Q&Z1MorCF[^:=`*o<7H0T/ta?AUFT$4D0oa68XBjWBP#@fJ<nVX;RQ-Ya*VbZ(<YBqoFN`Z'ddLW*?4m^*m"%]N2A;9WR.C&+T:*p7B`J)IdeUnlcK+bo6U/qF]5[Z4@55pKA$@_C7@p0!\#AW<(GY4XE]03bUg*U=9/TPC6_`MMP>K(6p=+X!L\Z%r;0/&=hQS5AbOjZoA^gf6f8m2@8`Z9L=5BE^r#6okeLjA.ZFL9UN&,bd&^h#cJ+DRcreg:gj"KhX:!4D(A-<H]OiFh/2+<u1K`Kk%V.i*h#`;Np?Q`k/O.c.gimqWj4H4Ko%H-bX]lnFp'XGPDfXOCFr0JUlq_+@ZLK9J^r`?88Fs9LjZ0R&/d^B(^(L;>$S!YQ[liEq4%TEe*.N[7ac]unZX6PK>/`1`4^d%WZB-FLTuntOH/fR3Dc'CGaSiXh$7Ug1Pp`%j4,b_luKVa*<fe0)Cd1s6;%H)O(F<"#kM6`?H<%e8K6q:iCN?R69!8M,JHdO<IpO>#ZgZFlZiKlJs+Q:G,j3#XkW?<-BACKRjXrEHf#GH]q!F-P183;K3jT*%9rOR6W%J@;9re&PKm^%H)C_kWbQ#Fd6sKijJZ$#@S7??nSn1C8OTKmeKjj+8jjNnkQ@:KfkPLP_@g:G\EC,#S<]F`NL7Lnndrtm2)PK74N-e`@_L*rXB8LW%/U;"R:*+FTa_iP_=$*6)&+P(YAM4S!=7gR&Ur/5]3?=5q$Fn2FSb7AgPD<73/GU\AXI*275p.'jS99[G4G:[T;f_Gj+^Q3n<$i,q%q5=2`B^VIULO,.pH7'5seXV"Xdm,/s`$9!b#B:%,+L8T$6eF"G(+0Unl1#VNe=3=c:3d+90?K%ZL3RuW;40PR=u(BE^X'iceLM;U%<lZ5DVQk;23WuT/*@@&,CactZeFb$.,nK[GWIb'7Lj4ct;i+&P>'`/N5=UH-df^hAF;131m$\0="Wa]XRPF8?!>CV5$$NJFICn':%-<i$5dudgMS(*XG#S!Vr=YR,:!b:HJB3d+29AHlqr'5uP?s\=398bi7-&I[eR;cCh/D?XB+uUrPBfJr.]h%IjR4j+>`N$aWL^a]7%U.[d8!8QVq1Ra"ad>CVp:]%P)DRm$8:9a"/d-Tj2OEF#arm2f(b98\!PF50k>-X#l<9'V#nAHImY1#!p)A>u7rna->@dn]-f#:U(%ApkF;CKjdXW)R0DT]Dhe:JsP4==#ANbf"a]D'>jSPVn]79l:F"qcItI9-qnqOSLpfB!Y_0HLI"/a*C!;E:3BubqdM-XGMd!gM%]c%C^#ImOZF1BUR8i&ir!?/HQgGocIS&&N(kfj,hi[=(gA&F1RPQj=o"<,BA:WjRIi[%>ECot*cJh1jm8=ECu,kYgCBcB4L#,(1%-2;%7nUa\PTbpph,>6cJ?m8!nkuo)5Fds$AK4r0OX-*"8uMjH)"KHddK!d>\t1:T`@7$"QIQ[d+tA\Q2C;%p]]ETU/%lUC/gRu@F\8S]%Y`tK\fM0:UW/aIr<$5JAnn$#)er5!<:B?Hmd7^58H'os"OkpT\p`'="L.+/B+9`4r([2W$\Z%MoV:/8["M:JYT[&]HSVH5iRF:>o%1?gVpF/_?n\VJT^^(>YC$)_gS897'&o$KT?Oe/<s*K'BuG\=/],$.*uF?7!A6#BO]*>elXVf4]2BA6Ek(#dXR0:XXE'2Hs%hQ%;b%n[cBf+H(2r5"T@^M5'5.^/^5)<8!_6$\n1Da!mM[Oh)/PS8u0iBZ<>DeL6PepEcANi>'V2VK=j2-_3:JPtkoTX%D'lh(uns>%jj_%["M@9RPu%%J2SZih]lQ*#@j<P`1EiJb.SFfZdo_N>=PK3apr#2S.b$8Y3K%b`!N?%8qkaEONOGU\#Dp_qP7SulaB1Ca#QhK@(%nI%WTegm3g<B!-+7NB,_]1fR(=[FFc&0;oK^qbSJ?#+iRIg^=g+F->Lr+LmWKd-k3`gkmL(i5DJ?;<\_HB;RCd%D0'7%+lAf^cl"n]$%2='p#'opMO=UE3hgbn?H0m??)Fj/YbI27u=8*6s'YE$//W:tkR9?O;Fm[Ee5fX<-?HKK*:YD^Pd?5I[41ij1k?6+*rUt<T@/Y@/?%GE3S^?^NQlbBf`'h3))-F17ssakSK2eZiu9Gs*j*c$;HKm15Srk.Db&]B6aek-!C=Nk%s(0mAC%F4Zp`a4rQ:ot]@pXm4$`2<iYr%D,#?Lbh\Fg(R6;[0'<.@mf"[P\_R3"O#!YB8'*N<Goi/U-h`(R%fUdM<:!/4RPs8poK'6!6!?\hYItqRbBU^$jYSt37<NYC-<Anb%':N(\-74JY.BP?I7O(&b>bsbMF%o).AUqP%V^=n4V!b$Y6bKe;W(^B+PfiDl7e+&EpA7-^"l#+ID\GR5PAMHbOeNFf$]DHR9k)(,%D&Ptr&hE7Cp#]1B'2*>F/0toZ8hVo,BM,@\G_pQ?RDauKUibq?fm>!L_BMk++_R$,+#H)YKMd2B8k29fqJ]P)<)Ic^/#s^oSg2o,%9C<i1Wi5kCAoa)<=^BGNQOWEsl_H7d(!Z*u]Y-nn5,S:?1Wgb1>+peIkd?.A.faY4N&?t>G)MPc)1J?=9&s!D1<l,HXD8$$c,)2<%(1SdGA(1K3X\KcJ<[G*6oOugI'35tqQ_P?tR4a]0'2;nKg:%;XM^f/qN(#P#Y_ntaAlXs?6_T4QVQ>Xb17;\\X$E,?<>G"tlD-.+%FZ!['WdC)SQ`EJ#K<@C"A:Brao_Ybe2+B'pg,OCM'q"=kP>odf\%^)u0<'7IO]5CT&*N=M1o'?dV:D&4PGJ0MAO[CE:td\"!nge^%(cO1EK%XcMA%:=)]4*cEb76G(g:-FMW*kZ`bCYNb<UN8]kJW7816S(HVJ?N$5ik<eU)N$NW1HV?W2rK,Z885\$L;:3L1XC#$s"Ub%Sm'3he%c*kU[Cg^1Fp5m;-C%ReUnlbf38fQ+k:d/%&ker4F8]Y'T,U3B1C_EVNGR^28kt]-e1&KZF7L`-PeKfCA;M%b;>u'=H]*a%AauPQ<D+Jc16X7P2!ZHG'p[BRC!`SV;<L)idtgV=B.!!pb@m%bY=;K/p"e`0DKTC5LcVeT6mX&=:Xk1mh@erU7h[rE">_PXOB?:>%)B.:V[c_<m,o1:g<`JMKPe+>u:@.8&rV'[.U8"@i,.P;pC"Q:;A6$ftPVrtt5e/'_(ZgTj4AZN2<jnb<eZ^,]/knlUdF.\7Qf:d-%=C(V93]%a.7q<CmE7hTZ5CZ9o$54tqF<GSL-GYF>R^1$L-C6&iB/V-'.c@/O8Rk)$6=E$b=NYe_%$*3fR0]Xa"2%'2M44fc@?eVV%;Pf&0(J6C`BhM2L`@,Rd3h[6t\P4676>>_R`G[MGZ:[_f-8i`bUl3B+;DaV[:6%.)81$cNTN]f1-H3K!)&/2kq:RWPA:/RW/-]Tn%Xi0@4daYXEe<EN</gIR+?6]26lK34JTesU8&>G@\%ImolU,'7n/aY,N\MUSfRFN&b\MRH^pCoX8F%N`^aDS%l@aNN3h$Kqbf<SVB%-0M2a5WM4q@YhGY^WE<SI?N&gJuKo"10mj+RW@r-E-a?fccN%59<ApVS"eHoMZj0EE$C?R1Mf$E2("S_Z!fu(g)EcC<a.SK%qH2l%G3&g_oZ]D5-fW+o7:l&SC<>O8s#q)H=0G<i>TJ%0r&f`\]8C(+U][FpWXYgA:k<JP-mf!F=:IELrprGcL\cQ,.M5KY9+NE=7gsga%#0L4MUEq[86E_D/.#5;\a(M&N>aGB*7o8@3Xrtc_OS+up3'N*t7KPdQTLVk?huYHGlCo?u=%kC,k4-R..crIZnjY\fJP>Eu9ApoM%MjMIGBG^7_#n`q,Bm1.Aa:[-SQ]#`)Sr=Bg9(6p1nq;2J]H^[C,CJa)qZEP_\oFU;rpgD-'Ncj>IFj'IY?\2Qb[!OY&4a5Q:KZ^>%!_50]:Y$X=j76qDTG-mLI92Wt,$`KG:ud$fiIi2E`)tqiCc=itnq8tPO=9K%(ZYmHo*R%c"aRt\Bss%@6(Te)#G\d?:KFjJ^8"oZ%JZq_r%So&-:Paq-O7V?R:Y:Trg-rLo7l]/E_bkN;-\RN_[9FX0JfLJdi5$>_)L&$n#91.Qi*@f$7Ce:BNmF&n5@5)P&^Hi,MpR`B%FG-tGj<A[\+W'+;#e<"\.mc;>=hA0%kt?4O_H"0W')K`kNmK8"/@nik_i`3\*NP+4E6"\XWHba<T8D_:B-uIZFGY7#E$aL<6D'%r%#\P48lD2bDF-IF]^KOminV_3Pa%n`<*:F/GE;Uo%Z13b8Y1WO&`C"ISUR]_#f&S!aa:Z_UU.+9TM\b9//Xh>V[)`j)d%]&^+'Q$"%QW%TVl$Z0aE;Ge7TlVYC_Was%K[-@"#a\%qFjbW$*9FO]bU1#S@1b*o_^+mJ"\1Q>$]EB"(EDBj0<@opo7B&_VslI2oWlZ(#J&56%d=p_?s#gf#Z+t=S5te:/F?Qk(Q_>7>jY0fOA=D,V:LWSBDdND6WuJ;"@+QHj^)hrh=hBL[oNknriP\Ac+HSsD"qpYY;=)@[4odF^%?G&=,/=t"=]%5kRN>*KqBUqo#49LOdk-9A!.\Zn\r*5hgD%YST8Y`;a3odcLRi4mJ+r@D<Bd)O_9Ji&@0;"!4".AQ^6uNKTfIduZ%Ybe4>>Bs?Q&..b]7/@J$]'>M0QrcPVk5j"?OEmYpoRat5QNb3#Jk-:oErSB;dg_GD4%,YZ)YJQTU*#5o@fh^I(nV9T9>$t]o[V2$%,2ZJm6=a?nddp&<CM[mO+BB!u\QR<Ih1f1;BS7O:87=o\>UH!fr'Mi?dl^s*.F=p6\5k-`>Y2b,-Hl(Y?N<n8>D1is+g]&CXPn]e%>>b\Y?'[5i.;Mf2-Dr)mNORB)M%(tTk`0Cd_YXfK2i"JB`MtI6ZkPEXCSI'<Fg5]r54=$Oe^Lo?qi5D45boa=8*%fQ6Y)ju#?3V@%:B3gU+F/bX-TME+CMr\i,VFDD,==j[3?;4c8f<g[j8tFA[n"R@\*<8kFta\Rf0]4QKc?[^faHQBWZG5VZ>^^uGjbL0mK&O_efh;E%RWHaDk+)SuM2?uNTNLF\V+PpAc!r#T;=EMp!Ftpf[++=f!jZmLmW-eF7-&d&.*&-H[-333]=oeOW[P3H2mDKlIiJSlje@sOj<MOr%%[BU(`Y:noHB]uZ,>tQoc&"kL"/=:SiGD#F&qp@AI3J0Olq^ER8<>oOO,2RQI)+Z++^i4)'8?mWfo/2iDS'$>>R47(KkCW$1mSa<%aWYYmO:N3(&9hs@;Fip1fX>\M>dha2%]:Un%:Sdg/ZAdD>U.k;4AuTb)4S\"cQO>A\\,fk=X/"5-C#:a"X<h*g$K)3e2pfs1\*3A%EU04V:>u'kDB.O(FWd([E[&Pb]6N=f0bg!"aU8++frE+JOBn>bV'oF&lN&+92F%co$2Q@p>kV_>_$&$!j:\kEl.8HX[jEgQLZ`cS%7_KGT&6XH[\C=HRrW!e-erHq\ppli?qZ"4nC(^@AX.Oe8l">57^O1BJs7Z0Kr9i=gcN^aXgtB05e#0so4MNq*o%C5CkuZL*DX[!h%5JR/9oB-#H5POo]f0;FsG>O&86hg`UDr6$Bc+OZYjDmO5H'\6ujWBc]';X4=s8DT^knj)<Df<?RIId!%Is,i%iVL$mpZLbF&4-C(%E$[a'kjNEH$0g?-s3AsJ:7kD1h+lq9nNVNuG5V-UnW//]WUtQ6Q[dgdD[-&nhnD^rC;nT!GK%JV&7bl<m)ic+KkIE(le/2?p$@lo%E'jOsYa(EO>i=Rd]b'Mh!)Z%ZW(5Yg][?H4eH'//,TqDQZ8m5]fF:e[DDgl_97G7^"&D:VV7a,/)M)QZ^+>^1Ssu'<X-4(SZft1C%^efgmLu+bmj9#nu4l7'Z%N#O#ZQZlPHD`b?DlY2tMGHDjjYOpZ%BD,10*kcpDgFC;ft'baRp6O30qA6uDFKkBT[-$#<^S#SO&[bA%3Jk+0=-=cL7qCr1*YW?k:IOXq-0i@_n$+1n6=`'=6p<"'6uSej&mTEAjDH:LAP(on6TT&m!m"();@dEAo5-3q?3Tr<fdGa;@dN(;%9+j&K#bq)#9UBIZ+GXk/o0M5%OZ"=cO[h8`)%jF)O8`,DNPP2WociQJ(1i[dcm!Mr!TC2CV;!P.Q7aCoD/"MXDa'@B@4YH44^cD"%1M<+gI\0#14/<s3FJ'+CDT&/6-oW..7>p$E"E/=:YkT1SI*aZUn#tk1,Y`#"`\B,N4sG%)*!?OE9t9PRQ@)V#cqM=-14KNsX7S!&%Td"4&`N#Ug4`F'=)g^Y?N4oN1LZZ1sX!Jc1XN1qnQ`NN(;?\X1oH_:ElAJ^KN+rP.Q,=b.l0HLg/ME=2NY[>5b'(QYj^uUJ-5Q9#%D6ueu/liKl[QYh`]_+"q,%LITgJRl+7mq5b5@ER5LPAoT?FXmu$^#QU]@0\-&i?uSJ-8L=#E/huKc0-Jn5piC[r^_7NJ4NNaK_k2%,YcJ)ToujGW&I)dEt_JAe+D(!L5I9gX%<t>9&ApFiur.-YO"fDCp?%(?O;Wh)3r0X3;%<sQ:#9<Bp-m%)R>3!Wh9\]>*n%cluLc%%HrQ]4EFI#7LZc0;pqEssg,0Maj/M1(SB16t/tViMN!=R]Y24K<-jQ-jlrF"OZWZT+OQq9fKk<:;lI9Pmp/oc9/39ZA9ts3@l)UcL%+6,9@gS3PbU@nUr]ceGrk&aD[pi.*GI.7.h"@"18>KFYm2SZ:LN7sDb(!LZo,jUR,>kjidK!&Dpgqt-QeGuBlLBjOhf@=)a!Gt9*%9(H^0&+GTm%oA)O%ol3_"0c"OlSbQkK&Dp"IZJ,rfT:t<R30u?9_;]F2o[sDqJ\!b-eH]m3$PfbbJtrj1BNE*75OT]k_$aq6Aet=%E[[q)JS<S%&[jO1Wc,]S(RPFS,q^+'QQ\o(>&*Ol[:HlQ,mihKE^T[K<-jH-#`2nk#/7u9%0/:'XG[kc!liu6FZN15.WbhBbIH89%\5jm[fC/q8j_SQrejZeR8Er]YA*N;)6,*fK;@phMHLmhckiuG=O_ho--4$*J0s1F'FEN++V?Z*)>".#O(NC10Hr=2Lf:BTK]h&^u%i^]D-'hu^HAtU@U1:,gI.^.!?Mdj5UDa`j?+XLX[[s7[B2k^-32i]1%('UGTpZ-gb&_&T%OhLkGDU2MDQ:Wm2DnJZp?R.G;T5&%[%84Sq>Q6WP1@X/nr!e;FGLBU5hWg0G_RLQOcNr`9[DYc4(U,p1I]rX?.J>)ce7Ffpm=c<[nJreJT5^9Uf0EW0aH/[=cj3;HmVC]]%%>9=b=MV'*qSCMEpK-PB&Jo'Kp2)mS5;D8>708tN(;`Y%!H&V9^j<7YQ9^]97^fA)rI^L@=Z%NZD?F=st2&L,JeM`)Bp4t:6[&u<j%-s8f'`,QT24J@KP19=NE^*luUkDT!,`M6LaT=h[*XUtM8'8#nA@1XJh_T2aC;V19pD?[FFH^YG38V.L^LrsiVS%o(Z3jML.KG*Be%<e[97-d_gE"]1?a\E5!]5_H9Q6IEs>Yb*OUa:B4IKa#;Ob/HO=9lf'D>,g&7m?=c1o7<^f-I4A9jo?Z=Z?_7L*OO!1!W]b]!;^<f%*HdFP^r#C+V?ZIq$,g+okleB3pO[uB`F//fgbS$q"2uO@)L)@qIaK4foRiWu]cDX`!kEQgB"l$nVAh*bGcG7."CC'(6Mt+3=au74%JE=<WW=Y!ZU-d&+#WlZ[brF*k!d=eN])YUiD3p$FdoUJjP<Pf8Br?L>BI:OOGT]VGp4?+KGl.Y6GN7E)@_?q!X#F#ul6?7f6b0I(%^Y&@$!/Do%$\<'fS_\4%%M=n`_Z,?VblaN*eH(43B>#V5%4_tnka/HN[C^5#@c6E7\AVjo3)u[:\1VCpH(M5R.Up)bI)`3s0Jt&l%%@PKBntq!Pe'U^N!<?47.51;@JLk41,1"CZA:>ga.bs5FlR60>FSS#%W0"@%+DOLm7.>Zfb-13n_b;_bPi`p8ZL@YlfZlJJ+4.AI%o?,6q('$4c,^W'*/ktoc@t/G]LDjE9=M1a3QU=lR7JapVrciiXkRW2M(Vkf8Idk\eODB1;/Qif0@R(%LjXL2=G?HOYOb7#``Zm$B%5a2D?bR<kG#(K6>^/=0d;9%%@i];^%50KJgg9VaC+r=AXd@@Iu$Naffn`57W)[6\0rrV[b*4F<6ZN-HB.-JUgAYg8$+rR3\a:s<S%(;t!NH<[TH!3M0,80R,nZf.'M9mP4eG-*B0J>`sj"P(ujA->/[aFK/i-oqS@6Dt"J8P"+A.B#t;<q6>\,W:q?>(i^U&B4pi?DJ<J%+TObE('*4C+V.Sodt$A",643FL"n'3><jr$AjU@h.K?_N,_.%eo:_+p,89!&C"K<tR\l*T!6EI$)&BWF.T`3OEg\.YRp6[6T##N>%g*LVL*.!g0Q9mV@qdm!CfBGg';Q<50E;ara%qPS]*G?cb&+T`LNuk$D%h7.HcOuJeT%B3_im2s0k+j8%'N"j*',Vnd-I$QsPJ)hj%D0)q96&03G[;`#_Vt>c5pN3i"N/>_:aSNCn'WOR'1-LCX&/nl5iIP0D*%%JJcs-Si%&Z2mF^-um+^DG_l"J\&eb##:HF'q_B7UI,%4_e*Fd%Do3mhC3ZJnu(kPCW?sX=:FH6Pio*7[iHsV>uu0NXd9(f`N.GiZVpQqGoY7Yc]oR\bVO5U&@jPlBUfo>nR"7r<Ng/1bF5F%0C$/8Co8XeIZVL2,i9?59L!G->9->!d-(K7)#3&]aNk?@HUfKi#?os+!n\M*G7EOOQa/\&:3q9lBTbEe<g5peLN*O.1S`#Hgin$B%6Lp*@@M#qb63o=$KdKDPFOj)gYF3,LeX>Y>p\bJh/B[c[#0bC?^^1L88dr:W]\U<*D4GV)"C;8>-3UT/:8kNopP:BC-J=;m\Nue4%d/atN!qKcbWaGek!:e2_.,9fUl:"T($?Jo<!\S!moX#_Y<7ZbkO%isM#XC6o]$rl"'MD_<3e^([4KMGU>0ET&QT@D#1\+@m'lLFK%l'FL0hHMu37\Qjb<$WmKIhsc;"]0Fo7$6egf5adI_D*m$3:J+<bfAL48Ac+fQhq(o?(Cfg$)i]Mq<IL=qS(HNM(bPD_@l3k^5Q=&%#h*fb@?h%rkKj#I(P'Rjj*h>PiqBiN)Q]Cc')!@K3$],t4_^qY#gYseY[0/[aSVE=,I=ii5Nq+s2h"Oi89K=H`scCp\p3Tc3@ON`%Gis?\^kDkMG0Fl31qOYM3\1Oj1-8kQ\3f^:,340[U/B)!9a^*8h&Nf5)WaSh8"Xkmp^=i$HNo_-b#JKjEou:S.#M>!9=^R9NtHf!%.Uu2P49t8=ZVDgD-r`TOW4ct]&?b8kPphP=P*+C:iHh<HeY1kfi;ll-&W%hu#N:j:jrdd(;UnMP.GOmRj*!^c`70Z`I9oM[a!j"1%[kc`\rP$(J6U?1,6!";Ik'-&th89>njjk5I=eJ/$k6:;^#\&Bu%k#;X*j+L0irP7C$3Mn%:\=C(i&29/fL<YDJ2cl%44UUEM_1#@%@D&s3#I,sDYFlS<K:[$#-@8nra'$Og)T36;93hh5T/[&+:VN*(VkV9!a8t:`&B=n,5cfJ@oSVK/-&J;t?r@O<k#\<FGESQlVSB:h%YCMGkoogW1^/BN?a.rS2boSI5aH+TI^?-"g4$4WlQ4!F8/V$>X/UKV,9V<MZ`WJ6gm[<UAEb4Lc!TL=9TL_\@]mBh+fK3do@')CR%01UHch;@+HDLUh)YAsrlEl_$i3TMPu%f$2<=c^<gVT\P4"/::j"2&6j!t5h5%op.gcQ)Ms/DP7(Qoa<kn)]X<,kIe"gh>c`P2cAX%it).j*:il\RX9*.H$"n;S%7SnF-#qbaP61FOIm5%'h8ok?*)q+qD'F_/7*Q1k`_+X6WclKA[";1nH9t%RQ#Zsb8W[>jc*W.WR#lJ%4Fs<5[N;[`WmgP?"?/@a?FmHCfLPPl2s[qX\7`eq;mp^3;(J-MW//R6G=S@-"2oGY,:%`Gq;o%.e/(?#l&5<5C*C5n_]]b;eAB?+%:*STD(!i/A^+FKH@p(K^d<tI*TJM#ub8\30e/duYqW#,clL*Htbje+EKmMLa4qV8iId7VdL]p/m+.pEiX,"n>DnhVthGMYIrmYkt%7@#TuDaBXoo>Q',^3B]6G3=ehe.+"F<!rp>:7Rk.*Y@qXe/=;Jl0?$Z1EJg9]e:GJ;!YFY`KLrlR8`tAafSq\2IF,$O4KgWIWCYp%arN_=h6Aq,G4'T?_2MRY@3J0ukljJcR!uU+!AU0<^%(mBp]Z#(r4I:HhB0NLn%WR'0^.lK'b>u.`Wr1*EHPE603A&q;)^Q:Md0($%ap!jL(!kitE_=^oO/:(5F`YMt@(G8EA8ZRt_Q*/7L_<h'>k."e2l?E1=+Aa:n%VGAnXbD_Fooapo"a+MC3>'$[`]Zm!-VN:`S5Vj%Y<%Gr%e0in%B&g5edp(01&%+a*^E&6NHsLakWNeFMP%4nY':Hsf>kkj-1f$ai_e0Tq'F3!5Kb%6/"S'DX"5m7iW0`u"hn73JA?-J%'@5+e)GN^tquiO+i+OIQc?LHIiN3d9E[Rr6iW0/bd$c>RQ,us\c4eMc%6E(43luZB!7GZ-(I*K4=^Nuq&7:M(b(GJ4e3.)U8oigO%\`3^$'p@&ecQ7/DWN2TOemlc+^qOML77qTh4!"BBn&u_h^R$b5;:$-*hoOM.?Td)->Ed;Jchd-"7KLeZr_?r%Vl-"iWtlO/U"$A:%o];qd*iSO[c?NCH-a-B[qui<Ar]gRp07Y48-3n3uPN>!j!l<l$cM6'7F2kE?W4UftgmmnfTIcHdrWr/-JE9o-1^h)Cnc1nj5EmH>%d_,*GF:Xsdj$6o<511X0k)C`bCS'C-!-qd8Q;/1HRC_G?ZAQB.nLRT6glH*3]<SLK:cM-APG3*[N<d8I:!4IdBLe):H/j0i".W`\%NM"#W`_XZ<mIk/l4&oU_[32uJ-)csOGZ81XQrNk?mItY?HO:gQ&K-%o++[D&o>KZHX>jX[GeQ+p;k5gi!.)PoH/]-=>g*ilJ4UR>%M$LiORH981_uqmfZ3+JI`ratPD4O4-&<Js4!L2%0FMps_3T:j73oU1EpjtNc$"W4RkBk]99)g^Ec_Vb%GRdY$c2$<)FnLd`W?-W+%Q.p.%QqQ8a/:]?7%tmF`eNU\9CPL=H5Gr":iR`a](S1WeJ(+j%+LL4Bn2C8]&3*ALN7CgX(QXX5n(E&CJjT*6?6>gl8oTr<mh3g3%Cjl/+!)Q(T^U<pRo)/QG-!'3AK@4C]]:m&4MN.H!-F!Dk'3]jsopGTbScIoLJfYh&?$Cb0LCeL4n6f&8a,?hjOmY.qH'dCu:e$S1%eaB<XgB2I0dHZ`Y=0MO'$l31k5g1*%`uP3I@J/C.n)^u6A9mS)1NNc%;$ZU0Ic=E&e3isUPU)aalL@dK@@VM>Ra#D(STYZ$LKn;;%CIo!aG'D/^ZBUT@N?j8WXOe^*"&a'lUel!bC1.20/JCHK?X,4qe^oSKF7K#5IfPhkm,Ra>)@,1arH@t?XRVbOVG1Iom1t]XjOhU-%lZ*&BbS@,jm^QHJOLXt\)'cV:@l1O,FiFt4^ZjbJB7Bl04)>Yg?#]2(.*6nd9D9-pO"Da81D">c0>AMN;)7CE_f&#KS(eFbZL$Dk%L!h,uXq'7tKq:DJgNc?GFqZX'*;bQ($p;m8fq%"1+3T;]r,uVEFmpFEgWeX!D`=Aj"10j_dG/mMKO-`-bTY$U"n(CS"L6E-Vqi>)%F4tni::gg;4J(['fkHdTbro.k[)4%ZX24AR4TdG08:5UUab.caFq[tA]*Xo&CBEhb&9N-j;tC+9Qfe/'+U/aO7uj_07LBY3k?J;8%6M*I4Ft@!VR\-W\'V2.tA"?KTaoSS8k'gbZf>f@[nT_.M2a1skPk4,mVm)_@r<c+:P!k&G2<N$u,WGI2<QspN*%5A)&K)p@C,gM'%R5'N$S5Dg]ek:c>5kDgma),+q](qqXCeLft/2aUZ=R!,Igtl[5*tq3`b.g"f7.*]kQNLcoB=]XeTJT?/o`3HP4eV&F$ds-"^1ds*%(UbN^ZL0n`[^,%SVjUngq6KuU2.-()Q[b'>@0E^e="n!i6G5h%\)ke6=@Y1[O1DLi/1*0;R4jJ?Q,JVAUHrn6crRmI!bT15JnCJ9%)Ug&Wc'M^tVR9m]\(k$D.i&>-VdK8*%G)1pP-*fg%S/4c0F0r$>pA\<B"k@%[#9mK7?mZ]P,r0<QX,.(bBcGFANdu,B*"GS]A>C9%AQO@n^9!)H?e.S$\#aN"A6=jfc9>SNCSU]qg8b=O)7'_!PZ\MNB,8>UbXknsZO@aJD.^F9qL:a-*p7]j3O90l.[MB<GToT]XPXY2%Z>sOr7?G0&Af71Gp6dc'Ir!W:LD[@MpZ1bJA/iZL0XG;ec(]-YPQOYD51arZAZ!^uLfq#sV&k*RN-Qt?1lG/rC$!RAeY"q/*mgG1%"\I!UK06&glqEj:mQ`;M-d<jV?Zu$7RRKn7j%:n;Q8/>$Y,'_Q,GC[t!GhMf]lXuI-tZW,o[6np>skr1_7[k6/8KD01MbQ/baPZ8%FO<i>96S!_VTh;Nq=i!pa(A`-bk`qZB%F%NR'c(,_u71C2`"-IN.`5m:"A54Q8H4(R5DMu9q"L$#g-EZYqWXu#B6C)4:)J6:6Yl`%<B1gKP@bUV8[I%ZP'O+aD4BX]cVFV\8kSNX]B'AUC\@aAY1rtXgY)5AN[/1\O4=3gCjHCIS[R!R!Wm'],Zqj.eC7_48EWaCm[4+T%4V_m']^]T6h-&96Fe@jn,Fs"Sdi%[d$A(-^k"8upc.Yr,U-Vqg-@;ga49B->.R5n\K!8hpKf*Y\^::M2B!%fQbGB*CAoU8o<]ApS%/m!`79M`^rl$7PmS.8`W\3<<KKc]D$V*B@Fjr-<GBZuLqlVa!%47F`jUHk3S=*338O+l=+7h&mm4ToXI!+f"=_JGnWAd9(mEe>.E%/H!hu0gh>9/%N7GN@)jZ/@4^Shs!??ceG6LCR=7e#.LPG9bg[d_X'ZaR'!]J0Pf:N6IhkcCKJ)*hZb:"40Th!Abe9-=d$"#d5tQ"%T/@;5NX=aBCg!EPS$qjGkd4piL%V:PbEfR5mcAXselks&M4;*CaE5kYAJKnO$NpPn'N""<Ru>2r<(COFMm7RtO%-Ro_IJg)$W*0i%'Y:@pDGtiIa1n3MQ,X`>AQ!ZQPAh!b%`DGlLgK(t,&$@2A6D]s*qL]b9U;7KG$.iXA6J,#I=4sNAtmrd+!5.[b+]+P[>PH4CR+T-%KJD>1;T]GOemuUGpcadNX5YPN(8<?a.#h4-OCdg^XW\"*I;!OKb\WHJ/D_F^iEEJ?$LC59AQc&>T=ZAXBk8CGe-]Y-YY`EHed7'T%Sg(7Yp0(Zb7$b601$3)1D>]B\Z7J;`Z4euredd'YXY`^n=81&q?'_nAF;m*]9ERIg96cjY%TgDqOC\m;5>#&oQ*n-,MY,1#D#"N-%"BcL'bKsQIe'?fKS%,fWA`)NCjsI2^/gE`K`MJ;*)li8?UlZb]g5rHp(u+=W%9:t#3&jZTAI"AK_OfSrq=Zg/jR;aS0/f9sopiH6%5Yuk1a4!d[AaR:r0)'$e2V7Of<*9VN%.TZSXAh\iep]@.jhbl5ZIY87o:1#tWZeAL^P:4H5j[RrV>I-6]"M0!DagY2_a9Vs@j9%D%^jc&::h:Ap.U._WWP)""0tr?.Pq<]MXFW1'&i4+tSK-prS$E,HoBh5qdEum!ppBhL0/!?#=mrps"gmXT:`1G!Ngr3T79Kd;asquk%X%.^hb7i9eXjYR[eIk5p`AO2Bi,sf&4&X!L:Y#_dc;5'WP=7ibLaUC:KI/4!LF"GR/h>ZAFTr:RH'BS4maNF)/ai&7S?c/NmM@"J%*Bm,\A.?(ej-D7q(.hR+%S)g1'\PN633mZB3jMa$3jMpOkcVFi97^>j33r7;KPl6!Z;86AGQ!!Z9o7%=FCZ,?,AURBb_D7CCcuPW%aVLNp>DSHD,"T!D0R$jGXnL!,rBhQ-X0B$hs,+r9Z;&m>';-ML.!4+QJJ7UOb7.T<"<kk/hr2T_JKA##FZjpEg\'2K$:Rl^TuZFe%_.'g1DV\T,Gcp_oTH7=>)"h"3iT1]Q<ptS]R"0LaU+BdQTUuPPfVaMh]lA4BFe(Gb>04#okN#3F+$SGnQ5s1[$>#nB>BuH4?[8Ns%A&jBESX\]5,S*4<-R*Rm2NP\k5$lV'q&8--C$2^Mag$H_@k5N"qol[lVK/b$F-t:,gXp]rK\ql$'i]Sd$9>PT'&m\tM/mEt-F[D\%6]QT+SD3WM^2N)L?Kg#/n)-?\>Ic4S,4r(BnJZ5=AZ)%H7\L/k/iX("_luQ?`kT@,_Sn41rJdtWH)Xm:YI<T*gcrHsm)Q;IP@@7n%3fbQrmF0t50c066T<S^]?.JV98MKP;D7]JJ!/fpd0A5LY/SpZncL1:C/=DH5AK9)L_--k_<>a=NA%<3S@uGfYNo<jf`d>oMJs!4d%!bn.UM%'oaCWq<ni+>9n[Ob.]l1$'Ejqo%'F8H5)&QsME['@j;(Pn4Iqn>6#)62q[dd:7TK10Pa[$X2!-3T[MLG,2@`2da7Y^h6+%/'LOigN"V'."jSEG3iLX]6?Cl<T#A]0Zp-Nr\]+u(,3"b>p>"qD&&;["lX%ciJ.5)2<2l"aDjoup:;Ldb;Pu,oi7dSNi^KZC,Bl&%h_cJBBEE0dcTZ3pqrN#;AsqI<r64Q4LKD_=Ti(]rc(DlN#_Dqs[[?$s8pB[uk\c_'fKY-q9HraD_*/-Dp8`]STjSd@g#h-[o7n&8%I0IZ2`gHn1T$V"jL(Rnj7Gj`PnaN;tiRLamp^"1%.'RXW@4,uFm$hI"'0+^-7dB^&[_8__H)9)/kmghOn;[teL=mepD@q/M(??cn%))6.=0C+$>(gk'\Du>G>/ag@er%c.FO'Ugb9MhnmkJ^;G$F2/(KPVeF"5Z',^5T:JX0m3?Wrp,r<*N`$b6G_b32gucHi1=I1k@h<%eBWLBR"3_"?$1\PF.L)7?<U$qjDY-Ul,hfg-JDQra#^.u_emoCg@a/h!7YrkiEHHt2-c7_pB71<kIF"jc^9H'id^,GlL45Z+0PBe%IG*t`L_cS=-_deViX&I/SkQr]<,1B[aZqF_!OQeLTnO9i/Na\Bk^7%&M0S!IGZ*;cWko.qb7$'%l,pb.ie_p=R<h1Q4B#&(qTd<K%o"m3QKNgk6-b]$GRpL=_$Ir.O09LV?77,nWX:krtR<9][G\3M&(S7$27%'O\!uFK]>Y,V`"8`VM^&%68$b."UItnhH.(jL&rq>K2%k_3)Xk_1Mo03f)Ua*$M63+^BlGiAH-VS=ZJ@>5R*2-du[?[$DEPT-2C-a^H@k<o?6:;dUfX:q=%4&OpMPB=\um=]A%k*/[P=&<<E%,1$4E]T\Sn1[V"1nB<qU/W`g"lL3*;M:)V&S.ki73@?#+8('u?iUo%GLUD_Q_\Kusc_M5siL+dcEd6`:L`E!H-^;M)kCdmNgkM>s%,b9<I3BT)J`2(\c'ADE5;F3IX!:=_o80<elPLRG74K4*#Sb`4E-[JW]dLI&n3EQ5=9=g!NOZHE9C7@aATc@BhEd4:>__^DM`:$5W%&NMsP:5CZrKQ;;<b2J%@%aUXYQ8`k[jI.je7'HK^'Q<qt"_!0^BT3,gW'/elR<)8LG\3#`%PJB:p]Qmug*c7Va>fk5Sf&n"LM+a9%msV('.$u'9gXG3RI8Wg.%?H_eRc0ZT68L`%:.,N:P`lg!1ZO/:G@mA$(s^D-[h4.b-jVQ?:l+(uEC)BB1JU=Hc\rNpiL(*@krWr]%6k%BM'&A;X,G,='LRga?Y;:kLSnTPrL1f3H`UHDJTbf>2f+fl7h6=aPm3J7kbW71'4HiNN$b(E0$I>4UZ,/<[KN<>X4AlR5$kq%*%'nmEp8LH?c1[0Q:Fs`cYR2njH\d]8lkYr@k(9T'mn4YlOGr"W;V2<,#3Hlg@;"2c+P6nVi+]<P3OA),TfE7olV!p\oKkJuYF5c>9%B@[B[nB<qe':r>Sie3q5TDLD[Bd].^X6M*e(SVVHW(f2sV!uSh&LfiK:+1g/ed7'!bW6=b4L7dtRo[+;o9Tse%Oo%e8E#tYP0/"2%S<O_Z.4;ET^CX<NT7BSn6n*h&`X.pjbW$1`4>T`G+_Se$*TYF(&Lfgu:+1g/2@65L!bWftP<]J9KG44=O`2L:GUAsE-:g+i&tTCW%<5LHIKM$LO=\oFNF;&Z21Z*k3GN>5eJ$546hj$6sgCuo'>![MhBjAk?iVgl7'2cV&gP!$\ZV@BOB=<XFiL+PG[9o2LC<BKh;8Sr3%[r2aWM\<0@bg[&%dg=?6AieoD2k=nViIhSJR$oXOKW.BHcS2aTi?"l!I3PE_!`0/(P_*..O<9PnDGph%.!5=Dnn71E6=>Gt6,No!%JD9!^(:r%B$"8H:K".@kl86+/9O0Q$7]FQ8cQG+>@GU*4"b[=kW/BaMkuWNjpsV%kI:C^cJnK1n.-&X<_$a'U/efdZ*Q;=Q3`4Vh%&RFN'3J,'l&Caj=63cU-ZD`hNF*kX<mgu0.(L.P=-g[G$kFKG!EPXHH>h_XPRP)+%Wq&F6K%EjDj0R$1l_UgB\IH_DQmsn!e*Zrd%h]J`hVW$B=W\?;-`d(pD[H3l?;1?"j38;G,28F78'rH]mICUDQ0K$Xo)oeiX4GPQLe:q-kLRcF0G2#$.d2:Y^[.s40)6#NE]^UkZ%'3(c2\%/73YXHYC<TBa#4![c7q&I7QKW5K'9Dcq02%&OFZ\VSmmqlFQ&ZJ5gD8)(W%[<V1e[8+>U%(IdV`B=-*u_(9Jp$!-;XKJ)%Gq`.`eT=EV)T6sb&V`b$>S1#_^Y@Bj:gLIEJSG>o<,5K(TUMe\e[8W"L0k#;OGY+^+g)lKC6X34)5tP$&-#%S5W*FV4#T*:MbIU]%Z$(.2Hb0*o5W.E0qg'tn9i-CUh$/FF"3=]f5deAcgQ4ZXDX;M;N)U`u[L-!oA\RR-jDL;#fR)!XW5`CQ@Tiu9#qAcRgE6dhdki'A%"GXN@Ke2BQU\>$nlYd\mlM5)]o/RbI?XnY#.gVe4cT?Cs'S1!&#ZMJmSm/Z_#HHbE>KUFZW\LP>h]sWKRLFEf3PUi1h:2di&EVda%W$\N(DsaC:ZE+c4^.G-3$8W:cFu'D`UY*&Y!d'AO:lPjl1uaHn@ig<PF$nrkS+edY;Vj[2'3b:\589b[lad2RSnn:!GOs_&PkL_u%\A,5L,;nCEUFs<5/c0N%>:h=PSF1T^qZSB.ElIg1m5krpNF@T4[Z)(!s1O*t@NU6sO62:PjZ"t'<s[LWk9oHIHmiq`=0U#=p%<Q=%E"8]kmc6M,LX]CegCN*ai5aK-I=e$e+j:4TeTpeDTF?9#Z7'KqCp&b5Ipu8/>^1hU@f(QTrgQ`)QpP%#mXq%on;lY06q7GF-\f5t%0mcA@r<RPMn+@Yl:$q2H4?nC8HHb",ra!8K2qF&e\+]dJ7KLfBcrBF@'A7TQUJ\=uUM"Fi>m8D5eU/ZQFPs0Vc,hjk?bk4H1#3Y8%Yka0Ir%P%p6Qdb_H23OL/VOQ*3OACcP]S4r6r:&h!HtE\F.LE:;14h$KC&Rup-DEOl^"CqjM(/@rl)g1,miO$qf^Ag2_aUQZ;g]N%P`t?0*)0h2q`5DBH)75T9fL$\">-%%'d!2a!N+m>]&"-"W\(ia%Wa"R1"NmC^S>FC77sFY1):s<Qj?#\]`&%[;j-B>8QOAiD[,lq%lqe##GG+A*-heisn@Bd>LKB<69c"FY+uo?s!LQDNDb;du.r_m,q.3s:TmcdLT6MA,_W!IoPjW%TE\>RAf&rM8m,;-nA$#:0?j+sb%;YQ``/api%?H)iFCua</To.HiS2U*,A8Am?X]\\3*ZQr)&M0`0qD?l&Lp_[`Iq$7\ZfKsNZh#>^Mau!GLeoEkjMI,/U8^;(^rtBD%h7_n5p7&@`e;<h"T@<W&LMq0^>`B32@eL>u#N:&3NsR<0F+)gSm*j.^ZIsoNMPH/E'OS-$Z<?N&9CL;R5I^-k(TmZU?RLZ)5g[62%'0W0_0S-*JmJXpUYIj(Zmh[5CYF]^s#Em!kSJO6aYgDiiI`6X"^>EgL3u_m(XHs<8PMT8U,m:%WZJY,uhWFcQHL,-ds(r]a=ec,n%"EY'E*bU`/fX?n.gZ@%B^8MXrr^PI=M;S)N`7,C,'aY5?^chON@K$9l?$#TVl'eQ^EOq3l$MIqH@uYW7>?#67hW?sh+VldO\K;]P%T$\FdU8%-GD$4?4,ebAu[:q-b*X/i=;iG#l'Q7=7iH5r8#C,"9\NK;f@]MPk^<(P(nN[c(62(Rr?Pf(!0>:>tl8B_c1P-bX&jKDR%EO+,K[>BmE@g8hY/-t#/&cP0[Lc5a#AZb&TY$Qgf[Q%SM/:oTE_f2e1Q3OY8K3.,i3>Zk"[i+d]Vf"qD[!3`1M>+7tW:i2qMpjg)%F8')oheud1^LRWFGd1MY0`6g;Jru@pmp!G>2Ogtkf^:E2`Ufbm,j`o8ZT>:b?ZQt:3_innm)e\oSR(usLd:]ESKeE/,(E%`@>Z_(%.ZIMT$_b=]U&G6&ig8H@5&]LFJ2ht.1NiIZQ\VU2(2Y4DqbGDnJ0\Go8)*mQeUGK[eRs4S@rT1ln]W0?KC`;[dgCcM-QqUpGq[Q%%!hm./M;ttQ1)o,+0g>Bn^fQ%[J+fkilohpt&&c`LM=$TiNO*JKXB:LTU_WbF6N#QW&pKLCX[hsqCq/k*o-MXHZ?(^>_jDmg/ctF!%c0O#E+bjV$E#$D!rlO%(?I;f?2K"J_`-#;qjG\f"@r,<)-+[(h(`bEsa*?BX[pC%Hd!*$GGUn&,Ic]#eG/bcXn0<`a!\SD%gV1T5%i.tm^/(P=cG\a*YU@S5I*XfVj=Q]>:2?1,a_sRUL0Pp+?q$I<F(bX%Jlchsb_N*;^Yj]s\PM%.@)qkX_;n)@&B^G%06B'HNGB'>>%ChJk%]@Ot<=%l03ZHm<SUk`cArY[cY08LFeWu'gh>#+sl=i1`]s5^ieI)O0oMgs@b_>hHIP&49<j[Y2r!p"IcKh!duapIc%1JDH>%f=*u+__`$p.D[LWLH&%(Q%3p.];tGai"pu(:F<n[pJab.-bUTo2@EL.[C,gH,9V5j.IfkZM>q1R>]Uk.n,9Z^Vs_[)i=u[N=WY"'%j_M(NQ>D5Nkp5CV^r0&9Cl3bDkHU0n>?Hp8h'&-VFe9B=VU'+`c^EaYmT4X,K_<-F5'5#W^(pNmn_8HGO5=@Ap,94E!Gp!IlccfI%QI?L5%,F,\p\<t]?X((M2A)/ApPY)QY*j\YSW@fq/KZP4#Fq0L4!*ejo.u3S0a=Gp]O&7.\K`X''tJg2XRkft5$?jB5"6(LngOdi%Urrj\jCJ^5n\Z`+"4Zt2ff]]A5VSoU`S,BrQ\jPU*:"h2rSuHinV^1AJFl,&2=6ec-r"0T\/XXle=LJkG]Y)W_ph4K=kO_+@].i>%kDP,`]f@)-gp5k:\`Xh(pkfj-)n9EZ6iC-Cmba'h&Xt;!5NA=<1V7,h5!Uri(Bfd[?%D\Zq\,(G=:Wrgl![-DA7V`&\TOPpp>a-J%?<lt=F#n]IaSJ#%d'(S-s/bh;bMne+H08c66U2:O4pK)C/":1h=#qGn]C<S5>Ms1;7A,Z]R44i-$4pKp/#q%,@?FW`\*Nk,DD*X9%IAn7^AF#ps,@pFHg$0Yr54[pt82"-4lQ_(eBthR?LAhQE8sV!\lD+$ndRQ6s/b)gr:@InLV8$`tQ:qCN=I<ECl0,iUB_*BE1*\><%5O^BY,i7Y"<pqFUn^#rGL*1KIXfY$0.)NF4,Re(Q1KuuoN.(TNB4d1mg5;Tr;:kf]((ecf,1O:HqYoT_bliZ],e"T9^mgoK%!N\L%)qLoE=C8o"U$k2=m@tj2`I*S0Pl\_a(rFCmJ*Jo0Ss"=5+D@(^lOrfab)SeB&3CI<_%4LK%u[7mY:(X]ifcE3T$`C&,WCaKbX7mC%7nebN/\N-No+A[*Q9Em<ojGd*"fQ%8"b>?cHh#+FgcK&Tk1tis1YZ^acA<P9m'KQ-)l4hM68%T<c!-<H-N$UAkEGjP@UJF>:CpZ.%\IahWA/RpU<VC,W&ful4kI\F+LGsC3&aM:t2L\)RZ'-mP&)s3f,_lnb8lX\Bm;$CD_'@]h0:0=S"@gK#dagh[-,+_Z2'8qH#mFGV%\,"\><3BW$1Y^4HJaIsI__tC)(l"Q\MZ].T677t-"#@m%o&'SD";2K6OtqFYa:9qs$Ui5ffKA5fkgW-_DhFQ0DUqc4hS>!8^)Y%4%I<\/ICr"))Wi9YmSfbal-QAEXMdc3L2B\I2SIltj(f$P+.d3b=-(%(siF!mKKiL6sk?`Ym=r7.-DTi!bEbX]l*9B"Yj4*sHk(gR5%.G3h-nC]RZk_+0lR6\XCA.mH?A(2DEZu1U0>CM\H'f)k-`7QsnllOgbB_t=M[S<Q!P>&.AMHH8Z`"8e-'5Y692VabC"0%;6m?g.`%,`6bp+6R(dig*6.X@5mbhO7sc(ZQYd-2Y*A+'JmLH>A].X[uQYDSE@>QP2@`A&c?$#0n4Yg2h,m,8(UJecaB)'54tG?k^AhJl=6@%r>a:g8Z&to+\m%!S[`l\0c.>"f9V\0CA9h\[hZ.>^3";KVY_"mF(RUjX]JtD5'%26HsI3D*0<b;!?#qgKLF)d0#b/kR<)bPZT50+%V+5+Nr!>]+334o\R;B.b(NU)QaV`3(.0k)s.THN.:Lfu_ON4U4%ZY%i$)S'ZZf1)^>a9;Zfa5(mI3IVNNCLPVj*oBs@E*l*S]i_]%(;g9obW,+C\rVo-B"ho"FDgs4ST+WKF,/)\d9a=mH]/AX*sATe<#%.ui+d1)'+U[NG=7lEi;hrU&8jnR8L.so>7!Th-IR(7>R%ON%L%DC!"'D]IP_t+r;dk`PM%N9<J51OP.>ri],7"B,iIF<O#Ni.Oi:C_2qt#:1!Q'Kl/!Qs!7_SoaD9iQ$^&^hiN`56Ro@L-;G.frB%CEJgZ!!0R2UXBTB,i)k^$L%aSd$Xu=]0!s/:P$<'"0fK-Q#6T-7ee)(Br^fgE+$m+nRK96"FHUtP5,=MX1)F2"sf@M0PuLL2Egek%KL%98a/1->+A9[q"."d`Hmo*F%DWb$2OM8lMg^Xtau.O_$B,CIPFP<`+M3r\.n$#f<>fYqX"u!?a>EtPZ@dQWY,?VS+EIuW.Un?A%"5H"g$V%9"Sr5M6EcV]j6,SJ^5F%eRin6_'`(CWcK&h@Qr4ZFR&GBXk9Jit`hg;"t7EA%Md9t\Lht_88"Ynb=U!)'@bX;Omfe(X3%O_@!(M$DF080NL44J#+,IUjKKa\2dN?or[G)ScO%o^,1,J,t)kX&9BlcD*,G!'YV1??tEql/)-5hI><>R<\LH@[M=q\H^E?&^ng,%!tr^5R'o>a!VC<+An8%F80:3?%<0%djg]F,8mkKq38IttH7l0$?CTuT<.gU/YuZ*3..S/$X[m8f`efYu#8;j6pR#^2]>mkQhC2#R%i4WU&!D#G%jViY##N)["8`["9C5L)CXoY,.T==(\"on"p,Ld;Um8mlT#Gia7#k`PV1-.:?e^BSNoH7qVNtZ7d=6-87>K%_f(h#o^%mB!N:M1cnk.dSQF7RZYZ=aa$[M=6<#`&QZg$fc<7\JlA_K^*\ra%Vj`-O_d8aO(frqICqn39G5bqjc?Q>MEfAbegKd,J\J]$9ODA%fTAkENj<:#'^OZ[;$)S8:*kl*j(m4o]p6n[ceN`%3gr["k?"C<A;hn)?]=>Q+ZAC!q%7-q5t/OPj@GU1\;_"Z?P&&Ub#T*PPTu=3%q8ghl3=$#kG\OW'QhrpTN\'5BR<e3oK_Xo^d*H)>O@2EqZBb1;E1D&4-6P7_dI:."j=mL$1NKcWAS<M*[pl=lY6FcMD7:>5q]3P6%Qonio=.6@\Roi"9Y?C3B+i\FT9E?bS8$HPD'm=]RGO6,g[,::XhGTRif]RVk(k\uqj+JWC8B-0($>U$J:#tXYq$E9W[2F*T$g]KN%6leiEl:CV/1NZ_El8Z&)3g+&B&KW[t@gIH_O:"%Sjr&92#_J'^[hhiU]7Z,-HV<6Ak\)P$7_U.`pam6k>6Gs44:W;r8!43?&kS0[%G#Yd?))P]*QSH:T<6ELB?Qtqp6_1@(,hcO4S'@sP<6PqDXkSRmpAKL;a:N*N/(j%/0MUh+nfd^1fQ-NCkBlategBi$Kt<pF>)M%m%_1Z2SY6`/4hn2!q[kWGNMj)lXbh$=0(cgHD%C:FE1[b/9icoBFU-.$Tmn4K5AM+og#c34'e#0CH\1E<mo#*jmmP^HapEsKYUZ0I[%KXX&U-7&qM[k*4/DOumBZBRtg?X]W[:FsHDX9Q8V=]Hb"\(*^&<*H_u:QM22@bT2a'?=.:?bOUfUmPe93?K.2]=R>QW@]V,Dcr3\%b=1tseEP+\Y%![,X=VWX@VIHi,,PUEWf-$1df]BJB&A?hD/*`!QgO]P/B==DEg8`2AL63u.nOfmlDi(iQj'n9jf7=i6'S1V>V+]B%*[oS#3a8T,<N8r`Q+=K-`78GKK$);\/Bm1&Wk3()kfGM)4^X?-RdRHm]#tb>]8RsT=KX_:jL0`I<UOmmMXkd&4a.Rto!4F?Q`I,7%0=*^g?*5)AH'q(eAS&"tkCI;"o42;`ZV4g](JB*XM;-4T!R[6Z?V4\.qbl9lei4jloge;j_U:.#/YRmBHQr<,'rh,m.QI/:&kA9<%8B"'!.fEr0BBmZ?jl%jC8:ap3)pCE>$I!Xu&t#^r,qs,^?!p^m!jb;sOglhAZe^shkoV*'UW#5nC.9M][42=F&rXPaS)Z+AZNi.U%1Pc+=&.6Xu6=@6s@uU["bU=-j""SrUp4KG=J[pf*!qSfH?ksLZF(ZUZ"_JtaSr")IVu8qip+ilF4F>SMIoC`I6"%\md7L;1qQZm3%]kIB%pfbN3:*MB=[;X>50]V`.b]ER&#.>PQpsNNX2dbA7n<Z4Kiu__\)d1Kh_DqI)p2XoC!j:`!:gR0*G8VEm4e,8s*"_Mnh0ofW%fbeg(]$#7C.i*UF.G4]a9ZpZF6LN()&ID49^s1tt_-H\t\I8jc)0H-p^;T,nRJ+>H+cEYS_HRdBDg>g]Q>rQD'NQ'm7LiMKkq.O)%bFr-GOm8LoZB9KTk#,uNbP2r[@4?Q;(T)fWH\+:mOU=`u=\2`=5WtE6^\BSWC(!>[=sm+M(1k"`CtEd0,8ML_d<>Y#/IO(EfePkE%?DXqC&keigR<lSRU]fKiIOb0Ga:V3QOV)AlVmLhaa*M%_<[9:L:P>o[,+"V_i+nkNZ'^dqBWT1do;liB9U\0L/hPiTAkegYUub';%3i-C\r4oL#V<+[76Wt6pBmF0jp(dsKfkrkeNE']'7B1')bOu-I>sGJ%W4t2^>.3K1I&Z=1n`"0^8BP-hQJsYtE\;Kt/_t&m8"8YH%Z#r8P[L0XWc$uY!/0l8sV!!uKN9(U?BWjq_b&n#+g@[WSG\#9+2Lo%VOd6sK'm#5aV<+_aPa3[0d]tWpQE<iJ.Z$3lI2"9"&AL%M%S'tD$Ch.aUO]@Vk4&e+KH+>/JG^er>K0==BXk?2KLcERcCQC?k4]uh#P'dp'Y9n_(^-Zq:!&0]di52cDprYSJ(5o)GCi5m%gP>"8%5StcA>+T(jW@Ob>:2)k5AUcc]X_s$G8CX+fWQhmY?2=;mrjK)P,8*sK=#T1OJ*P0!>XKIU\pus,6m>:ef+?LqrWX9L_[(js%'mi-%L!Z)NTJ)S6>i,tO.slJV/`](Mm1i/pft1^uQsl6-&-a7U<d)p(U*(s^,\6"n5us9rKrci'UTCPn$s-RDP[hJ8eqE,\6D>sae*E0E%WQH5QH"g?=qA)=XR&[HYCCa(UN)Cgu.Sg=*0b/YMgJ#8D=K8YAli(0?6F.30[F&MHGnOEql:lZQW%*Gm=DQ9S'I+;hY^)@;):-0m%.a*r@<L35R<L.Z&<M#RR8l/S;,jKr\ZJEM&UZA7$5Q<@np4L+X>,/)[Yq<-?MLKQFb5ONs&":WE-n6%-VlXRTLFQ9SE/X8&eF6./%;tcYA`'B@Z`S=DIZYKCQ#u=\@SRf:/1IIY%T!CR$c-PSiXe`q[*(8a7bJD(pINUB:)N.&1G@KM[:[E2tl\J-=dPdBrNLk/JL")>a%pS3T'>cg[@><ka%MR&c&L:q&<Pb4SVpLXg.Vp;QJUMP)3/R,NPC[TSI(.)_8=NJI(V!sH2FEEc;dH#L9[]roA(F]knUeXrA*9B4X%(&RO\DD*X;NVNWhaq5I=7p/qRb4Sc%p+\a(9dpiJg$6ibZF,soIN9^`$^bfuYgAX#5bT=Pfr-?$O`Hp@F_JqDf62L\]l2+2YYR#I%6%DUtEOP;YC63^Z+2?Q3"F^43[ZdC&RE1Q/P*[]0kV:%oB.R`Oifh10'=J=$&`Djro(JZMdo_b;/#49a<$[r.^25[BgNG'BIK)fr%i92m)c%bX+d]\]5[[XDJFU[*Iij:k[@k3"+S$1b,6[S[81%,W*=?mIJj,4,*GN0Wio0,>Fg%uA.q(,fjOB:=Sq"->B9-215m0.B`%EO)$RRtJ#QIn>h\?^SrZ$b#gC=rf+VFhcS6R:B\67X8?TnW\8OUjj!o>=TA?,=*GfRn9]P4>Bk_Q?JZ%P$b+kYhM4%="t6OhS1pl%h:%\g3r:j,VO^BhT0ZSN/(\At2m4_jT<OPooGmS;%F)lro\_;J%T]m+b<DQDIMpe8URu,`&"jNB$U/'8J8@W9hS&:I<lYh'Z?Q>A%NZgk3\[tFI:ZcZ9%g_2P/^k=dOZQa</S%HM1)arrLNQ&T&[M8tgrma<<A?$Z[ToI(=Rmtl5I-l$/#<":N!!io@_]jPJNme5Pe?mB%=A(n`!fZP@c,CG7AIRUS9"^Edd$O]N2`>(c<`XgKBLm"o)T]AsJ@?0]02#=BlKelJ*a4b__5$+;c&bMKE=L,&B*=u4AlN2h,`+a@%nRMdoT2<bK^cdrJV,r7(`&$5d]P"d>NTRtdIPblNPtKEE`D8R`]*_"],$(=O4SIp<A`'l]_&fa,Op%"W3^g**b>SY<n&HAc1qKXN%nLJ[A?\o`u()f!(6o9@6*:7#dD+*A%^QR+APGuR*biO0tn^d4SW5YCjS2MSMJOn5KJ#\43I49nd<"a[mS;;P58LYisPL/9\(j0a=%G'cV8rZ^bi$2&<^9[".cU,iTdp,j?)IOUOAnA<'#T<>H<7;"3*L0lgW1&=Ed;1Ch%DJI3#jmpb%b269djilrY"%1GF0"OSSN0708%Q(:iO8DT(_?V1/qY.B>0;W?;doOfH@DX'71lJh^`&'s.Fo5<(:cb(3^poE1!nLO,1AgJnr='_*0+6!6?poB9>i\++D^G:l=n2P.P%f?)1pY<nMnYKWII-#W6c/qn'<RGK)*5LV^4s,W:ECA^DsnP9Q35BAs0`m5V8ebE9"nb?8`g6:-P*l!m1poD-Oj(G3c`m8sDqLF_C%q3?5T2@i3<T4\h"^IhfV^KunXr(:5Tf31_/T6I2,rjk0K"[LXcRf!g*P@%FZr,R!ZaKN3S-@_;]<;n@1pCuThHWgrZnnWZMb0N[S%PJ?BG<IQ7Qngf=9cbkFZ?`,B?^PYuC^G6lFe4YA9TBS<"nn7fY\GT%8+_1An7$)jB/jIg'kjgN<KeC+O])34/8!<*ql1-Y-7U1CS%hk\G&a%;VI,2r)#$^[L-2g"k`Hm:9DZsWH4R!^\IToj$[/I%Q6aYu'N+.E'j2#6:i/jJB<ipno$L+[s&hb`EInkH+]be9^mceKI3%qFhG4Q(K(fg8G!DU`_f!6D<p*pP'SNF)OJ,BC63drli'LT:`YQ,4RIGB&4qmIk"-&J)8La&\I$Mm1)?ZDoCV\e/Kn8;J2]m$eb3q%aKFaX,4gP04u7+FiFh;4C_`?s<;;l,,7]38hGE1oJ0l$19XGCa?Vqp@Ak)&[M<L@R6Wp"[2lb2:lHQuld8TYgA/l3VKi-che/S8]%R<^#GlM4VG!^u/[<W#P'RD=VifuGkEh<6a#7coAcSBUOIMf7TG]6RDro(Os-VYpBd].&4odr*[mDk&I'rV]F%8Uk+41&ZMdo_4'9%6*I(Qnc3]JeDJTBRhGK@kGHc,9FOdJ5BC_>Xl<@,o*\-D^K<PpR<);QIcfFa`1K%Ko2`Si[k%CIGHZFb\A"U(dF.bFksk@Ebdo6O%5I56"hp8YKp%L90VYpCm\+KDB&i"ZC*c930RkjRkm7.'Q9Y6_$l65<%^7T*uWpaTS%J>,rRA@RCX;fR]R<:k+T34)d_)RnIqt9O,%N=p>,W_d)68n9(]/i)`^-=62C)_q)TFX+4D7+r*pIAYhV\^.W%h@urOW&LU0Lq3Q`3e)>f?Hdh+2"qlBVn&GiFGfr!<jmoT6JF.-%eioku<:(QW(MfX?Gd6r[Ks*Wq5lHR:gRf=R_[)/bZ8G[@Kso;-415$DE5`]'d.ZSbU$^1e(rol6MXM2dD1B.>*\h2t81N_J7c?ej%cR?G.qi&DDNY,^_U%pX<I77;]%(O&a<;)q+[dOo`(M054F#&L%WU("d_C[<,HT=uY`ThhTWM<POrS/kIluf*JFhV>JLE(u$I_<&B%Mp)&?+a?lX-\`$bp't$@B1uQpI0Ru.WsGlWfq4)UJm`$SbE:(Tmulk/[4eB!XfC;fm6=t7mDUB$LFBeo->1pY4;gN<h]U+]?:-K?%Q?sgrPp6lBY%u;KE.m1u&bG34qLZh5YibH?O\PPg-m%C;0\JJ!e=q4KR2_[WYULTj@bLnC0kcA&]Fds)ME!_L`8P:&Lr4k8&LBjc%*f&$lN\.,QM"S.nLrY,6Rg0Dm!=Ni&f1oothQ;/i1uc9K8pg\P*1fP"n^CN/:&kjc8gM[Q&0qmL7DBYg>X[SbM&d0Ya6,>FD9l[;%0>UgorsFX%(+7l55aFQs'?F:DLr<'l^"DQr6mS?t,4VsO"MMQ9c>s>PUKh[Q6mNgTQm).YkE#.ej<Y@ugP>H=l9HqN`BnUZn7's;%D%_cI3q+"_7P(-!@e%oJLrH,fJ1,]_idLXq/"]m2)KFg/&R)m.csdPIA+AbB=D(rLn[LdOksmEKQ*@Fj],pt#$R3F^Be-j0I3+Cc%JgNLD,JStbfp$G1n;1QNe/f_N5IDCA<l[)pcWJ:$%qCa&*KU)7WK85B57rS/8T$1bb'/X$0r'=0Hq66RH7AUGjj;BO\!X?)Qf306%^1Lr2j%1L9:F>%9fi,s%LJJ6!+Q<*p>fqAGp@6&<dA)795gN`1nQls@'u#sb9J*52Dr1H+C!hQ]cHK3J"JD?_(4t=Jgl8eH2ZM*Q%s20nIpRD,js7hB,rUWhbpZ7aVrp(YTr:+-DqYcb1qrOaUqY]p-&&8/;Va#\,pur<=YbQUAn,'kIr;N$9^]*cd?bUpcqO^"PO-0;l%\bY.]mcXWFo%W&LIfAT`5Q:6&IB28^O8e[YJ,Jl\fDk]br;[qSs743k0E:q2p/euiYQ+FIn*YnCDfu&5Xo@;Bc_#^_c.DilmMd3s%@DeQLkqDu3kEeD_q-:[;VB:<ca+*o_+9!AN0gqi~>%AI9_PrivateDataEnd