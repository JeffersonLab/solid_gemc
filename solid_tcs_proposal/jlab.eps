%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: jlab.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 27/02/13
%%BoundingBox: 0 0 494 164
%%HiResBoundingBox: 0 0 493.2646 163.3809
%%CropBox: 0 0 493.2646 163.3809
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:MetadataDate>2013-02-27T09:37:59+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-02-27T09:37:59+01:00</xmp:ModifyDate>
         <xmp:CreateDate>2013-02-27T09:37:59+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>88</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAWAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A6t/yq3ydY+fNHs/Qlltr&#xA;jTdTuHjkmkVTNDcWCxtxjMa1CzSdu/gBRpULrVj5b0vzodMksLeXTFijcwRC/lvGd4pnK80lMUfF&#xA;okJaRQnFt2UgclU21zy95X07ycPMB0FoJ1W2lm0+eaYyqkssayRGkyqJODkD4qButRiqS258sTxa&#xA;28flecvZ28k+kwM9yDcSRRikJZJJeXrS19J0WjJuOmKod49J+qX6WmhLqVzamaaC/tkvRaS29tHF&#xA;NIgV7nm0ro7hCjMvLiDuSAqnk35b3F95dFxYQWNrqNzEskEUq3kfp85AwDs089GEPwkemfj9tsVT&#xA;nQ/InlO90q3ubjTk9eQN6npy3CpVWK7AysR08cVR/wDyrfyX/wBW7/ktP/1UxV3/ACrfyX/1bv8A&#xA;ktP/ANVMVSbX/K/l3RL7y/c6ZCbS8k1W3jBWaUlo2DB14s5BFOu2GlZ8QCCCKg7EHArzLSvy18op&#xA;551PTntpJrSx0rSpbOJ5pQI3kkvYJCODJUslrGDyr0AGwACqE8yx+RtD80WWmSaR6lk60vnSW7e4&#xA;WSZXaAxRox5qDDwk71kSmwaiqbSeVvLMnld9Xi0NrO4YVht7qaZyAZOCM4jm/aX4qBsVSXy23kjW&#xA;7i3kXy9cQWF7bwyWpZ5i4kcSs5ZxMUaOixpyXZZDxY1IoqgNMisby3MA8vK2qXscRsQi3wgtbia3&#xA;Mxt715J05GJ6Rt6ZDfaJRQDiqdaZ5GGt+WzqdpZW1hPexStYW11HeRyx1UrCZWNzIFPL4z+7O21M&#xA;VTfyz5D8u3ejpLqenRfXkmuYJ/QmufTrBcSQihZwTsgqaCp34r0Cqa/8q38l/wDVu/5LT/8AVTFX&#xA;f8q38l/9W7/ktP8A9VMVS+88raHonmLyvcaXbtbSz6jLDMRLKweM6bePxYM7AjnGp+YxVlOs6Taa&#xA;vps+nXnI29wAH4HifhYMPHuvfY98VYDYfl55Yk/MLW4LqKa7jjsNPvollnlASe7nvo53VY2RfjW2&#xA;jrt2xVCeZdP8n6Zr9rpsOmItpxlGp6g73Uwt3FrJcwgRRzK7fDCS9OlVHVtlURd6V5BthDaeglxf&#xA;reRWt5JGL1Ik5OAwCmV/ifksaAOfiYHpiqn5Q0ryrr8sMraFJa2t5FczWqzPPHII7e4WOOQj1nPG&#xA;aOZadN0alQRirLP+Vb+S/wDq3f8AJaf/AKqYq7/lW/kv/q3f8lp/+qmKu/5Vv5L/AOrd/wAlp/8A&#xA;qpirv+Vb+S/+rd/yWn/6qYq7/lW/kv8A6t3/ACWn/wCqmKpfeeVtD0TzF5XuNLt2tpZ9RlhmIllY&#xA;PGdNvH4sGdgRzjU/MYqg9T8yeXdS8/6EllqNncu2l6vBHH6ygNO02nlISw5FGbgWFBy+Hb3eMBkP&#xA;NmumXguInjZw80DMkmxUkKxUNxYA78T7VBpkpBBFK91aWt3A1vdwx3Fu9OcMqh0ahBFVYEGhFcih&#xA;URERFRFCooAVQKAAbAADFW8Vdiq2KGKGNYokWONdlRAFUD2AxVdiqncTpBA8z/ZQVptUnsBWm5Ow&#xA;wgWrBvM15G995d9aeEXN1qttLBCjB2khG/qK3URqWoPGtdq8QykOTIivez3AxY1Yf+TJ13/tjaP/&#xA;ANRWp4qyXFVk0MM0TRTIskTijxuAyke4O2Kugt4LeFILeNYYYxxjijUKqgdgooBiq/FXYqtihiiU&#xA;rEixqWZyqgAcnYszbd2Ykn3xVdirsVY/5m/47XlP/tqy/wDdKvsVZBirGrD/AMmTrv8A2xtH/wCo&#xA;rU8VT+9srW9tZbS7iWa2nUpNE26sp6g4qhbLy9oNjF6Nnp9vBFSEcEiQD/Rgogrt/uvgvHwoMVRk&#xA;dvbxuXjiRHKLGWVQDwSpRaj9leRoO1cVVMVdirsVdirsVY/5m/47XlP/ALasv/dKvsVSdvLPl2x/&#xA;MDSba0022ht7rQ9XjuoljULKi3OmKFkFPiAUkb9sSFTC0ln0nWFtb259UzO4jml+3LCx/dcVUn+4&#xA;FEkc0rsx3fZx9Y/JnzHuZRiwdirsVdirsVdiqReYtQCy29nHWWRpFZoI3CSMa/u6cgeS8x8fH4lH&#xA;xbbYTLhjfyZRHVKdf01rG08vrNIJ76XWbJ767ChPWm4srPxBPEfDRVrsKDIRjSCWZ5JDBtBtfMEX&#xA;5peZWur6Ga2ew0ySKMw/Gts1xqIiiV1MQUqwYksr1r1xVmk9zFCByqzt9iJBV2PTYfx6DvhAtVpv&#xA;I1akytDVuILj4T4fEtVFe1Th4VV8irsVdirsVdirsVY/5m/47XlP/tqy/wDdKvsVRWvW/mOU250a&#xA;5ig4er9YWWg5FkIj3Mcv2W37fhxKrEPJFj5ztfzA1xPMGp299KNM0os8cNC0Rl1BUVWQQKhEgdjV&#xA;GqDSoxV6BcXEcEfN6kkhURRVmY9FUeP+fTCBapW+pwNOUmlZ2bhxhgcKqIXI5c1Ks7Dh8XHYdKdy&#xA;ynGOzLgai1SNCWhf4qgy28sodSzycAqyM1UkbbgjUVugpuQxnGSTDuTiORJI1kQ1VhUGhH4HfAQw&#xA;XYq7FXYq7FWP+Zv+O15T/wC2rL/3Sr7FWOWvnLTNV/NbTbOGC6iuLLStSinWSFiA882mSr8UfqLQ&#xA;AUZieNe+Ksp806eZ7H65DE8l3ZBnRYB+/kiNDLAjVVh6nEbV3IFQcjK+Y5hlE0UXoeoi/wBNjn5c&#xA;nFY5GqrAuhoTyWimvXb7h0yZrmORRIUaR+BDsVdirsVakdY0Z3NEQFmPgBucQrF9BjbVtYuNVuYn&#xA;EVnM4shMi/3jIU9SKRGKMqwvw2ruWFa1wHeXkNv1s5bbKnnf/pQf9tm0/wCN8LBkuKsViuoLT8wP&#xA;MVzO3CGLRNId29hdan08T4YQLKgIqwOqakz3UbCC3c7TSAl3KSGnp+nIAYStOO4rufi5bQMyfp5M&#xA;9h70XJpuqRofq12HYBgFm5kHka7lmkFP9h02weody8Q6hCR6u+nO0V5CbWLk7IsjgxheQCrFK1Fq&#xA;a7R9v8kUGTExI0dj+Px3rwXyT2GaKaJZYm5I3Qj22IPgQdiMJFMF+BXYq7FXYqx/zN/x2vKf/bVl&#xA;/wC6VfYqyDFWNWJA/MjXiTQDRtHqf+jrU8VXW819r128kTPa6ZExRZ1qskhVgf3LAigNKOSP8kdz&#xA;gkb2HxP6Px/ZZ9PvT20srWzhENtEsUY7KOvuT1J9ziIgcmBNrL3T7a7UeotJU3imWnND1qpNfDod&#xA;j3GCUAVBpKdFuJ7C/OjXjFpGUvaPV3DoiqHcu1aFia0LE1rUmoJkJEjf6gykL3Cf4sHYq7FXYqx/&#xA;zN/x2vKf/bVl/wC6VfYqpX//AJMnQv8Atjax/wBRWmYqyXFWK6asmheYZNPk/wB4dQYyWbikcSV2&#xA;S3RDsWTi32P2SNtsY/zfiP0s+YvuZViwdirsVdiqQ+a766WGDT7ME3V9IIwwHMJWvFnjFWaOo+Pa&#xA;gWvLbYt0L69Px5Mojr3JnpOnx6dptvZIF/coAxQFVLnd2CktTkxJ64AKCCbSXzv/ANKD/ts2n/G+&#xA;FDJcVeYpe6jrH5p63aDS7xNNtrPToL4/uo2lEE+oGI0mePlbzmVt05E8KGlcBZRNb9XoYvLgAAWE&#xA;4A6CsH/VXCxb+u3P/LBP/wAFB/1VxVZLO80bRTabLJE4oyP9XZSPcGTAQDzVJXsNX0+U3GiW05BJ&#xA;aTT7mWL0XLMCaSc5HQ0rTYivtsUWNujPiB5o+x8yR3cz24sbmG8jqZLOYwJMoB48uPq/EhI2dSVP&#xA;jjaDEhHfXbn/AJYJ/wDgoP8AqrhYu+u3P/LBP/wUH/VXFXfXbn/lgn/4KD/qrirHfMGpo/mjyjZS&#xA;RPBcPqFxOiSGM1SPTLxGPwO56yLgtNGrZZhQ8xj1DU9a/MzX7KPTL2DT47PT7XUJf3UTSR21zqBT&#xA;iJWjLQXPNhzjqfhI2rXAWQIG70GGd4Ykhh02WOKNQkcaG3VVVRQAASbAYWJK/wCu3P8AywT/APBQ&#xA;f9VcVd9duf8Algn/AOCg/wCquKpdrcF5fWoNvZzw39s3rWM/OEBZV6BuMtSjfZde4wEdWUTSvpuu&#xA;SX1otwmn3CGrJLExhDJIjFXQ1kH2WBHv16Yg2gikV9duf+WCf/goP+quFDvrtz/ywT/8FB/1VxV3&#xA;125/5YJ/+Cg/6q4qxzzBqkb+afKNhJE8Ny2oT3Co5jNY0028Qn4Hem8g69d/DFNbWlkGqeZLr81N&#xA;KjvNJjs4IdJ1NUlacn1FafTWlaMCM8uD0UV4136UFVD0DFUn8zaJHqVkXRQNQtlY2k4QPIoYqZEQ&#xA;MyL+8VONGPHpXpgIPTmmJoteWtdGo2xhnia21C3Ci4tZCeYBUFWPIK24P7QB9txkue4TKNe5OcDF&#xA;2Koe/v7axtmuLhuKL0FQCT1oKkD6SaAbmgwgKBbHvLenvqN/L5h1G3eO6EjLZRTI8bwAKY5NiRyD&#xA;DYEr4061Mbs38mcj0DKcLBjXnf8A6UH/AG2bT/jfFWS4qxqw/wDJk67/ANsbR/8AqK1PFWS4q7FX&#xA;Yq7FUDq2j2epxxrOpEsLB4JlLI6MCDsyFWoaCoB/Ghx26pEiEvgvNasJfq9yhvo1AKlQfXoz8Rxo&#xA;OMiqCoLGhHVqChIMSNxuPt/H4tlQPkmNprWl3SBorhKtWiseDbGhoGpUVHUbZEZAxMSFt9rVpbRt&#xA;6Z+szinGCGrtVjReXENxBPcj5VOJmOQ3KREli01jcDXPLOqXpV7681V/iViyJEuk33FIqgUQnf36&#xA;nfJ8Nbdev48lkeg5M4xYsasP/Jk67/2xtH/6itTxVkuKuxV2KuxVIb31dI1cX0ERaxvzS/ijDu/r&#xA;DiqSogJH2AefEbgV3wS5X+KZjcUnkUscsayxMHjcBkdTUEHcEEYg2wXYVS3WdZWwT0oU+s6hIKw2&#xA;qkcqFgvNqkURSd/uG+AnehzZRjfuY/daW9nqnlea6Ky6neas8l9cKCOTrpF6oC1JoigfCvb6cNAc&#xA;llK/cjb/AP8AJk6F/wBsbWP+orTMWLJcVdiqRatoU/1ldQ02UQXEYNIgtI6s7PJIyoA0hbka177j&#xA;qwceYZRPQ8lOx810tlk1O1ltgQHFzwPo+k32Xdv911O3F6N3oNwDYTwd26vJ5qsXUrp0UuoTbqqQ&#xA;o3EOBXhIxH7s/wCtjYRwFLrax1DX7iK/upvTtIZg0VuqK8bLG3xo3I0580+0vJKbhmPBkB39ySQO&#xA;TKkRI0WNAFRAFVR0AGwAwsG8VY153/6UH/bZtP8AjfFWS4qwrR/MGiXP5o6/bwX0DzrpmlW/p81D&#xA;GWOfUZHRQftFVkUnj0rirNcVdirsVdirsVU5oIplUSLXieSN0KtSlVPUGhwg0qBl048x6sX1oMQp&#xA;lRvSlCBuYDBSivRq71HXp1qTRZCRC1NLhmkrJbelAQxdJG5yMZCC0fVwkRoKorUbpSmzEER5KZFB&#xA;+Zv+O15T/wC2rL/3Sr7IMU2vNU02yeJLy6it3n5mFZXVC4jUu/EEivFRU+GKsT0DzFoOofmRrJst&#xA;QguPX0jSkgCSKTI0dxqTOEFfi4qwJp0xVm2KuxV2KuxVRvbSG8tZLaZQ0cgoQRWhG4P0EVwxNG1S&#xA;W0iv7FpUgOylpJLUrzCg0p6YHEtz+I8h/slLVORljreP4/U2WD70Tc3mryKyxqlqo5I87AlVPGqk&#xA;GQR7FiF2RsFSPl9qAB1dpOkJG/1qQs7uefKSvN3IA5tyJIFFHBP2fn0mAIigiUrQ3mb/AI7XlP8A&#xA;7asv/dKvsDFJpLfzEv5tafJc3cDWL6bqrWUIjJdLcTaWHQkFKOZPi5Ett2xVnOKuxV2KqE1layyJ&#xA;I6UkR1kDoSjFkBC1KkFhRiKHbFVv6OtPWWVlaR0RUUSSPIoCuJAeLsy8uQB5U5bDfYYqicVdirsV&#xA;Y153/wClB/22bT/jfFWS4qxTRrK0tfzJ8xC2hSETaTpEsojUKGc3OpKWIHeijFWV4q7FXYq7FXYq&#xA;7FXYq7FWP+Zv+O15T/7asv8A3Sr7FUfqnl3RNVkjl1CzjuJYlZI5WFHCuCGUMKNQg9MVY55W0HR9&#xA;E8/6/aaVaR2lu2kaPI8cY+0/1jUk5EmpJ4oo38MVZpirsVdirsVdiqnPbQzqBIDVSGVlJRgR4MpD&#xA;DwO+42wg0q1bOESLIeTuhYoXZmCltqgE0BpsD1pXxOPEqtgVj/mb/jteU/8Atqy/90q+xVSv/wDy&#xA;ZOhf9sbWP+orTMVZLirgQwBBqDuCOhGKuqKgV3O4HegxV2KuBBFQajxGKuJAIBNCdh7nrirsVcCC&#xA;Kg1G428RscVY153/AOlB/wBtm0/43xVkuKsasP8AyZOu/wDbG0f/AKitTxVkpIAqdgOpxVwIIqNw&#xA;ehxV1RUCu53A70GKuxVwIYAg1B3BHQjFXEgEAnc9BirsVcCCKg1G428RscVY/wCZv+O15T/7asv/&#xA;AHSr7FWQYqxqw/8AJk67/wBsbR/+orU8VZKSAKnYDqcVcCCKjcHocVdUVArudwO9BirsVcCGAINQ&#xA;dwR0IxVxIBAJ3PQYq7FXAgioNRuNvEbHFWP+Zv8AjteU/wDtqy/90q+xVJdR8g6vqHnv9MTaxdw6&#xA;XHayra/Vbh4Z45Z3h9SHieaGFhbq2wXcDvUlVEa15J1gaVcnRte1M6nw/wBFFxdn0uVf2uKqenvi&#xA;qh5a8g6tb6LbW+qa3qMN1CPTEVpdt6KxoeMYXmpb7IGKpZrfkPzv+l4rjSdZuXgRmjWW4u5BIsEn&#xA;1csvwihJdHYnwCilcVT7UvJGo/UZf0br+qfXaD0fXuyY61FeXFQemKpL5L8h+cYbSWHzHrN1AE4f&#xA;VE0+8kpU8jLz9RW7kcae+KobzJ5E/MGTUw+i6vNLZ2xSS1e9vZRKJDFIkhHprT9um/avzxVP9X8m&#xA;6iunXQ0rXtUfVBEzWsU15RC/ReVFBpXFUi8m+UfMhmuINX8wzLEWnaCPT79mYyrO31knkG+zI/xb&#xA;bEiu9QFWvMXk/wA5nzFYnQdU/SFrp5iu5rfVLp5GWesoR+CcdqAceQoTX6FXo9vHeyadCl46x3rR&#xA;ILl7f7IloOfp8wfh5VpXemKsFtvy01hfNs1/Nr1+LB7KGD14bqVLiR4Gb00lDGRWRPVkaopu3c8i&#xA;VUZ5k8ja0+h3aaLreoy6m6hYI7u8YQNVgHD8FDfY5U98Vb8u+RdYj0a1j1nXdRTUUUrMlpdt6AAY&#xA;hAnNS32ONa98VSnU/Ifnc+ZLWew1q5fTI39OSaa6kFwttIYTKqU+HkWjY9OwxVPtR8kaj9UP6O1/&#xA;VPrXOPj612SnD1F9T7Kg19Plx98VSjyZ5C81Qab9X8wa1eQtAI4rSOwu34CNYwKHmG6Hbr49qYqg&#xA;tV8ifmI+uGaw1eVtPgcLaPcXs3rhHCB2PBeP84I8KEeGKp5r3k3WF0u5Gh69qUmsBQbWK5vSIieQ&#xA;B58V5UpXFUo8k+UtfIurfWvMMyuXd7eLTb9mJcSt9bLhg32ZnANOjVr2xVR1Xyx5/i83wy6HqMWo&#xA;W2mcbiCHVLuSWSOSeCeAyNEnAbh3VKj+NFXoXmDSrjVdKmsre/n02WTiRdWx4yDia0qOLUPfiyn3&#xA;xVh1p+W+s/4w1PVbzXr4W11HGIZLW5kichWkZYGRvUX04mlkZKU+3t4BVF+Y/IutPotymi65qMmo&#xA;vwWJLy7b0CpdRIH4KG/u+VKd8VXaB5F1VNHtk1bXNSjv0UrKlrdt6IAYhAvJSfsUr74qk+oeQ/PJ&#xA;802s1nrVw+kRt6cs0t1ILgW8pjaVUp8Ib93/ACkHbpiqeav5I1YWEh0nX9T+vAr6QuLtjGRyHKvF&#xA;Qfs1piqW+TfIXmeDSVt/MGtXsM0HCO2jsLt/TESxqAPjDGoO3XFUv1byH+Yj64ZtP1iRtOgcLaPc&#xA;3k3rhXWMOx4Lx/nBHhQjwxVPde8m60ulXP6C13UpNYVVNtFc3pEVSwB58U5AcQ1MVSjyR5S190uo&#xA;dY8wzA+pI1vHpt+zn1BK/wBb9QMG3WZuJ8GrXFVDVPLPn2LzfFJoWpRajbaVwuIYdTu3lljknt54&#xA;TI8ScaVV2CVH8aKvVMVdirsVdirsVdirsVSKy8t3MHm/UfMM2pXE0d3bxWttprMv1eFI/iZggUfE&#xA;Xqak9z7UVSG7/LW9vr976TWrmwkreRxrZyOpWK6v1vAVcGMo37pOQAO9dyu2Kpj5B8t+YNCs54db&#xA;vY9RuZCCL1XneSSjOayCZnoaMPsmnam3JlWVYq7FXYq7FXYq7FXYq7FUj0/y5cW/mvVNfm1CeZb6&#xA;KG2trAt+4hihHKoQADkXZqHsCd98VSGf8t7271E38us3FnKsl56KWjuOMV1fx3gAdTER/cLyWh3L&#xA;VZlouKov8vvKmu+X4p11i9jv5pIoo/rSyXEkjtHLO5aT6w0hFRMv2Wp1AApuqy/FXYq7FXYq7FXY&#xA;q7FXYqkmn+Xrm380aprs2o3E630cNvbWDMPq8MUK1qEAHxmRnNa9D88VSCX8utRur2S9l1q4sZPX&#xA;umijtJHoIp71bpF5Vi4/3allC/aJDM6fDiqL/L7yr5g0CGZNavY9QneGGL64sk8kkjRyzyM0nrly&#xA;P79acWp2CqAMVf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">jlab</rdf:li>
            </rdf:Alt>
         </dc:title>
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:028011740720681197A5CA002FCF7E27</stEvt:instanceID>
                  <stEvt:when>2012-12-13T16:31:28+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:0180117407206811994CCC5C3536E1B7</stEvt:instanceID>
                  <stEvt:when>2013-02-27T09:37:59+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:028011740720681197A5CA002FCF7E27</stRef:instanceID>
            <stRef:documentID>xmp.did:028011740720681197A5CA002FCF7E27</stRef:documentID>
            <stRef:originalDocumentID>uuid:fb437887-2608-8d4e-89d4-e7c1b38c17ad</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:OriginalDocumentID>uuid:fb437887-2608-8d4e-89d4-e7c1b38c17ad</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:0180117407206811994CCC5C3536E1B7</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:0180117407206811994CCC5C3536E1B7</xmpMM:DocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <pdf:Producer>Adobe PDF library 9.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -163.381 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 163.381 li
493.265 163.381 li
493.265 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.75 lw
0 lc
0 lj
10 ml
[] 0 dsh
true sadj
8.16895 142.646 mo
8.16895 2.146 li
150.169 2.146 li
150.169 142.646 li
8.16895 142.646 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
150.169 138.396 mo
150.169 142.646 li
126.419 138.396 mo
126.419 142.646 li
102.919 138.396 mo
102.919 142.646 li
79.1689 138.396 mo
79.1689 142.646 li
55.4189 138.396 mo
55.4189 142.646 li
31.6689 138.396 mo
31.6689 142.646 li
8.16895 138.396 mo
8.16895 142.646 li
8.16895 142.646 mo
150.169 142.646 li
8.16895 142.646 mo
8.16895 2.146 li
150.169 2.146 li
150.169 142.646 li
8.16895 142.646 li
cp
@
8.51953 147.947 mo
8.69922 147.679 8.78955 147.179 8.78955 146.448 cv
8.78955 145.92 8.72412 145.486 8.59424 145.145 cv
8.46436 144.804 8.21191 144.634 7.83691 144.634 cv
7.49219 144.634 7.24023 144.795 7.08105 145.119 cv
6.92188 145.442 6.84229 145.919 6.84229 146.548 cv
6.84229 147.022 6.89307 147.403 6.99512 147.691 cv
7.15088 148.13 7.41748 148.35 7.79443 148.35 cv
8.09814 148.35 8.33984 148.216 8.51953 147.947 cv
cp
9.10742 144.851 mo
9.31494 145.234 9.41895 145.759 9.41895 146.425 cv
9.41895 147.057 9.32471 147.58 9.13672 147.993 cv
8.86377 148.585 8.41846 148.882 7.79932 148.882 cv
7.24121 148.882 6.82617 148.64 6.55322 148.155 cv
6.32617 147.75 6.2124 147.208 6.2124 146.526 cv
6.2124 145.998 6.28076 145.545 6.41699 145.166 cv
6.67236 144.461 7.13428 144.108 7.80273 144.108 cv
8.4043 144.108 8.83887 144.356 9.10742 144.851 cv
cp
.137255 .121569 .12549 rgb
f
30.4038 148.046 mo
30.5562 147.84 30.6328 147.596 30.6328 147.314 cv
30.6328 147.077 30.5645 146.85 30.4282 146.635 cv
30.292 146.419 30.0439 146.312 29.6851 146.312 cv
29.4341 146.312 29.2139 146.395 29.0244 146.562 cv
28.8354 146.728 28.7407 146.979 28.7407 147.314 cv
28.7407 147.609 28.8267 147.856 28.9985 148.056 cv
29.1704 148.256 29.4092 148.356 29.7144 148.356 cv
30.0215 148.356 30.2515 148.253 30.4038 148.046 cv
cp
30.8418 144.493 mo
31.0464 144.762 31.1484 145.04 31.1484 145.325 cv
30.5708 145.325 li
30.5361 145.141 30.481 144.998 30.4053 144.894 cv
30.2646 144.699 30.0518 144.602 29.7661 144.602 cv
29.4395 144.602 29.1797 144.752 28.9873 145.054 cv
28.7949 145.356 28.6875 145.788 28.666 146.351 cv
28.8003 146.154 28.9688 146.007 29.1724 145.909 cv
29.3584 145.823 29.5659 145.779 29.7954 145.779 cv
30.1846 145.779 30.5244 145.904 30.8145 146.153 cv
31.1045 146.401 31.249 146.772 31.249 147.266 cv
31.249 147.688 31.1118 148.062 30.8369 148.387 cv
30.5625 148.713 30.1709 148.875 29.6621 148.875 cv
29.2275 148.875 28.8521 148.71 28.5361 148.38 cv
28.2202 148.051 28.0625 147.495 28.0625 146.714 cv
28.0625 146.136 28.1328 145.646 28.2734 145.244 cv
28.5439 144.474 29.0381 144.089 29.7563 144.089 cv
30.2759 144.089 30.6377 144.223 30.8418 144.493 cv
cp
f
34.0195 147.947 mo
34.1992 147.679 34.2896 147.179 34.2896 146.448 cv
34.2896 145.92 34.2241 145.486 34.0942 145.145 cv
33.9644 144.804 33.7119 144.634 33.3369 144.634 cv
32.9922 144.634 32.7402 144.795 32.5811 145.119 cv
32.4219 145.442 32.3423 145.919 32.3423 146.548 cv
32.3423 147.022 32.3931 147.403 32.4951 147.691 cv
32.6509 148.13 32.9175 148.35 33.2944 148.35 cv
33.5981 148.35 33.8398 148.216 34.0195 147.947 cv
cp
34.6074 144.851 mo
34.8149 145.234 34.9189 145.759 34.9189 146.425 cv
34.9189 147.057 34.8247 147.58 34.6367 147.993 cv
34.3638 148.585 33.9185 148.882 33.2993 148.882 cv
32.7412 148.882 32.3262 148.64 32.0532 148.155 cv
31.8262 147.75 31.7124 147.208 31.7124 146.526 cv
31.7124 145.998 31.7808 145.545 31.917 145.166 cv
32.1724 144.461 32.6343 144.108 33.3027 144.108 cv
33.9043 144.108 34.3389 144.356 34.6074 144.851 cv
cp
f
50.2505 145.465 mo
50.2505 145.017 li
50.6724 144.976 50.9663 144.907 51.1328 144.811 cv
51.2998 144.714 51.4238 144.487 51.5063 144.127 cv
51.9673 144.127 li
51.9673 148.755 li
51.3442 148.755 li
51.3442 145.465 li
50.2505 145.465 li
cp
f
53.7666 147.71 mo
53.9102 147.414 54.1909 147.145 54.6089 146.902 cv
55.2319 146.542 li
55.5107 146.38 55.7065 146.241 55.8193 146.126 cv
55.9966 145.946 56.0854 145.741 56.0854 145.509 cv
56.0854 145.238 56.0039 145.022 55.8418 144.863 cv
55.6797 144.704 55.4634 144.624 55.1929 144.624 cv
54.7925 144.624 54.5156 144.776 54.3618 145.08 cv
54.2798 145.243 54.2344 145.468 54.2256 145.757 cv
53.6318 145.757 li
53.6382 145.352 53.7129 145.022 53.856 144.767 cv
54.1089 144.317 54.5557 144.092 55.1963 144.092 cv
55.7285 144.092 56.1172 144.236 56.3628 144.523 cv
56.6084 144.812 56.731 145.131 56.731 145.484 cv
56.731 145.856 56.6001 146.174 56.3384 146.438 cv
56.187 146.592 55.9155 146.778 55.5239 146.997 cv
55.0791 147.243 li
54.8672 147.36 54.7007 147.471 54.5796 147.577 cv
54.3633 147.766 54.2266 147.975 54.1704 148.204 cv
56.7085 148.204 li
56.7085 148.755 li
53.5181 148.755 li
53.54 148.355 53.6226 148.007 53.7666 147.71 cv
cp
f
59.5215 147.947 mo
59.7012 147.679 59.7915 147.179 59.7915 146.448 cv
59.7915 145.92 59.7261 145.486 59.5962 145.145 cv
59.4663 144.804 59.2139 144.634 58.8389 144.634 cv
58.4941 144.634 58.2422 144.795 58.083 145.119 cv
57.9238 145.442 57.8442 145.919 57.8442 146.548 cv
57.8442 147.022 57.895 147.403 57.9971 147.691 cv
58.1528 148.13 58.4194 148.35 58.7964 148.35 cv
59.1001 148.35 59.3418 148.216 59.5215 147.947 cv
cp
60.1094 144.851 mo
60.3169 145.234 60.4209 145.759 60.4209 146.425 cv
60.4209 147.057 60.3267 147.58 60.1387 147.993 cv
59.8657 148.585 59.4204 148.882 58.8013 148.882 cv
58.2432 148.882 57.8281 148.64 57.5552 148.155 cv
57.3281 147.75 57.2144 147.208 57.2144 146.526 cv
57.2144 145.998 57.2827 145.545 57.4189 145.166 cv
57.6743 144.461 58.1362 144.108 58.8047 144.108 cv
59.4063 144.108 59.8408 144.356 60.1094 144.851 cv
cp
f
73.9458 145.465 mo
73.9458 145.017 li
74.3677 144.976 74.6616 144.907 74.8281 144.811 cv
74.9951 144.714 75.1191 144.487 75.2017 144.127 cv
75.6626 144.127 li
75.6626 148.755 li
75.0396 148.755 li
75.0396 145.465 li
73.9458 145.465 li
cp
f
79.4141 145.839 mo
79.5591 145.695 79.6313 145.523 79.6313 145.323 cv
79.6313 145.15 79.562 144.991 79.4238 144.845 cv
79.2856 144.7 79.0752 144.627 78.7925 144.627 cv
78.5117 144.627 78.3086 144.7 78.1836 144.845 cv
78.0581 144.991 77.9956 145.161 77.9956 145.356 cv
77.9956 145.575 78.0767 145.746 78.2388 145.87 cv
78.4004 145.994 78.5918 146.055 78.812 146.055 cv
79.0688 146.055 79.2695 145.983 79.4141 145.839 cv
cp
79.5225 148.137 mo
79.7012 147.991 79.7905 147.773 79.7905 147.483 cv
79.7905 147.183 79.6982 146.954 79.5146 146.798 cv
79.3306 146.643 79.0947 146.565 78.8071 146.565 cv
78.5278 146.565 78.3003 146.645 78.124 146.803 cv
77.9473 146.962 77.8594 147.183 77.8594 147.464 cv
77.8594 147.706 77.9399 147.916 78.1011 148.092 cv
78.2622 148.268 78.5117 148.356 78.8491 148.356 cv
79.1196 148.356 79.3442 148.283 79.5225 148.137 cv
cp
77.6387 146.036 mo
77.4678 145.863 77.3823 145.638 77.3823 145.361 cv
77.3823 145.015 77.5078 144.717 77.7583 144.468 cv
78.0088 144.22 78.3647 144.095 78.8247 144.095 cv
79.27 144.095 79.6191 144.212 79.8721 144.447 cv
80.1245 144.682 80.251 144.956 80.251 145.27 cv
80.251 145.56 80.1777 145.794 80.0308 145.974 cv
79.9482 146.076 79.8208 146.175 79.6479 146.273 cv
79.8413 146.361 79.9932 146.463 80.104 146.578 cv
80.3101 146.794 80.4136 147.075 80.4136 147.421 cv
80.4136 147.831 80.2759 148.177 80.0015 148.462 cv
79.7266 148.746 79.3379 148.889 78.8364 148.889 cv
78.3838 148.889 78.0015 148.766 77.689 148.52 cv
77.3765 148.274 77.2202 147.918 77.2202 147.451 cv
77.2202 147.176 77.2871 146.938 77.4214 146.738 cv
77.5552 146.539 77.7544 146.385 78.0186 146.279 cv
77.856 146.21 77.7295 146.129 77.6387 146.036 cv
cp
f
83.2168 147.947 mo
83.3965 147.679 83.4868 147.179 83.4868 146.448 cv
83.4868 145.92 83.4214 145.486 83.2915 145.145 cv
83.1616 144.804 82.9092 144.634 82.5342 144.634 cv
82.1895 144.634 81.9375 144.795 81.7783 145.119 cv
81.6191 145.442 81.5396 145.919 81.5396 146.548 cv
81.5396 147.022 81.5903 147.403 81.6924 147.691 cv
81.8481 148.13 82.1147 148.35 82.4917 148.35 cv
82.7954 148.35 83.0371 148.216 83.2168 147.947 cv
cp
83.8047 144.851 mo
84.0122 145.234 84.1162 145.759 84.1162 146.425 cv
84.1162 147.057 84.022 147.58 83.834 147.993 cv
83.561 148.585 83.1157 148.882 82.4966 148.882 cv
81.9385 148.882 81.5234 148.64 81.2505 148.155 cv
81.0234 147.75 80.9097 147.208 80.9097 146.526 cv
80.9097 145.998 80.978 145.545 81.1143 145.166 cv
81.3696 144.461 81.8315 144.108 82.5 144.108 cv
83.1016 144.108 83.5361 144.356 83.8047 144.851 cv
cp
f
97.4688 147.71 mo
97.6123 147.414 97.8931 147.145 98.311 146.902 cv
98.9341 146.542 li
99.2129 146.38 99.4087 146.241 99.5215 146.126 cv
99.6987 145.946 99.7876 145.741 99.7876 145.509 cv
99.7876 145.238 99.7061 145.022 99.5439 144.863 cv
99.3818 144.704 99.1655 144.624 98.895 144.624 cv
98.4946 144.624 98.2178 144.776 98.064 145.08 cv
97.9819 145.243 97.9365 145.468 97.9277 145.757 cv
97.334 145.757 li
97.3403 145.352 97.415 145.022 97.5581 144.767 cv
97.811 144.317 98.2578 144.092 98.8984 144.092 cv
99.4307 144.092 99.8193 144.236 100.065 144.523 cv
100.311 144.812 100.433 145.131 100.433 145.484 cv
100.433 145.856 100.302 146.174 100.041 146.438 cv
99.8892 146.592 99.6177 146.778 99.2261 146.997 cv
98.7813 147.243 li
98.5693 147.36 98.4028 147.471 98.2817 147.577 cv
98.0654 147.766 97.9287 147.975 97.8726 148.204 cv
100.411 148.204 li
100.411 148.755 li
97.2202 148.755 li
97.2422 148.355 97.3247 148.007 97.4688 147.71 cv
cp
f
102.906 147.11 mo
102.906 144.999 li
101.417 147.11 li
102.906 147.11 li
cp
102.916 148.755 mo
102.916 147.62 li
100.878 147.62 li
100.878 147.048 li
103.007 144.095 li
103.5 144.095 li
103.5 147.11 li
104.185 147.11 li
104.185 147.62 li
103.5 147.62 li
103.5 148.755 li
102.916 148.755 li
cp
f
106.92 147.947 mo
107.1 147.679 107.19 147.179 107.19 146.448 cv
107.19 145.92 107.125 145.486 106.995 145.145 cv
106.865 144.804 106.612 144.634 106.237 144.634 cv
105.893 144.634 105.641 144.795 105.481 145.119 cv
105.322 145.442 105.243 145.919 105.243 146.548 cv
105.243 147.022 105.293 147.403 105.396 147.691 cv
105.551 148.13 105.818 148.35 106.195 148.35 cv
106.499 148.35 106.74 148.216 106.92 147.947 cv
cp
107.508 144.851 mo
107.715 145.234 107.819 145.759 107.819 146.425 cv
107.819 147.057 107.725 147.58 107.537 147.993 cv
107.264 148.585 106.819 148.882 106.2 148.882 cv
105.642 148.882 105.227 148.64 104.954 148.155 cv
104.727 147.75 104.613 147.208 104.613 146.526 cv
104.613 145.998 104.681 145.545 104.817 145.166 cv
105.073 144.461 105.535 144.108 106.203 144.108 cv
106.805 144.108 107.239 144.356 107.508 144.851 cv
cp
f
121.239 148.429 mo
120.991 148.127 120.867 147.76 120.867 147.328 cv
121.477 147.328 li
121.503 147.628 121.56 147.847 121.646 147.983 cv
121.797 148.228 122.071 148.35 122.467 148.35 cv
122.774 148.35 123.021 148.268 123.207 148.103 cv
123.393 147.938 123.486 147.727 123.486 147.467 cv
123.486 147.147 123.388 146.923 123.192 146.795 cv
122.997 146.667 122.725 146.604 122.376 146.604 cv
122.337 146.604 122.298 146.604 122.258 146.605 cv
122.218 146.606 122.177 146.608 122.136 146.61 cv
122.136 146.094 li
122.196 146.101 122.248 146.105 122.289 146.107 cv
122.33 146.109 122.374 146.11 122.421 146.11 cv
122.64 146.11 122.819 146.076 122.96 146.007 cv
123.207 145.885 123.33 145.669 123.33 145.357 cv
123.33 145.126 123.248 144.948 123.083 144.822 cv
122.919 144.697 122.728 144.634 122.509 144.634 cv
122.12 144.634 121.851 144.764 121.701 145.023 cv
121.619 145.166 121.572 145.37 121.562 145.633 cv
120.984 145.633 li
120.984 145.287 121.053 144.993 121.191 144.75 cv
121.43 144.318 121.848 144.102 122.447 144.102 cv
122.921 144.102 123.288 144.207 123.548 144.418 cv
123.807 144.629 123.937 144.935 123.937 145.335 cv
123.937 145.621 123.86 145.852 123.707 146.029 cv
123.611 146.14 123.488 146.226 123.337 146.289 cv
123.581 146.356 123.772 146.485 123.91 146.677 cv
124.047 146.868 124.116 147.103 124.116 147.379 cv
124.116 147.823 123.97 148.184 123.677 148.463 cv
123.385 148.742 122.971 148.882 122.435 148.882 cv
121.885 148.882 121.486 148.731 121.239 148.429 cv
cp
f
126.919 147.947 mo
127.099 147.679 127.189 147.179 127.189 146.448 cv
127.189 145.92 127.124 145.486 126.994 145.145 cv
126.864 144.804 126.611 144.634 126.236 144.634 cv
125.892 144.634 125.64 144.795 125.48 145.119 cv
125.321 145.442 125.242 145.919 125.242 146.548 cv
125.242 147.022 125.292 147.403 125.395 147.691 cv
125.55 148.13 125.817 148.35 126.194 148.35 cv
126.498 148.35 126.739 148.216 126.919 147.947 cv
cp
127.507 144.851 mo
127.714 145.234 127.818 145.759 127.818 146.425 cv
127.818 147.057 127.724 147.58 127.536 147.993 cv
127.263 148.585 126.818 148.882 126.199 148.882 cv
125.641 148.882 125.226 148.64 124.953 148.155 cv
124.726 147.75 124.612 147.208 124.612 146.526 cv
124.612 145.998 124.68 145.545 124.816 145.166 cv
125.072 144.461 125.534 144.108 126.202 144.108 cv
126.804 144.108 127.238 144.356 127.507 144.851 cv
cp
f
130.615 147.947 mo
130.795 147.679 130.885 147.179 130.885 146.448 cv
130.885 145.92 130.82 145.486 130.69 145.145 cv
130.56 144.804 130.308 144.634 129.933 144.634 cv
129.588 144.634 129.336 144.795 129.177 145.119 cv
129.018 145.442 128.938 145.919 128.938 146.548 cv
128.938 147.022 128.989 147.403 129.091 147.691 cv
129.247 148.13 129.513 148.35 129.89 148.35 cv
130.194 148.35 130.436 148.216 130.615 147.947 cv
cp
131.203 144.851 mo
131.411 145.234 131.515 145.759 131.515 146.425 cv
131.515 147.057 131.42 147.58 131.232 147.993 cv
130.959 148.585 130.514 148.882 129.895 148.882 cv
129.337 148.882 128.922 148.64 128.649 148.155 cv
128.422 147.75 128.308 147.208 128.308 146.526 cv
128.308 145.998 128.376 145.545 128.513 145.166 cv
128.768 144.461 129.23 144.108 129.898 144.108 cv
130.5 144.108 130.935 144.356 131.203 144.851 cv
cp
f
144.942 148.429 mo
144.694 148.127 144.57 147.76 144.57 147.328 cv
145.18 147.328 li
145.206 147.628 145.263 147.847 145.349 147.983 cv
145.5 148.228 145.774 148.35 146.17 148.35 cv
146.477 148.35 146.724 148.268 146.91 148.103 cv
147.096 147.938 147.189 147.727 147.189 147.467 cv
147.189 147.147 147.091 146.923 146.896 146.795 cv
146.7 146.667 146.428 146.604 146.079 146.604 cv
146.04 146.604 146.001 146.604 145.961 146.605 cv
145.921 146.606 145.88 146.608 145.839 146.61 cv
145.839 146.094 li
145.899 146.101 145.951 146.105 145.992 146.107 cv
146.033 146.109 146.077 146.11 146.125 146.11 cv
146.343 146.11 146.522 146.076 146.664 146.007 cv
146.91 145.885 147.033 145.669 147.033 145.357 cv
147.033 145.126 146.951 144.948 146.787 144.822 cv
146.622 144.697 146.431 144.634 146.212 144.634 cv
145.823 144.634 145.554 144.764 145.404 145.023 cv
145.322 145.166 145.275 145.37 145.265 145.633 cv
144.687 145.633 li
144.687 145.287 144.756 144.993 144.895 144.75 cv
145.133 144.318 145.551 144.102 146.15 144.102 cv
146.625 144.102 146.991 144.207 147.251 144.418 cv
147.51 144.629 147.64 144.935 147.64 145.335 cv
147.64 145.621 147.563 145.852 147.41 146.029 cv
147.314 146.14 147.191 146.226 147.04 146.289 cv
147.284 146.356 147.475 146.485 147.613 146.677 cv
147.75 146.868 147.819 147.103 147.819 147.379 cv
147.819 147.823 147.673 148.184 147.38 148.463 cv
147.088 148.742 146.674 148.882 146.138 148.882 cv
145.588 148.882 145.189 148.731 144.942 148.429 cv
cp
f
150.699 148.046 mo
150.851 147.84 150.928 147.596 150.928 147.314 cv
150.928 147.077 150.859 146.85 150.723 146.635 cv
150.587 146.419 150.339 146.312 149.98 146.312 cv
149.729 146.312 149.509 146.395 149.319 146.562 cv
149.13 146.728 149.036 146.979 149.036 147.314 cv
149.036 147.609 149.122 147.856 149.293 148.056 cv
149.465 148.256 149.704 148.356 150.009 148.356 cv
150.316 148.356 150.546 148.253 150.699 148.046 cv
cp
151.137 144.493 mo
151.341 144.762 151.443 145.04 151.443 145.325 cv
150.866 145.325 li
150.831 145.141 150.776 144.998 150.7 144.894 cv
150.56 144.699 150.347 144.602 150.061 144.602 cv
149.734 144.602 149.475 144.752 149.282 145.054 cv
149.09 145.356 148.982 145.788 148.961 146.351 cv
149.095 146.154 149.264 146.007 149.467 145.909 cv
149.653 145.823 149.861 145.779 150.09 145.779 cv
150.479 145.779 150.819 145.904 151.109 146.153 cv
151.399 146.401 151.544 146.772 151.544 147.266 cv
151.544 147.688 151.407 148.062 151.132 148.387 cv
150.857 148.713 150.466 148.875 149.957 148.875 cv
149.522 148.875 149.147 148.71 148.831 148.38 cv
148.515 148.051 148.357 147.495 148.357 146.714 cv
148.357 146.136 148.428 145.646 148.568 145.244 cv
148.839 144.474 149.333 144.089 150.051 144.089 cv
150.571 144.089 150.933 144.223 151.137 144.493 cv
cp
f
154.318 147.947 mo
154.498 147.679 154.588 147.179 154.588 146.448 cv
154.588 145.92 154.523 145.486 154.393 145.145 cv
154.263 144.804 154.011 144.634 153.636 144.634 cv
153.291 144.634 153.039 144.795 152.88 145.119 cv
152.721 145.442 152.641 145.919 152.641 146.548 cv
152.641 147.022 152.692 147.403 152.794 147.691 cv
152.95 148.13 153.216 148.35 153.593 148.35 cv
153.897 148.35 154.139 148.216 154.318 147.947 cv
cp
154.906 144.851 mo
155.114 145.234 155.218 145.759 155.218 146.425 cv
155.218 147.057 155.124 147.58 154.936 147.993 cv
154.663 148.585 154.217 148.882 153.598 148.882 cv
153.04 148.882 152.625 148.64 152.352 148.155 cv
152.125 147.75 152.011 147.208 152.011 146.526 cv
152.011 145.998 152.08 145.545 152.216 145.166 cv
152.471 144.461 152.933 144.108 153.602 144.108 cv
154.203 144.108 154.638 144.356 154.906 144.851 cv
cp
f
12.4189 2.146 mo
8.16895 2.146 li
12.4189 30.396 mo
8.16895 30.396 li
12.4189 58.396 mo
8.16895 58.396 li
12.4189 86.396 mo
8.16895 86.396 li
12.4189 114.646 mo
8.16895 114.646 li
12.4189 142.646 mo
8.16895 142.646 li
8.16895 142.646 mo
8.16895 2.146 li
0 0 0 rgb
@
5.66797 144.635 mo
5.84766 144.367 5.93799 143.867 5.93799 143.135 cv
5.93799 142.607 5.87256 142.173 5.74268 141.833 cv
5.61279 141.492 5.36035 141.321 4.98535 141.321 cv
4.64063 141.321 4.38867 141.483 4.22949 141.807 cv
4.07031 142.13 3.99072 142.606 3.99072 143.236 cv
3.99072 143.71 4.0415 144.091 4.14355 144.378 cv
4.29932 144.818 4.56592 145.037 4.94287 145.037 cv
5.24658 145.037 5.48828 144.903 5.66797 144.635 cv
cp
6.25586 141.539 mo
6.46338 141.922 6.56738 142.446 6.56738 143.113 cv
6.56738 143.745 6.47314 144.267 6.28516 144.68 cv
6.01221 145.273 5.56689 145.569 4.94775 145.569 cv
4.38965 145.569 3.97461 145.327 3.70166 144.842 cv
3.47461 144.438 3.36084 143.895 3.36084 143.213 cv
3.36084 142.686 3.4292 142.232 3.56543 141.854 cv
3.8208 141.148 4.28271 140.795 4.95117 140.795 cv
5.55273 140.795 5.9873 141.043 6.25586 141.539 cv
cp
.137255 .121569 .12549 rgb
f
5.74463 116.281 mo
5.89697 116.074 5.97363 115.83 5.97363 115.549 cv
5.97363 115.311 5.90527 115.084 5.76904 114.869 cv
5.63281 114.654 5.38477 114.546 5.02588 114.546 cv
4.7749 114.546 4.55469 114.629 4.36523 114.796 cv
4.17627 114.962 4.08154 115.213 4.08154 115.549 cv
4.08154 115.843 4.16748 116.09 4.33936 116.291 cv
4.51123 116.491 4.75 116.59 5.05518 116.59 cv
5.3623 116.59 5.59229 116.487 5.74463 116.281 cv
cp
6.18262 112.727 mo
6.38721 112.997 6.48926 113.274 6.48926 113.56 cv
5.91162 113.56 li
5.87695 113.375 5.82178 113.232 5.74609 113.128 cv
5.60547 112.933 5.39258 112.836 5.10693 112.836 cv
4.78027 112.836 4.52051 112.987 4.32813 113.289 cv
4.13574 113.59 4.02832 114.022 4.00684 114.585 cv
4.14111 114.388 4.30957 114.241 4.51318 114.144 cv
4.69922 114.057 4.90674 114.014 5.13623 114.014 cv
5.52539 114.014 5.86523 114.138 6.15527 114.387 cv
6.44531 114.636 6.58984 115.007 6.58984 115.5 cv
6.58984 115.922 6.45264 116.296 6.17773 116.622 cv
5.90332 116.947 5.51172 117.11 5.00293 117.11 cv
4.56836 117.11 4.19287 116.945 3.87695 116.615 cv
3.56104 116.285 3.40332 115.729 3.40332 114.948 cv
3.40332 114.371 3.47363 113.881 3.61426 113.479 cv
3.88477 112.708 4.37891 112.323 5.09717 112.323 cv
5.6167 112.323 5.97852 112.458 6.18262 112.727 cv
cp
f
.477051 85.7383 mo
.477051 85.29 li
.898926 85.249 1.19287 85.1807 1.35938 85.084 cv
1.52637 84.9878 1.65039 84.7603 1.73291 84.4009 cv
2.19385 84.4009 li
2.19385 89.0288 li
1.5708 89.0288 li
1.5708 85.7383 li
.477051 85.7383 li
cp
f
3.99316 87.9839 mo
4.13672 87.6875 4.41748 87.418 4.83545 87.1758 cv
5.4585 86.8154 li
5.7373 86.6533 5.93311 86.5146 6.0459 86.3999 cv
6.22314 86.2197 6.31201 86.0142 6.31201 85.7822 cv
6.31201 85.5112 6.23047 85.2959 6.06836 85.1367 cv
5.90625 84.9771 5.68994 84.8975 5.41943 84.8975 cv
5.01904 84.8975 4.74219 85.0493 4.58838 85.353 cv
4.50635 85.5161 4.46094 85.7417 4.45215 86.0303 cv
3.8584 86.0303 li
3.86475 85.6255 3.93945 85.2959 4.08252 85.0405 cv
4.33545 84.5903 4.78223 84.3652 5.42285 84.3652 cv
5.95508 84.3652 6.34375 84.5093 6.58936 84.7969 cv
6.83496 85.085 6.95752 85.4048 6.95752 85.7573 cv
6.95752 86.1299 6.82666 86.4478 6.56494 86.7119 cv
6.41357 86.8652 6.14209 87.0513 5.75049 87.27 cv
5.30566 87.5166 li
5.09375 87.6333 4.92725 87.7446 4.80615 87.8506 cv
4.58984 88.0391 4.45313 88.248 4.39697 88.4771 cv
6.93506 88.4771 li
6.93506 89.0288 li
3.74463 89.0288 li
3.7666 88.6284 3.84912 88.2803 3.99316 87.9839 cv
cp
f
.477051 57.7695 mo
.477051 57.3213 li
.898926 57.2803 1.19287 57.2119 1.35938 57.1152 cv
1.52637 57.019 1.65039 56.7915 1.73291 56.4321 cv
2.19385 56.4321 li
2.19385 61.0601 li
1.5708 61.0601 li
1.5708 57.7695 li
.477051 57.7695 li
cp
f
5.94531 58.1436 mo
6.09033 57.9995 6.1626 57.8276 6.1626 57.6279 cv
6.1626 57.4546 6.09326 57.2954 5.95508 57.1499 cv
5.81689 57.0049 5.60645 56.9321 5.32373 56.9321 cv
5.04297 56.9321 4.83984 57.0049 4.71484 57.1499 cv
4.58936 57.2954 4.52686 57.4653 4.52686 57.6606 cv
4.52686 57.8799 4.60791 58.0508 4.77002 58.1748 cv
4.93164 58.2983 5.12305 58.3599 5.34326 58.3599 cv
5.6001 58.3599 5.80078 58.2881 5.94531 58.1436 cv
cp
6.05371 60.4419 mo
6.23242 60.2959 6.32178 60.0776 6.32178 59.7881 cv
6.32178 59.4873 6.22949 59.2588 6.0459 59.103 cv
5.86182 58.9473 5.62598 58.8696 5.33838 58.8696 cv
5.05908 58.8696 4.83154 58.9492 4.65527 59.1079 cv
4.47852 59.2671 4.39063 59.4873 4.39063 59.7686 cv
4.39063 60.0107 4.47119 60.2202 4.63232 60.3965 cv
4.79346 60.5728 5.04297 60.6606 5.38037 60.6606 cv
5.65088 60.6606 5.87549 60.5879 6.05371 60.4419 cv
cp
4.16992 58.3403 mo
3.99902 58.1675 3.91357 57.9424 3.91357 57.6655 cv
3.91357 57.3193 4.03906 57.022 4.28955 56.7729 cv
4.54004 56.5244 4.896 56.3999 5.35596 56.3999 cv
5.80127 56.3999 6.15039 56.5171 6.40332 56.752 cv
6.65576 56.9868 6.78223 57.2607 6.78223 57.5747 cv
6.78223 57.8647 6.70898 58.0991 6.56201 58.2788 cv
6.47949 58.3804 6.35205 58.48 6.1792 58.5776 cv
6.37256 58.666 6.52441 58.7676 6.63525 58.8823 cv
6.84131 59.0986 6.94482 59.3799 6.94482 59.7261 cv
6.94482 60.1353 6.80713 60.4819 6.53271 60.7666 cv
6.25781 61.0508 5.86914 61.1934 5.36768 61.1934 cv
4.91504 61.1934 4.53271 61.0703 4.22021 60.8247 cv
3.90771 60.5791 3.75146 60.2227 3.75146 59.7554 cv
3.75146 59.481 3.81836 59.2432 3.95264 59.043 cv
4.08643 58.8433 4.28564 58.6899 4.5498 58.584 cv
4.38721 58.5146 4.26074 58.4336 4.16992 58.3403 cv
cp
f
.296875 32.0464 mo
.44043 31.75 .721191 31.4805 1.13916 31.2383 cv
1.76221 30.8779 li
2.04102 30.7158 2.23682 30.5771 2.34961 30.4624 cv
2.52686 30.2822 2.61572 30.0767 2.61572 29.8447 cv
2.61572 29.5737 2.53418 29.3584 2.37207 29.1992 cv
2.20996 29.0396 1.99365 28.96 1.72314 28.96 cv
1.32275 28.96 1.0459 29.1118 .89209 29.4155 cv
.810059 29.5786 .764648 29.8042 .755859 30.0928 cv
.162109 30.0928 li
.168457 29.688 .243164 29.3584 .38623 29.103 cv
.63916 28.6528 1.08594 28.4277 1.72656 28.4277 cv
2.25879 28.4277 2.64746 28.5718 2.89307 28.8594 cv
3.13867 29.1475 3.26123 29.4673 3.26123 29.8198 cv
3.26123 30.1924 3.13037 30.5103 2.86865 30.7744 cv
2.71729 30.9277 2.4458 31.1138 2.0542 31.3325 cv
1.60938 31.5791 li
1.39746 31.6958 1.23096 31.8071 1.10986 31.9131 cv
.893555 32.1016 .756836 32.3105 .700684 32.5396 cv
3.23877 32.5396 li
3.23877 33.0913 li
.0483398 33.0913 li
.0703125 32.6909 .152832 32.3428 .296875 32.0464 cv
cp
f
5.73438 31.4458 mo
5.73438 29.335 li
4.24463 31.4458 li
5.73438 31.4458 li
cp
5.74414 33.0913 mo
5.74414 31.9556 li
3.70605 31.9556 li
3.70605 31.3843 li
5.83496 28.4312 li
6.32813 28.4312 li
6.32813 31.4458 li
7.0127 31.4458 li
7.0127 31.9556 li
6.32813 31.9556 li
6.32813 33.0913 li
5.74414 33.0913 li
cp
f
.371582 4.32764 mo
.123535 4.02588 0 3.65869 0 3.22607 cv
.609863 3.22607 li
.635742 3.52686 .692383 3.74512 .778809 3.88135 cv
.930176 4.12598 1.20361 4.24805 1.59961 4.24805 cv
1.90674 4.24805 2.15381 4.16602 2.33984 4.00146 cv
2.52588 3.83691 2.61865 3.625 2.61865 3.36523 cv
2.61865 3.04541 2.521 2.82129 2.3252 2.69385 cv
2.12939 2.56592 1.85742 2.50195 1.50879 2.50195 cv
1.46973 2.50195 1.43066 2.50293 1.39063 2.50391 cv
1.35059 2.50488 1.31006 2.50635 1.26855 2.50879 cv
1.26855 1.99268 li
1.3291 1.99902 1.38037 2.00342 1.42139 2.00586 cv
1.4624 2.00781 1.50684 2.00879 1.5542 2.00879 cv
1.77295 2.00879 1.95215 1.97412 2.09326 1.90527 cv
2.33984 1.78369 2.46289 1.56738 2.46289 1.25586 cv
2.46289 1.02441 2.38086 .846191 2.21631 .720703 cv
2.05176 .595215 1.86035 .532227 1.64209 .532227 cv
1.25244 .532227 .983398 .662109 .833984 .921875 cv
.751465 1.06445 .705078 1.26807 .694336 1.53174 cv
.116699 1.53174 li
.116699 1.18555 .186035 .891602 .324219 .648926 cv
.5625 .216309 .980957 0 1.58008 0 cv
2.0542 0 2.4209 .105469 2.68066 .316406 cv
2.93994 .527344 3.06982 .833008 3.06982 1.2334 cv
3.06982 1.51904 2.99316 1.75049 2.83936 1.92773 cv
2.74414 2.03809 2.62109 2.12451 2.46973 2.1875 cv
2.71387 2.25439 2.90479 2.38379 3.04248 2.5752 cv
3.17969 2.7666 3.24854 3.00098 3.24854 3.27783 cv
3.24854 3.72119 3.10254 4.08252 2.81006 4.36182 cv
2.51807 4.64063 2.104 4.78027 1.56738 4.78027 cv
1.01758 4.78027 .619141 4.62939 .371582 4.32764 cv
cp
f
6.05176 3.8457 mo
6.23145 3.57764 6.32178 3.07764 6.32178 2.34619 cv
6.32178 1.81836 6.25635 1.38428 6.12646 1.04346 cv
5.99658 .702637 5.74414 .532227 5.36914 .532227 cv
5.02441 .532227 4.77246 .693848 4.61328 1.01758 cv
4.4541 1.34082 4.37451 1.81738 4.37451 2.44678 cv
4.37451 2.9209 4.42529 3.30176 4.52734 3.58936 cv
4.68311 4.02881 4.94971 4.24805 5.32666 4.24805 cv
5.63037 4.24805 5.87207 4.11426 6.05176 3.8457 cv
cp
6.63965 .749512 mo
6.84717 1.13281 6.95117 1.65723 6.95117 2.32373 cv
6.95117 2.95557 6.85693 3.47803 6.66895 3.89111 cv
6.396 4.48389 5.95068 4.78027 5.33154 4.78027 cv
4.77344 4.78027 4.3584 4.53809 4.08545 4.05322 cv
3.8584 3.64893 3.74463 3.10596 3.74463 2.42432 cv
3.74463 1.89648 3.81299 1.44336 3.94922 1.06445 cv
4.20459 .359375 4.6665 .00634766 5.33496 .00634766 cv
5.93652 .00634766 6.37109 .254395 6.63965 .749512 cv
cp
f
[1 2 ] 0 dsh
8.16895 14.396 mo
8.41895 14.396 li
8.91895 14.646 li
9.66895 14.646 li
10.1689 14.896 li
10.4189 14.896 li
10.9189 15.146 li
11.1689 15.396 li
11.6689 15.646 li
12.1689 15.896 li
12.4189 16.146 li
12.9189 16.646 li
13.1689 16.896 li
13.6689 17.146 li
13.9189 17.646 li
14.4189 18.146 li
14.9189 18.646 li
15.1689 18.896 li
15.6689 19.396 li
15.9189 19.896 li
16.4189 20.646 li
16.6689 21.146 li
17.1689 21.646 li
17.6689 22.396 li
17.9189 22.896 li
18.4189 23.646 li
18.6689 24.146 li
19.1689 24.896 li
19.6689 25.646 li
19.9189 26.396 li
20.4189 27.146 li
20.6689 27.896 li
21.1689 28.646 li
21.4189 29.396 li
21.9189 30.146 li
22.4189 30.896 li
22.6689 31.646 li
23.1689 32.646 li
23.4189 33.396 li
23.9189 34.146 li
24.1689 35.146 li
24.6689 35.896 li
25.1689 36.646 li
25.4189 37.646 li
25.9189 38.396 li
26.1689 39.396 li
26.6689 40.146 li
27.1689 41.146 li
27.4189 42.146 li
27.9189 42.896 li
28.1689 43.896 li
28.6689 44.646 li
28.9189 45.646 li
29.4189 46.396 li
29.9189 47.396 li
30.1689 48.396 li
30.6689 49.146 li
30.9189 50.146 li
31.4189 50.896 li
31.6689 51.896 li
32.1689 52.896 li
32.6689 53.646 li
32.9189 54.646 li
33.4189 55.396 li
33.6689 56.396 li
34.1689 57.146 li
34.6689 58.146 li
34.9189 58.896 li
35.4189 59.646 li
35.6689 60.646 li
36.1689 61.396 li
36.4189 62.396 li
36.9189 63.146 li
37.4189 63.896 li
37.6689 64.646 li
38.1689 65.646 li
38.4189 66.396 li
38.9189 67.146 li
39.1689 67.896 li
39.6689 68.646 li
40.1689 69.396 li
40.4189 70.146 li
40.9189 70.896 li
41.1689 71.646 li
41.6689 72.396 li
42.1689 73.146 li
42.4189 73.896 li
42.9189 74.646 li
43.1689 75.396 li
43.6689 76.146 li
43.9189 76.646 li
44.4189 77.396 li
44.9189 78.146 li
45.1689 78.646 li
45.6689 79.396 li
45.9189 79.896 li
46.4189 80.646 li
46.6689 81.146 li
47.1689 81.896 li
47.6689 82.396 li
47.9189 83.146 li
48.4189 83.646 li
48.6689 84.146 li
49.1689 84.646 li
49.6689 85.396 li
49.9189 85.896 li
50.4189 86.396 li
50.6689 86.896 li
51.1689 87.396 li
51.4189 87.896 li
51.9189 88.396 li
52.4189 88.896 li
52.6689 89.396 li
53.1689 89.896 li
53.4189 90.396 li
53.9189 90.896 li
54.1689 91.396 li
54.6689 91.646 li
55.1689 92.146 li
55.4189 92.646 li
55.9189 92.896 li
56.1689 93.396 li
56.6689 93.896 li
57.1689 94.146 li
57.4189 94.646 li
57.9189 94.896 li
58.1689 95.396 li
58.6689 95.646 li
58.9189 95.896 li
59.4189 96.396 li
59.9189 96.646 li
60.1689 96.896 li
60.6689 97.396 li
60.9189 97.646 li
61.4189 97.896 li
61.6689 98.146 li
62.1689 98.396 li
62.6689 98.896 li
62.9189 99.146 li
63.4189 99.396 li
63.6689 99.646 li
64.1689 99.896 li
64.6689 100.146 li
64.9189 100.396 li
65.4189 100.646 li
65.6689 100.646 li
66.1689 100.896 li
66.4189 101.146 li
66.9189 101.396 li
67.4189 101.646 li
67.6689 101.896 li
68.1689 101.896 li
68.4189 102.146 li
68.9189 102.396 li
69.1689 102.396 li
69.6689 102.646 li
70.1689 102.646 li
70.4189 102.896 li
70.9189 103.146 li
71.1689 103.146 li
71.6689 103.396 li
72.4189 103.396 li
72.9189 103.646 li
73.1689 103.646 li
73.6689 103.896 li
74.4189 103.896 li
74.9189 104.146 li
76.4189 104.146 li
76.6689 104.396 li
81.4189 104.396 li
81.9189 104.146 li
83.4189 104.146 li
83.9189 103.896 li
84.6689 103.896 li
85.1689 103.646 li
85.4189 103.646 li
85.9189 103.396 li
86.6689 103.396 li
87.1689 103.146 li
87.4189 103.146 li
87.9189 102.896 li
88.1689 102.646 li
88.6689 102.646 li
88.9189 102.396 li
89.4189 102.396 li
89.9189 102.146 li
90.1689 101.896 li
90.6689 101.896 li
90.9189 101.646 li
91.4189 101.396 li
91.6689 101.146 li
92.1689 100.896 li
92.6689 100.646 li
92.9189 100.646 li
93.4189 100.396 li
93.6689 100.146 li
94.1689 99.896 li
94.6689 99.646 li
94.9189 99.396 li
95.4189 99.146 li
95.6689 98.896 li
96.1689 98.396 li
96.4189 98.146 li
96.9189 97.896 li
97.4189 97.646 li
97.6689 97.396 li
98.1689 96.896 li
98.4189 96.646 li
98.9189 96.396 li
99.1689 95.896 li
99.6689 95.646 li
100.169 95.396 li
100.419 94.896 li
100.919 94.646 li
101.169 94.146 li
101.669 93.896 li
102.169 93.396 li
102.419 92.896 li
102.919 92.646 li
103.169 92.146 li
103.669 91.646 li
103.919 91.396 li
104.419 90.896 li
104.919 90.396 li
105.169 89.896 li
105.669 89.396 li
105.919 88.896 li
106.419 88.396 li
106.669 87.896 li
107.169 87.396 li
107.669 86.896 li
107.919 86.396 li
108.419 85.896 li
108.669 85.396 li
109.169 84.646 li
109.669 84.146 li
109.919 83.646 li
110.419 83.146 li
110.669 82.396 li
111.169 81.896 li
111.419 81.146 li
111.919 80.646 li
112.419 79.896 li
112.669 79.396 li
113.169 78.646 li
113.419 78.146 li
113.919 77.396 li
114.169 76.646 li
114.669 76.146 li
115.169 75.396 li
115.419 74.646 li
115.919 73.896 li
116.169 73.146 li
116.669 72.396 li
117.169 71.646 li
117.419 70.896 li
117.919 70.146 li
118.169 69.396 li
118.669 68.646 li
118.919 67.896 li
119.419 67.146 li
119.919 66.396 li
120.169 65.646 li
120.669 64.646 li
120.919 63.896 li
121.419 63.146 li
121.669 62.396 li
122.169 61.396 li
122.669 60.646 li
122.919 59.646 li
123.419 58.896 li
123.669 58.146 li
124.169 57.146 li
124.669 56.396 li
124.919 55.396 li
125.419 54.646 li
125.669 53.646 li
126.169 52.896 li
126.419 51.896 li
126.919 50.896 li
127.419 50.146 li
127.669 49.146 li
128.169 48.396 li
128.419 47.396 li
128.919 46.396 li
129.169 45.646 li
129.669 44.646 li
130.169 43.896 li
130.419 42.896 li
130.919 42.146 li
131.169 41.146 li
131.669 40.146 li
132.169 39.396 li
132.419 38.396 li
132.919 37.646 li
133.169 36.646 li
133.669 35.896 li
133.919 35.146 li
134.419 34.146 li
134.919 33.396 li
135.169 32.646 li
135.669 31.646 li
135.919 30.896 li
136.419 30.146 li
136.669 29.396 li
137.169 28.646 li
137.669 27.896 li
137.919 27.146 li
138.419 26.396 li
138.669 25.646 li
139.169 24.896 li
139.669 24.146 li
139.919 23.646 li
140.419 22.896 li
140.669 22.396 li
141.169 21.646 li
141.419 21.146 li
141.919 20.646 li
142.419 19.896 li
142.669 19.396 li
143.169 18.896 li
143.419 18.646 li
143.919 18.146 li
144.169 17.646 li
144.669 17.146 li
145.169 16.896 li
145.419 16.646 li
145.919 16.146 li
146.169 15.896 li
146.669 15.646 li
147.169 15.396 li
147.419 15.146 li
147.919 14.896 li
148.169 14.896 li
148.669 14.646 li
149.419 14.646 li
149.919 14.396 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
8.16895 28.646 mo
8.41895 28.646 li
8.91895 28.896 li
9.66895 28.896 li
10.1689 29.146 li
10.4189 29.146 li
10.9189 29.396 li
11.1689 29.646 li
11.6689 29.646 li
12.1689 29.896 li
12.4189 30.146 li
12.9189 30.396 li
13.1689 30.896 li
13.6689 31.146 li
13.9189 31.396 li
14.4189 31.896 li
14.9189 32.146 li
15.1689 32.646 li
15.6689 32.896 li
15.9189 33.396 li
16.4189 33.896 li
16.6689 34.396 li
17.1689 34.896 li
17.6689 35.396 li
17.9189 35.896 li
18.4189 36.396 li
18.6689 37.146 li
19.1689 37.646 li
19.6689 38.146 li
19.9189 38.896 li
20.4189 39.396 li
20.6689 40.146 li
21.1689 40.646 li
21.4189 41.396 li
21.9189 42.146 li
22.4189 42.646 li
22.6689 43.396 li
23.1689 44.146 li
23.4189 44.896 li
23.9189 45.396 li
24.1689 46.146 li
24.6689 46.896 li
25.1689 47.646 li
25.4189 48.396 li
25.9189 49.146 li
26.1689 49.896 li
26.6689 50.646 li
27.1689 51.396 li
27.4189 52.146 li
27.9189 52.896 li
28.1689 53.646 li
28.6689 54.396 li
28.9189 55.146 li
29.4189 56.146 li
29.9189 56.896 li
30.1689 57.646 li
30.6689 58.396 li
30.9189 59.146 li
31.4189 59.896 li
31.6689 60.646 li
32.1689 61.396 li
32.6689 62.146 li
32.9189 62.896 li
33.4189 63.646 li
33.6689 64.396 li
34.1689 65.146 li
34.6689 65.896 li
34.9189 66.646 li
35.4189 67.396 li
35.6689 68.146 li
36.1689 68.896 li
36.4189 69.646 li
36.9189 70.146 li
37.4189 70.896 li
37.6689 71.646 li
38.1689 72.396 li
38.4189 73.146 li
38.9189 73.646 li
39.1689 74.396 li
39.6689 75.146 li
40.1689 75.646 li
40.4189 76.396 li
40.9189 77.146 li
41.1689 77.646 li
41.6689 78.396 li
42.1689 78.896 li
42.4189 79.646 li
42.9189 80.146 li
43.1689 80.896 li
43.6689 81.396 li
43.9189 82.146 li
44.4189 82.646 li
44.9189 83.146 li
45.1689 83.646 li
45.6689 84.396 li
45.9189 84.896 li
46.4189 85.396 li
46.6689 85.896 li
47.1689 86.396 li
47.6689 86.896 li
47.9189 87.646 li
48.4189 88.146 li
48.6689 88.646 li
49.1689 89.146 li
49.6689 89.396 li
49.9189 89.896 li
50.4189 90.396 li
50.6689 90.896 li
51.1689 91.396 li
51.4189 91.896 li
51.9189 92.146 li
52.4189 92.646 li
52.6689 93.146 li
53.1689 93.396 li
53.4189 93.896 li
53.9189 94.396 li
54.1689 94.646 li
54.6689 95.146 li
55.1689 95.396 li
55.4189 95.896 li
55.9189 96.146 li
56.1689 96.646 li
56.6689 96.896 li
57.1689 97.146 li
57.4189 97.646 li
57.9189 97.896 li
58.1689 98.146 li
58.6689 98.646 li
58.9189 98.896 li
59.4189 99.146 li
59.9189 99.396 li
60.1689 99.646 li
60.6689 100.146 li
60.9189 100.396 li
61.4189 100.646 li
61.6689 100.896 li
62.1689 101.146 li
62.6689 101.396 li
62.9189 101.646 li
63.4189 101.896 li
63.6689 102.146 li
64.1689 102.146 li
64.6689 102.396 li
64.9189 102.646 li
65.4189 102.896 li
65.6689 103.146 li
66.1689 103.396 li
66.4189 103.396 li
66.9189 103.646 li
67.4189 103.896 li
67.6689 103.896 li
68.1689 104.146 li
68.4189 104.396 li
68.9189 104.396 li
69.1689 104.646 li
69.6689 104.646 li
70.1689 104.896 li
70.4189 104.896 li
70.9189 105.146 li
71.1689 105.146 li
71.6689 105.396 li
72.4189 105.396 li
72.9189 105.646 li
73.6689 105.646 li
73.9189 105.896 li
74.9189 105.896 li
75.1689 106.146 li
77.6689 106.146 li
77.9189 106.396 li
80.4189 106.396 li
80.6689 106.146 li
83.1689 106.146 li
83.4189 105.896 li
84.1689 105.896 li
84.6689 105.646 li
85.4189 105.646 li
85.9189 105.396 li
86.6689 105.396 li
87.1689 105.146 li
87.4189 105.146 li
87.9189 104.896 li
88.1689 104.896 li
88.6689 104.646 li
88.9189 104.646 li
89.4189 104.396 li
89.9189 104.396 li
90.1689 104.146 li
90.6689 103.896 li
90.9189 103.896 li
91.4189 103.646 li
91.6689 103.396 li
92.1689 103.396 li
92.6689 103.146 li
92.9189 102.896 li
93.4189 102.646 li
93.6689 102.396 li
94.1689 102.146 li
94.6689 102.146 li
94.9189 101.896 li
95.4189 101.646 li
95.6689 101.396 li
96.1689 101.146 li
96.4189 100.896 li
96.9189 100.646 li
97.4189 100.396 li
97.6689 100.146 li
98.1689 99.646 li
98.4189 99.396 li
98.9189 99.146 li
99.1689 98.896 li
99.6689 98.646 li
100.169 98.146 li
100.419 97.896 li
100.919 97.646 li
101.169 97.146 li
101.669 96.896 li
102.169 96.646 li
102.419 96.146 li
102.919 95.896 li
103.169 95.396 li
103.669 95.146 li
103.919 94.646 li
104.419 94.396 li
104.919 93.896 li
105.169 93.396 li
105.669 93.146 li
105.919 92.646 li
106.419 92.146 li
106.669 91.896 li
107.169 91.396 li
107.669 90.896 li
107.919 90.396 li
108.419 89.896 li
108.669 89.396 li
109.169 89.146 li
109.669 88.646 li
109.919 88.146 li
110.419 87.646 li
110.669 86.896 li
111.169 86.396 li
111.419 85.896 li
111.919 85.396 li
112.419 84.896 li
112.669 84.396 li
113.169 83.646 li
113.419 83.146 li
113.919 82.646 li
114.169 82.146 li
114.669 81.396 li
115.169 80.896 li
115.419 80.146 li
115.919 79.646 li
116.169 78.896 li
116.669 78.396 li
117.169 77.646 li
117.419 77.146 li
117.919 76.396 li
118.169 75.646 li
118.669 75.146 li
118.919 74.396 li
119.419 73.646 li
119.919 73.146 li
120.169 72.396 li
120.669 71.646 li
120.919 70.896 li
121.419 70.146 li
121.669 69.646 li
122.169 68.896 li
122.669 68.146 li
122.919 67.396 li
123.419 66.646 li
123.669 65.896 li
124.169 65.146 li
124.669 64.396 li
124.919 63.646 li
125.419 62.896 li
125.669 62.146 li
126.169 61.396 li
126.419 60.646 li
126.919 59.896 li
127.419 59.146 li
127.669 58.396 li
128.169 57.646 li
128.419 56.896 li
128.919 56.146 li
129.169 55.146 li
129.669 54.396 li
130.169 53.646 li
130.419 52.896 li
130.919 52.146 li
131.169 51.396 li
131.669 50.646 li
132.169 49.896 li
132.419 49.146 li
132.919 48.396 li
133.169 47.646 li
133.669 46.896 li
133.919 46.146 li
134.419 45.396 li
134.919 44.896 li
135.169 44.146 li
135.669 43.396 li
135.919 42.646 li
136.419 42.146 li
136.669 41.396 li
137.169 40.646 li
137.669 40.146 li
137.919 39.396 li
138.419 38.896 li
138.669 38.146 li
139.169 37.646 li
139.669 37.146 li
139.919 36.396 li
140.419 35.896 li
140.669 35.396 li
141.169 34.896 li
141.419 34.396 li
141.919 33.896 li
142.419 33.396 li
142.669 32.896 li
143.169 32.646 li
143.419 32.146 li
143.919 31.896 li
144.169 31.396 li
144.669 31.146 li
145.169 30.896 li
145.419 30.396 li
145.919 30.146 li
146.169 29.896 li
146.669 29.646 li
147.169 29.646 li
147.419 29.396 li
147.919 29.146 li
148.169 29.146 li
148.669 28.896 li
149.419 28.896 li
149.919 28.646 li
.6 .545098 .239216 rgb
@
.75 lw
[3 3 ] 0 dsh
8.16895 20.396 mo
8.41895 20.396 li
8.91895 20.646 li
9.66895 20.646 li
10.1689 20.896 li
10.4189 20.896 li
10.9189 21.146 li
11.1689 21.396 li
11.6689 21.646 li
12.1689 21.896 li
12.4189 22.146 li
12.9189 22.396 li
13.1689 22.896 li
13.6689 23.146 li
13.9189 23.646 li
14.4189 23.896 li
14.9189 24.396 li
15.1689 24.896 li
15.6689 25.396 li
15.9189 25.896 li
16.4189 26.396 li
16.6689 26.896 li
17.1689 27.396 li
17.6689 27.896 li
17.9189 28.646 li
18.4189 29.146 li
18.6689 29.896 li
19.1689 30.396 li
19.6689 31.146 li
19.9189 31.896 li
20.4189 32.646 li
20.6689 33.146 li
21.1689 33.896 li
21.4189 34.646 li
21.9189 35.396 li
22.4189 36.146 li
22.6689 36.896 li
23.1689 37.896 li
23.4189 38.646 li
23.9189 39.396 li
24.1689 40.146 li
24.6689 40.896 li
25.1689 41.896 li
25.4189 42.646 li
25.9189 43.396 li
26.1689 44.396 li
26.6689 45.146 li
27.1689 46.146 li
27.4189 46.896 li
27.9189 47.646 li
28.1689 48.646 li
28.6689 49.396 li
28.9189 50.396 li
29.4189 51.146 li
29.9189 52.146 li
30.1689 52.896 li
30.6689 53.896 li
30.9189 54.646 li
31.4189 55.396 li
31.6689 56.396 li
32.1689 57.146 li
32.6689 58.146 li
32.9189 58.896 li
33.4189 59.646 li
33.6689 60.646 li
34.1689 61.396 li
34.6689 62.146 li
34.9189 63.146 li
35.4189 63.896 li
35.6689 64.646 li
36.1689 65.646 li
36.4189 66.396 li
36.9189 67.146 li
37.4189 67.896 li
37.6689 68.646 li
38.1689 69.396 li
38.4189 70.146 li
38.9189 70.896 li
39.1689 71.646 li
39.6689 72.396 li
40.1689 73.146 li
40.4189 73.896 li
40.9189 74.646 li
41.1689 75.396 li
41.6689 76.146 li
42.1689 76.896 li
42.4189 77.646 li
42.9189 78.146 li
43.1689 78.896 li
43.6689 79.646 li
43.9189 80.146 li
44.4189 80.896 li
44.9189 81.396 li
45.1689 82.146 li
45.6689 82.646 li
45.9189 83.396 li
46.4189 83.896 li
46.6689 84.646 li
47.1689 85.146 li
47.6689 85.646 li
47.9189 86.396 li
48.4189 86.896 li
48.6689 87.396 li
49.1689 87.896 li
49.6689 88.396 li
49.9189 89.146 li
50.4189 89.646 li
50.6689 90.146 li
51.1689 90.646 li
51.4189 91.146 li
51.9189 91.646 li
52.4189 91.896 li
52.6689 92.396 li
53.1689 92.896 li
53.4189 93.396 li
53.9189 93.896 li
54.1689 94.146 li
54.6689 94.646 li
55.1689 95.146 li
55.4189 95.396 li
55.9189 95.896 li
56.1689 96.396 li
56.6689 96.646 li
57.1689 97.146 li
57.4189 97.396 li
57.9189 97.896 li
58.1689 98.146 li
58.6689 98.396 li
58.9189 98.896 li
59.4189 99.146 li
59.9189 99.396 li
60.1689 99.896 li
60.6689 100.146 li
60.9189 100.396 li
61.4189 100.646 li
61.6689 100.896 li
62.1689 101.146 li
62.6689 101.396 li
62.9189 101.896 li
63.4189 102.146 li
63.6689 102.396 li
64.1689 102.646 li
64.6689 102.646 li
64.9189 102.896 li
65.4189 103.146 li
65.6689 103.396 li
66.1689 103.646 li
66.4189 103.896 li
66.9189 104.146 li
67.4189 104.146 li
67.6689 104.396 li
68.1689 104.646 li
68.4189 104.646 li
68.9189 104.896 li
69.1689 105.146 li
69.6689 105.146 li
70.1689 105.396 li
70.4189 105.396 li
70.9189 105.646 li
71.1689 105.646 li
71.6689 105.896 li
72.1689 105.896 li
72.4189 106.146 li
73.1689 106.146 li
73.6689 106.396 li
74.4189 106.396 li
74.9189 106.646 li
75.9189 106.646 li
76.4189 106.896 li
81.9189 106.896 li
82.4189 106.646 li
83.4189 106.646 li
83.9189 106.396 li
84.6689 106.396 li
85.1689 106.146 li
85.9189 106.146 li
86.1689 105.896 li
86.6689 105.896 li
87.1689 105.646 li
87.4189 105.646 li
87.9189 105.396 li
88.1689 105.396 li
88.6689 105.146 li
88.9189 105.146 li
89.4189 104.896 li
89.9189 104.646 li
90.1689 104.646 li
90.6689 104.396 li
90.9189 104.146 li
91.4189 104.146 li
91.6689 103.896 li
92.1689 103.646 li
92.6689 103.396 li
92.9189 103.146 li
93.4189 102.896 li
93.6689 102.646 li
94.1689 102.646 li
94.6689 102.396 li
94.9189 102.146 li
95.4189 101.896 li
95.6689 101.396 li
96.1689 101.146 li
96.4189 100.896 li
96.9189 100.646 li
97.4189 100.396 li
97.6689 100.146 li
98.1689 99.896 li
98.4189 99.396 li
98.9189 99.146 li
99.1689 98.896 li
99.6689 98.396 li
100.169 98.146 li
100.419 97.896 li
100.919 97.396 li
101.169 97.146 li
101.669 96.646 li
102.169 96.396 li
102.419 95.896 li
102.919 95.396 li
103.169 95.146 li
103.669 94.646 li
103.919 94.146 li
104.419 93.896 li
104.919 93.396 li
105.169 92.896 li
105.669 92.396 li
105.919 91.896 li
106.419 91.646 li
106.669 91.146 li
107.169 90.646 li
107.669 90.146 li
107.919 89.646 li
108.419 89.146 li
108.669 88.396 li
109.169 87.896 li
109.669 87.396 li
109.919 86.896 li
110.419 86.396 li
110.669 85.646 li
111.169 85.146 li
111.419 84.646 li
111.919 83.896 li
112.419 83.396 li
112.669 82.646 li
113.169 82.146 li
113.419 81.396 li
113.919 80.896 li
114.169 80.146 li
114.669 79.646 li
115.169 78.896 li
115.419 78.146 li
115.919 77.646 li
116.169 76.896 li
116.669 76.146 li
117.169 75.396 li
117.419 74.646 li
117.919 73.896 li
118.169 73.146 li
118.669 72.396 li
118.919 71.646 li
119.419 70.896 li
119.919 70.146 li
120.169 69.396 li
120.669 68.646 li
120.919 67.896 li
121.419 67.146 li
121.669 66.396 li
122.169 65.646 li
122.669 64.646 li
122.919 63.896 li
123.419 63.146 li
123.669 62.146 li
124.169 61.396 li
124.669 60.646 li
124.919 59.646 li
125.419 58.896 li
125.669 58.146 li
126.169 57.146 li
126.419 56.396 li
126.919 55.396 li
127.419 54.646 li
127.669 53.896 li
128.169 52.896 li
128.419 52.146 li
128.919 51.146 li
129.169 50.396 li
129.669 49.396 li
130.169 48.646 li
130.419 47.646 li
130.919 46.896 li
131.169 46.146 li
131.669 45.146 li
132.169 44.396 li
132.419 43.396 li
132.919 42.646 li
133.169 41.896 li
133.669 40.896 li
133.919 40.146 li
134.419 39.396 li
134.919 38.646 li
135.169 37.896 li
135.669 36.896 li
135.919 36.146 li
136.419 35.396 li
136.669 34.646 li
137.169 33.896 li
137.669 33.146 li
137.919 32.646 li
138.419 31.896 li
138.669 31.146 li
139.169 30.396 li
139.669 29.896 li
139.919 29.146 li
140.419 28.646 li
140.669 27.896 li
141.169 27.396 li
141.419 26.896 li
141.919 26.396 li
142.419 25.896 li
142.669 25.396 li
143.169 24.896 li
143.419 24.396 li
143.919 23.896 li
144.169 23.646 li
144.669 23.146 li
145.169 22.896 li
145.419 22.396 li
145.919 22.146 li
146.169 21.896 li
146.669 21.646 li
147.169 21.396 li
147.419 21.146 li
147.919 20.896 li
148.169 20.896 li
148.669 20.646 li
149.419 20.646 li
149.919 20.396 li
.6 .239216 .443137 rgb
@
[3 4 1 4 ] 0 dsh
8.16895 28.646 mo
9.16895 28.646 li
9.66895 28.896 li
10.1689 28.896 li
10.4189 29.146 li
10.9189 29.146 li
11.1689 29.396 li
11.6689 29.646 li
12.1689 29.896 li
12.4189 30.146 li
12.9189 30.396 li
13.1689 30.896 li
13.6689 31.146 li
13.9189 31.396 li
14.4189 31.896 li
14.9189 32.146 li
15.1689 32.646 li
15.6689 33.146 li
15.9189 33.646 li
16.4189 34.146 li
16.6689 34.646 li
17.1689 35.146 li
17.6689 35.646 li
17.9189 36.146 li
18.4189 36.896 li
18.6689 37.396 li
19.1689 38.146 li
19.6689 38.646 li
19.9189 39.396 li
20.4189 39.896 li
20.6689 40.646 li
21.1689 41.396 li
21.4189 42.146 li
21.9189 42.646 li
22.4189 43.396 li
22.6689 44.146 li
23.1689 44.896 li
23.4189 45.646 li
23.9189 46.396 li
24.1689 47.146 li
24.6689 47.896 li
25.1689 48.896 li
25.4189 49.646 li
25.9189 50.396 li
26.1689 51.146 li
26.6689 51.896 li
27.1689 52.646 li
27.4189 53.646 li
27.9189 54.396 li
28.1689 55.146 li
28.6689 55.896 li
28.9189 56.896 li
29.4189 57.646 li
29.9189 58.396 li
30.1689 59.396 li
30.6689 60.146 li
30.9189 60.896 li
31.4189 61.646 li
31.6689 62.646 li
32.1689 63.396 li
32.6689 64.146 li
32.9189 64.896 li
33.4189 65.646 li
33.6689 66.646 li
34.1689 67.396 li
34.6689 68.146 li
34.9189 68.896 li
35.4189 69.646 li
35.6689 70.396 li
36.1689 71.146 li
36.4189 71.896 li
36.9189 72.646 li
37.4189 73.396 li
37.6689 74.146 li
38.1689 74.896 li
38.4189 75.646 li
38.9189 76.396 li
39.1689 77.146 li
39.6689 77.896 li
40.1689 78.646 li
40.4189 79.396 li
40.9189 79.896 li
41.1689 80.646 li
41.6689 81.396 li
42.1689 81.896 li
42.4189 82.646 li
42.9189 83.396 li
43.1689 83.896 li
43.6689 84.646 li
43.9189 85.146 li
44.4189 85.896 li
44.9189 86.396 li
45.1689 87.146 li
45.6689 87.646 li
45.9189 88.146 li
46.4189 88.896 li
46.6689 89.396 li
47.1689 89.896 li
47.6689 90.396 li
47.9189 90.896 li
48.4189 91.646 li
48.6689 92.146 li
49.1689 92.646 li
49.6689 93.146 li
49.9189 93.646 li
50.4189 94.146 li
50.6689 94.646 li
51.1689 95.146 li
51.4189 95.646 li
51.9189 95.896 li
52.4189 96.396 li
52.6689 96.896 li
53.1689 97.396 li
53.4189 97.646 li
53.9189 98.146 li
54.1689 98.646 li
54.6689 98.896 li
55.1689 99.396 li
55.4189 99.896 li
55.9189 100.146 li
56.1689 100.646 li
56.6689 100.896 li
57.1689 101.396 li
57.4189 101.646 li
57.9189 101.896 li
58.1689 102.396 li
58.6689 102.646 li
58.9189 102.896 li
59.4189 103.396 li
59.9189 103.646 li
60.1689 103.896 li
60.6689 104.146 li
60.9189 104.396 li
61.4189 104.646 li
61.6689 104.896 li
62.1689 105.396 li
62.6689 105.646 li
62.9189 105.896 li
63.4189 106.146 li
63.6689 106.396 li
64.1689 106.396 li
64.6689 106.646 li
64.9189 106.896 li
65.4189 107.146 li
65.6689 107.396 li
66.1689 107.646 li
66.4189 107.646 li
66.9189 107.896 li
67.4189 108.146 li
67.6689 108.396 li
68.1689 108.396 li
68.4189 108.646 li
68.9189 108.896 li
69.1689 108.896 li
69.6689 109.146 li
70.1689 109.146 li
70.4189 109.396 li
70.9189 109.396 li
71.1689 109.646 li
71.6689 109.646 li
72.1689 109.896 li
72.9189 109.896 li
73.1689 110.146 li
73.9189 110.146 li
74.4189 110.396 li
75.1689 110.396 li
75.6689 110.646 li
82.6689 110.646 li
83.1689 110.396 li
83.9189 110.396 li
84.1689 110.146 li
85.1689 110.146 li
85.4189 109.896 li
86.1689 109.896 li
86.6689 109.646 li
87.1689 109.646 li
87.4189 109.396 li
87.9189 109.396 li
88.1689 109.146 li
88.6689 109.146 li
88.9189 108.896 li
89.4189 108.896 li
89.9189 108.646 li
90.1689 108.396 li
90.6689 108.396 li
90.9189 108.146 li
91.4189 107.896 li
91.6689 107.646 li
92.1689 107.646 li
92.6689 107.396 li
92.9189 107.146 li
93.4189 106.896 li
93.6689 106.646 li
94.1689 106.396 li
94.6689 106.396 li
94.9189 106.146 li
95.4189 105.896 li
95.6689 105.646 li
96.1689 105.396 li
96.4189 104.896 li
96.9189 104.646 li
97.4189 104.396 li
97.6689 104.146 li
98.1689 103.896 li
98.4189 103.646 li
98.9189 103.396 li
99.1689 102.896 li
99.6689 102.646 li
100.169 102.396 li
100.419 101.896 li
100.919 101.646 li
101.169 101.396 li
101.669 100.896 li
102.169 100.646 li
102.419 100.146 li
102.919 99.896 li
103.169 99.396 li
103.669 98.896 li
103.919 98.646 li
104.419 98.146 li
104.919 97.646 li
105.169 97.396 li
105.669 96.896 li
105.919 96.396 li
106.419 95.896 li
106.669 95.646 li
107.169 95.146 li
107.669 94.646 li
107.919 94.146 li
108.419 93.646 li
108.669 93.146 li
109.169 92.646 li
109.669 92.146 li
109.919 91.646 li
110.419 90.896 li
110.669 90.396 li
111.169 89.896 li
111.419 89.396 li
111.919 88.896 li
112.419 88.146 li
112.669 87.646 li
113.169 87.146 li
113.419 86.396 li
113.919 85.896 li
114.169 85.146 li
114.669 84.646 li
115.169 83.896 li
115.419 83.396 li
115.919 82.646 li
116.169 81.896 li
116.669 81.396 li
117.169 80.646 li
117.419 79.896 li
117.919 79.396 li
118.169 78.646 li
118.669 77.896 li
118.919 77.146 li
119.419 76.396 li
119.919 75.646 li
120.169 74.896 li
120.669 74.146 li
120.919 73.396 li
121.419 72.646 li
121.669 71.896 li
122.169 71.146 li
122.669 70.396 li
122.919 69.646 li
123.419 68.896 li
123.669 68.146 li
124.169 67.396 li
124.669 66.646 li
124.919 65.646 li
125.419 64.896 li
125.669 64.146 li
126.169 63.396 li
126.419 62.646 li
126.919 61.646 li
127.419 60.896 li
127.669 60.146 li
128.169 59.396 li
128.419 58.396 li
128.919 57.646 li
129.169 56.896 li
129.669 55.896 li
130.169 55.146 li
130.419 54.396 li
130.919 53.646 li
131.169 52.646 li
131.669 51.896 li
132.169 51.146 li
132.419 50.396 li
132.919 49.646 li
133.169 48.896 li
133.669 47.896 li
133.919 47.146 li
134.419 46.396 li
134.919 45.646 li
135.169 44.896 li
135.669 44.146 li
135.919 43.396 li
136.419 42.646 li
136.669 42.146 li
137.169 41.396 li
137.669 40.646 li
137.919 39.896 li
138.419 39.396 li
138.669 38.646 li
139.169 38.146 li
139.669 37.396 li
139.919 36.896 li
140.419 36.146 li
140.669 35.646 li
141.169 35.146 li
141.419 34.646 li
141.919 34.146 li
142.419 33.646 li
142.669 33.146 li
143.169 32.646 li
143.419 32.146 li
143.919 31.896 li
144.169 31.396 li
144.669 31.146 li
145.169 30.896 li
145.419 30.396 li
145.919 30.146 li
146.169 29.896 li
146.669 29.646 li
147.169 29.396 li
147.419 29.146 li
147.919 29.146 li
148.169 28.896 li
148.669 28.896 li
148.919 28.646 li
149.919 28.646 li
0 0 0 rgb
@
[] 0 dsh
176.981 142.646 mo
176.981 2.146 li
318.981 2.146 li
318.981 142.646 li
176.981 142.646 li
cp
@
318.981 138.396 mo
318.981 142.646 li
295.231 138.396 mo
295.231 142.646 li
271.731 138.396 mo
271.731 142.646 li
247.981 138.396 mo
247.981 142.646 li
224.231 138.396 mo
224.231 142.646 li
200.481 138.396 mo
200.481 142.646 li
176.981 138.396 mo
176.981 142.646 li
176.981 142.646 mo
318.981 142.646 li
176.981 142.646 mo
176.981 2.146 li
318.981 2.146 li
318.981 142.646 li
176.981 142.646 li
cp
@
177.457 147.947 mo
177.637 147.679 177.727 147.179 177.727 146.448 cv
177.727 145.92 177.662 145.486 177.532 145.145 cv
177.402 144.804 177.149 144.634 176.774 144.634 cv
176.43 144.634 176.178 144.795 176.019 145.119 cv
175.859 145.442 175.78 145.919 175.78 146.548 cv
175.78 147.022 175.831 147.403 175.933 147.691 cv
176.088 148.13 176.355 148.35 176.732 148.35 cv
177.036 148.35 177.277 148.216 177.457 147.947 cv
cp
178.045 144.851 mo
178.252 145.234 178.356 145.759 178.356 146.425 cv
178.356 147.057 178.262 147.58 178.074 147.993 cv
177.801 148.585 177.356 148.882 176.737 148.882 cv
176.179 148.882 175.764 148.64 175.491 148.155 cv
175.264 147.75 175.15 147.208 175.15 146.526 cv
175.15 145.998 175.218 145.545 175.354 145.166 cv
175.61 144.461 176.072 144.108 176.74 144.108 cv
177.342 144.108 177.776 144.356 178.045 144.851 cv
cp
.137255 .121569 .12549 rgb
f
199.341 148.046 mo
199.494 147.84 199.57 147.596 199.57 147.314 cv
199.57 147.077 199.502 146.85 199.366 146.635 cv
199.229 146.419 198.981 146.312 198.623 146.312 cv
198.372 146.312 198.151 146.395 197.962 146.562 cv
197.773 146.728 197.678 146.979 197.678 147.314 cv
197.678 147.609 197.764 147.856 197.936 148.056 cv
198.108 148.256 198.347 148.356 198.652 148.356 cv
198.959 148.356 199.189 148.253 199.341 148.046 cv
cp
199.779 144.493 mo
199.984 144.762 200.086 145.04 200.086 145.325 cv
199.508 145.325 li
199.474 145.141 199.418 144.998 199.343 144.894 cv
199.202 144.699 198.989 144.602 198.704 144.602 cv
198.377 144.602 198.117 144.752 197.925 145.054 cv
197.732 145.356 197.625 145.788 197.604 146.351 cv
197.738 146.154 197.906 146.007 198.11 145.909 cv
198.296 145.823 198.503 145.779 198.733 145.779 cv
199.122 145.779 199.462 145.904 199.752 146.153 cv
200.042 146.401 200.187 146.772 200.187 147.266 cv
200.187 147.688 200.049 148.062 199.774 148.387 cv
199.5 148.713 199.108 148.875 198.6 148.875 cv
198.165 148.875 197.79 148.71 197.474 148.38 cv
197.158 148.051 197 147.495 197 146.714 cv
197 146.136 197.07 145.646 197.211 145.244 cv
197.481 144.474 197.976 144.089 198.694 144.089 cv
199.213 144.089 199.575 144.223 199.779 144.493 cv
cp
f
202.965 147.947 mo
203.145 147.679 203.235 147.179 203.235 146.448 cv
203.235 145.92 203.169 145.486 203.04 145.145 cv
202.91 144.804 202.657 144.634 202.282 144.634 cv
201.938 144.634 201.686 144.795 201.526 145.119 cv
201.367 145.442 201.288 145.919 201.288 146.548 cv
201.288 147.022 201.338 147.403 201.44 147.691 cv
201.596 148.13 201.863 148.35 202.24 148.35 cv
202.543 148.35 202.785 148.216 202.965 147.947 cv
cp
203.553 144.851 mo
203.76 145.234 203.864 145.759 203.864 146.425 cv
203.864 147.057 203.77 147.58 203.582 147.993 cv
203.309 148.585 202.864 148.882 202.245 148.882 cv
201.687 148.882 201.271 148.64 200.999 148.155 cv
200.771 147.75 200.658 147.208 200.658 146.526 cv
200.658 145.998 200.726 145.545 200.862 145.166 cv
201.118 144.461 201.58 144.108 202.248 144.108 cv
202.85 144.108 203.284 144.356 203.553 144.851 cv
cp
f
219.196 145.465 mo
219.196 145.017 li
219.618 144.976 219.912 144.907 220.078 144.811 cv
220.245 144.714 220.369 144.487 220.452 144.127 cv
220.913 144.127 li
220.913 148.755 li
220.29 148.755 li
220.29 145.465 li
219.196 145.465 li
cp
f
222.712 147.71 mo
222.855 147.414 223.136 147.145 223.554 146.902 cv
224.177 146.542 li
224.456 146.38 224.652 146.241 224.765 146.126 cv
224.942 145.946 225.031 145.741 225.031 145.509 cv
225.031 145.238 224.949 145.022 224.787 144.863 cv
224.625 144.704 224.409 144.624 224.138 144.624 cv
223.738 144.624 223.461 144.776 223.307 145.08 cv
223.225 145.243 223.18 145.468 223.171 145.757 cv
222.577 145.757 li
222.583 145.352 222.658 145.022 222.801 144.767 cv
223.054 144.317 223.501 144.092 224.142 144.092 cv
224.674 144.092 225.063 144.236 225.308 144.523 cv
225.554 144.812 225.676 145.131 225.676 145.484 cv
225.676 145.856 225.545 146.174 225.284 146.438 cv
225.132 146.592 224.861 146.778 224.469 146.997 cv
224.024 147.243 li
223.813 147.36 223.646 147.471 223.525 147.577 cv
223.309 147.766 223.172 147.975 223.116 148.204 cv
225.654 148.204 li
225.654 148.755 li
222.463 148.755 li
222.485 148.355 222.568 148.007 222.712 147.71 cv
cp
f
228.467 147.947 mo
228.646 147.679 228.737 147.179 228.737 146.448 cv
228.737 145.92 228.671 145.486 228.542 145.145 cv
228.412 144.804 228.159 144.634 227.784 144.634 cv
227.439 144.634 227.188 144.795 227.028 145.119 cv
226.869 145.442 226.79 145.919 226.79 146.548 cv
226.79 147.022 226.84 147.403 226.942 147.691 cv
227.098 148.13 227.365 148.35 227.742 148.35 cv
228.045 148.35 228.287 148.216 228.467 147.947 cv
cp
229.055 144.851 mo
229.262 145.234 229.366 145.759 229.366 146.425 cv
229.366 147.057 229.272 147.58 229.084 147.993 cv
228.811 148.585 228.366 148.882 227.747 148.882 cv
227.188 148.882 226.773 148.64 226.5 148.155 cv
226.273 147.75 226.16 147.208 226.16 146.526 cv
226.16 145.998 226.228 145.545 226.364 145.166 cv
226.62 144.461 227.082 144.108 227.75 144.108 cv
228.352 144.108 228.786 144.356 229.055 144.851 cv
cp
f
242.891 145.465 mo
242.891 145.017 li
243.313 144.976 243.607 144.907 243.773 144.811 cv
243.94 144.714 244.064 144.487 244.147 144.127 cv
244.608 144.127 li
244.608 148.755 li
243.985 148.755 li
243.985 145.465 li
242.891 145.465 li
cp
f
248.359 145.839 mo
248.505 145.695 248.577 145.523 248.577 145.323 cv
248.577 145.15 248.507 144.991 248.369 144.845 cv
248.231 144.7 248.021 144.627 247.738 144.627 cv
247.457 144.627 247.254 144.7 247.129 144.845 cv
247.003 144.991 246.941 145.161 246.941 145.356 cv
246.941 145.575 247.022 145.746 247.184 145.87 cv
247.346 145.994 247.537 146.055 247.757 146.055 cv
248.014 146.055 248.215 145.983 248.359 145.839 cv
cp
248.468 148.137 mo
248.646 147.991 248.735 147.773 248.735 147.483 cv
248.735 147.183 248.644 146.954 248.46 146.798 cv
248.276 146.643 248.04 146.565 247.752 146.565 cv
247.473 146.565 247.246 146.645 247.069 146.803 cv
246.893 146.962 246.805 147.183 246.805 147.464 cv
246.805 147.706 246.885 147.916 247.046 148.092 cv
247.208 148.268 247.457 148.356 247.794 148.356 cv
248.065 148.356 248.29 148.283 248.468 148.137 cv
cp
246.584 146.036 mo
246.413 145.863 246.328 145.638 246.328 145.361 cv
246.328 145.015 246.453 144.717 246.704 144.468 cv
246.954 144.22 247.31 144.095 247.77 144.095 cv
248.215 144.095 248.564 144.212 248.817 144.447 cv
249.07 144.682 249.196 144.956 249.196 145.27 cv
249.196 145.56 249.123 145.794 248.976 145.974 cv
248.894 146.076 248.767 146.175 248.593 146.273 cv
248.786 146.361 248.938 146.463 249.049 146.578 cv
249.256 146.794 249.358 147.075 249.358 147.421 cv
249.358 147.831 249.222 148.177 248.946 148.462 cv
248.672 148.746 248.283 148.889 247.782 148.889 cv
247.329 148.889 246.947 148.766 246.634 148.52 cv
246.322 148.274 246.166 147.918 246.166 147.451 cv
246.166 147.176 246.232 146.938 246.367 146.738 cv
246.5 146.539 246.7 146.385 246.964 146.279 cv
246.801 146.21 246.675 146.129 246.584 146.036 cv
cp
f
252.162 147.947 mo
252.342 147.679 252.432 147.179 252.432 146.448 cv
252.432 145.92 252.367 145.486 252.237 145.145 cv
252.106 144.804 251.854 144.634 251.479 144.634 cv
251.135 144.634 250.883 144.795 250.724 145.119 cv
250.564 145.442 250.484 145.919 250.484 146.548 cv
250.484 147.022 250.536 147.403 250.638 147.691 cv
250.794 148.13 251.061 148.35 251.438 148.35 cv
251.74 148.35 251.982 148.216 252.162 147.947 cv
cp
252.75 144.851 mo
252.958 145.234 253.062 145.759 253.062 146.425 cv
253.062 147.057 252.968 147.58 252.779 147.993 cv
252.507 148.585 252.061 148.882 251.442 148.882 cv
250.884 148.882 250.469 148.64 250.196 148.155 cv
249.969 147.75 249.855 147.208 249.855 146.526 cv
249.855 145.998 249.923 145.545 250.06 145.166 cv
250.314 144.461 250.776 144.108 251.445 144.108 cv
252.047 144.108 252.481 144.356 252.75 144.851 cv
cp
f
265.938 147.71 mo
266.081 147.414 266.362 147.145 266.779 146.902 cv
267.402 146.542 li
267.682 146.38 267.878 146.241 267.99 146.126 cv
268.167 145.946 268.256 145.741 268.256 145.509 cv
268.256 145.238 268.175 145.022 268.013 144.863 cv
267.851 144.704 267.634 144.624 267.363 144.624 cv
266.964 144.624 266.687 144.776 266.533 145.08 cv
266.45 145.243 266.405 145.468 266.396 145.757 cv
265.803 145.757 li
265.81 145.352 265.884 145.022 266.026 144.767 cv
266.28 144.317 266.727 144.092 267.367 144.092 cv
267.899 144.092 268.288 144.236 268.533 144.523 cv
268.779 144.812 268.902 145.131 268.902 145.484 cv
268.902 145.856 268.771 146.174 268.51 146.438 cv
268.357 146.592 268.086 146.778 267.694 146.997 cv
267.25 147.243 li
267.038 147.36 266.871 147.471 266.75 147.577 cv
266.534 147.766 266.397 147.975 266.342 148.204 cv
268.879 148.204 li
268.879 148.755 li
265.689 148.755 li
265.711 148.355 265.794 148.007 265.938 147.71 cv
cp
f
271.375 147.11 mo
271.375 144.999 li
269.885 147.11 li
271.375 147.11 li
cp
271.385 148.755 mo
271.385 147.62 li
269.347 147.62 li
269.347 147.048 li
271.476 144.095 li
271.969 144.095 li
271.969 147.11 li
272.653 147.11 li
272.653 147.62 li
271.969 147.62 li
271.969 148.755 li
271.385 148.755 li
cp
f
275.389 147.947 mo
275.568 147.679 275.658 147.179 275.658 146.448 cv
275.658 145.92 275.594 145.486 275.464 145.145 cv
275.333 144.804 275.081 144.634 274.706 144.634 cv
274.361 144.634 274.109 144.795 273.95 145.119 cv
273.791 145.442 273.711 145.919 273.711 146.548 cv
273.711 147.022 273.763 147.403 273.864 147.691 cv
274.021 148.13 274.287 148.35 274.664 148.35 cv
274.967 148.35 275.209 148.216 275.389 147.947 cv
cp
275.977 144.851 mo
276.185 145.234 276.288 145.759 276.288 146.425 cv
276.288 147.057 276.194 147.58 276.006 147.993 cv
275.733 148.585 275.287 148.882 274.669 148.882 cv
274.11 148.882 273.695 148.64 273.423 148.155 cv
273.195 147.75 273.082 147.208 273.082 146.526 cv
273.082 145.998 273.149 145.545 273.286 145.166 cv
273.541 144.461 274.003 144.108 274.672 144.108 cv
275.273 144.108 275.708 144.356 275.977 144.851 cv
cp
f
289.723 148.429 mo
289.476 148.127 289.352 147.76 289.352 147.328 cv
289.962 147.328 li
289.987 147.628 290.044 147.847 290.13 147.983 cv
290.281 148.228 290.556 148.35 290.951 148.35 cv
291.259 148.35 291.505 148.268 291.691 148.103 cv
291.877 147.938 291.971 147.727 291.971 147.467 cv
291.971 147.147 291.872 146.923 291.677 146.795 cv
291.48 146.667 291.209 146.604 290.86 146.604 cv
290.821 146.604 290.782 146.604 290.742 146.605 cv
290.702 146.606 290.661 146.608 290.62 146.61 cv
290.62 146.094 li
290.681 146.101 290.731 146.105 290.772 146.107 cv
290.813 146.109 290.858 146.11 290.906 146.11 cv
291.124 146.11 291.304 146.076 291.444 146.007 cv
291.691 145.885 291.814 145.669 291.814 145.357 cv
291.814 145.126 291.732 144.948 291.568 144.822 cv
291.403 144.697 291.212 144.634 290.993 144.634 cv
290.604 144.634 290.335 144.764 290.186 145.023 cv
290.104 145.166 290.057 145.37 290.046 145.633 cv
289.468 145.633 li
289.468 145.287 289.537 144.993 289.676 144.75 cv
289.914 144.318 290.333 144.102 290.932 144.102 cv
291.405 144.102 291.772 144.207 292.032 144.418 cv
292.292 144.629 292.422 144.935 292.422 145.335 cv
292.422 145.621 292.345 145.852 292.191 146.029 cv
292.096 146.14 291.973 146.226 291.821 146.289 cv
292.065 146.356 292.257 146.485 292.394 146.677 cv
292.531 146.868 292.6 147.103 292.6 147.379 cv
292.6 147.823 292.454 148.184 292.162 148.463 cv
291.87 148.742 291.455 148.882 290.919 148.882 cv
290.369 148.882 289.971 148.731 289.723 148.429 cv
cp
f
295.403 147.947 mo
295.583 147.679 295.673 147.179 295.673 146.448 cv
295.673 145.92 295.608 145.486 295.479 145.145 cv
295.348 144.804 295.096 144.634 294.721 144.634 cv
294.376 144.634 294.124 144.795 293.965 145.119 cv
293.806 145.442 293.726 145.919 293.726 146.548 cv
293.726 147.022 293.777 147.403 293.879 147.691 cv
294.035 148.13 294.302 148.35 294.679 148.35 cv
294.981 148.35 295.224 148.216 295.403 147.947 cv
cp
295.991 144.851 mo
296.199 145.234 296.303 145.759 296.303 146.425 cv
296.303 147.057 296.209 147.58 296.021 147.993 cv
295.748 148.585 295.302 148.882 294.684 148.882 cv
294.125 148.882 293.71 148.64 293.438 148.155 cv
293.21 147.75 293.097 147.208 293.097 146.526 cv
293.097 145.998 293.164 145.545 293.301 145.166 cv
293.556 144.461 294.018 144.108 294.687 144.108 cv
295.288 144.108 295.723 144.356 295.991 144.851 cv
cp
f
299.1 147.947 mo
299.279 147.679 299.369 147.179 299.369 146.448 cv
299.369 145.92 299.305 145.486 299.175 145.145 cv
299.044 144.804 298.792 144.634 298.417 144.634 cv
298.072 144.634 297.82 144.795 297.661 145.119 cv
297.502 145.442 297.422 145.919 297.422 146.548 cv
297.422 147.022 297.474 147.403 297.575 147.691 cv
297.731 148.13 297.998 148.35 298.375 148.35 cv
298.678 148.35 298.92 148.216 299.1 147.947 cv
cp
299.688 144.851 mo
299.896 145.234 299.999 145.759 299.999 146.425 cv
299.999 147.057 299.905 147.58 299.717 147.993 cv
299.444 148.585 298.998 148.882 298.38 148.882 cv
297.821 148.882 297.406 148.64 297.134 148.155 cv
296.906 147.75 296.793 147.208 296.793 146.526 cv
296.793 145.998 296.86 145.545 296.997 145.166 cv
297.252 144.461 297.714 144.108 298.383 144.108 cv
298.984 144.108 299.419 144.356 299.688 144.851 cv
cp
f
313.418 148.429 mo
313.171 148.127 313.047 147.76 313.047 147.328 cv
313.657 147.328 li
313.683 147.628 313.739 147.847 313.825 147.983 cv
313.977 148.228 314.251 148.35 314.646 148.35 cv
314.954 148.35 315.2 148.268 315.387 148.103 cv
315.572 147.938 315.666 147.727 315.666 147.467 cv
315.666 147.147 315.567 146.923 315.372 146.795 cv
315.176 146.667 314.904 146.604 314.556 146.604 cv
314.517 146.604 314.478 146.604 314.438 146.605 cv
314.397 146.606 314.356 146.608 314.315 146.61 cv
314.315 146.094 li
314.376 146.101 314.427 146.105 314.468 146.107 cv
314.509 146.109 314.554 146.11 314.602 146.11 cv
314.819 146.11 314.999 146.076 315.14 146.007 cv
315.387 145.885 315.51 145.669 315.51 145.357 cv
315.51 145.126 315.428 144.948 315.264 144.822 cv
315.099 144.697 314.907 144.634 314.688 144.634 cv
314.3 144.634 314.03 144.764 313.881 145.023 cv
313.799 145.166 313.752 145.37 313.741 145.633 cv
313.163 145.633 li
313.163 145.287 313.232 144.993 313.371 144.75 cv
313.609 144.318 314.028 144.102 314.627 144.102 cv
315.101 144.102 315.468 144.207 315.728 144.418 cv
315.987 144.629 316.117 144.935 316.117 145.335 cv
316.117 145.621 316.04 145.852 315.887 146.029 cv
315.791 146.14 315.668 146.226 315.517 146.289 cv
315.761 146.356 315.952 146.485 316.089 146.677 cv
316.227 146.868 316.295 147.103 316.295 147.379 cv
316.295 147.823 316.149 148.184 315.857 148.463 cv
315.565 148.742 315.15 148.882 314.614 148.882 cv
314.064 148.882 313.666 148.731 313.418 148.429 cv
cp
f
319.176 148.046 mo
319.328 147.84 319.404 147.596 319.404 147.314 cv
319.404 147.077 319.336 146.85 319.199 146.635 cv
319.063 146.419 318.815 146.312 318.456 146.312 cv
318.205 146.312 317.985 146.395 317.796 146.562 cv
317.606 146.728 317.512 146.979 317.512 147.314 cv
317.512 147.609 317.598 147.856 317.771 148.056 cv
317.942 148.256 318.181 148.356 318.485 148.356 cv
318.793 148.356 319.022 148.253 319.176 148.046 cv
cp
319.613 144.493 mo
319.818 144.762 319.92 145.04 319.92 145.325 cv
319.343 145.325 li
319.308 145.141 319.253 144.998 319.177 144.894 cv
319.036 144.699 318.823 144.602 318.538 144.602 cv
318.211 144.602 317.951 144.752 317.759 145.054 cv
317.566 145.356 317.459 145.788 317.438 146.351 cv
317.571 146.154 317.74 146.007 317.943 145.909 cv
318.13 145.823 318.338 145.779 318.566 145.779 cv
318.956 145.779 319.296 145.904 319.586 146.153 cv
319.876 146.401 320.021 146.772 320.021 147.266 cv
320.021 147.688 319.884 148.062 319.608 148.387 cv
319.334 148.713 318.942 148.875 318.434 148.875 cv
317.999 148.875 317.624 148.71 317.308 148.38 cv
316.992 148.051 316.834 147.495 316.834 146.714 cv
316.834 146.136 316.904 145.646 317.045 145.244 cv
317.315 144.474 317.81 144.089 318.528 144.089 cv
319.047 144.089 319.409 144.223 319.613 144.493 cv
cp
f
322.795 147.947 mo
322.975 147.679 323.064 147.179 323.064 146.448 cv
323.064 145.92 323 145.486 322.87 145.145 cv
322.739 144.804 322.487 144.634 322.112 144.634 cv
321.768 144.634 321.516 144.795 321.356 145.119 cv
321.197 145.442 321.117 145.919 321.117 146.548 cv
321.117 147.022 321.169 147.403 321.271 147.691 cv
321.427 148.13 321.693 148.35 322.07 148.35 cv
322.373 148.35 322.615 148.216 322.795 147.947 cv
cp
323.383 144.851 mo
323.591 145.234 323.694 145.759 323.694 146.425 cv
323.694 147.057 323.601 147.58 323.412 147.993 cv
323.14 148.585 322.693 148.882 322.075 148.882 cv
321.517 148.882 321.102 148.64 320.829 148.155 cv
320.602 147.75 320.488 147.208 320.488 146.526 cv
320.488 145.998 320.556 145.545 320.692 145.166 cv
320.947 144.461 321.409 144.108 322.078 144.108 cv
322.68 144.108 323.114 144.356 323.383 144.851 cv
cp
f
181.231 2.146 mo
176.981 2.146 li
181.231 37.396 mo
176.981 37.396 li
181.231 72.396 mo
176.981 72.396 li
181.231 107.646 mo
176.981 107.646 li
181.231 142.646 mo
176.981 142.646 li
176.981 142.646 mo
176.981 2.146 li
0 0 0 rgb
@
166.695 143.291 mo
168.324 143.291 li
168.324 143.892 li
166.695 143.892 li
166.695 143.291 li
cp
.137255 .121569 .12549 rgb
f
169.269 142.152 mo
169.269 141.704 li
169.69 141.663 169.984 141.595 170.151 141.498 cv
170.318 141.402 170.442 141.174 170.524 140.815 cv
170.985 140.815 li
170.985 145.443 li
170.362 145.443 li
170.362 142.152 li
169.269 142.152 li
cp
f
174.843 144.635 mo
175.023 144.367 175.113 143.867 175.113 143.135 cv
175.113 142.607 175.048 142.173 174.918 141.833 cv
174.788 141.492 174.536 141.321 174.161 141.321 cv
173.816 141.321 173.564 141.483 173.405 141.807 cv
173.246 142.13 173.166 142.606 173.166 143.236 cv
173.166 143.71 173.217 144.091 173.319 144.378 cv
173.475 144.818 173.741 145.037 174.118 145.037 cv
174.422 145.037 174.664 144.903 174.843 144.635 cv
cp
175.431 141.539 mo
175.639 141.922 175.743 142.446 175.743 143.113 cv
175.743 143.745 175.648 144.267 175.46 144.68 cv
175.188 145.273 174.742 145.569 174.123 145.569 cv
173.565 145.569 173.15 145.327 172.877 144.842 cv
172.65 144.438 172.536 143.895 172.536 143.213 cv
172.536 142.686 172.604 142.232 172.741 141.854 cv
172.996 141.148 173.458 140.795 174.126 140.795 cv
174.728 140.795 175.163 141.043 175.431 141.539 cv
cp
f
170.484 107.736 mo
172.113 107.736 li
172.113 108.337 li
170.484 108.337 li
170.484 107.736 li
cp
f
173.243 108.704 mo
173.281 109.037 173.436 109.267 173.707 109.395 cv
173.845 109.46 174.005 109.492 174.187 109.492 cv
174.533 109.492 174.79 109.382 174.956 109.161 cv
175.123 108.94 175.206 108.696 175.206 108.428 cv
175.206 108.104 175.107 107.853 174.909 107.675 cv
174.711 107.498 174.474 107.409 174.197 107.409 cv
173.995 107.409 173.823 107.448 173.679 107.525 cv
173.535 107.604 173.412 107.712 173.311 107.85 cv
172.804 107.821 li
173.158 105.319 li
175.573 105.319 li
175.573 105.883 li
173.596 105.883 li
173.398 107.175 li
173.506 107.093 173.609 107.031 173.707 106.99 cv
173.879 106.919 174.08 106.883 174.307 106.883 cv
174.733 106.883 175.094 107.021 175.391 107.295 cv
175.687 107.57 175.835 107.918 175.835 108.34 cv
175.835 108.779 175.7 109.167 175.428 109.502 cv
175.157 109.837 174.723 110.005 174.128 110.005 cv
173.75 110.005 173.415 109.898 173.124 109.686 cv
172.833 109.472 172.67 109.145 172.636 108.704 cv
173.243 108.704 li
cp
f
174.621 74.4707 mo
174.801 74.2026 174.891 73.7026 174.891 72.9712 cv
174.891 72.4434 174.826 72.0093 174.696 71.6685 cv
174.566 71.3276 174.313 71.1572 173.938 71.1572 cv
173.594 71.1572 173.342 71.3188 173.183 71.6426 cv
173.023 71.9658 172.944 72.4424 172.944 73.0718 cv
172.944 73.5459 172.995 73.9268 173.097 74.2144 cv
173.252 74.6538 173.519 74.873 173.896 74.873 cv
174.2 74.873 174.441 74.7393 174.621 74.4707 cv
cp
175.209 71.3745 mo
175.417 71.7578 175.521 72.2822 175.521 72.9487 cv
175.521 73.5806 175.426 74.103 175.238 74.5161 cv
174.965 75.1089 174.52 75.4053 173.901 75.4053 cv
173.343 75.4053 172.928 75.1631 172.655 74.6782 cv
172.428 74.2739 172.314 73.731 172.314 73.0493 cv
172.314 72.5215 172.382 72.0684 172.519 71.6895 cv
172.774 70.9844 173.236 70.6313 173.904 70.6313 cv
174.506 70.6313 174.94 70.8794 175.209 71.3745 cv
cp
f
172.928 38.0708 mo
172.966 38.4038 173.121 38.6343 173.392 38.7622 cv
173.53 38.8271 173.69 38.8594 173.872 38.8594 cv
174.218 38.8594 174.475 38.749 174.641 38.5283 cv
174.808 38.3076 174.891 38.0635 174.891 37.7949 cv
174.891 37.4707 174.792 37.2197 174.594 37.042 cv
174.396 36.8647 174.159 36.7759 173.882 36.7759 cv
173.68 36.7759 173.508 36.8149 173.364 36.8926 cv
173.22 36.9707 173.097 37.0791 172.996 37.2173 cv
172.489 37.188 li
172.843 34.686 li
175.258 34.686 li
175.258 35.2505 li
173.281 35.2505 li
173.083 36.5425 li
173.191 36.46 173.294 36.3984 173.392 36.3574 cv
173.564 36.2861 173.765 36.25 173.992 36.25 cv
174.418 36.25 174.779 36.3877 175.076 36.6626 cv
175.372 36.937 175.521 37.2856 175.521 37.7075 cv
175.521 38.1465 175.385 38.5337 175.113 38.8691 cv
174.842 39.2046 174.408 39.3721 173.813 39.3721 cv
173.435 39.3721 173.1 39.2656 172.809 39.0527 cv
172.518 38.8394 172.355 38.5122 172.321 38.0708 cv
172.928 38.0708 li
cp
f
169.422 1.36328 mo
169.422 .915039 li
169.844 .874023 170.138 .805664 170.305 .708984 cv
170.472 .612793 170.596 .385254 170.678 .0258789 cv
171.139 .0258789 li
171.139 4.65381 li
170.516 4.65381 li
170.516 1.36328 li
169.422 1.36328 li
cp
f
174.997 3.8457 mo
175.177 3.57764 175.267 3.07764 175.267 2.34619 cv
175.267 1.81836 175.202 1.38428 175.072 1.04346 cv
174.942 .702637 174.689 .532227 174.314 .532227 cv
173.97 .532227 173.718 .693848 173.559 1.01758 cv
173.399 1.34082 173.32 1.81738 173.32 2.44678 cv
173.32 2.9209 173.371 3.30176 173.473 3.58936 cv
173.628 4.02881 173.895 4.24805 174.272 4.24805 cv
174.576 4.24805 174.817 4.11426 174.997 3.8457 cv
cp
175.585 .749512 mo
175.792 1.13281 175.896 1.65723 175.896 2.32373 cv
175.896 2.95557 175.802 3.47803 175.614 3.89111 cv
175.341 4.48389 174.896 4.78027 174.277 4.78027 cv
173.719 4.78027 173.304 4.53809 173.031 4.05322 cv
172.804 3.64893 172.69 3.10596 172.69 2.42432 cv
172.69 1.89648 172.758 1.44336 172.895 1.06445 cv
173.15 .359375 173.612 .00634766 174.28 .00634766 cv
174.882 .00634766 175.316 .254395 175.585 .749512 cv
cp
f
[1 2 ] 0 dsh
176.981 72.396 mo
177.231 71.646 li
177.731 70.896 li
177.981 69.896 li
178.481 69.146 li
178.981 68.396 li
179.231 67.646 li
179.731 66.896 li
179.981 66.146 li
180.481 65.146 li
180.731 64.396 li
181.231 63.646 li
181.731 62.896 li
181.981 62.146 li
182.481 61.396 li
182.731 60.646 li
183.231 59.896 li
183.481 59.146 li
183.981 58.646 li
184.481 57.896 li
184.731 57.146 li
185.231 56.396 li
185.481 55.896 li
185.981 55.146 li
186.481 54.646 li
186.731 53.896 li
187.231 53.396 li
187.481 52.646 li
187.981 52.146 li
188.231 51.646 li
188.731 51.146 li
189.231 50.646 li
189.481 50.146 li
189.981 49.646 li
190.231 49.146 li
190.731 48.646 li
190.981 48.146 li
191.481 47.646 li
191.981 47.146 li
192.231 46.896 li
192.731 46.396 li
192.981 46.146 li
193.481 45.646 li
193.981 45.396 li
194.231 45.146 li
194.731 44.896 li
194.981 44.396 li
195.481 44.146 li
195.731 43.896 li
196.231 43.646 li
196.731 43.396 li
196.981 43.396 li
197.481 43.146 li
197.731 42.896 li
198.231 42.646 li
198.481 42.646 li
198.981 42.396 li
199.481 42.396 li
199.731 42.146 li
200.981 42.146 li
201.481 41.896 li
204.481 41.896 li
204.981 42.146 li
205.731 42.146 li
205.981 42.396 li
206.981 42.396 li
207.231 42.646 li
207.731 42.646 li
207.981 42.896 li
208.481 42.896 li
208.981 43.146 li
209.231 43.396 li
209.731 43.396 li
209.981 43.646 li
210.481 43.896 li
210.731 43.896 li
211.231 44.146 li
211.731 44.396 li
211.981 44.646 li
212.481 44.896 li
212.731 44.896 li
213.231 45.146 li
213.481 45.396 li
213.981 45.646 li
214.481 45.896 li
214.731 46.146 li
215.231 46.396 li
215.481 46.646 li
215.981 46.896 li
216.481 47.146 li
216.731 47.396 li
217.231 47.646 li
217.481 47.896 li
217.981 48.146 li
218.231 48.646 li
218.731 48.896 li
219.231 49.146 li
219.481 49.396 li
219.981 49.646 li
220.231 49.896 li
220.731 50.146 li
220.981 50.646 li
221.481 50.896 li
221.981 51.146 li
222.231 51.396 li
222.731 51.646 li
222.981 52.146 li
223.481 52.396 li
223.981 52.646 li
224.231 52.896 li
224.731 53.396 li
224.981 53.646 li
225.481 53.896 li
225.731 54.146 li
226.231 54.646 li
226.731 54.896 li
226.981 55.146 li
227.481 55.396 li
227.731 55.896 li
228.231 56.146 li
228.481 56.396 li
228.981 56.896 li
229.481 57.146 li
229.731 57.396 li
230.231 57.646 li
230.481 58.146 li
230.981 58.396 li
231.481 58.646 li
231.731 59.146 li
232.231 59.396 li
232.481 59.646 li
232.981 60.146 li
233.231 60.396 li
233.731 60.646 li
234.231 60.896 li
234.481 61.396 li
234.981 61.646 li
235.231 61.896 li
235.731 62.396 li
235.981 62.646 li
236.481 62.896 li
236.981 63.396 li
237.231 63.646 li
237.731 63.896 li
237.981 64.396 li
238.481 64.646 li
238.981 64.896 li
239.231 65.146 li
239.731 65.646 li
239.981 65.896 li
240.481 66.146 li
240.731 66.646 li
241.231 66.896 li
241.731 67.146 li
241.981 67.646 li
242.481 67.896 li
242.731 68.146 li
243.231 68.646 li
243.481 68.896 li
243.981 69.146 li
244.481 69.396 li
244.731 69.896 li
245.231 70.146 li
245.481 70.396 li
245.981 70.896 li
246.481 71.146 li
246.731 71.396 li
247.231 71.896 li
247.481 72.146 li
247.981 72.396 li
248.231 72.646 li
248.731 73.146 li
249.231 73.396 li
249.481 73.646 li
249.981 74.146 li
250.231 74.396 li
250.731 74.646 li
250.981 75.146 li
251.481 75.396 li
251.981 75.646 li
252.231 76.146 li
252.731 76.396 li
252.981 76.646 li
253.481 76.896 li
253.981 77.396 li
254.231 77.646 li
254.731 77.896 li
254.981 78.396 li
255.481 78.646 li
255.731 78.896 li
256.231 79.396 li
256.731 79.646 li
256.981 79.896 li
257.481 80.146 li
257.731 80.646 li
258.231 80.896 li
258.481 81.146 li
258.981 81.646 li
259.481 81.896 li
259.731 82.146 li
260.231 82.646 li
260.481 82.896 li
260.981 83.146 li
261.481 83.646 li
261.731 83.896 li
262.231 84.146 li
262.481 84.396 li
262.981 84.896 li
263.231 85.146 li
263.731 85.396 li
264.231 85.896 li
264.481 86.146 li
264.981 86.396 li
265.231 86.896 li
265.731 87.146 li
265.981 87.396 li
266.481 87.646 li
266.981 88.146 li
267.231 88.396 li
267.731 88.646 li
267.981 89.146 li
268.481 89.396 li
268.981 89.646 li
269.231 89.896 li
269.731 90.396 li
269.981 90.646 li
270.481 90.896 li
270.731 91.146 li
271.231 91.646 li
271.731 91.896 li
271.981 92.146 li
272.481 92.396 li
272.731 92.896 li
273.231 93.146 li
273.481 93.396 li
273.981 93.646 li
274.481 94.146 li
274.731 94.396 li
275.231 94.646 li
275.481 94.896 li
275.981 95.146 li
276.481 95.396 li
276.731 95.896 li
277.231 96.146 li
277.481 96.396 li
277.981 96.646 li
278.231 96.896 li
278.731 97.146 li
279.231 97.396 li
279.481 97.646 li
279.981 97.896 li
280.231 98.146 li
280.731 98.396 li
280.981 98.646 li
281.481 98.896 li
281.981 99.146 li
282.231 99.396 li
282.731 99.646 li
282.981 99.896 li
283.481 100.146 li
283.981 100.396 li
284.231 100.396 li
284.731 100.646 li
284.981 100.896 li
285.481 101.146 li
285.731 101.146 li
286.231 101.396 li
286.731 101.646 li
286.981 101.646 li
287.481 101.896 li
287.731 102.146 li
288.231 102.146 li
288.481 102.396 li
289.481 102.396 li
289.731 102.646 li
290.481 102.646 li
290.981 102.896 li
295.231 102.896 li
295.731 102.646 li
295.981 102.646 li
296.481 102.396 li
296.981 102.396 li
297.231 102.146 li
297.731 102.146 li
297.981 101.896 li
298.481 101.646 li
298.981 101.646 li
299.231 101.396 li
299.731 101.146 li
299.981 100.896 li
300.481 100.646 li
300.731 100.396 li
301.231 100.146 li
301.731 99.896 li
301.981 99.396 li
302.481 99.146 li
302.731 98.646 li
303.231 98.396 li
303.481 97.896 li
303.981 97.646 li
304.481 97.146 li
304.731 96.646 li
305.231 96.396 li
305.481 95.896 li
305.981 95.396 li
306.481 94.896 li
306.731 94.396 li
307.231 93.896 li
307.481 93.146 li
307.981 92.646 li
308.231 92.146 li
308.731 91.646 li
309.231 90.896 li
309.481 90.396 li
309.981 89.646 li
310.231 89.146 li
310.731 88.396 li
310.981 87.646 li
311.481 86.896 li
311.981 86.396 li
312.231 85.646 li
312.731 84.896 li
312.981 84.146 li
313.481 83.396 li
313.981 82.646 li
314.231 81.896 li
314.731 81.146 li
314.981 80.396 li
315.481 79.646 li
315.731 78.896 li
316.231 78.146 li
316.731 77.146 li
316.981 76.396 li
317.481 75.646 li
317.731 74.896 li
318.231 74.146 li
318.481 73.146 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
176.981 72.396 mo
177.231 71.896 li
177.731 71.396 li
177.981 70.896 li
178.481 70.396 li
178.981 69.646 li
179.231 69.146 li
179.731 68.646 li
179.981 68.146 li
180.481 67.646 li
180.731 67.146 li
181.231 66.646 li
181.731 66.146 li
181.981 65.646 li
182.481 65.146 li
182.731 64.646 li
183.231 64.146 li
183.481 63.646 li
183.981 63.146 li
184.481 62.646 li
184.731 62.396 li
185.231 61.896 li
185.481 61.396 li
185.981 60.896 li
186.481 60.646 li
186.731 60.146 li
187.231 59.646 li
187.481 59.396 li
187.981 58.896 li
188.231 58.646 li
188.731 58.146 li
189.231 57.896 li
189.481 57.396 li
189.981 57.146 li
190.231 56.896 li
190.731 56.646 li
190.981 56.146 li
191.481 55.896 li
191.981 55.646 li
192.231 55.396 li
192.731 55.146 li
192.981 54.896 li
193.481 54.646 li
193.981 54.396 li
194.231 54.146 li
194.731 54.146 li
194.981 53.896 li
195.481 53.646 li
195.731 53.396 li
196.231 53.396 li
196.731 53.146 li
196.981 53.146 li
197.481 52.896 li
197.731 52.896 li
198.231 52.646 li
198.481 52.646 li
198.981 52.396 li
200.231 52.396 li
200.481 52.146 li
205.231 52.146 li
205.731 52.396 li
206.981 52.396 li
207.231 52.646 li
207.981 52.646 li
208.481 52.896 li
208.981 52.896 li
209.231 53.146 li
209.981 53.146 li
210.481 53.396 li
210.731 53.396 li
211.231 53.646 li
211.731 53.646 li
211.981 53.896 li
212.481 54.146 li
212.731 54.146 li
213.231 54.396 li
213.481 54.396 li
213.981 54.646 li
214.481 54.896 li
214.731 54.896 li
215.231 55.146 li
215.481 55.396 li
215.981 55.396 li
216.481 55.646 li
216.731 55.896 li
217.231 55.896 li
217.481 56.146 li
217.981 56.396 li
218.231 56.646 li
218.731 56.646 li
219.231 56.896 li
219.481 57.146 li
219.981 57.396 li
220.231 57.396 li
220.731 57.646 li
220.981 57.896 li
221.481 58.146 li
221.981 58.146 li
222.231 58.396 li
222.731 58.646 li
222.981 58.896 li
223.481 59.146 li
223.981 59.396 li
224.231 59.396 li
224.731 59.646 li
224.981 59.896 li
225.481 60.146 li
225.731 60.396 li
226.231 60.646 li
226.731 60.646 li
226.981 60.896 li
227.481 61.146 li
227.731 61.396 li
228.231 61.646 li
228.481 61.896 li
228.981 62.146 li
229.481 62.146 li
229.731 62.396 li
230.231 62.646 li
230.481 62.896 li
230.981 63.146 li
231.481 63.396 li
231.731 63.646 li
232.231 63.646 li
232.481 63.896 li
232.981 64.146 li
233.231 64.396 li
233.731 64.646 li
234.231 64.896 li
234.481 65.146 li
234.981 65.146 li
235.231 65.396 li
235.731 65.646 li
235.981 65.896 li
236.481 66.146 li
236.981 66.396 li
237.231 66.646 li
237.731 66.896 li
237.981 66.896 li
238.481 67.146 li
238.981 67.396 li
239.231 67.646 li
239.731 67.896 li
239.981 68.146 li
240.481 68.396 li
240.731 68.646 li
241.231 68.646 li
241.731 68.896 li
241.981 69.146 li
242.481 69.396 li
242.731 69.646 li
243.231 69.896 li
243.481 70.146 li
243.981 70.146 li
244.481 70.396 li
244.731 70.646 li
245.231 70.896 li
245.481 71.146 li
245.981 71.396 li
246.481 71.646 li
246.731 71.896 li
247.231 71.896 li
247.481 72.146 li
247.981 72.396 li
248.231 72.646 li
248.731 72.896 li
249.231 73.146 li
249.481 73.396 li
249.981 73.646 li
250.231 73.646 li
250.731 73.896 li
250.981 74.146 li
251.481 74.396 li
251.981 74.646 li
252.231 74.896 li
252.731 75.146 li
252.981 75.146 li
253.481 75.396 li
253.981 75.646 li
254.231 75.896 li
254.731 76.146 li
254.981 76.396 li
255.481 76.646 li
255.731 76.896 li
256.231 76.896 li
256.731 77.146 li
256.981 77.396 li
257.481 77.646 li
257.731 77.896 li
258.231 78.146 li
258.481 78.396 li
258.981 78.396 li
259.481 78.646 li
259.731 78.896 li
260.231 79.146 li
260.481 79.396 li
260.981 79.646 li
261.481 79.896 li
261.731 80.146 li
262.231 80.146 li
262.481 80.396 li
262.981 80.646 li
263.231 80.896 li
263.731 81.146 li
264.231 81.396 li
264.481 81.646 li
264.981 81.896 li
265.231 81.896 li
265.731 82.146 li
265.981 82.396 li
266.481 82.646 li
266.981 82.896 li
267.231 83.146 li
267.731 83.396 li
267.981 83.396 li
268.481 83.646 li
268.981 83.896 li
269.231 84.146 li
269.731 84.396 li
269.981 84.646 li
270.481 84.646 li
270.731 84.896 li
271.231 85.146 li
271.731 85.396 li
271.981 85.646 li
272.481 85.896 li
272.731 85.896 li
273.231 86.146 li
273.481 86.396 li
273.981 86.646 li
274.481 86.896 li
274.731 86.896 li
275.231 87.146 li
275.481 87.396 li
275.981 87.646 li
276.481 87.896 li
276.731 87.896 li
277.231 88.146 li
277.481 88.396 li
277.981 88.646 li
278.231 88.646 li
278.731 88.896 li
279.231 89.146 li
279.481 89.146 li
279.981 89.396 li
280.231 89.646 li
280.731 89.646 li
280.981 89.896 li
281.481 90.146 li
281.981 90.146 li
282.231 90.396 li
282.731 90.646 li
282.981 90.646 li
283.481 90.896 li
283.981 90.896 li
284.231 91.146 li
284.731 91.146 li
284.981 91.396 li
285.481 91.396 li
285.731 91.646 li
286.231 91.646 li
286.731 91.896 li
286.981 91.896 li
287.481 92.146 li
288.231 92.146 li
288.481 92.396 li
289.731 92.396 li
290.231 92.646 li
295.981 92.646 li
296.481 92.396 li
297.231 92.396 li
297.731 92.146 li
297.981 92.146 li
298.481 91.896 li
298.981 91.896 li
299.231 91.646 li
299.731 91.646 li
299.981 91.396 li
300.481 91.146 li
300.731 91.146 li
301.231 90.896 li
301.731 90.646 li
301.981 90.396 li
302.481 90.146 li
302.731 89.896 li
303.231 89.646 li
303.481 89.396 li
303.981 89.146 li
304.481 88.896 li
304.731 88.646 li
305.231 88.396 li
305.481 87.896 li
305.981 87.646 li
306.481 87.396 li
306.731 86.896 li
307.231 86.646 li
307.481 86.396 li
307.981 85.896 li
308.231 85.646 li
308.731 85.146 li
309.231 84.646 li
309.481 84.396 li
309.981 83.896 li
310.231 83.396 li
310.731 83.146 li
310.981 82.646 li
311.481 82.146 li
311.981 81.646 li
312.231 81.146 li
312.731 80.646 li
312.981 80.146 li
313.481 79.646 li
313.981 79.146 li
314.231 78.646 li
314.731 78.146 li
314.981 77.646 li
315.481 77.146 li
315.731 76.646 li
316.231 76.146 li
316.731 75.646 li
316.981 75.146 li
317.481 74.646 li
317.731 74.146 li
318.231 73.396 li
318.481 72.896 li
.6 .545098 .239216 rgb
@
.75 lw
[3 3 ] 0 dsh
176.981 72.396 mo
177.231 71.896 li
177.731 71.146 li
177.981 70.646 li
178.481 69.896 li
178.981 69.396 li
179.231 68.646 li
179.731 68.146 li
179.981 67.396 li
180.481 66.896 li
180.731 66.396 li
181.231 65.646 li
181.731 65.146 li
181.981 64.646 li
182.481 63.896 li
182.731 63.396 li
183.231 62.896 li
183.481 62.146 li
183.981 61.646 li
184.481 61.146 li
184.731 60.646 li
185.231 60.146 li
185.481 59.646 li
185.981 59.146 li
186.481 58.646 li
186.731 58.146 li
187.231 57.646 li
187.481 57.146 li
187.981 56.896 li
188.231 56.396 li
188.731 55.896 li
189.231 55.646 li
189.481 55.146 li
189.981 54.646 li
190.231 54.396 li
190.731 53.896 li
190.981 53.646 li
191.481 53.396 li
191.981 52.896 li
192.231 52.646 li
192.731 52.396 li
192.981 52.146 li
193.481 51.896 li
193.981 51.646 li
194.231 51.396 li
194.731 51.146 li
194.981 50.896 li
195.481 50.646 li
195.731 50.396 li
196.231 50.396 li
196.731 50.146 li
196.981 49.896 li
197.481 49.896 li
197.731 49.646 li
198.231 49.646 li
198.481 49.396 li
198.981 49.396 li
199.481 49.146 li
200.231 49.146 li
200.481 48.896 li
204.981 48.896 li
205.231 49.146 li
206.481 49.146 li
206.981 49.396 li
207.731 49.396 li
207.981 49.646 li
208.481 49.646 li
208.981 49.896 li
209.231 49.896 li
209.731 50.146 li
209.981 50.146 li
210.481 50.396 li
210.731 50.396 li
211.231 50.646 li
211.731 50.896 li
211.981 50.896 li
212.481 51.146 li
212.731 51.146 li
213.231 51.396 li
213.481 51.646 li
213.981 51.896 li
214.481 51.896 li
214.731 52.146 li
215.231 52.396 li
215.481 52.646 li
215.981 52.646 li
216.481 52.896 li
216.731 53.146 li
217.231 53.396 li
217.481 53.646 li
217.981 53.646 li
218.231 53.896 li
218.731 54.146 li
219.231 54.396 li
219.481 54.646 li
219.981 54.896 li
220.231 55.146 li
220.731 55.396 li
220.981 55.646 li
221.481 55.646 li
221.981 55.896 li
222.231 56.146 li
222.731 56.396 li
222.981 56.646 li
223.481 56.896 li
223.981 57.146 li
224.231 57.396 li
224.731 57.646 li
224.981 57.896 li
225.481 58.146 li
225.731 58.396 li
226.231 58.646 li
226.731 58.896 li
226.981 59.146 li
227.481 59.396 li
227.731 59.646 li
228.231 59.896 li
228.481 60.146 li
228.981 60.396 li
229.481 60.646 li
229.731 60.896 li
230.231 61.146 li
230.481 61.396 li
230.981 61.646 li
231.481 61.896 li
231.731 62.146 li
232.231 62.396 li
232.481 62.646 li
232.981 62.896 li
233.231 63.146 li
233.731 63.396 li
234.231 63.646 li
234.481 63.896 li
234.981 64.146 li
235.231 64.396 li
235.731 64.646 li
235.981 64.896 li
236.481 65.146 li
236.981 65.396 li
237.231 65.646 li
237.731 65.896 li
237.981 66.146 li
238.481 66.396 li
238.981 66.646 li
239.231 66.896 li
239.731 67.146 li
239.981 67.396 li
240.481 67.646 li
240.731 67.896 li
241.231 68.146 li
241.731 68.396 li
241.981 68.646 li
242.481 68.896 li
242.731 69.146 li
243.231 69.396 li
243.481 69.646 li
243.981 69.896 li
244.481 70.146 li
244.731 70.396 li
245.231 70.646 li
245.481 70.896 li
245.981 71.146 li
246.481 71.396 li
246.731 71.646 li
247.231 71.896 li
247.481 72.1455 li
247.981 72.3955 li
248.231 72.6455 li
248.731 72.8955 li
249.231 73.1455 li
249.481 73.3955 li
249.981 73.6455 li
250.231 73.8955 li
250.731 74.1455 li
250.981 74.3955 li
251.481 74.646 li
251.981 74.896 li
252.231 75.146 li
252.731 75.396 li
252.981 75.646 li
253.481 75.896 li
253.981 76.146 li
254.231 76.396 li
254.731 76.646 li
254.981 76.896 li
255.481 77.146 li
255.731 77.396 li
256.231 77.646 li
256.731 77.896 li
256.981 78.146 li
257.481 78.396 li
257.731 78.646 li
258.231 78.896 li
258.481 79.146 li
258.981 79.396 li
259.481 79.646 li
259.731 79.896 li
260.231 80.146 li
260.481 80.396 li
260.981 80.646 li
261.481 80.896 li
261.731 81.146 li
262.231 81.396 li
262.481 81.646 li
262.981 81.896 li
263.231 82.146 li
263.731 82.396 li
264.231 82.646 li
264.481 82.896 li
264.981 83.146 li
265.231 83.396 li
265.731 83.646 li
265.981 83.896 li
266.481 84.146 li
266.981 84.396 li
267.231 84.646 li
267.731 84.896 li
267.981 85.146 li
268.481 85.396 li
268.981 85.646 li
269.231 85.896 li
269.731 86.146 li
269.981 86.396 li
270.481 86.646 li
270.731 86.896 li
271.231 87.146 li
271.731 87.396 li
271.981 87.646 li
272.481 87.896 li
272.731 88.146 li
273.231 88.396 li
273.481 88.646 li
273.981 88.896 li
274.481 89.146 li
274.731 89.396 li
275.231 89.646 li
275.481 89.896 li
275.981 89.896 li
276.481 90.146 li
276.731 90.396 li
277.231 90.646 li
277.481 90.896 li
277.981 91.146 li
278.231 91.396 li
278.731 91.646 li
279.231 91.646 li
279.481 91.896 li
279.981 92.146 li
280.231 92.396 li
280.731 92.646 li
280.981 92.646 li
281.481 92.896 li
281.981 93.146 li
282.231 93.146 li
282.731 93.396 li
282.981 93.646 li
283.481 93.896 li
283.981 93.896 li
284.231 94.146 li
284.731 94.146 li
284.981 94.396 li
285.481 94.646 li
285.731 94.646 li
286.231 94.896 li
286.731 94.896 li
286.981 95.146 li
287.481 95.146 li
287.731 95.396 li
288.481 95.396 li
288.981 95.646 li
289.731 95.646 li
290.231 95.896 li
295.731 95.896 li
295.981 95.646 li
296.981 95.646 li
297.231 95.396 li
297.731 95.396 li
297.981 95.146 li
298.481 95.146 li
298.981 94.896 li
299.231 94.646 li
299.731 94.646 li
299.981 94.396 li
300.481 94.146 li
300.731 93.896 li
301.231 93.896 li
301.731 93.646 li
301.981 93.396 li
302.481 93.146 li
302.731 92.646 li
303.231 92.396 li
303.481 92.146 li
303.981 91.896 li
304.481 91.646 li
304.731 91.146 li
305.231 90.896 li
305.481 90.396 li
305.981 90.146 li
306.481 89.646 li
306.731 89.396 li
307.231 88.896 li
307.481 88.396 li
307.981 88.146 li
308.231 87.646 li
308.731 87.146 li
309.231 86.646 li
309.481 86.146 li
309.981 85.646 li
310.231 85.146 li
310.731 84.646 li
310.981 84.146 li
311.481 83.646 li
311.981 83.146 li
312.231 82.646 li
312.731 82.146 li
312.981 81.396 li
313.481 80.896 li
313.981 80.396 li
314.231 79.646 li
314.731 79.146 li
314.981 78.646 li
315.481 77.896 li
315.731 77.396 li
316.231 76.896 li
316.731 76.146 li
316.981 75.646 li
317.481 74.896 li
317.731 74.396 li
318.231 73.646 li
318.481 73.146 li
.6 .239216 .443137 rgb
@
.4 lw
[] 0 dsh
176.981 72.396 mo
318.981 72.396 li
0 0 0 rgb
@
.75 lw
346.419 142.646 mo
346.419 2.146 li
488.419 2.146 li
488.419 142.646 li
346.419 142.646 li
cp
@
488.419 138.396 mo
488.419 142.646 li
464.669 138.396 mo
464.669 142.646 li
441.169 138.396 mo
441.169 142.646 li
417.419 138.396 mo
417.419 142.646 li
393.669 138.396 mo
393.669 142.646 li
369.919 138.396 mo
369.919 142.646 li
346.419 138.396 mo
346.419 142.646 li
346.419 142.646 mo
488.419 142.646 li
346.419 142.646 mo
346.419 2.146 li
488.419 2.146 li
488.419 142.646 li
346.419 142.646 li
cp
@
346.566 147.947 mo
346.746 147.679 346.836 147.179 346.836 146.448 cv
346.836 145.92 346.771 145.486 346.642 145.145 cv
346.511 144.804 346.259 144.634 345.884 144.634 cv
345.539 144.634 345.287 144.795 345.128 145.119 cv
344.969 145.442 344.889 145.919 344.889 146.548 cv
344.889 147.022 344.94 147.403 345.042 147.691 cv
345.198 148.13 345.465 148.35 345.842 148.35 cv
346.145 148.35 346.387 148.216 346.566 147.947 cv
cp
347.154 144.851 mo
347.362 145.234 347.466 145.759 347.466 146.425 cv
347.466 147.057 347.372 147.58 347.184 147.993 cv
346.911 148.585 346.465 148.882 345.847 148.882 cv
345.288 148.882 344.873 148.64 344.601 148.155 cv
344.373 147.75 344.26 147.208 344.26 146.526 cv
344.26 145.998 344.327 145.545 344.464 145.166 cv
344.719 144.461 345.181 144.108 345.85 144.108 cv
346.451 144.108 346.886 144.356 347.154 144.851 cv
cp
.137255 .121569 .12549 rgb
f
368.451 148.046 mo
368.604 147.84 368.68 147.596 368.68 147.314 cv
368.68 147.077 368.611 146.85 368.475 146.635 cv
368.339 146.419 368.091 146.312 367.731 146.312 cv
367.48 146.312 367.261 146.395 367.071 146.562 cv
366.882 146.728 366.787 146.979 366.787 147.314 cv
366.787 147.609 366.873 147.856 367.046 148.056 cv
367.218 148.256 367.456 148.356 367.761 148.356 cv
368.068 148.356 368.298 148.253 368.451 148.046 cv
cp
368.889 144.493 mo
369.094 144.762 369.195 145.04 369.195 145.325 cv
368.618 145.325 li
368.583 145.141 368.528 144.998 368.452 144.894 cv
368.312 144.699 368.099 144.602 367.813 144.602 cv
367.486 144.602 367.227 144.752 367.034 145.054 cv
366.842 145.356 366.734 145.788 366.713 146.351 cv
366.847 146.154 367.016 146.007 367.219 145.909 cv
367.405 145.823 367.613 145.779 367.842 145.779 cv
368.231 145.779 368.571 145.904 368.861 146.153 cv
369.151 146.401 369.296 146.772 369.296 147.266 cv
369.296 147.688 369.159 148.062 368.884 148.387 cv
368.609 148.713 368.218 148.875 367.709 148.875 cv
367.274 148.875 366.899 148.71 366.583 148.38 cv
366.268 148.051 366.109 147.495 366.109 146.714 cv
366.109 146.136 366.18 145.646 366.32 145.244 cv
366.591 144.474 367.085 144.089 367.804 144.089 cv
368.322 144.089 368.685 144.223 368.889 144.493 cv
cp
f
372.059 147.947 mo
372.238 147.679 372.328 147.179 372.328 146.448 cv
372.328 145.92 372.264 145.486 372.134 145.145 cv
372.003 144.804 371.751 144.634 371.376 144.634 cv
371.031 144.634 370.779 144.795 370.62 145.119 cv
370.461 145.442 370.381 145.919 370.381 146.548 cv
370.381 147.022 370.433 147.403 370.534 147.691 cv
370.69 148.13 370.957 148.35 371.334 148.35 cv
371.637 148.35 371.879 148.216 372.059 147.947 cv
cp
372.646 144.851 mo
372.854 145.234 372.958 145.759 372.958 146.425 cv
372.958 147.057 372.864 147.58 372.676 147.993 cv
372.403 148.585 371.957 148.882 371.339 148.882 cv
370.78 148.882 370.365 148.64 370.093 148.155 cv
369.865 147.75 369.752 147.208 369.752 146.526 cv
369.752 145.998 369.819 145.545 369.956 145.166 cv
370.211 144.461 370.673 144.108 371.342 144.108 cv
371.943 144.108 372.378 144.356 372.646 144.851 cv
cp
f
388.289 145.465 mo
388.289 145.017 li
388.711 144.976 389.006 144.907 389.172 144.811 cv
389.339 144.714 389.463 144.487 389.545 144.127 cv
390.006 144.127 li
390.006 148.755 li
389.383 148.755 li
389.383 145.465 li
388.289 145.465 li
cp
f
391.806 147.71 mo
391.949 147.414 392.23 147.145 392.647 146.902 cv
393.271 146.542 li
393.55 146.38 393.746 146.241 393.858 146.126 cv
394.035 145.946 394.124 145.741 394.124 145.509 cv
394.124 145.238 394.043 145.022 393.881 144.863 cv
393.719 144.704 393.502 144.624 393.231 144.624 cv
392.832 144.624 392.555 144.776 392.401 145.08 cv
392.318 145.243 392.273 145.468 392.265 145.757 cv
391.671 145.757 li
391.678 145.352 391.752 145.022 391.895 144.767 cv
392.148 144.317 392.595 144.092 393.235 144.092 cv
393.768 144.092 394.156 144.236 394.401 144.523 cv
394.647 144.812 394.771 145.131 394.771 145.484 cv
394.771 145.856 394.64 146.174 394.378 146.438 cv
394.226 146.592 393.954 146.778 393.563 146.997 cv
393.118 147.243 li
392.906 147.36 392.739 147.471 392.618 147.577 cv
392.402 147.766 392.266 147.975 392.21 148.204 cv
394.747 148.204 li
394.747 148.755 li
391.558 148.755 li
391.579 148.355 391.662 148.007 391.806 147.71 cv
cp
f
397.561 147.947 mo
397.74 147.679 397.83 147.179 397.83 146.448 cv
397.83 145.92 397.766 145.486 397.636 145.145 cv
397.505 144.804 397.253 144.634 396.878 144.634 cv
396.533 144.634 396.281 144.795 396.122 145.119 cv
395.963 145.442 395.883 145.919 395.883 146.548 cv
395.883 147.022 395.935 147.403 396.036 147.691 cv
396.192 148.13 396.459 148.35 396.836 148.35 cv
397.139 148.35 397.381 148.216 397.561 147.947 cv
cp
398.148 144.851 mo
398.356 145.234 398.46 145.759 398.46 146.425 cv
398.46 147.057 398.366 147.58 398.178 147.993 cv
397.905 148.585 397.459 148.882 396.841 148.882 cv
396.282 148.882 395.867 148.64 395.595 148.155 cv
395.367 147.75 395.254 147.208 395.254 146.526 cv
395.254 145.998 395.321 145.545 395.458 145.166 cv
395.713 144.461 396.175 144.108 396.844 144.108 cv
397.445 144.108 397.88 144.356 398.148 144.851 cv
cp
f
411.992 145.465 mo
411.992 145.017 li
412.414 144.976 412.709 144.907 412.875 144.811 cv
413.042 144.714 413.166 144.487 413.248 144.127 cv
413.709 144.127 li
413.709 148.755 li
413.086 148.755 li
413.086 145.465 li
411.992 145.465 li
cp
f
417.461 145.839 mo
417.605 145.695 417.678 145.523 417.678 145.323 cv
417.678 145.15 417.609 144.991 417.471 144.845 cv
417.333 144.7 417.122 144.627 416.839 144.627 cv
416.559 144.627 416.355 144.7 416.23 144.845 cv
416.105 144.991 416.043 145.161 416.043 145.356 cv
416.043 145.575 416.123 145.746 416.285 145.87 cv
416.447 145.994 416.639 146.055 416.858 146.055 cv
417.115 146.055 417.316 145.983 417.461 145.839 cv
cp
417.569 148.137 mo
417.748 147.991 417.837 147.773 417.837 147.483 cv
417.837 147.183 417.745 146.954 417.562 146.798 cv
417.377 146.643 417.142 146.565 416.854 146.565 cv
416.575 146.565 416.347 146.645 416.171 146.803 cv
415.994 146.962 415.906 147.183 415.906 147.464 cv
415.906 147.706 415.987 147.916 416.148 148.092 cv
416.31 148.268 416.559 148.356 416.896 148.356 cv
417.166 148.356 417.391 148.283 417.569 148.137 cv
cp
415.686 146.036 mo
415.515 145.863 415.429 145.638 415.429 145.361 cv
415.429 145.015 415.555 144.717 415.806 144.468 cv
416.056 144.22 416.411 144.095 416.872 144.095 cv
417.316 144.095 417.666 144.212 417.919 144.447 cv
418.172 144.682 418.298 144.956 418.298 145.27 cv
418.298 145.56 418.225 145.794 418.077 145.974 cv
417.995 146.076 417.868 146.175 417.694 146.273 cv
417.888 146.361 418.04 146.463 418.15 146.578 cv
418.357 146.794 418.46 147.075 418.46 147.421 cv
418.46 147.831 418.323 148.177 418.048 148.462 cv
417.773 148.746 417.385 148.889 416.883 148.889 cv
416.431 148.889 416.049 148.766 415.736 148.52 cv
415.423 148.274 415.267 147.918 415.267 147.451 cv
415.267 147.176 415.334 146.938 415.468 146.738 cv
415.603 146.539 415.801 146.385 416.065 146.279 cv
415.903 146.21 415.776 146.129 415.686 146.036 cv
cp
f
421.264 147.947 mo
421.443 147.679 421.533 147.179 421.533 146.448 cv
421.533 145.92 421.469 145.486 421.339 145.145 cv
421.208 144.804 420.956 144.634 420.581 144.634 cv
420.236 144.634 419.984 144.795 419.825 145.119 cv
419.666 145.442 419.586 145.919 419.586 146.548 cv
419.586 147.022 419.638 147.403 419.739 147.691 cv
419.896 148.13 420.162 148.35 420.539 148.35 cv
420.842 148.35 421.084 148.216 421.264 147.947 cv
cp
421.852 144.851 mo
422.06 145.234 422.163 145.759 422.163 146.425 cv
422.163 147.057 422.069 147.58 421.881 147.993 cv
421.608 148.585 421.162 148.882 420.544 148.882 cv
419.985 148.882 419.57 148.64 419.298 148.155 cv
419.07 147.75 418.957 147.208 418.957 146.526 cv
418.957 145.998 419.024 145.545 419.161 145.166 cv
419.416 144.461 419.878 144.108 420.547 144.108 cv
421.148 144.108 421.583 144.356 421.852 144.851 cv
cp
f
435.516 147.71 mo
435.659 147.414 435.94 147.145 436.357 146.902 cv
436.98 146.542 li
437.26 146.38 437.456 146.241 437.568 146.126 cv
437.745 145.946 437.834 145.741 437.834 145.509 cv
437.834 145.238 437.753 145.022 437.591 144.863 cv
437.429 144.704 437.212 144.624 436.941 144.624 cv
436.542 144.624 436.265 144.776 436.111 145.08 cv
436.028 145.243 435.983 145.468 435.975 145.757 cv
435.381 145.757 li
435.388 145.352 435.462 145.022 435.604 144.767 cv
435.858 144.317 436.305 144.092 436.945 144.092 cv
437.478 144.092 437.866 144.236 438.111 144.523 cv
438.357 144.812 438.48 145.131 438.48 145.484 cv
438.48 145.856 438.35 146.174 438.088 146.438 cv
437.936 146.592 437.664 146.778 437.272 146.997 cv
436.828 147.243 li
436.616 147.36 436.449 147.471 436.328 147.577 cv
436.112 147.766 435.976 147.975 435.92 148.204 cv
438.457 148.204 li
438.457 148.755 li
435.268 148.755 li
435.289 148.355 435.372 148.007 435.516 147.71 cv
cp
f
440.953 147.11 mo
440.953 144.999 li
439.463 147.11 li
440.953 147.11 li
cp
440.963 148.755 mo
440.963 147.62 li
438.925 147.62 li
438.925 147.048 li
441.054 144.095 li
441.547 144.095 li
441.547 147.11 li
442.231 147.11 li
442.231 147.62 li
441.547 147.62 li
441.547 148.755 li
440.963 148.755 li
cp
f
444.967 147.947 mo
445.146 147.679 445.236 147.179 445.236 146.448 cv
445.236 145.92 445.172 145.486 445.042 145.145 cv
444.911 144.804 444.659 144.634 444.284 144.634 cv
443.939 144.634 443.688 144.795 443.528 145.119 cv
443.369 145.442 443.289 145.919 443.289 146.548 cv
443.289 147.022 443.341 147.403 443.442 147.691 cv
443.599 148.13 443.865 148.35 444.242 148.35 cv
444.545 148.35 444.787 148.216 444.967 147.947 cv
cp
445.555 144.851 mo
445.763 145.234 445.866 145.759 445.866 146.425 cv
445.866 147.057 445.772 147.58 445.584 147.993 cv
445.312 148.585 444.865 148.882 444.247 148.882 cv
443.688 148.882 443.273 148.64 443.001 148.155 cv
442.773 147.75 442.66 147.208 442.66 146.526 cv
442.66 145.998 442.728 145.545 442.864 145.166 cv
443.119 144.461 443.581 144.108 444.25 144.108 cv
444.852 144.108 445.286 144.356 445.555 144.851 cv
cp
f
459.293 148.429 mo
459.046 148.127 458.922 147.76 458.922 147.328 cv
459.532 147.328 li
459.558 147.628 459.614 147.847 459.7 147.983 cv
459.852 148.228 460.126 148.35 460.521 148.35 cv
460.829 148.35 461.075 148.268 461.262 148.103 cv
461.447 147.938 461.541 147.727 461.541 147.467 cv
461.541 147.147 461.442 146.923 461.247 146.795 cv
461.051 146.667 460.779 146.604 460.431 146.604 cv
460.392 146.604 460.353 146.604 460.313 146.605 cv
460.272 146.606 460.231 146.608 460.19 146.61 cv
460.19 146.094 li
460.251 146.101 460.302 146.105 460.343 146.107 cv
460.384 146.109 460.429 146.11 460.477 146.11 cv
460.694 146.11 460.874 146.076 461.015 146.007 cv
461.262 145.885 461.385 145.669 461.385 145.357 cv
461.385 145.126 461.303 144.948 461.139 144.822 cv
460.974 144.697 460.782 144.634 460.563 144.634 cv
460.175 144.634 459.905 144.764 459.756 145.023 cv
459.674 145.166 459.627 145.37 459.616 145.633 cv
459.038 145.633 li
459.038 145.287 459.107 144.993 459.246 144.75 cv
459.484 144.318 459.903 144.102 460.502 144.102 cv
460.976 144.102 461.343 144.207 461.603 144.418 cv
461.862 144.629 461.992 144.935 461.992 145.335 cv
461.992 145.621 461.915 145.852 461.762 146.029 cv
461.666 146.14 461.543 146.226 461.392 146.289 cv
461.636 146.356 461.827 146.485 461.964 146.677 cv
462.102 146.868 462.17 147.103 462.17 147.379 cv
462.17 147.823 462.024 148.184 461.732 148.463 cv
461.44 148.742 461.025 148.882 460.489 148.882 cv
459.939 148.882 459.541 148.731 459.293 148.429 cv
cp
f
464.974 147.947 mo
465.153 147.679 465.243 147.179 465.243 146.448 cv
465.243 145.92 465.179 145.486 465.049 145.145 cv
464.918 144.804 464.666 144.634 464.291 144.634 cv
463.946 144.634 463.694 144.795 463.535 145.119 cv
463.376 145.442 463.296 145.919 463.296 146.548 cv
463.296 147.022 463.348 147.403 463.449 147.691 cv
463.605 148.13 463.872 148.35 464.249 148.35 cv
464.552 148.35 464.794 148.216 464.974 147.947 cv
cp
465.562 144.851 mo
465.77 145.234 465.873 145.759 465.873 146.425 cv
465.873 147.057 465.779 147.58 465.591 147.993 cv
465.318 148.585 464.872 148.882 464.254 148.882 cv
463.695 148.882 463.28 148.64 463.008 148.155 cv
462.78 147.75 462.667 147.208 462.667 146.526 cv
462.667 145.998 462.734 145.545 462.871 145.166 cv
463.126 144.461 463.588 144.108 464.257 144.108 cv
464.858 144.108 465.293 144.356 465.562 144.851 cv
cp
f
468.67 147.947 mo
468.85 147.679 468.939 147.179 468.939 146.448 cv
468.939 145.92 468.875 145.486 468.745 145.145 cv
468.614 144.804 468.362 144.634 467.987 144.634 cv
467.643 144.634 467.391 144.795 467.231 145.119 cv
467.072 145.442 466.992 145.919 466.992 146.548 cv
466.992 147.022 467.044 147.403 467.146 147.691 cv
467.302 148.13 467.568 148.35 467.945 148.35 cv
468.248 148.35 468.49 148.216 468.67 147.947 cv
cp
469.258 144.851 mo
469.466 145.234 469.569 145.759 469.569 146.425 cv
469.569 147.057 469.476 147.58 469.287 147.993 cv
469.015 148.585 468.568 148.882 467.95 148.882 cv
467.392 148.882 466.977 148.64 466.704 148.155 cv
466.477 147.75 466.363 147.208 466.363 146.526 cv
466.363 145.998 466.431 145.545 466.567 145.166 cv
466.822 144.461 467.284 144.108 467.953 144.108 cv
468.555 144.108 468.989 144.356 469.258 144.851 cv
cp
f
482.988 148.429 mo
482.741 148.127 482.617 147.76 482.617 147.328 cv
483.228 147.328 li
483.253 147.628 483.31 147.847 483.396 147.983 cv
483.547 148.228 483.821 148.35 484.217 148.35 cv
484.524 148.35 484.771 148.268 484.957 148.103 cv
485.143 147.938 485.236 147.727 485.236 147.467 cv
485.236 147.147 485.138 146.923 484.942 146.795 cv
484.746 146.667 484.475 146.604 484.126 146.604 cv
484.087 146.604 484.048 146.604 484.008 146.605 cv
483.968 146.606 483.927 146.608 483.886 146.61 cv
483.886 146.094 li
483.946 146.101 483.997 146.105 484.038 146.107 cv
484.079 146.109 484.124 146.11 484.172 146.11 cv
484.39 146.11 484.569 146.076 484.71 146.007 cv
484.957 145.885 485.08 145.669 485.08 145.357 cv
485.08 145.126 484.998 144.948 484.834 144.822 cv
484.669 144.697 484.478 144.634 484.259 144.634 cv
483.87 144.634 483.601 144.764 483.451 145.023 cv
483.369 145.166 483.322 145.37 483.312 145.633 cv
482.733 145.633 li
482.733 145.287 482.803 144.993 482.941 144.75 cv
483.18 144.318 483.599 144.102 484.197 144.102 cv
484.671 144.102 485.038 144.207 485.298 144.418 cv
485.558 144.629 485.688 144.935 485.688 145.335 cv
485.688 145.621 485.61 145.852 485.457 146.029 cv
485.361 146.14 485.238 146.226 485.087 146.289 cv
485.331 146.356 485.522 146.485 485.659 146.677 cv
485.797 146.868 485.865 147.103 485.865 147.379 cv
485.865 147.823 485.72 148.184 485.428 148.463 cv
485.136 148.742 484.721 148.882 484.185 148.882 cv
483.635 148.882 483.236 148.731 482.988 148.429 cv
cp
f
488.746 148.046 mo
488.898 147.84 488.975 147.596 488.975 147.314 cv
488.975 147.077 488.906 146.85 488.77 146.635 cv
488.634 146.419 488.386 146.312 488.026 146.312 cv
487.775 146.312 487.556 146.395 487.366 146.562 cv
487.177 146.728 487.082 146.979 487.082 147.314 cv
487.082 147.609 487.168 147.856 487.341 148.056 cv
487.513 148.256 487.751 148.356 488.056 148.356 cv
488.363 148.356 488.593 148.253 488.746 148.046 cv
cp
489.184 144.493 mo
489.389 144.762 489.49 145.04 489.49 145.325 cv
488.913 145.325 li
488.878 145.141 488.823 144.998 488.747 144.894 cv
488.606 144.699 488.394 144.602 488.108 144.602 cv
487.781 144.602 487.521 144.752 487.329 145.054 cv
487.137 145.356 487.029 145.788 487.008 146.351 cv
487.142 146.154 487.311 146.007 487.514 145.909 cv
487.7 145.823 487.908 145.779 488.137 145.779 cv
488.526 145.779 488.866 145.904 489.156 146.153 cv
489.446 146.401 489.591 146.772 489.591 147.266 cv
489.591 147.688 489.454 148.062 489.179 148.387 cv
488.904 148.713 488.513 148.875 488.004 148.875 cv
487.569 148.875 487.194 148.71 486.878 148.38 cv
486.563 148.051 486.404 147.495 486.404 146.714 cv
486.404 146.136 486.475 145.646 486.615 145.244 cv
486.886 144.474 487.38 144.089 488.099 144.089 cv
488.617 144.089 488.979 144.223 489.184 144.493 cv
cp
f
492.365 147.947 mo
492.545 147.679 492.635 147.179 492.635 146.448 cv
492.635 145.92 492.57 145.486 492.44 145.145 cv
492.31 144.804 492.058 144.634 491.683 144.634 cv
491.338 144.634 491.086 144.795 490.927 145.119 cv
490.768 145.442 490.688 145.919 490.688 146.548 cv
490.688 147.022 490.739 147.403 490.841 147.691 cv
490.997 148.13 491.264 148.35 491.641 148.35 cv
491.943 148.35 492.186 148.216 492.365 147.947 cv
cp
492.953 144.851 mo
493.161 145.234 493.265 145.759 493.265 146.425 cv
493.265 147.057 493.171 147.58 492.982 147.993 cv
492.71 148.585 492.264 148.882 491.646 148.882 cv
491.087 148.882 490.672 148.64 490.399 148.155 cv
490.172 147.75 490.059 147.208 490.059 146.526 cv
490.059 145.998 490.126 145.545 490.263 145.166 cv
490.518 144.461 490.979 144.108 491.648 144.108 cv
492.25 144.108 492.685 144.356 492.953 144.851 cv
cp
f
350.669 2.146 mo
346.419 2.146 li
350.669 37.396 mo
346.419 37.396 li
350.669 72.396 mo
346.419 72.396 li
350.669 107.646 mo
346.419 107.646 li
350.669 142.646 mo
346.419 142.646 li
346.419 142.646 mo
346.419 2.146 li
0 0 0 rgb
@
333.89 143.291 mo
335.52 143.291 li
335.52 143.892 li
333.89 143.892 li
333.89 143.291 li
cp
.137255 .121569 .12549 rgb
f
338.342 144.635 mo
338.521 144.367 338.611 143.867 338.611 143.135 cv
338.611 142.607 338.547 142.173 338.417 141.833 cv
338.286 141.492 338.034 141.321 337.659 141.321 cv
337.314 141.321 337.063 141.483 336.903 141.807 cv
336.744 142.13 336.664 142.606 336.664 143.236 cv
336.664 143.71 336.716 144.091 336.817 144.378 cv
336.974 144.818 337.24 145.037 337.617 145.037 cv
337.92 145.037 338.162 144.903 338.342 144.635 cv
cp
338.93 141.539 mo
339.138 141.922 339.241 142.446 339.241 143.113 cv
339.241 143.745 339.147 144.267 338.959 144.68 cv
338.687 145.273 338.24 145.569 337.622 145.569 cv
337.063 145.569 336.648 145.327 336.376 144.842 cv
336.148 144.438 336.035 143.895 336.035 143.213 cv
336.035 142.686 336.103 142.232 336.239 141.854 cv
336.494 141.148 336.956 140.795 337.625 140.795 cv
338.227 140.795 338.661 141.043 338.93 141.539 cv
cp
f
340.092 144.735 mo
340.77 144.735 li
340.77 145.443 li
340.092 145.443 li
340.092 144.735 li
cp
f
342.191 144.258 mo
342.23 144.591 342.385 144.822 342.655 144.95 cv
342.794 145.015 342.954 145.047 343.136 145.047 cv
343.481 145.047 343.738 144.937 343.904 144.716 cv
344.071 144.495 344.154 144.251 344.154 143.982 cv
344.154 143.658 344.056 143.407 343.857 143.229 cv
343.659 143.052 343.422 142.963 343.146 142.963 cv
342.944 142.963 342.771 143.002 342.628 143.08 cv
342.483 143.158 342.361 143.267 342.26 143.405 cv
341.753 143.375 li
342.107 140.874 li
344.521 140.874 li
344.521 141.438 li
342.545 141.438 li
342.347 142.73 li
342.455 142.647 342.558 142.586 342.655 142.545 cv
342.828 142.474 343.028 142.438 343.256 142.438 cv
343.682 142.438 344.043 142.575 344.34 142.85 cv
344.636 143.125 344.784 143.473 344.784 143.895 cv
344.784 144.334 344.648 144.721 344.377 145.057 cv
344.105 145.392 343.672 145.56 343.077 145.56 cv
342.698 145.56 342.363 145.453 342.072 145.24 cv
341.781 145.027 341.619 144.7 341.584 144.258 cv
342.191 144.258 li
cp
f
330.101 108.205 mo
331.73 108.205 li
331.73 108.806 li
330.101 108.806 li
330.101 108.205 li
cp
f
334.553 109.549 mo
334.732 109.281 334.822 108.781 334.822 108.049 cv
334.822 107.521 334.758 107.087 334.628 106.747 cv
334.497 106.406 334.245 106.235 333.87 106.235 cv
333.525 106.235 333.273 106.397 333.114 106.721 cv
332.955 107.044 332.875 107.521 332.875 108.15 cv
332.875 108.624 332.927 109.005 333.028 109.292 cv
333.185 109.732 333.451 109.951 333.828 109.951 cv
334.131 109.951 334.373 109.817 334.553 109.549 cv
cp
335.141 106.453 mo
335.349 106.836 335.452 107.36 335.452 108.027 cv
335.452 108.659 335.358 109.181 335.17 109.594 cv
334.897 110.187 334.451 110.483 333.833 110.483 cv
333.274 110.483 332.859 110.241 332.587 109.756 cv
332.359 109.352 332.246 108.809 332.246 108.127 cv
332.246 107.6 332.313 107.146 332.45 106.768 cv
332.705 106.063 333.167 105.709 333.836 105.709 cv
334.438 105.709 334.872 105.958 335.141 106.453 cv
cp
f
336.303 109.649 mo
336.98 109.649 li
336.98 110.357 li
336.303 110.357 li
336.303 109.649 li
cp
f
338.037 109.312 mo
338.181 109.016 338.462 108.746 338.879 108.504 cv
339.502 108.144 li
339.781 107.981 339.978 107.843 340.09 107.728 cv
340.267 107.548 340.355 107.342 340.355 107.11 cv
340.355 106.839 340.274 106.624 340.112 106.465 cv
339.95 106.305 339.733 106.226 339.463 106.226 cv
339.063 106.226 338.786 106.377 338.633 106.681 cv
338.55 106.844 338.505 107.07 338.496 107.358 cv
337.902 107.358 li
337.909 106.954 337.983 106.624 338.126 106.369 cv
338.38 105.918 338.826 105.693 339.467 105.693 cv
339.999 105.693 340.388 105.837 340.633 106.125 cv
340.879 106.413 341.002 106.733 341.002 107.085 cv
341.002 107.458 340.871 107.776 340.609 108.04 cv
340.457 108.193 340.186 108.379 339.794 108.598 cv
339.35 108.845 li
339.138 108.961 338.971 109.073 338.85 109.179 cv
338.634 109.367 338.497 109.576 338.441 109.805 cv
340.979 109.805 li
340.979 110.357 li
337.789 110.357 li
337.811 109.957 337.894 109.608 338.037 109.312 cv
cp
f
342.099 109.172 mo
342.138 109.505 342.292 109.736 342.563 109.864 cv
342.701 109.929 342.861 109.961 343.043 109.961 cv
343.389 109.961 343.646 109.851 343.812 109.63 cv
343.979 109.409 344.062 109.165 344.062 108.896 cv
344.062 108.572 343.963 108.321 343.765 108.144 cv
343.566 107.966 343.329 107.877 343.053 107.877 cv
342.852 107.877 342.679 107.917 342.535 107.994 cv
342.391 108.072 342.269 108.181 342.167 108.319 cv
341.66 108.29 li
342.015 105.788 li
344.429 105.788 li
344.429 106.352 li
342.452 106.352 li
342.254 107.644 li
342.362 107.562 342.465 107.5 342.563 107.459 cv
342.735 107.388 342.936 107.352 343.163 107.352 cv
343.589 107.352 343.95 107.489 344.247 107.764 cv
344.543 108.039 344.691 108.387 344.691 108.809 cv
344.691 109.248 344.556 109.635 344.284 109.971 cv
344.013 110.306 343.579 110.474 342.984 110.474 cv
342.605 110.474 342.271 110.367 341.979 110.154 cv
341.688 109.941 341.526 109.614 341.491 109.172 cv
342.099 109.172 li
cp
f
343.723 74.4707 mo
343.902 74.2026 343.992 73.7026 343.992 72.9712 cv
343.992 72.4434 343.928 72.0093 343.798 71.6685 cv
343.667 71.3276 343.415 71.1572 343.04 71.1572 cv
342.695 71.1572 342.443 71.3188 342.284 71.6426 cv
342.125 71.9658 342.045 72.4424 342.045 73.0718 cv
342.045 73.5459 342.097 73.9268 342.198 74.2144 cv
342.354 74.6538 342.621 74.873 342.998 74.873 cv
343.301 74.873 343.543 74.7393 343.723 74.4707 cv
cp
344.311 71.3745 mo
344.519 71.7578 344.622 72.2822 344.622 72.9487 cv
344.622 73.5806 344.528 74.103 344.34 74.5161 cv
344.067 75.1089 343.621 75.4053 343.003 75.4053 cv
342.444 75.4053 342.029 75.1631 341.757 74.6782 cv
341.529 74.2739 341.416 73.731 341.416 73.0493 cv
341.416 72.5215 341.483 72.0684 341.62 71.6895 cv
341.875 70.9844 342.337 70.6313 343.006 70.6313 cv
343.607 70.6313 344.042 70.8794 344.311 71.3745 cv
cp
f
334.707 38.9238 mo
334.887 38.6558 334.977 38.1558 334.977 37.4243 cv
334.977 36.8965 334.912 36.4624 334.782 36.1216 cv
334.651 35.7808 334.399 35.6104 334.024 35.6104 cv
333.68 35.6104 333.428 35.772 333.269 36.0957 cv
333.109 36.4189 333.029 36.8955 333.029 37.5249 cv
333.029 37.999 333.081 38.3799 333.183 38.6675 cv
333.339 39.1069 333.605 39.3262 333.982 39.3262 cv
334.285 39.3262 334.527 39.1924 334.707 38.9238 cv
cp
335.295 35.8276 mo
335.503 36.2109 335.606 36.7354 335.606 37.4019 cv
335.606 38.0337 335.513 38.5562 335.324 38.9692 cv
335.052 39.562 334.605 39.8584 333.987 39.8584 cv
333.429 39.8584 333.014 39.6162 332.741 39.1313 cv
332.514 38.7271 332.4 38.1841 332.4 37.5024 cv
332.4 36.9746 332.468 36.5215 332.604 36.1426 cv
332.859 35.4375 333.321 35.0845 333.99 35.0845 cv
334.592 35.0845 335.026 35.3325 335.295 35.8276 cv
cp
f
336.457 39.0244 mo
337.135 39.0244 li
337.135 39.7319 li
336.457 39.7319 li
336.457 39.0244 li
cp
f
338.191 38.687 mo
338.335 38.3906 338.616 38.1211 339.033 37.8789 cv
339.656 37.5186 li
339.936 37.3564 340.132 37.2178 340.244 37.103 cv
340.421 36.9229 340.51 36.7173 340.51 36.4854 cv
340.51 36.2144 340.429 35.999 340.267 35.8398 cv
340.104 35.6802 339.888 35.6006 339.617 35.6006 cv
339.218 35.6006 338.94 35.7524 338.787 36.0562 cv
338.704 36.2192 338.659 36.4448 338.65 36.7334 cv
338.057 36.7334 li
338.063 36.3286 338.138 35.999 338.28 35.7437 cv
338.534 35.2935 338.98 35.0684 339.621 35.0684 cv
340.153 35.0684 340.542 35.2124 340.787 35.5 cv
341.033 35.7881 341.156 36.1079 341.156 36.4604 cv
341.156 36.833 341.025 37.1509 340.764 37.415 cv
340.611 37.5684 340.34 37.7544 339.948 37.9731 cv
339.504 38.2197 li
339.292 38.3364 339.125 38.4478 339.004 38.5537 cv
338.788 38.7422 338.651 38.9512 338.596 39.1802 cv
341.133 39.1802 li
341.133 39.7319 li
337.943 39.7319 li
337.965 39.3315 338.048 38.9834 338.191 38.687 cv
cp
f
342.253 38.5474 mo
342.292 38.8804 342.446 39.1108 342.717 39.2388 cv
342.855 39.3037 343.016 39.3359 343.197 39.3359 cv
343.543 39.3359 343.8 39.2256 343.966 39.0049 cv
344.133 38.7842 344.216 38.54 344.216 38.2715 cv
344.216 37.9473 344.117 37.6963 343.919 37.5186 cv
343.721 37.3413 343.483 37.2524 343.207 37.2524 cv
343.006 37.2524 342.833 37.2915 342.689 37.3691 cv
342.545 37.4473 342.423 37.5557 342.321 37.6938 cv
341.814 37.6646 li
342.169 35.1626 li
344.583 35.1626 li
344.583 35.7271 li
342.606 35.7271 li
342.408 37.019 li
342.517 36.9365 342.619 36.875 342.717 36.834 cv
342.89 36.7627 343.09 36.7266 343.317 36.7266 cv
343.743 36.7266 344.104 36.8643 344.401 37.1392 cv
344.697 37.4136 344.846 37.7622 344.846 38.1841 cv
344.846 38.623 344.71 39.0103 344.438 39.3457 cv
344.167 39.6812 343.733 39.8486 343.139 39.8486 cv
342.76 39.8486 342.425 39.7422 342.134 39.5293 cv
341.843 39.3159 341.681 38.9888 341.646 38.5474 cv
342.253 38.5474 li
cp
f
338.504 3.8457 mo
338.684 3.57764 338.773 3.07764 338.773 2.34619 cv
338.773 1.81836 338.709 1.38428 338.579 1.04346 cv
338.448 .702637 338.196 .532227 337.821 .532227 cv
337.477 .532227 337.225 .693848 337.065 1.01758 cv
336.906 1.34082 336.826 1.81738 336.826 2.44678 cv
336.826 2.9209 336.878 3.30176 336.979 3.58936 cv
337.136 4.02881 337.402 4.24805 337.779 4.24805 cv
338.082 4.24805 338.324 4.11426 338.504 3.8457 cv
cp
339.092 .749512 mo
339.3 1.13281 339.403 1.65723 339.403 2.32373 cv
339.403 2.95557 339.31 3.47803 339.121 3.89111 cv
338.849 4.48389 338.402 4.78027 337.784 4.78027 cv
337.226 4.78027 336.811 4.53809 336.538 4.05322 cv
336.311 3.64893 336.197 3.10596 336.197 2.42432 cv
336.197 1.89648 336.265 1.44336 336.401 1.06445 cv
336.656 .359375 337.118 .00634766 337.787 .00634766 cv
338.389 .00634766 338.823 .254395 339.092 .749512 cv
cp
f
340.254 3.94629 mo
340.932 3.94629 li
340.932 4.65381 li
340.254 4.65381 li
340.254 3.94629 li
cp
f
342.354 3.46924 mo
342.393 3.80225 342.547 4.03271 342.817 4.16064 cv
342.956 4.22559 343.116 4.25781 343.298 4.25781 cv
343.644 4.25781 343.9 4.14746 344.066 3.92676 cv
344.233 3.70605 344.316 3.46191 344.316 3.19336 cv
344.316 2.86914 344.218 2.61816 344.02 2.44043 cv
343.821 2.26318 343.584 2.17432 343.308 2.17432 cv
343.106 2.17432 342.934 2.21338 342.79 2.29102 cv
342.646 2.36914 342.523 2.47754 342.422 2.61572 cv
341.915 2.58643 li
342.27 .0844727 li
344.684 .0844727 li
344.684 .648926 li
342.707 .648926 li
342.509 1.94092 li
342.617 1.8584 342.72 1.79688 342.817 1.75586 cv
342.99 1.68457 343.19 1.64844 343.418 1.64844 cv
343.844 1.64844 344.205 1.78613 344.502 2.06104 cv
344.798 2.33545 344.946 2.68408 344.946 3.10596 cv
344.946 3.54492 344.811 3.93213 344.539 4.26758 cv
344.268 4.60303 343.834 4.77051 343.239 4.77051 cv
342.86 4.77051 342.525 4.66406 342.234 4.45117 cv
341.943 4.23779 341.781 3.91064 341.746 3.46924 cv
342.354 3.46924 li
cp
f
[1 2 ] 0 dsh
346.419 72.396 mo
346.669 71.896 li
347.169 71.146 li
347.419 70.646 li
347.919 70.146 li
348.169 69.396 li
348.669 68.896 li
349.169 68.396 li
349.419 67.646 li
349.919 67.146 li
350.169 66.646 li
350.669 65.896 li
350.919 65.396 li
351.419 64.896 li
351.919 64.146 li
352.169 63.646 li
352.669 63.146 li
352.919 62.396 li
353.419 61.896 li
353.919 61.396 li
354.169 60.896 li
354.669 60.146 li
354.919 59.646 li
355.419 59.146 li
355.669 58.646 li
356.169 57.896 li
356.669 57.396 li
356.919 56.896 li
357.419 56.396 li
357.669 55.896 li
358.169 55.146 li
358.419 54.646 li
358.919 54.146 li
359.419 53.646 li
359.669 53.146 li
360.169 52.646 li
360.419 52.146 li
360.919 51.646 li
361.419 51.146 li
361.669 50.646 li
362.169 50.146 li
362.419 49.646 li
362.919 49.146 li
363.169 48.646 li
363.669 48.146 li
364.169 47.646 li
364.419 47.146 li
364.919 46.646 li
365.169 46.146 li
365.669 45.646 li
365.919 45.396 li
366.419 44.896 li
366.919 44.396 li
367.169 43.896 li
367.669 43.646 li
367.919 43.146 li
368.419 42.646 li
368.919 42.396 li
369.169 41.896 li
369.669 41.396 li
369.919 41.146 li
370.419 40.646 li
370.669 40.396 li
371.169 40.146 li
371.669 39.646 li
371.919 39.396 li
372.419 38.896 li
372.669 38.646 li
373.169 38.396 li
373.419 37.896 li
373.919 37.646 li
374.419 37.396 li
374.669 37.146 li
375.169 36.896 li
375.419 36.646 li
375.919 36.396 li
376.419 36.146 li
376.669 35.896 li
377.169 35.646 li
377.419 35.396 li
377.919 35.146 li
378.169 34.896 li
378.669 34.646 li
379.169 34.646 li
379.419 34.396 li
379.919 34.146 li
380.169 34.146 li
380.669 33.896 li
380.919 33.896 li
381.419 33.646 li
381.919 33.646 li
382.169 33.396 li
383.419 33.396 li
383.919 33.146 li
386.669 33.146 li
386.919 33.396 li
388.169 33.396 li
388.419 33.646 li
388.919 33.646 li
389.419 33.896 li
389.669 33.896 li
390.169 34.146 li
390.419 34.396 li
390.919 34.396 li
391.419 34.646 li
391.669 34.896 li
392.169 35.146 li
392.419 35.396 li
392.919 35.646 li
393.169 35.896 li
393.669 36.146 li
394.169 36.396 li
394.419 36.646 li
394.919 36.896 li
395.169 37.396 li
395.669 37.646 li
395.919 37.896 li
396.419 38.396 li
396.919 38.646 li
397.169 39.146 li
397.669 39.396 li
397.919 39.896 li
398.419 40.396 li
398.919 40.896 li
399.169 41.146 li
399.669 41.646 li
399.919 42.146 li
400.419 42.646 li
400.669 43.146 li
401.169 43.646 li
401.669 44.146 li
401.919 44.896 li
402.419 45.396 li
402.669 45.896 li
403.169 46.396 li
403.419 47.146 li
403.919 47.646 li
404.419 48.146 li
404.669 48.896 li
405.169 49.396 li
405.419 50.146 li
405.919 50.646 li
406.419 51.396 li
406.669 52.146 li
407.169 52.646 li
407.419 53.396 li
407.919 54.146 li
408.169 54.896 li
408.669 55.646 li
409.169 56.146 li
409.419 56.896 li
409.919 57.646 li
410.169 58.396 li
410.669 59.146 li
410.919 59.896 li
411.419 60.646 li
411.919 61.396 li
412.169 62.146 li
412.669 62.896 li
412.919 63.646 li
413.419 64.646 li
413.919 65.396 li
414.169 66.146 li
414.669 66.896 li
414.919 67.646 li
415.419 68.396 li
415.669 69.146 li
416.169 70.146 li
416.669 70.896 li
416.919 71.646 li
417.419 72.396 li
417.669 73.146 li
418.169 74.146 li
418.669 74.896 li
418.919 75.646 li
419.419 76.396 li
419.669 77.146 li
420.169 77.896 li
420.419 78.896 li
420.919 79.646 li
421.419 80.396 li
421.669 81.146 li
422.169 81.896 li
422.419 82.646 li
422.919 83.396 li
423.169 84.146 li
423.669 84.896 li
424.169 85.646 li
424.419 86.396 li
424.919 87.146 li
425.169 87.896 li
425.669 88.646 li
426.169 89.396 li
426.419 90.146 li
426.919 90.646 li
427.169 91.396 li
427.669 92.146 li
427.919 92.896 li
428.419 93.396 li
428.919 94.146 li
429.169 94.646 li
429.669 95.396 li
429.919 95.896 li
430.419 96.646 li
430.669 97.146 li
431.169 97.896 li
431.669 98.396 li
431.919 98.896 li
432.419 99.646 li
432.669 100.146 li
433.169 100.646 li
433.669 101.146 li
433.919 101.646 li
434.419 102.146 li
434.669 102.646 li
435.169 103.146 li
435.419 103.646 li
435.919 104.146 li
436.419 104.396 li
436.669 104.896 li
437.169 105.396 li
437.419 105.646 li
437.919 106.146 li
438.169 106.646 li
438.669 106.896 li
439.169 107.146 li
439.419 107.646 li
439.919 107.896 li
440.169 108.146 li
440.669 108.396 li
441.169 108.896 li
441.419 109.146 li
441.919 109.396 li
442.169 109.646 li
442.669 109.896 li
442.919 109.896 li
443.419 110.146 li
443.919 110.396 li
444.169 110.646 li
444.669 110.646 li
444.919 110.896 li
445.419 111.146 li
445.669 111.146 li
446.169 111.396 li
446.919 111.396 li
447.419 111.646 li
451.669 111.646 li
452.169 111.396 li
452.919 111.396 li
453.169 111.146 li
453.669 111.146 li
454.169 110.896 li
454.419 110.896 li
454.919 110.646 li
455.169 110.396 li
455.669 110.396 li
456.169 110.146 li
456.419 109.896 li
456.919 109.646 li
457.169 109.396 li
457.669 109.396 li
457.919 109.146 li
458.419 108.896 li
458.919 108.646 li
459.169 108.396 li
459.669 108.146 li
459.919 107.646 li
460.419 107.396 li
460.669 107.146 li
461.169 106.896 li
461.669 106.646 li
461.919 106.146 li
462.419 105.896 li
462.669 105.646 li
463.169 105.146 li
463.669 104.896 li
463.919 104.396 li
464.419 104.146 li
464.669 103.646 li
465.169 103.396 li
465.419 102.896 li
465.919 102.646 li
466.419 102.146 li
466.669 101.646 li
467.169 101.396 li
467.419 100.896 li
467.919 100.396 li
468.169 100.146 li
468.669 99.646 li
469.169 99.146 li
469.419 98.646 li
469.919 98.146 li
470.169 97.646 li
470.669 97.396 li
471.169 96.896 li
471.419 96.396 li
471.919 95.896 li
472.169 95.396 li
472.669 94.896 li
472.919 94.396 li
473.419 93.896 li
473.919 93.396 li
474.169 92.896 li
474.669 92.396 li
474.919 91.896 li
475.419 91.146 li
475.669 90.646 li
476.169 90.146 li
476.669 89.646 li
476.919 89.146 li
477.419 88.646 li
477.669 87.896 li
478.169 87.396 li
478.669 86.896 li
478.919 86.396 li
479.419 85.896 li
479.669 85.146 li
480.169 84.646 li
480.419 84.146 li
480.919 83.646 li
481.419 82.896 li
481.669 82.396 li
482.169 81.896 li
482.419 81.146 li
482.919 80.646 li
483.169 80.146 li
483.669 79.396 li
484.169 78.896 li
484.419 78.396 li
484.919 77.646 li
485.169 77.146 li
485.669 76.646 li
486.169 75.896 li
486.419 75.396 li
486.919 74.896 li
487.169 74.146 li
487.669 73.646 li
487.919 73.146 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
346.419 72.396 mo
346.669 71.896 li
347.169 71.646 li
347.419 71.146 li
347.919 70.646 li
348.169 70.146 li
348.669 69.896 li
349.169 69.396 li
349.419 68.896 li
349.919 68.396 li
350.169 68.146 li
350.669 67.646 li
350.919 67.146 li
351.419 66.646 li
351.919 66.396 li
352.169 65.896 li
352.669 65.396 li
352.919 64.896 li
353.419 64.646 li
353.919 64.146 li
354.169 63.646 li
354.669 63.396 li
354.919 62.896 li
355.419 62.396 li
355.669 62.146 li
356.169 61.646 li
356.669 61.146 li
356.919 60.896 li
357.419 60.396 li
357.669 59.896 li
358.169 59.646 li
358.419 59.146 li
358.919 58.896 li
359.419 58.396 li
359.669 58.146 li
360.169 57.646 li
360.419 57.396 li
360.919 56.896 li
361.419 56.646 li
361.669 56.146 li
362.169 55.896 li
362.419 55.396 li
362.919 55.146 li
363.169 54.646 li
363.669 54.396 li
364.169 53.896 li
364.419 53.646 li
364.919 53.396 li
365.169 52.896 li
365.669 52.646 li
365.919 52.396 li
366.419 52.146 li
366.919 51.646 li
367.169 51.396 li
367.669 51.146 li
367.919 50.896 li
368.419 50.396 li
368.919 50.146 li
369.169 49.896 li
369.669 49.646 li
369.919 49.396 li
370.419 49.146 li
370.669 48.896 li
371.169 48.646 li
371.669 48.396 li
371.919 48.146 li
372.419 47.896 li
372.669 47.646 li
373.169 47.396 li
373.419 47.146 li
373.919 46.896 li
374.419 46.896 li
374.669 46.646 li
375.169 46.396 li
375.419 46.146 li
375.919 46.146 li
376.419 45.896 li
376.669 45.646 li
377.169 45.646 li
377.419 45.396 li
377.919 45.396 li
378.169 45.146 li
378.669 44.896 li
379.419 44.896 li
379.919 44.646 li
380.169 44.646 li
380.669 44.396 li
381.919 44.396 li
382.169 44.146 li
386.669 44.146 li
386.919 44.396 li
388.169 44.396 li
388.419 44.646 li
388.919 44.646 li
389.419 44.896 li
390.169 44.896 li
390.419 45.146 li
390.919 45.396 li
391.419 45.396 li
391.669 45.646 li
392.169 45.646 li
392.419 45.896 li
392.919 46.146 li
393.169 46.396 li
393.669 46.646 li
394.169 46.646 li
394.419 46.896 li
394.919 47.146 li
395.169 47.396 li
395.669 47.646 li
395.919 47.896 li
396.419 48.146 li
396.919 48.396 li
397.169 48.896 li
397.669 49.146 li
397.919 49.396 li
398.419 49.646 li
398.919 50.146 li
399.169 50.396 li
399.669 50.646 li
399.919 51.146 li
400.419 51.396 li
400.669 51.896 li
401.169 52.146 li
401.669 52.646 li
401.919 52.896 li
402.419 53.396 li
402.669 53.646 li
403.169 54.146 li
403.419 54.646 li
403.919 54.896 li
404.419 55.396 li
404.669 55.896 li
405.169 56.396 li
405.419 56.646 li
405.919 57.146 li
406.419 57.646 li
406.669 58.146 li
407.169 58.646 li
407.419 59.146 li
407.919 59.646 li
408.169 60.146 li
408.669 60.646 li
409.169 61.146 li
409.419 61.646 li
409.919 62.146 li
410.169 62.646 li
410.669 63.146 li
410.919 63.646 li
411.419 64.146 li
411.919 64.646 li
412.169 65.146 li
412.669 65.896 li
412.919 66.396 li
413.419 66.896 li
413.919 67.396 li
414.169 67.896 li
414.669 68.646 li
414.919 69.146 li
415.419 69.646 li
415.669 70.146 li
416.169 70.646 li
416.669 71.396 li
416.919 71.896 li
417.419 72.396 li
417.669 72.896 li
418.169 73.646 li
418.669 74.146 li
418.919 74.646 li
419.419 75.146 li
419.669 75.896 li
420.169 76.396 li
420.419 76.896 li
420.919 77.396 li
421.419 77.896 li
421.669 78.646 li
422.169 79.146 li
422.419 79.646 li
422.919 80.146 li
423.169 80.646 li
423.669 81.146 li
424.169 81.646 li
424.419 82.146 li
424.919 82.896 li
425.169 83.396 li
425.669 83.896 li
426.169 84.396 li
426.419 84.896 li
426.919 85.396 li
427.169 85.896 li
427.669 86.146 li
427.919 86.646 li
428.419 87.146 li
428.919 87.646 li
429.169 88.146 li
429.669 88.646 li
429.919 89.146 li
430.419 89.396 li
430.669 89.896 li
431.169 90.396 li
431.669 90.646 li
431.919 91.146 li
432.419 91.646 li
432.669 91.896 li
433.169 92.396 li
433.669 92.646 li
433.919 93.146 li
434.419 93.396 li
434.669 93.896 li
435.169 94.146 li
435.419 94.396 li
435.919 94.896 li
436.419 95.146 li
436.669 95.396 li
437.169 95.896 li
437.419 96.146 li
437.919 96.396 li
438.169 96.646 li
438.669 96.896 li
439.169 97.146 li
439.419 97.396 li
439.919 97.646 li
440.169 97.896 li
440.669 98.146 li
441.169 98.396 li
441.419 98.646 li
441.919 98.646 li
442.169 98.896 li
442.669 99.146 li
442.919 99.396 li
443.419 99.396 li
443.919 99.646 li
444.169 99.646 li
444.669 99.896 li
444.919 99.896 li
445.419 100.146 li
445.669 100.146 li
446.169 100.396 li
446.919 100.396 li
447.419 100.646 li
452.919 100.646 li
453.169 100.396 li
454.419 100.396 li
454.919 100.146 li
455.169 100.146 li
455.669 99.896 li
456.169 99.896 li
456.419 99.646 li
456.919 99.646 li
457.169 99.396 li
457.669 99.396 li
457.919 99.146 li
458.419 98.896 li
458.919 98.896 li
459.169 98.646 li
459.669 98.396 li
459.919 98.396 li
460.419 98.146 li
460.669 97.896 li
461.169 97.646 li
461.669 97.396 li
461.919 97.146 li
462.419 96.896 li
462.669 96.646 li
463.169 96.646 li
463.669 96.396 li
463.919 95.896 li
464.419 95.646 li
464.669 95.396 li
465.169 95.146 li
465.419 94.896 li
465.919 94.646 li
466.419 94.396 li
466.669 94.146 li
467.169 93.896 li
467.419 93.396 li
467.919 93.146 li
468.169 92.896 li
468.669 92.646 li
469.169 92.146 li
469.419 91.896 li
469.919 91.646 li
470.169 91.146 li
470.669 90.896 li
471.169 90.396 li
471.419 90.146 li
471.919 89.896 li
472.169 89.396 li
472.669 89.146 li
472.919 88.646 li
473.419 88.396 li
473.919 87.896 li
474.169 87.646 li
474.669 87.146 li
474.919 86.896 li
475.419 86.396 li
475.669 86.146 li
476.169 85.646 li
476.669 85.146 li
476.919 84.896 li
477.419 84.396 li
477.669 84.146 li
478.169 83.646 li
478.669 83.146 li
478.919 82.896 li
479.419 82.396 li
479.669 81.896 li
480.169 81.646 li
480.419 81.146 li
480.919 80.646 li
481.419 80.396 li
481.669 79.896 li
482.169 79.396 li
482.419 78.896 li
482.919 78.646 li
483.169 78.146 li
483.669 77.646 li
484.169 77.396 li
484.419 76.896 li
484.919 76.396 li
485.169 75.896 li
485.669 75.646 li
486.169 75.146 li
486.419 74.646 li
486.919 74.146 li
487.169 73.646 li
487.669 73.396 li
487.919 72.896 li
.6 .545098 .239216 rgb
@
.75 lw
[3 3 ] 0 dsh
346.419 72.396 mo
346.669 71.896 li
347.169 71.396 li
347.419 70.896 li
347.919 70.646 li
348.169 70.146 li
348.669 69.646 li
349.169 69.146 li
349.419 68.646 li
349.919 68.146 li
350.169 67.646 li
350.669 67.146 li
350.919 66.646 li
351.419 66.146 li
351.919 65.896 li
352.169 65.396 li
352.669 64.896 li
352.919 64.396 li
353.419 63.896 li
353.919 63.396 li
354.169 62.896 li
354.669 62.646 li
354.919 62.146 li
355.419 61.646 li
355.669 61.146 li
356.169 60.646 li
356.669 60.146 li
356.919 59.896 li
357.419 59.396 li
357.669 58.896 li
358.169 58.396 li
358.419 58.146 li
358.919 57.646 li
359.419 57.146 li
359.669 56.646 li
360.169 56.396 li
360.419 55.896 li
360.919 55.396 li
361.419 55.146 li
361.669 54.646 li
362.169 54.146 li
362.419 53.896 li
362.919 53.396 li
363.169 53.146 li
363.669 52.646 li
364.169 52.396 li
364.419 51.896 li
364.919 51.646 li
365.169 51.146 li
365.669 50.896 li
365.919 50.396 li
366.419 50.146 li
366.919 49.646 li
367.169 49.396 li
367.669 48.896 li
367.919 48.646 li
368.419 48.396 li
368.919 47.896 li
369.169 47.646 li
369.669 47.396 li
369.919 46.896 li
370.419 46.646 li
370.669 46.396 li
371.169 46.146 li
371.669 45.896 li
371.919 45.646 li
372.419 45.146 li
372.669 44.896 li
373.169 44.646 li
373.419 44.396 li
373.919 44.146 li
374.419 43.896 li
374.669 43.646 li
375.169 43.396 li
375.419 43.396 li
375.919 43.146 li
376.419 42.896 li
376.669 42.646 li
377.169 42.396 li
377.419 42.146 li
377.919 42.146 li
378.169 41.896 li
378.669 41.646 li
379.169 41.646 li
379.419 41.396 li
379.919 41.396 li
380.169 41.146 li
380.669 41.146 li
380.919 40.896 li
381.919 40.896 li
382.169 40.646 li
382.919 40.646 li
383.419 40.396 li
387.419 40.396 li
387.669 40.646 li
388.919 40.646 li
389.419 40.896 li
389.669 40.896 li
390.169 41.146 li
390.419 41.146 li
390.919 41.396 li
391.419 41.396 li
391.669 41.646 li
392.169 41.896 li
392.419 41.896 li
392.919 42.146 li
393.169 42.396 li
393.669 42.646 li
394.169 42.896 li
394.419 43.146 li
394.919 43.396 li
395.169 43.646 li
395.669 43.896 li
395.919 44.146 li
396.419 44.396 li
396.919 44.646 li
397.169 45.146 li
397.669 45.396 li
397.919 45.646 li
398.419 46.146 li
398.919 46.396 li
399.169 46.896 li
399.669 47.146 li
399.919 47.646 li
400.419 47.896 li
400.669 48.396 li
401.169 48.896 li
401.669 49.146 li
401.919 49.646 li
402.419 50.146 li
402.669 50.646 li
403.169 51.146 li
403.419 51.396 li
403.919 51.896 li
404.419 52.396 li
404.669 52.896 li
405.169 53.396 li
405.419 54.146 li
405.919 54.646 li
406.419 55.146 li
406.669 55.646 li
407.169 56.146 li
407.419 56.646 li
407.919 57.396 li
408.169 57.896 li
408.669 58.396 li
409.169 59.146 li
409.419 59.646 li
409.919 60.146 li
410.169 60.896 li
410.669 61.396 li
410.919 62.146 li
411.419 62.646 li
411.919 63.396 li
412.169 63.896 li
412.669 64.646 li
412.919 65.146 li
413.419 65.896 li
413.919 66.646 li
414.169 67.146 li
414.669 67.896 li
414.919 68.396 li
415.419 69.146 li
415.669 69.896 li
416.169 70.396 li
416.669 71.146 li
416.919 71.896 li
417.419 72.396 li
417.669 73.146 li
418.169 73.646 li
418.669 74.396 li
418.919 75.146 li
419.419 75.646 li
419.669 76.396 li
420.169 77.146 li
420.419 77.646 li
420.919 78.396 li
421.419 78.896 li
421.669 79.646 li
422.169 80.146 li
422.419 80.896 li
422.919 81.646 li
423.169 82.146 li
423.669 82.896 li
424.169 83.396 li
424.419 83.896 li
424.919 84.646 li
425.169 85.146 li
425.669 85.896 li
426.169 86.396 li
426.419 86.896 li
426.919 87.646 li
427.169 88.146 li
427.669 88.646 li
427.919 89.146 li
428.419 89.896 li
428.919 90.396 li
429.169 90.896 li
429.669 91.396 li
429.919 91.896 li
430.419 92.396 li
430.669 92.896 li
431.169 93.396 li
431.669 93.896 li
431.919 94.396 li
432.419 94.646 li
432.669 95.146 li
433.169 95.646 li
433.669 96.146 li
433.919 96.396 li
434.419 96.896 li
434.669 97.396 li
435.169 97.646 li
435.419 98.146 li
435.919 98.396 li
436.419 98.896 li
436.669 99.146 li
437.169 99.396 li
437.419 99.896 li
437.919 100.146 li
438.169 100.396 li
438.669 100.646 li
439.169 100.896 li
439.419 101.396 li
439.919 101.646 li
440.169 101.896 li
440.669 102.146 li
441.169 102.146 li
441.419 102.396 li
441.919 102.646 li
442.169 102.896 li
442.669 103.146 li
442.919 103.146 li
443.419 103.396 li
443.919 103.646 li
444.169 103.646 li
444.669 103.896 li
445.419 103.896 li
445.669 104.146 li
446.169 104.146 li
446.669 104.396 li
451.669 104.396 li
452.169 104.146 li
452.919 104.146 li
453.169 103.896 li
454.169 103.896 li
454.419 103.646 li
454.919 103.646 li
455.169 103.396 li
455.669 103.146 li
456.169 103.146 li
456.419 102.896 li
456.919 102.896 li
457.169 102.646 li
457.669 102.396 li
457.919 102.146 li
458.419 102.146 li
458.919 101.896 li
459.169 101.646 li
459.669 101.396 li
459.919 101.146 li
460.419 100.896 li
460.669 100.646 li
461.169 100.396 li
461.669 100.146 li
461.919 99.896 li
462.419 99.646 li
462.669 99.396 li
463.169 99.146 li
463.669 98.646 li
463.919 98.396 li
464.419 98.146 li
464.669 97.896 li
465.169 97.646 li
465.419 97.146 li
465.919 96.896 li
466.419 96.646 li
466.669 96.146 li
467.169 95.896 li
467.419 95.646 li
467.919 95.146 li
468.169 94.896 li
468.669 94.396 li
469.169 94.146 li
469.419 93.646 li
469.919 93.396 li
470.169 92.896 li
470.669 92.646 li
471.169 92.146 li
471.419 91.896 li
471.919 91.396 li
472.169 90.896 li
472.669 90.646 li
472.919 90.146 li
473.419 89.896 li
473.919 89.396 li
474.169 88.896 li
474.669 88.646 li
474.919 88.146 li
475.419 87.646 li
475.669 87.146 li
476.169 86.896 li
476.669 86.396 li
476.919 85.896 li
477.419 85.396 li
477.669 85.146 li
478.169 84.646 li
478.669 84.146 li
478.919 83.646 li
479.419 83.146 li
479.669 82.896 li
480.169 82.396 li
480.419 81.896 li
480.919 81.396 li
481.419 80.896 li
481.669 80.396 li
482.169 80.146 li
482.419 79.646 li
482.919 79.146 li
483.169 78.646 li
483.669 78.146 li
484.169 77.646 li
484.419 77.146 li
484.919 76.646 li
485.169 76.146 li
485.669 75.896 li
486.169 75.396 li
486.419 74.896 li
486.919 74.396 li
487.169 73.896 li
487.669 73.396 li
487.919 72.896 li
.6 .239216 .443137 rgb
@
.4 lw
[] 0 dsh
346.419 72.396 mo
488.419 72.396 li
0 0 0 rgb
@
115.232 156.154 mo
116.051 156.199 116.665 156.693 116.665 157.641 cv
116.665 158.912 115.738 160.451 114.123 160.581 cv
115.232 156.154 li
cp
113.843 160.581 mo
113.196 160.548 112.42 160.17 112.42 159.094 cv
112.42 157.803 113.348 156.295 114.954 156.154 cv
113.843 160.581 li
cp
115.896 153.463 mo
115.896 153.442 115.928 153.323 115.928 153.312 cv
115.928 153.301 115.928 153.203 115.799 153.203 cv
115.691 153.203 115.681 153.237 115.638 153.419 cv
115.015 155.914 li
113.306 155.968 111.727 157.407 111.727 158.879 cv
111.727 159.909 112.479 160.764 113.79 160.839 cv
113.704 161.174 113.629 161.521 113.543 161.856 cv
113.414 162.366 113.306 162.777 113.306 162.809 cv
113.306 162.917 113.382 162.929 113.436 162.929 cv
113.489 162.929 113.511 162.917 113.543 162.885 cv
113.564 162.863 113.629 162.604 113.661 162.452 cv
114.07 160.839 li
115.799 160.785 117.358 159.324 117.358 157.873 cv
117.358 157.018 116.788 156.021 115.294 155.914 cv
115.896 153.463 li
cp
f
127.579 163.381 mo
127.579 162.959 li
126.511 162.959 li
126.511 153.023 li
127.579 153.023 li
127.579 152.602 li
126.09 152.602 li
126.09 163.381 li
127.579 163.381 li
cp
f
131.932 157.204 mo
131.932 159.423 li
131.932 159.618 131.932 159.64 131.812 159.824 cv
131.489 160.343 131.005 160.581 130.543 160.581 cv
130.059 160.581 129.671 160.299 129.413 159.888 cv
129.134 159.445 129.102 158.829 129.102 158.384 cv
129.102 157.983 129.122 157.333 129.434 156.847 cv
129.661 156.511 130.069 156.154 130.65 156.154 cv
131.027 156.154 131.479 156.316 131.812 156.803 cv
131.932 156.987 131.932 157.009 131.932 157.203 cv
131.932 157.204 li
cp
131.932 160.106 mo
131.932 160.82 li
133.526 160.703 li
133.526 160.369 li
132.771 160.369 132.684 160.293 132.684 159.763 cv
132.684 153.203 li
131.127 153.322 li
131.127 153.655 li
131.883 153.655 131.97 153.73 131.97 154.261 cv
131.97 156.597 li
131.657 156.199 131.192 155.913 130.608 155.913 cv
129.332 155.913 128.198 156.976 128.198 158.373 cv
128.198 159.748 129.255 160.82 130.485 160.82 cv
131.176 160.82 131.662 160.453 131.932 160.106 cv
131.932 160.106 li
cp
f
135.032 158.202 mo
138.043 158.202 li
138.281 158.202 138.315 158.202 138.315 157.96 cv
138.315 156.896 137.729 155.853 136.378 155.853 cv
135.123 155.853 134.129 156.969 134.129 158.321 cv
134.129 159.771 135.264 160.821 136.508 160.821 cv
137.827 160.821 138.315 159.621 138.315 159.417 cv
138.315 159.308 138.231 159.286 138.179 159.286 cv
138.086 159.286 138.063 159.351 138.043 159.437 cv
137.664 160.549 136.689 160.549 136.581 160.549 cv
136.04 160.549 135.607 160.224 135.357 159.824 cv
135.032 159.304 135.032 158.591 135.032 158.202 cv
135.032 158.202 li
cp
135.032 157.96 mo
135.097 156.362 136.004 156.094 136.371 156.094 cv
137.483 156.094 137.591 157.542 137.591 157.96 cv
135.032 157.96 li
cp
f
141.345 162.687 mo
140.261 162.687 139.519 162.138 139.519 161.567 cv
139.519 161.071 139.927 160.673 140.4 160.64 cv
141.033 160.64 li
141.958 160.64 143.163 160.64 143.163 161.567 cv
143.163 162.149 142.399 162.687 141.345 162.687 cv
141.345 162.687 li
cp
139.79 159.272 mo
139.79 159.229 139.79 158.977 139.974 158.757 cv
140.396 159.044 140.84 159.075 141.045 159.075 cv
142.053 159.075 142.8 158.333 142.8 157.506 cv
142.8 157.109 142.625 156.712 142.35 156.465 cv
142.738 156.099 143.127 156.046 143.321 156.046 cv
143.343 156.046 143.396 156.046 143.429 156.057 cv
143.308 156.1 143.252 156.217 143.252 156.347 cv
143.252 156.529 143.394 156.658 143.569 156.658 cv
143.677 156.658 143.885 156.583 143.885 156.336 cv
143.885 156.153 143.754 155.809 143.332 155.809 cv
143.115 155.809 142.638 155.866 142.184 156.303 cv
141.727 155.947 141.272 155.914 141.033 155.914 cv
140.025 155.914 139.277 156.661 139.277 157.494 cv
139.277 157.971 139.515 158.382 139.785 158.609 cv
139.645 158.771 139.45 159.129 139.45 159.508 cv
139.45 159.844 139.591 160.255 139.925 160.472 cv
139.277 160.655 138.947 161.122 138.947 161.554 cv
138.947 162.333 140.017 162.93 141.335 162.93 cv
142.609 162.93 143.734 162.379 143.734 161.539 cv
143.734 161.163 143.583 160.612 143.032 160.311 cv
142.458 160.008 141.832 160.008 141.173 160.008 cv
140.903 160.008 140.439 160.008 140.363 160.008 cv
140.018 159.963 139.79 159.624 139.79 159.273 cv
139.79 159.272 li
cp
141.038 158.834 mo
140.09 158.834 140.09 157.75 140.09 157.5 cv
140.09 157.207 140.101 156.86 140.264 156.589 cv
140.352 156.458 140.603 156.154 141.038 156.154 cv
141.987 156.154 141.987 157.239 141.987 157.489 cv
141.987 157.782 141.976 158.128 141.812 158.4 cv
141.725 158.531 141.474 158.834 141.038 158.834 cv
141.038 158.834 li
cp
f
145.902 152.602 mo
144.423 152.602 li
144.423 153.023 li
145.48 153.023 li
145.48 162.959 li
144.423 162.959 li
144.423 163.381 li
145.902 163.381 li
145.902 152.602 li
cp
f
23.5073 10.5874 mo
23.605 10.4785 23.605 10.4351 23.605 10.4126 cv
23.605 10.3589 23.5615 10.3042 23.5293 10.2607 cv
21.3027 7.03174 li
23.8125 7.03174 li
25.6489 7.03174 26.1919 7.4248 26.4209 9.15039 cv
26.6934 9.15039 li
26.3882 6.69727 li
20.3545 6.69727 li
20.0938 6.69727 20.0718 6.69727 20.0718 6.94922 cv
22.7788 10.8936 li
20.1914 13.8477 li
20.083 13.9678 20.083 13.9888 20.083 14.0225 cv
20.083 14.1426 20.1914 14.1426 20.3545 14.1426 cv
26.3887 14.1426 li
26.6943 11.5698 li
26.4209 11.5698 li
26.2251 13.3921 25.4858 13.6865 23.7798 13.6865 cv
20.7813 13.6865 li
23.5073 10.5874 li
cp
f
29.3887 14.02 mo
28.8589 14.02 28.4258 13.627 28.4258 12.8418 cv
28.4258 12.5142 28.5547 11.6201 28.9341 10.9771 cv
29.3887 10.2236 30.0386 10.0703 30.4067 10.0703 cv
31.3164 10.0703 31.4023 10.7905 31.4023 11.1299 cv
31.4023 11.6416 31.186 12.5361 30.8179 13.0928 cv
30.396 13.7363 29.811 14.02 29.3887 14.02 cv
29.3887 14.02 li
cp
32.9766 10.0703 mo
33.1182 10.0703 33.5103 10.0703 33.5103 9.6958 cv
33.5103 9.43164 33.2822 9.43164 33.0864 9.43164 cv
30.6064 9.43164 li
28.9639 9.43164 27.7563 11.2354 27.7563 12.5361 cv
27.7563 13.498 28.3955 14.2632 29.3813 14.2632 cv
30.6597 14.2632 32.1016 12.9419 32.1016 11.2607 cv
32.1016 11.0747 32.1016 10.5513 31.7769 10.0703 cv
32.9766 10.0703 li
cp
f
43.9966 16.8467 mo
43.9966 16.4209 li
42.9194 16.4209 li
42.9194 6.39355 li
43.9966 6.39355 li
43.9966 5.96826 li
42.4941 5.96826 li
42.4941 16.8467 li
43.9966 16.8467 li
cp
f
46.1709 12.8975 mo
46.1709 10.4688 li
46.4854 9.91357 47.0176 9.59766 47.5713 9.59766 cv
48.3643 9.59766 49.0269 10.5557 49.0269 11.7861 cv
49.0269 13.1055 48.2656 14.02 47.4619 14.02 cv
47.0283 14.02 46.6157 13.8027 46.3228 13.3555 cv
46.1709 13.1265 46.1709 13.1157 46.1709 12.8975 cv
46.1709 12.8975 li
cp
46.1318 10.0444 mo
46.1318 9.31006 li
44.561 9.42969 li
44.561 9.76611 li
45.3345 9.76611 45.4106 9.83252 45.4106 10.3149 cv
45.4106 15.4409 li
45.4106 15.9346 45.291 15.9346 44.561 15.9346 cv
44.561 16.2686 li
44.9326 16.2573 45.498 16.2363 45.7827 16.2363 cv
46.0762 16.2363 46.6318 16.2573 47.0137 16.2686 cv
47.0137 15.9346 li
46.29 15.9346 46.1709 15.9346 46.1709 15.4409 cv
46.1709 13.498 li
46.2261 13.6733 46.6826 14.2627 47.5103 14.2627 cv
48.8062 14.2627 49.9399 13.1914 49.9399 11.7817 cv
49.9399 10.394 48.8809 9.31006 47.6592 9.31006 cv
46.8086 9.31006 46.3501 9.7998 46.1323 10.0444 cv
46.1318 10.0444 li
cp
f
52.2168 12.897 mo
52.2168 10.6455 li
52.2168 10.4385 52.2168 10.4277 52.3364 10.2534 cv
52.7603 9.64111 53.3569 9.55322 53.6177 9.55322 cv
54.1064 9.55322 54.4971 9.83789 54.7578 10.2534 cv
55.041 10.7002 55.0723 11.3232 55.0723 11.7715 cv
55.0723 12.1758 55.0513 12.8306 54.7363 13.3228 cv
54.5083 13.6616 54.0957 14.022 53.5093 14.022 cv
53.02 14.022 52.6294 13.7593 52.3691 13.3555 cv
52.2168 13.126 52.2168 13.0933 52.2168 12.897 cv
52.2168 12.897 li
cp
52.1787 10.0337 mo
52.1787 6.57568 li
50.6084 6.69531 li
50.6084 7.03174 li
51.3706 7.03174 51.457 7.10889 51.457 7.64307 cv
51.457 14.1416 li
51.73 14.1416 li
51.7412 14.1299 51.8286 13.9775 52.1226 13.4653 cv
52.2871 13.7168 52.7446 14.2627 53.5518 14.2627 cv
54.8506 14.2627 55.9854 13.1914 55.9854 11.7817 cv
55.9854 10.394 54.9165 9.31006 53.6733 9.31006 cv
52.8223 9.31006 52.354 9.83252 52.1787 10.0337 cv
52.1787 10.0337 li
cp
f
58.4463 13.564 mo
58.4463 13.2485 58.1841 12.9863 57.8687 12.9863 cv
57.5527 12.9863 57.291 13.2485 57.291 13.564 cv
57.291 13.8804 57.5532 14.1416 57.8687 14.1416 cv
58.1841 14.1416 58.4463 13.8799 58.4463 13.564 cv
58.4463 13.564 li
cp
f
65.8535 13.4556 mo
65.9961 13.6987 66.4321 14.1416 66.5518 14.1416 cv
66.6509 14.1416 66.6509 14.0537 66.6509 13.8887 cv
66.6509 11.981 li
66.6509 11.5537 66.6943 11.498 67.3979 11.498 cv
67.3979 11.1641 li
66.9946 11.1748 66.3955 11.1973 66.0684 11.1973 cv
65.6333 11.1973 64.707 11.1973 64.3149 11.1641 cv
64.3149 11.498 li
64.6636 11.498 li
65.646 11.498 65.6777 11.6187 65.6777 12.0239 cv
65.6777 12.7251 li
65.6777 13.9517 64.2935 14.0508 63.9873 14.0508 cv
63.2793 14.0508 61.1216 13.6689 61.1216 10.4146 cv
61.1216 7.15039 63.269 6.78857 63.9233 6.78857 cv
65.0898 6.78857 66.0825 7.77197 66.3013 9.37891 cv
66.3228 9.53223 66.3228 9.56445 66.4746 9.56445 cv
66.6509 9.56445 66.6509 9.53223 66.6509 9.30322 cv
66.6509 6.71582 li
66.6509 6.53027 66.6509 6.45313 66.5313 6.45313 cv
66.4868 6.45313 66.4434 6.45313 66.355 6.58545 cv
65.8101 7.39551 li
65.4614 7.04492 64.8726 6.45313 63.7925 6.45313 cv
61.7632 6.45313 59.9961 8.17725 59.9961 10.4141 cv
59.9961 12.6504 61.7422 14.3848 63.814 14.3848 cv
64.6113 14.3848 65.4834 14.1006 65.8535 13.4551 cv
65.8535 13.4556 li
cp
f
69.1421 11.6191 mo
72.1816 11.6191 li
72.4214 11.6191 72.4541 11.6191 72.4541 11.377 cv
72.4541 10.3018 71.8638 9.24951 70.5 9.24951 cv
69.2349 9.24951 68.2305 10.3755 68.2305 11.7402 cv
68.2305 13.2036 69.3765 14.2632 70.6309 14.2632 cv
71.9619 14.2632 72.4541 13.0527 72.4541 12.8452 cv
72.4541 12.7354 72.3711 12.7139 72.3179 12.7139 cv
72.2227 12.7139 72.2021 12.7793 72.1816 12.8667 cv
71.7979 13.9888 70.8145 13.9888 70.7051 13.9888 cv
70.1587 13.9888 69.7222 13.6616 69.4702 13.2578 cv
69.1421 12.7334 69.1421 12.0127 69.1421 11.6191 cv
69.1421 11.6191 li
cp
69.1421 11.377 mo
69.2075 9.76318 70.123 9.49268 70.4932 9.49268 cv
71.6157 9.49268 71.7241 10.9541 71.7241 11.377 cv
69.1421 11.377 li
cp
f
79.561 7.76367 mo
79.7129 7.35986 80.0078 7.04346 80.7495 7.03174 cv
80.7495 6.69727 li
80.4111 6.71875 79.9756 6.72949 79.6924 6.72949 cv
79.3643 6.72949 78.7329 6.70801 78.4492 6.69727 cv
78.4492 7.03174 li
79.0156 7.04297 79.2446 7.32617 79.2446 7.57666 cv
79.2446 7.66504 79.2124 7.72998 79.1919 7.79541 cv
77.1958 13.0522 li
75.1143 7.54492 li
75.0483 7.39209 75.0483 7.37012 75.0483 7.34863 cv
75.0483 7.03174 75.6694 7.03174 75.9424 7.03174 cv
75.9424 6.69727 li
75.5498 6.72949 74.7979 6.72949 74.3828 6.72949 cv
73.8604 6.72949 73.3916 6.70801 72.999 6.69727 cv
72.999 7.03174 li
73.7085 7.03174 73.9146 7.03174 74.0674 7.44678 cv
76.5967 14.1455 li
76.6729 14.3525 76.7275 14.3848 76.8687 14.3848 cv
77.0547 14.3848 77.0762 14.3301 77.1309 14.1777 cv
79.561 7.76367 li
cp
f
86.7944 7.54834 mo
86.9165 7.54834 87.1006 7.54834 87.1006 7.36963 cv
87.1006 7.18311 86.9238 7.18311 86.7944 7.18311 cv
82.2383 7.18311 li
82.1172 7.18311 81.9326 7.18311 81.9326 7.3623 cv
81.9326 7.54834 82.1084 7.54834 82.2383 7.54834 cv
86.7944 7.54834 li
cp
f
90.5039 4.96289 mo
90.5039 7.76074 li
88.4995 7.76074 li
90.5039 4.96289 li
cp
91.9551 8.03418 mo
91.9551 7.76074 li
91.1113 7.76074 li
91.1113 4.35938 li
91.1113 4.19922 91.1113 4.14502 90.9434 4.14502 cv
90.8516 4.14502 90.8208 4.14502 90.7446 4.25244 cv
88.2183 7.76074 li
88.2183 8.03418 li
90.4609 8.03418 li
90.4609 8.65771 li
90.4609 8.91504 90.4609 9.00635 89.8418 9.00635 cv
89.6367 9.00635 li
89.6367 9.27979 li
90.0181 9.26563 90.5078 9.24951 90.7808 9.24951 cv
91.063 9.24951 91.5518 9.26563 91.9321 9.27979 cv
91.9321 9.00635 li
91.7271 9.00635 li
91.1113 9.00635 91.1113 8.91504 91.1113 8.65771 cv
91.1113 8.03418 li
91.9551 8.03418 li
cp
f
94.5449 5.96826 mo
93.0518 5.96826 li
93.0518 6.39355 li
94.1187 6.39355 li
94.1187 16.4209 li
93.0518 16.4209 li
93.0518 16.8467 li
94.5449 16.8467 li
94.5449 5.96826 li
cp
f
193.64 7.42822 mo
196.571 13.3203 li
190.697 13.3203 li
193.64 7.42822 li
cp
194.28 6.52881 mo
194.203 6.38818 194.182 6.3335 193.996 6.3335 cv
193.811 6.3335 193.79 6.38818 193.712 6.52881 cv
190.023 13.9238 li
189.969 14.022 189.969 14.0439 189.969 14.0547 cv
189.969 14.1411 190.035 14.1411 190.209 14.1411 cv
197.784 14.1411 li
197.958 14.1411 198.024 14.1411 198.024 14.0547 cv
198.024 14.0439 198.024 14.0215 197.969 13.9238 cv
194.28 6.52881 li
cp
f
200.597 14.02 mo
200.067 14.02 199.634 13.627 199.634 12.8418 cv
199.634 12.5142 199.764 11.6201 200.143 10.9761 cv
200.597 10.2236 201.248 10.0703 201.615 10.0703 cv
202.524 10.0703 202.612 10.7905 202.612 11.1294 cv
202.612 11.6411 202.395 12.5366 202.026 13.0918 cv
201.604 13.7358 201.02 14.02 200.597 14.02 cv
200.597 14.02 li
cp
204.185 10.0703 mo
204.327 10.0703 204.719 10.0703 204.719 9.6958 cv
204.719 9.43213 204.491 9.43213 204.295 9.43213 cv
201.815 9.43213 li
200.173 9.43213 198.965 11.2354 198.965 12.5366 cv
198.965 13.498 199.604 14.2632 200.59 14.2632 cv
201.869 14.2632 203.311 12.9419 203.311 11.2607 cv
203.311 11.0747 203.311 10.5508 202.986 10.0703 cv
204.185 10.0703 li
cp
f
215.206 16.8462 mo
215.206 16.4209 li
214.128 16.4209 li
214.128 6.39355 li
215.206 6.39355 li
215.206 5.96826 li
213.703 5.96826 li
213.703 16.8462 li
215.206 16.8462 li
cp
f
217.379 12.8975 mo
217.379 10.4688 li
217.694 9.91357 218.226 9.59717 218.78 9.59717 cv
219.572 9.59717 220.235 10.5562 220.235 11.7866 cv
220.235 13.1045 219.475 14.02 218.671 14.02 cv
218.237 14.02 217.825 13.8018 217.531 13.3545 cv
217.379 13.127 217.379 13.1152 217.379 12.8975 cv
217.379 12.8975 li
cp
217.341 10.0435 mo
217.341 9.31006 li
215.77 9.43018 li
215.77 9.76611 li
216.543 9.76611 216.62 9.83301 216.62 10.3149 cv
216.62 15.4409 li
216.62 15.9346 216.5 15.9346 215.77 15.9346 cv
215.77 16.2686 li
216.141 16.2573 216.708 16.2358 216.991 16.2358 cv
217.285 16.2358 217.841 16.2573 218.223 16.2686 cv
218.223 15.9346 li
217.499 15.9346 217.38 15.9346 217.38 15.4404 cv
217.38 13.498 li
217.435 13.6733 217.892 14.2632 218.719 14.2632 cv
220.015 14.2632 221.148 13.1914 221.148 11.7817 cv
221.148 10.394 220.089 9.31006 218.868 9.31006 cv
218.017 9.31006 217.559 9.79932 217.341 10.0435 cv
217.341 10.0435 li
cp
f
223.426 12.896 mo
223.426 10.646 li
223.426 10.4385 223.426 10.4277 223.545 10.2529 cv
223.969 9.64111 224.566 9.55371 224.827 9.55371 cv
225.315 9.55371 225.706 9.83789 225.967 10.2529 cv
226.249 10.7007 226.282 11.3232 226.282 11.772 cv
226.282 12.1753 226.26 12.8306 225.945 13.3228 cv
225.717 13.6616 225.304 14.0215 224.718 14.0215 cv
224.229 14.0215 223.838 13.7588 223.578 13.3545 cv
223.426 13.1255 223.426 13.0933 223.426 12.896 cv
223.426 12.896 li
cp
223.388 10.0332 mo
223.388 6.57568 li
221.817 6.69434 li
221.817 7.03076 li
222.58 7.03076 222.667 7.10889 222.667 7.64307 cv
222.667 14.1411 li
222.939 14.1411 li
222.95 14.1299 223.037 13.978 223.332 13.4653 cv
223.496 13.7163 223.954 14.2632 224.761 14.2632 cv
226.059 14.2632 227.195 13.1914 227.195 11.7817 cv
227.195 10.394 226.125 9.31006 224.882 9.31006 cv
224.031 9.31006 223.562 9.83301 223.388 10.0332 cv
223.388 10.0332 li
cp
f
229.655 13.5635 mo
229.655 13.248 229.394 12.9868 229.078 12.9868 cv
228.762 12.9868 228.5 13.248 228.5 13.5635 cv
228.5 13.8804 228.762 14.1411 229.078 14.1411 cv
229.394 14.1411 229.655 13.8794 229.655 13.5635 cv
229.655 13.5635 li
cp
f
237.062 13.4551 mo
237.204 13.6987 237.641 14.1411 237.761 14.1411 cv
237.859 14.1411 237.859 14.0537 237.859 13.8892 cv
237.859 11.981 li
237.859 11.5532 237.903 11.4976 238.607 11.4976 cv
238.607 11.1631 li
238.204 11.1748 237.605 11.1968 237.278 11.1968 cv
236.842 11.1968 235.916 11.1968 235.523 11.1631 cv
235.523 11.4976 li
235.872 11.4976 li
236.855 11.4976 236.887 11.6187 236.887 12.0239 cv
236.887 12.7246 li
236.887 13.9517 235.502 14.0508 235.196 14.0508 cv
234.488 14.0508 232.33 13.6685 232.33 10.4146 cv
232.33 7.1499 234.478 6.7876 235.133 6.7876 cv
236.299 6.7876 237.292 7.77246 237.51 9.37842 cv
237.532 9.53174 237.532 9.56396 237.684 9.56396 cv
237.859 9.56396 237.859 9.53174 237.859 9.30273 cv
237.859 6.71582 li
237.859 6.53027 237.859 6.45361 237.74 6.45361 cv
237.695 6.45361 237.653 6.45361 237.564 6.58447 cv
237.019 7.39551 li
236.67 7.04492 236.081 6.45361 235.001 6.45361 cv
232.973 6.45361 231.206 8.17773 231.206 10.4136 cv
231.206 12.6504 232.951 14.3843 235.023 14.3843 cv
235.819 14.3843 236.692 14.1006 237.063 13.4546 cv
237.062 13.4551 li
cp
f
240.351 11.6191 mo
243.391 11.6191 li
243.63 11.6191 243.664 11.6191 243.664 11.377 cv
243.664 10.3022 243.073 9.24951 241.709 9.24951 cv
240.443 9.24951 239.44 10.3755 239.44 11.7407 cv
239.44 13.2036 240.585 14.2632 241.84 14.2632 cv
243.171 14.2632 243.664 13.0522 243.664 12.8452 cv
243.664 12.7358 243.58 12.7134 243.527 12.7134 cv
243.431 12.7134 243.41 12.7798 243.389 12.8662 cv
243.007 13.9888 242.023 13.9888 241.914 13.9888 cv
241.367 13.9888 240.93 13.6616 240.679 13.2573 cv
240.351 12.7329 240.351 12.0122 240.351 11.6191 cv
240.351 11.6191 li
cp
240.351 11.377 mo
240.417 9.76318 241.333 9.49268 241.702 9.49268 cv
242.825 9.49268 242.933 10.9541 242.933 11.377 cv
240.351 11.377 li
cp
f
250.77 7.7627 mo
250.921 7.35986 251.216 7.04297 251.958 7.03076 cv
251.958 6.69727 li
251.621 6.71875 251.185 6.729 250.901 6.729 cv
250.574 6.729 249.942 6.70801 249.659 6.69727 cv
249.659 7.03076 li
250.224 7.04248 250.455 7.32617 250.455 7.57715 cv
250.455 7.66406 250.421 7.72998 250.4 7.79541 cv
248.405 13.0522 li
246.323 7.54541 li
246.257 7.39111 246.257 7.37061 246.257 7.34814 cv
246.257 7.03076 246.879 7.03076 247.152 7.03076 cv
247.152 6.69727 li
246.758 6.729 246.006 6.729 245.592 6.729 cv
245.069 6.729 244.6 6.70801 244.208 6.69727 cv
244.208 7.03076 li
244.917 7.03076 245.124 7.03076 245.277 7.44678 cv
247.805 14.145 li
247.882 14.3521 247.937 14.3843 248.078 14.3843 cv
248.264 14.3843 248.285 14.3306 248.34 14.1777 cv
250.77 7.7627 li
cp
f
258.002 7.54834 mo
258.125 7.54834 258.308 7.54834 258.308 7.36963 cv
258.308 7.18311 258.133 7.18311 258.002 7.18311 cv
253.448 7.18311 li
253.326 7.18311 253.142 7.18311 253.142 7.36182 cv
253.142 7.54736 253.318 7.54736 253.448 7.54736 cv
258.002 7.54834 li
cp
f
261.712 4.96191 mo
261.712 7.76025 li
259.709 7.76025 li
261.712 4.96191 li
cp
263.166 8.03418 mo
263.166 7.76074 li
262.32 7.76074 li
262.32 4.35938 li
262.32 4.19873 262.32 4.14502 262.152 4.14502 cv
262.061 4.14502 262.029 4.14502 261.954 4.25244 cv
259.427 7.76074 li
259.427 8.03418 li
261.67 8.03418 li
261.67 8.65723 li
261.67 8.91553 261.67 9.00635 261.051 9.00635 cv
260.845 9.00635 li
260.845 9.27979 li
261.227 9.26465 261.715 9.24951 261.99 9.24951 cv
262.273 9.24951 262.761 9.26465 263.142 9.27979 cv
263.142 9.00635 li
262.937 9.00635 li
262.32 9.00635 262.32 8.91553 262.32 8.65723 cv
262.32 8.03418 li
263.166 8.03418 li
cp
f
265.753 5.96826 mo
264.261 5.96826 li
264.261 6.39355 li
265.329 6.39355 li
265.329 16.4209 li
264.261 16.4209 li
264.261 16.8462 li
265.753 16.8462 li
265.753 5.96826 li
cp
f
453.95 156.154 mo
454.771 156.199 455.384 156.693 455.384 157.641 cv
455.384 158.911 454.457 160.45 452.841 160.581 cv
453.95 156.154 li
cp
452.562 160.581 mo
451.915 160.548 451.139 160.171 451.139 159.095 cv
451.139 157.803 452.066 156.295 453.673 156.154 cv
452.562 160.581 li
cp
454.614 153.463 mo
454.614 153.442 454.646 153.323 454.646 153.312 cv
454.646 153.301 454.646 153.203 454.518 153.203 cv
454.409 153.203 454.399 153.237 454.356 153.419 cv
453.733 155.914 li
452.024 155.968 450.446 157.407 450.446 158.88 cv
450.446 159.909 451.198 160.764 452.509 160.839 cv
452.423 161.175 452.348 161.521 452.262 161.856 cv
452.132 162.366 452.024 162.776 452.024 162.81 cv
452.024 162.917 452.101 162.929 452.154 162.929 cv
452.208 162.929 452.229 162.917 452.262 162.886 cv
452.283 162.863 452.348 162.604 452.38 162.452 cv
452.788 160.839 li
454.519 160.784 456.077 159.323 456.077 157.873 cv
456.077 157.018 455.507 156.021 454.013 155.914 cv
454.614 153.463 li
cp
f
466.298 163.381 mo
466.298 162.96 li
465.229 162.96 li
465.229 153.023 li
466.298 153.023 li
466.298 152.602 li
464.81 152.602 li
464.81 163.381 li
466.298 163.381 li
cp
f
470.65 157.204 mo
470.65 159.423 li
470.65 159.618 470.65 159.64 470.53 159.823 cv
470.208 160.343 469.724 160.581 469.262 160.581 cv
468.777 160.581 468.39 160.3 468.132 159.888 cv
467.853 159.445 467.82 158.829 467.82 158.384 cv
467.82 157.983 467.841 157.333 468.153 156.847 cv
468.38 156.511 468.788 156.154 469.369 156.154 cv
469.746 156.154 470.197 156.316 470.53 156.803 cv
470.65 156.987 470.65 157.009 470.65 157.203 cv
470.65 157.204 li
cp
470.65 160.106 mo
470.65 160.82 li
472.245 160.702 li
472.245 160.369 li
471.489 160.369 471.403 160.293 471.403 159.763 cv
471.403 153.203 li
469.847 153.322 li
469.847 153.655 li
470.603 153.655 470.688 153.73 470.688 154.261 cv
470.688 156.597 li
470.376 156.199 469.911 155.913 469.327 155.913 cv
468.051 155.913 466.917 156.976 466.917 158.373 cv
466.917 159.748 467.974 160.82 469.204 160.82 cv
469.895 160.82 470.38 160.453 470.65 160.106 cv
470.65 160.106 li
cp
f
473.751 158.202 mo
476.763 158.202 li
476.999 158.202 477.034 158.202 477.034 157.96 cv
477.034 156.896 476.448 155.853 475.097 155.853 cv
473.842 155.853 472.848 156.969 472.848 158.321 cv
472.848 159.771 473.983 160.821 475.227 160.821 cv
476.546 160.821 477.034 159.62 477.034 159.417 cv
477.034 159.308 476.95 159.286 476.897 159.286 cv
476.805 159.286 476.782 159.351 476.763 159.437 cv
476.383 160.549 475.408 160.549 475.3 160.549 cv
474.759 160.549 474.325 160.224 474.076 159.823 cv
473.751 159.304 473.751 158.591 473.751 158.202 cv
473.751 158.202 li
cp
473.751 157.96 mo
473.815 156.362 474.723 156.094 475.09 156.094 cv
476.202 156.094 476.31 157.542 476.31 157.96 cv
473.751 157.96 li
cp
f
480.063 162.687 mo
478.979 162.687 478.237 162.138 478.237 161.567 cv
478.237 161.071 478.646 160.673 479.118 160.64 cv
479.752 160.64 li
480.677 160.64 481.882 160.64 481.882 161.567 cv
481.882 162.149 481.118 162.687 480.063 162.687 cv
480.063 162.687 li
cp
478.509 159.272 mo
478.509 159.229 478.509 158.978 478.692 158.757 cv
479.115 159.044 479.56 159.075 479.764 159.075 cv
480.771 159.075 481.519 158.333 481.519 157.506 cv
481.519 157.109 481.343 156.712 481.068 156.465 cv
481.457 156.099 481.846 156.046 482.04 156.046 cv
482.062 156.046 482.115 156.046 482.147 156.057 cv
482.026 156.1 481.972 156.217 481.972 156.347 cv
481.972 156.529 482.112 156.658 482.288 156.658 cv
482.396 156.658 482.604 156.583 482.604 156.336 cv
482.604 156.153 482.474 155.809 482.051 155.809 cv
481.833 155.809 481.356 155.866 480.902 156.303 cv
480.446 155.947 479.991 155.914 479.752 155.914 cv
478.744 155.914 477.995 156.661 477.995 157.494 cv
477.995 157.971 478.233 158.382 478.504 158.609 cv
478.364 158.771 478.169 159.13 478.169 159.508 cv
478.169 159.844 478.31 160.255 478.644 160.472 cv
477.995 160.655 477.665 161.122 477.665 161.554 cv
477.665 162.333 478.735 162.93 480.054 162.93 cv
481.328 162.93 482.453 162.379 482.453 161.539 cv
482.453 161.163 482.302 160.612 481.751 160.311 cv
481.177 160.008 480.551 160.008 479.892 160.008 cv
479.622 160.008 479.157 160.008 479.081 160.008 cv
478.736 159.964 478.509 159.624 478.509 159.272 cv
478.509 159.272 li
cp
479.757 158.835 mo
478.81 158.835 478.81 157.75 478.81 157.5 cv
478.81 157.207 478.819 156.86 478.983 156.589 cv
479.07 156.458 479.321 156.154 479.757 156.154 cv
480.706 156.154 480.706 157.239 480.706 157.489 cv
480.706 157.782 480.694 158.128 480.53 158.4 cv
480.444 158.53 480.192 158.835 479.757 158.835 cv
479.757 158.835 li
cp
f
484.62 152.602 mo
483.142 152.602 li
483.142 153.023 li
484.198 153.023 li
484.198 162.96 li
483.142 162.96 li
483.142 163.381 li
484.62 163.381 li
484.62 152.602 li
cp
f
284.591 156.154 mo
285.411 156.198 286.024 156.692 286.024 157.641 cv
286.024 158.911 285.098 160.45 283.481 160.581 cv
284.591 156.154 li
cp
283.202 160.581 mo
282.556 160.548 281.779 160.171 281.779 159.095 cv
281.779 157.803 282.707 156.296 284.313 156.154 cv
283.202 160.581 li
cp
285.255 153.463 mo
285.255 153.442 285.287 153.323 285.287 153.312 cv
285.287 153.301 285.287 153.203 285.158 153.203 cv
285.05 153.203 285.04 153.237 284.997 153.419 cv
284.374 155.914 li
282.665 155.968 281.087 157.407 281.087 158.88 cv
281.087 159.909 281.839 160.764 283.149 160.839 cv
283.063 161.175 282.988 161.521 282.902 161.856 cv
282.772 162.366 282.665 162.776 282.665 162.81 cv
282.665 162.917 282.741 162.929 282.795 162.929 cv
282.849 162.929 282.87 162.917 282.902 162.886 cv
282.924 162.863 282.988 162.604 283.021 162.452 cv
283.429 160.839 li
285.159 160.784 286.718 159.323 286.718 157.873 cv
286.718 157.019 286.147 156.021 284.653 155.914 cv
285.255 153.463 li
cp
f
296.938 163.381 mo
296.938 162.96 li
295.87 162.96 li
295.87 153.023 li
296.938 153.023 li
296.938 152.602 li
295.45 152.602 li
295.45 163.381 li
296.938 163.381 li
cp
f
301.291 157.204 mo
301.291 159.423 li
301.291 159.618 301.291 159.64 301.171 159.823 cv
300.849 160.343 300.364 160.581 299.902 160.581 cv
299.418 160.581 299.03 160.3 298.772 159.888 cv
298.493 159.445 298.461 158.829 298.461 158.384 cv
298.461 157.983 298.481 157.333 298.794 156.847 cv
299.021 156.511 299.429 156.154 300.01 156.154 cv
300.387 156.154 300.838 156.316 301.171 156.804 cv
301.291 156.987 301.291 157.009 301.291 157.203 cv
301.291 157.204 li
cp
301.291 160.106 mo
301.291 160.82 li
302.886 160.702 li
302.886 160.369 li
302.13 160.369 302.044 160.293 302.044 159.763 cv
302.044 153.203 li
300.487 153.322 li
300.487 153.655 li
301.243 153.655 301.329 153.73 301.329 154.261 cv
301.329 156.597 li
301.017 156.199 300.552 155.913 299.968 155.913 cv
298.691 155.913 297.558 156.976 297.558 158.373 cv
297.558 159.748 298.614 160.82 299.845 160.82 cv
300.535 160.82 301.021 160.453 301.291 160.106 cv
301.291 160.106 li
cp
f
304.392 158.202 mo
307.403 158.202 li
307.64 158.202 307.675 158.202 307.675 157.96 cv
307.675 156.896 307.089 155.853 305.737 155.853 cv
304.482 155.853 303.488 156.969 303.488 158.321 cv
303.488 159.771 304.624 160.821 305.867 160.821 cv
307.187 160.821 307.675 159.62 307.675 159.417 cv
307.675 159.308 307.591 159.286 307.538 159.286 cv
307.445 159.286 307.423 159.351 307.403 159.437 cv
307.023 160.549 306.049 160.549 305.94 160.549 cv
305.399 160.549 304.966 160.224 304.717 159.823 cv
304.392 159.304 304.392 158.591 304.392 158.202 cv
304.392 158.202 li
cp
304.392 157.96 mo
304.456 156.362 305.363 156.094 305.73 156.094 cv
306.843 156.094 306.95 157.542 306.95 157.96 cv
304.392 157.96 li
cp
f
310.704 162.687 mo
309.62 162.687 308.878 162.138 308.878 161.567 cv
308.878 161.071 309.286 160.673 309.759 160.64 cv
310.393 160.64 li
311.317 160.64 312.522 160.64 312.522 161.567 cv
312.522 162.149 311.759 162.687 310.704 162.687 cv
310.704 162.687 li
cp
309.149 159.272 mo
309.149 159.229 309.149 158.978 309.333 158.757 cv
309.756 159.044 310.2 159.075 310.404 159.075 cv
311.412 159.075 312.159 158.333 312.159 157.506 cv
312.159 157.108 311.983 156.712 311.709 156.465 cv
312.098 156.099 312.486 156.046 312.681 156.046 cv
312.702 156.046 312.756 156.046 312.788 156.057 cv
312.667 156.1 312.612 156.218 312.612 156.347 cv
312.612 156.529 312.753 156.658 312.929 156.658 cv
313.036 156.658 313.245 156.583 313.245 156.336 cv
313.245 156.153 313.114 155.809 312.691 155.809 cv
312.474 155.809 311.997 155.866 311.543 156.303 cv
311.087 155.947 310.632 155.914 310.393 155.914 cv
309.385 155.914 308.636 156.661 308.636 157.494 cv
308.636 157.971 308.874 158.382 309.145 158.609 cv
309.005 158.771 308.81 159.13 308.81 159.508 cv
308.81 159.844 308.95 160.255 309.284 160.472 cv
308.636 160.655 308.306 161.122 308.306 161.554 cv
308.306 162.333 309.376 162.93 310.694 162.93 cv
311.969 162.93 313.094 162.379 313.094 161.539 cv
313.094 161.163 312.942 160.612 312.392 160.311 cv
311.817 160.008 311.191 160.008 310.532 160.008 cv
310.263 160.008 309.798 160.008 309.722 160.008 cv
309.377 159.964 309.149 159.624 309.149 159.272 cv
309.149 159.272 li
cp
310.397 158.835 mo
309.45 158.835 309.45 157.749 309.45 157.5 cv
309.45 157.206 309.46 156.86 309.624 156.589 cv
309.711 156.458 309.962 156.154 310.397 156.154 cv
311.347 156.154 311.347 157.239 311.347 157.489 cv
311.347 157.782 311.335 158.128 311.171 158.399 cv
311.085 158.53 310.833 158.835 310.397 158.835 cv
310.397 158.835 li
cp
f
315.261 152.602 mo
313.782 152.602 li
313.782 153.023 li
314.839 153.023 li
314.839 162.96 li
313.782 162.96 li
313.782 163.381 li
315.261 163.381 li
315.261 152.602 li
cp
f
361.656 11.127 mo
363.894 7.38184 li
364.257 11.127 li
361.656 11.127 li
cp
360.295 12.7993 mo
359.84 13.5605 359.397 13.7202 358.898 13.7544 cv
358.763 13.7651 358.66 13.7651 358.66 13.979 cv
358.66 14.0464 358.717 14.1025 358.808 14.1025 cv
359.113 14.1025 359.466 14.0684 359.784 14.0684 cv
360.158 14.0684 360.556 14.1025 360.919 14.1025 cv
360.987 14.1025 361.135 14.1025 361.135 13.8892 cv
361.135 13.7651 361.032 13.7544 360.953 13.7544 cv
360.691 13.7319 360.42 13.6401 360.42 13.355 cv
360.42 13.2183 360.487 13.0933 360.578 12.9336 cv
361.44 11.4751 li
364.29 11.4751 li
364.313 11.7144 364.472 13.2642 364.472 13.3779 cv
364.472 13.7197 363.881 13.7539 363.655 13.7539 cv
363.496 13.7539 363.382 13.7539 363.382 13.979 cv
363.382 14.1016 363.518 14.1016 363.541 14.1016 cv
364.006 14.1016 364.495 14.0679 364.96 14.0679 cv
365.243 14.0679 365.96 14.1016 366.243 14.1016 cv
366.311 14.1016 366.448 14.1016 366.448 13.8774 cv
366.448 13.7529 366.334 13.7529 366.186 13.7529 cv
365.482 13.7529 365.482 13.6738 365.448 13.3438 cv
364.756 6.24072 li
364.733 6.01318 364.733 5.96729 364.541 5.96729 cv
364.358 5.96729 364.313 6.04736 364.245 6.16113 cv
360.295 12.7993 li
cp
f
372.694 7.45605 mo
372.82 7.45605 373.012 7.45605 373.012 7.27002 cv
373.012 7.07568 372.829 7.07568 372.694 7.07568 cv
367.948 7.07568 li
367.821 7.07568 367.631 7.07568 367.631 7.26221 cv
367.631 7.45557 367.813 7.45557 367.948 7.45557 cv
372.694 7.45605 li
cp
f
371.95 15.3682 mo
371.681 15.3682 li
371.594 16.147 371.475 17.1724 369.977 17.1724 cv
369.184 17.1724 li
368.812 17.1724 368.804 17.1099 368.804 16.8633 cv
368.804 12.6948 li
368.804 12.4331 368.804 12.3301 369.545 12.3301 cv
369.821 12.3301 li
369.821 12.0454 li
369.654 12.0532 368.637 12.0767 368.431 12.0767 cv
368.128 12.0767 367.23 12.0454 367.222 12.0454 cv
367.222 12.3301 li
367.413 12.3301 li
368.027 12.3301 368.044 12.4102 368.044 12.6875 cv
368.044 16.8164 li
368.044 17.0854 368.027 17.1733 367.413 17.1733 cv
367.222 17.1733 li
367.222 17.4575 li
371.713 17.4575 li
371.95 15.3682 li
cp
f
377.792 12.9019 mo
377.792 12.688 377.792 12.3301 378.626 12.3301 cv
378.626 12.0454 li
378.308 12.0693 377.981 12.0767 377.663 12.0767 cv
377.346 12.0767 377.021 12.0693 376.703 12.0454 cv
376.703 12.3301 li
377.507 12.3301 377.507 12.6875 377.507 12.9009 cv
377.507 15.6196 li
377.507 16.7129 376.67 17.3311 375.85 17.3311 cv
375.384 17.3311 374.405 17.0854 374.405 15.6592 cv
374.405 12.6875 li
374.405 12.418 374.421 12.3301 375.027 12.3301 cv
375.217 12.3301 li
375.217 12.0454 li
374.819 12.0615 374.311 12.0767 374.024 12.0767 cv
373.73 12.0767 373.222 12.0615 372.824 12.0454 cv
372.824 12.3301 li
373.017 12.3301 li
373.63 12.3301 373.646 12.4106 373.646 12.688 cv
373.646 15.6353 li
373.646 16.7759 374.658 17.6157 375.829 17.6157 cv
376.912 17.6157 377.792 16.7524 377.792 15.6431 cv
377.792 12.9019 li
cp
f
383.417 16.8374 mo
383.417 16.8042 383.417 16.7813 383.223 16.5874 cv
381.797 15.1567 381.432 13.0093 381.432 11.2715 cv
381.432 9.29443 381.865 7.31787 383.268 5.89746 cv
383.417 5.76123 383.417 5.73877 383.417 5.70459 cv
383.417 5.62549 383.371 5.58887 383.303 5.58887 cv
383.188 5.58887 382.16 6.36377 381.486 7.80664 cv
380.903 9.05615 380.767 10.3174 380.767 11.2715 cv
380.767 12.1577 380.893 13.5327 381.521 14.8159 cv
382.206 16.2134 383.188 16.9517 383.303 16.9517 cv
383.371 16.9517 383.417 16.9175 383.417 16.8384 cv
383.417 16.8374 li
cp
f
388.313 9.32324 mo
389.174 9.36963 389.819 9.89014 389.819 10.8862 cv
389.819 12.2222 388.845 13.8403 387.146 13.9761 cv
388.313 9.32324 li
cp
386.854 13.9761 mo
386.173 13.9424 385.356 13.5464 385.356 12.4146 cv
385.356 11.0562 386.331 9.47119 388.021 9.32324 cv
386.854 13.9761 li
cp
389.011 6.49414 mo
389.011 6.47168 389.045 6.34717 389.045 6.33545 cv
389.045 6.32422 389.045 6.22119 388.909 6.22119 cv
388.796 6.22119 388.785 6.25635 388.74 6.44873 cv
388.084 9.06982 li
386.289 9.12744 384.628 10.6406 384.628 12.1885 cv
384.628 13.27 385.419 14.1685 386.797 14.2485 cv
386.707 14.6006 386.627 14.9648 386.537 15.3179 cv
386.402 15.853 386.289 16.2852 386.289 16.3193 cv
386.289 16.4331 386.368 16.4448 386.424 16.4448 cv
386.481 16.4448 386.503 16.4331 386.537 16.3994 cv
386.561 16.3765 386.627 16.103 386.661 15.9443 cv
387.091 14.2485 li
388.909 14.1914 390.548 12.6553 390.548 11.1304 cv
390.548 10.231 389.948 9.18408 388.379 9.06982 cv
389.011 6.49414 li
cp
f
394.124 11.271 mo
394.124 10.3848 393.999 9.01025 393.371 7.72656 cv
392.688 6.32959 391.708 5.58838 391.594 5.58838 cv
391.525 5.58838 391.479 5.63623 391.479 5.70459 cv
391.479 5.73877 391.479 5.76123 391.696 5.96582 cv
392.811 7.09033 393.459 8.89648 393.459 11.271 cv
393.459 13.2134 393.038 15.2129 391.627 16.6445 cv
391.479 16.7813 391.479 16.8042 391.479 16.8374 cv
391.479 16.9063 391.525 16.9512 391.594 16.9512 cv
391.708 16.9512 392.733 16.1782 393.406 14.7358 cv
393.987 13.4858 394.124 12.2256 394.124 11.271 cv
394.124 11.271 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (jlab.eps)%%CreationDate: 27/02/13 09:38%%Canvassize: 16383%AI9_DataStream%Gb!!kl]PkhE@(Gar=7^,78S'lil3"#J+7!iS10:WCs(04NIt)6>pRUp>?"U$VOr=A<b;EcFmITuMda$G]s0b;Cg7XA$OP`m^\[U!%h::9OX7&9drf>qV690^b%k5"Ub1it(rT[b8^HT8V&EP;Ck7I)1\^VjYm3oAA%Onf\g2_]/oBXkLQY0Co?eo%\T&&4NG("@YHhX#I%B0W"n*I`M/IK/EinGf%b>[7=%nEIp6l&X"<YM\0k>b%G"m@V(@GMD$Sc/GOtEd)\VpuLi8S$R#dc@.gdnDA]c767q'Im>@\T*J6g%]e;#8LO->_UP1(jI;s8smdC)JjSo!VPC#@Il.lk5U]+pge0f^Yqr%[#do32.KafL'`4l3;q8M$*YAZ'imLSQ<=HIq/nZM&Uf*.`L%ro358in`@qYBip5]k+Y@n3d#;c`b[_msFoE*aJaAf>%3)Xjl5J2ZEO9041?"J'Pp$?XNcdYC"K"Er"YZZ^VWEHW!"lroYM*bNENq%S\2SEQ^f%-XT!JElN9fVjUH`%^6JM-*<0jO7ma?g_#F8,_uFAVa%psRLN&(IbZA/"N_aoq4`?+CqQF5c]4]Rl#an*ZI<0RWF)c5M%-J`b/h6M7MKYQ]V`pA]%=<9^!,,L0AV)A'sp=lpGcHlLdS&<"2S\.+tPns>ZpAXa\J+fb_cM(DQTO5IG34o.LebOWs,sk=@rV+o^%cS!j^qX/8T:=+f4:%3(XnBK)BpLj6aoG?smkJ'%,9n3#W]?B5uT?hED1q!&EQT&PYhd$13F81gA[6m\(eQ$sQg_P62AuWn4`O<.=%VMP!:[O#.(.t#mZg6];3hk+9S7Pe&YrS?l:gY)O_5?.H:q*(h%J'ItV%/.!`hk+1gL7SA<Zes)N[dE;QYPT.9q<I?[f9`H(hVE\S%C%&f<]k^t[IkSQrBE$=dIs3-JBDC4G>kcn6=%Mr5+8AM-p8a*qrMSQ/?GF,Jip+/A=!)F8*ko0J3UP3(?bZ@1Zd[d=5>klQ]mb0S%Is,pSIe2kA'C*QJ4Zg`GrFH3#htOnAa'4l8o6!A!q5T@Zl^K3RJXfuY4oFR*p?)<FGL:DQEdJom;Ed;EWW."elY*.YYn'CtjSjoe%T$ORrhMj?<\5,o)pS[c^'V47WnEK>P],qO?>[LisAG8<Je.j<fq#<LknJ,E@qXR6.kjaur_S\$L)=ZPO.m<Ut?g'`RG>A+CPDb@j%mr)!>IQ0Q?l2si[5/&;Wr@K&UkK>g9([$"/ZTg%_=!tKOkGK,/YCF9u5J):l2:TWik?!(03Deq`gg4@E5g;@&ro)r#N+q/Kn6<n[%4VCHGG/:\G^46($QY#16r'HTS0\>.\I*i[kO8mh^oj=m>3;hph7t4C<iST*4q"P@IQY2)'GkLUmo032G=d8=Cjf@c^li69Cj9lLh%kKbOSKs1@]-#K%LO)esF#!Qk[Hd!q.b>IHI5C`6=.Kk8#\Hi+HJ,&aJrUg^4^H_YXhmUGWNrJk?=%rS[X,f[NrmRpca$&be?P]s!%at2P!lfkI6M`uKY]u!:SHLnt@IAiBM)ZK>X^3ZTVI<GDOX%u5Dlt_)D4!"(Vf#Du78k+'>TUMD85G+S'T=k$N[i\ha2_.5XVo\AL%mEZ4(PX7EYr'gXrl]^__a2"21PM<R%;_"%"nE/_9n&YOUUMbjJ5OH>sn[diOel)J:lMC.nlZ`)Ymq(L)+mO>SN4OnudlaBS,*?0r%dD%k,\W@g/riD1NY>>!3]KQ9jd:K4F-#Y%NI=4<.^1ZQolpKgiT"UDV@GBo(bBN\>]i6ZJ`%NS6Y&JO8p$]5fe":sscJK]2\u,:S%\X:qFhA06$pYNETE,O8O>rB>X]Bre?2eW/1J,&39kP$?Bc7dK3IstM"*d;]JC2\mfPH400FZ&d[eb+nZpVT`@p&1J?gBX@c]=GWl%W7Y2.hOGZNkVaeo,X6f3:[W\]G08B02^`OOGlNH@*^4jnIm"_:ENa57RkBtEHa?tk]/Z4<kannBrB5og+"WH&a(Hc$5FpTC*Zt7B%0>B_uHiEGRkp):nYO?D'[Q[i\WaYWQYsIdg&B7LIl,TFOhO_eu0C.r1Mgmatn#>tBS_\bbq&Ot82kQ+UI!p<]Jb7R(CP6V$qQRn>%+*X+>nD21Ml,EHmY8g4Os3\I1pFn1+IcJF/g\"?T[l9CNqEgTUGPAs+>OW_al?[pJ`,AD^?@;U&$sI$&o&o$1lKiKIqt&"AZ'\g;%?iPAJ3Vgb8UHYS-c1U*E?i9WR`J$2%^NL7u[eKa&<F#!EVq8Crce^j'Y!/gkhsZ#;CF?d+Si(LI^LCb\hbfC.Y^YXD]s#2tGLiKE%mUp4>ca:s2?JB:5!_/I&oC9Rfh1*#erD$*\m,-Wj]KJc7L6X!8qgj:Q#uu98(tB/9&MHu]4acK]L=/;9p%h&A5U&F"$'4+qWL`,C%g.Bl,P%YqB=VC[OXY"harRLS4cF6aHX:@J_20XEHk2$!hh8`gN?(<X'?2_%0CV7:VMkdbE'KbcO%Ygl[7;Rs,23NA2lHS'VYUrou%S;!HAmn<9Eh;*KtE/Wq[<ULdqk2uC$*$!e^`S#J0*u=JI>%bQKb0)MXcbKKG'<RaN3UWC&qjuUekT35W7GPXaJ+qdTg&:fBrU:r`%UT47dlSlL,n'8\_3dIgQ4H.@9Hiqj[mc>-#nbTlhMmEqMGB3H?r;Q9Jk2iNSkOq3>Ik(0V`U2(;oi2g2pWt^&a=:X/+oDQ2oa>bX%h]?(\@c3ijkOUjrG?rAhE..VUg-)$a7<uYFogC%aX$)4S-T=O[HsjUZT$Q09pQn)cSR#ZaIrX*pSrB/lLbD0`%<R)K5?ds*V^M@$%U@rR7U&*C4\+`,"-_iVK31P1kq`W>E(CTRm;5qjS3OuhMTdgqb=4#XT5'@]Un,\Z,5kol>Mb*VnfW.iicUPZ3\c)&9TBd#D4ECB$%EL0p[5jUA[:W`-T);j8@F[bUp"CE"Phd,%[]tLqdrU0OIV4i<YG6Eo*bDX!!]>`T'Q]FrOYBn]0rd>LP5AlL!+,V/cmn^q#r^-fg%O/I#5Vm*lH:XmqX;nRO*Hab*S:JNg,B$0W!h=Fu;]f\'`rUf[DQ_`Z#G^]UEW<?!tGb:6hZFnO;H5rL5<J%ZW"UZTn.7e4Gcc,b>%Cj+Tp\g#WMd+cI-T+@ROT)XK!4tYLbMc145@4pEYZKGiZZe^.]>_@i#o&(g.Mj\ONV'kF_W)2rP/8i4Ps+Jh\k[`\]B4Kb?Mt5*?%H>gG4-7=XlF)h'J$QYCM:9X(lWlZ=Frqp4Z9@(lfG@8nV'8P$#IC%(u8^OB@/-9V=,YuFjHhYNPop#I+"VmBI?PI'icCt6P)!1&L%q`[sXoMW4C3kP63ol?Q1#6B0ls2\et-shD=]'J&*$hELNUsYDqjXHIoMnpDAn=6HD]%;iqp\O%E"dOZOmTq;&,J8I!5rS"\pKeoO%,*h%kS\??L)!U,Hb4r:Z@_GR[G*tL?j[Xe_H@9o1e(L4.*1u#1iV:/PHMs`p^\Zj&55aK61Dh;,(FB*\?JFMUp?V`1$lu<;clSf]%`5@UTg7-]$52_>?nJY2ll.^9a^)9l:qq7DSCmL!;pPETtY?dZJs$CWm[(@F+Dn>1QotodIBX`EVhqjnIHabXUB_aFoo=aaP79hVF%>V<f(S/=]&Dp/0+r<CGS:Ud.,^k7BsSg@Y@J$fkdqs*e1IV\<DiYhrW]2ug]-T=A6T+C)Q02&Cars_irU`sJTTbki6f71KF3s"mD%B_fG.-17@MR>s\-]X]p,rpn7I]05ucq0-2kp&<d&R=;.#RH;blqYgH.4.48!q/:NJJ"9s2j;VIMlL1p[Y+IB0e,'"=mcb7kf9^.M%GD1J1rL*,@hF%O^:eQl48UKu#OugAFhu)R/riaq_59@RUmlgR)Vi-*A5H'N:2U:4Rd;M]_qAUbW92)nQrk!-_Es2JZH2)\8isSAh%J+\F0+eR7`5("[:)7A^]=!"!u?LM1bp^k:;8_7b8SD9$8fa!#p`Kd-p?M;RXLQRLtp!r`Sq+G=M]d@lTjY&Zn65MqKps@Xc'fp1q%r9UcgE;=J!n67Ym?bGbD3</FEAM3mD\^j(:bn%Ma&+E?[L@ddVi5;,^g`?Cj_qET!mc5akIWBSH]_-'QAs4$/4.P*b2g$bLr3p2'%rTNak4/Ud4^>j"@A:M=BGIZnNo?_j<REUr?KV\GBanaKGr/.ZuQML(n%fN`orMsfh*U^+ncKX$@S82=VLPlh[p+nf6:>ck7.fK22%h<>Hkm2&irPD#NAa`li^I<`Ej3PPK1k2uU0nF#R3pp1r'0/?Ya4lOlEo:))G(lS=:D9q%]go*YAa,ckmn=F3NB=c<B][F.CgYh/k%CGJ\un=a@Mp&3"_gTLLg=>qldZG&0-WkeUGnVVS+"<*`g67P):q/s09]56pOldmQ[MlB3IP*1dmcNg3cT.deOo2?(XIepddRpGB!%?DNL';87Pj>J/;PjK+t^i[t!c\*'*m5Ipa_:[]I)k1%234M:70cSmKo$fcrDM1+n<KtgRb5$b/`B;>0_LE(\,9Io!*b^-/=F9OrF%lh$@;$Jc.DkgT.`IBfEoSDL.b5,D/kS2&UT5%j=aeXu]\MhAV,,_%k%"2FF<-jHJ:2]BI,iSEUbX-<.5QeRKdWR"K/C>UR!??f9+%oteCh06QTfrutY+B>\2*A9kmQq<@8?I=aWNL&Y\%1&o^4HZQb<mbR3ejSmN.SU/a8[qrFehk_?`Y6U[t%j[ggDdIk1\-Mco_su8-%qX3-'E;Z+Y(B9.2D,(I%CYuk[%\JOfk2CM[4'0;VnaP-t([*pcbD<86d1qIq9*qFo&GP1LX6"=tj'M*/]QeSnl@6JD02-2SdY#WE%ok3`R`cm^jEuR@&EW4<I^2:W!B`@@'?;f>#noLU#*PZB/M3,WD^'0i/;@NI$@A3\@+()]K/W0"6DC,0HYLMXp+k5!TljXh99%^*$%6=G(!Eo*Wd`2D8GO/p"%Y@9\QrOr3$FL9$dgEiL4F%>4ecE9BBa_,.1,8cGMfui:GPl^l_L>)-D:8nj3n<:g=EWP*Yg(o:Qi`[$E%\?3N:N_4,E^uh?ri5-6WcsMZ#WVE^9krDAW;$X\rlbA+J>,0"arVLggo\;-\5B=#17L)g"P2BO1$A>0N2CC-eW4"lDOc"4FPn9+"%!(rJp$'Mc7$^&ulhfQqDbUF)O[5oa5W"V-Za"/CQ,u1Y0g_t_h't7tJdoYH"LAMrDf!K"fd9);`g(q-4@X4:je+/IHqsb`k/JkJ>%Ah^0--Y?aZag57"D/=sh=c?\6A=7>(l)gXSOB3m0cX'd-f,82^<$2#N"YK!"SZ]h@elM77nsPZ1]]>8pP*H^ua-@2mZc2<^&5/.P%'^D6oTETZl4urbMojQ:"d.8CQZq6,N#HDRfCNAF$HK.V19G'EI@Gi[:X!.?%GB%ZV,aDW2lLp3jf'?h5,P^k3\b<+NC$URPE="%X%,#uh#dXbMhN4k\V7ogatXnFSmJNJ1IcnV2^Mq:Gar<@e9E,@HV>XFbQh_lQ&)/ep([p/=M*=12241<4s[T<;/qFc7tQRse/YZl4u%<+9dQ%Kok.Hoehg00(]F-1Qu><=/@XZ-2O5270O(+ADVL(S!=(M7rq2^pd?UI+Cb0ameVEULsHuY$+h0$&m?RZ@'aTK(AP]U^9R<%\<M2WC.]ZU>/Q]-8eGY]TQd/*JjQ_b_:aAB?S2?(pJ*]!/oi)apsO]j<Z*8S0AWO\83ho,mpB;LQEDf1LN573j=Y;t"h3?T;8Uo$%!jEHO/C(jeHrgsFg$\O8S]+1Zqb)?*-RWB1`\%`^&EM#_'Q%&YJ6p1ZS\-ePP'Z/1+QadedmLQf+E(+,4=AbAV-9\poQFea#e;qs%FXo$&<cpqE?o@!s[p>NT,rpO8+n]M^RG;>fO'9Z1AW40+WE&,:/TnnFe<oVeI<Csl"&a85a.,G$E\L8WCXNH6&NSis,tOBqR55HG%m=S0(3HK`87%,SD]GK+02ZXe'3@tf21U7!$khQL:Ac4CfHcP5!&3:@,=E-):2ck02/'\4l>*uCDk9;EF>/dtPIC&2%lJED7R'E&!%=cJom6P_#GBL.qJ,bLC[;q599d[0]&UXJ^oglM'i\$%Qq!rr'lV?22F?_[gj/t3r]56Zq]UAjeh?dp/*%e[jB<IaN7:Ar!V*iM:D%auf9o"+I0IPYEFBUAf7JgSmEJR;/M^:C"`=oqt/pVuCdGgSmCN)!]ES;>id148#KRIT:lD3:54f%^_f'_ZK5U*u'%!rh*F1p#f3,%fJ)_XKEpd<LXJrr6!?ACB*(I!=Wse087e^uF<L#%+(T\qrcDOPeK5KIYPrVhm*m,cjJr3P[N;A3*@a/D#Hb[<Io\hbT*_LnK2d$Z%:C$.eo`lSrWBWOmI]*1<8.X4B%^hl(e#U=Pe=T6joZIYV(erQ&GjTOjpV*n![C"RDUfpJuO1cN]S9;WVU-S+08I'A2lKqh*_E-2e%Ud3^hhZ9`Y1=,UHkWfS<>ErG:`+gACXbI-&02SjY\7NcX0CCWX(?FIpfoChWfc654Ok?2T0*1n4UoC?NFs)&:pV*./DP>0'f(B6S%:q(^a8"iR%<)a+$[W01#m*tk7(Q+0>S@T-mJ4lB1?G5Z653Yo5)Q1QWF*/Td;mfLVe-Z=P^O0`\\^(_@'8!VqJ&$hU<o86"o$0/C%c.;Omf^-sP3RiA\.$)t\o^WkQ3n]=?kpC0Y^5K`1frP:Z3d,[3DQB565/'jW3D".G^/mCHPZ;]3N?@F1,\oGoNWj/A?Fn7s(>5F^%85_o*AX8b<jP)DV9Iu2!X&Ur\\#<jh@00=[M%d>:;40oh.;o?0;fURt;jNbrG>N8eAYXCe3NEkq6=:,K=R3.aA:kN1,hV4)?gs'b%h^,jUNeg!FcQlR\V[8eN+1(6qY-L;Ml&=>"PXZ=%'U)Sg<B@!m<M1rc*T#M%P7\?\3MCd]SH6;2;RIZP'_t:CJaHK;89lSuctaOO%US`_ad.%UoiS*%pX"A3U(PIZe.O09MHh/W8heBJ\)RRs[Co')C(0A2F6TLGj'pAhBdne5!KSO:t&CjL:K^!X/:%4QEUM/j<*HE_b%\k1'h/r&61@#h@H8:Lr:1\rCmn%bnS\k0*2hJN4kRl$)$[cf%iMT%MrP6hZRA;-tO+;G\.h5!K7X/MIDR(-j-9cEA]ZD]*$O.*e_%R\7l5(T5kWEC2U/e3'UsoG=R-\Z2+j\6WA8WL=q]mhaMb!^ehJ+fZk[,o&@=PQ%E@LQQMCDIl[>g9;>lnRr<FUrl94NNS$iapFP8%[1t/=W%Ss2b"7B$9RNk1TXeX>;WVEm<&pA..ORd+k=%Dq5k*<_@OY7UGR]ROdXdRi72J7XI#3VI3GDWna#-UEISii]2:F4RS2cI^%P2!"-lnDF8*(<RR;a1<2aBt?ei\5+Xp^@T8R'KqrU&^$:&u^iM-np'PPn[jL^nRYVfFW's^MN]`Ca^cob;hEpLB<:Ukp&1^Z<\(n%X]Cua!cls+V])""?!H#+WS<T[pO`'H.^=Y\7LbSgKoX^4;uh/d7:78qUC;0NXKK38SME.RD`0sXO]-<"H#mjFX',D`)GoIjGMXH^%U@^$F?,4R8m(50k=K0I,V%U3<fk5`TOKJk'PYGr8D,.gqk<;bhqY\n92.)SoW')MejcXC?/T4'u>m(-T+`DMj9&saP,?E7d;<O-n%ZTM'ATQC<>4aA\NVdpUhb5bFL'_0bh?h[)Bd0_h:%D!6P&mhIHF][\<hA9^e`Xn]T\(Q`-+tG:`i0*iCXTW@K>gc$9`J[ZY>@XLt%3gBa>'Tj<\E4(%0RS`^Zn2RDP<pC%aZ?9<KY77R/)MPH%;f/?s?81W>ohDSXhU=Itl?CVq<LrMJX>8D4WW"KNV;ksM!JRf%\+6CA%AM3E?Gg+igKt=958.eM[[=0QI/2J'KJg`50:ju0i54!ja7XlEq7jSi>9e)l+-]QYV9?@H^+!"<cB*)/#pg/^./_ul9&@+kpob3Hs%f2UKCX,fOkMEQ%s+FW0.rLU4hShF)b'nTDPCKk%b^*#.Tqqf+nA_0:AU>WGjl0!X77!3KWWJ."9W5ra3HKB=H\?8Tp9WFm]mBX_K%p0krjn`+e&M`S(]8`jcf$aNN1gEp#]E4h//lpYXn*A@Rd`LEeF=<Flt#.4V+W,5,_)[>etVMK>+:dLh]0O$GmKH2m&7[Qn9UJaR_%,h1h:;Qi^Ok*GK/!E%CGdTf(ta>-b9I;OaQ"YWCX+bf`skk[Qof'W(<:.d]-'-k?X6GqsICX%4jKf.T&&VHR/e4Q(u%q=YFa<uq>%a,RQ80^<.`lD\M3!"1Le9>Egr,fV#6c%6*:L;AJ@Bu#s44/6N*cXg+=`&-]OEUNq^]kJDcku(d*.MRBq^bDa<<pKaQcRZ]^mC_;(%UEHoSJ1.r_$j9s(@]>%]`5bS'(n(^<12MUa7O*I5D,';]<WWiTlX;1A.@[ULSEGuPQbE#MRK4sF:^'+$"kGul`Bl_!>q/KNQ+N>$%ijZs%@akj6!Eem'U/$>ll+,4P_dZ`0@5@1'g'gY(knp;F!$lnsI1rZ4fl*l$dVJpCj0mSC/9Y@%"DQBHD=Pq]ET@VYJJG[P'd@*K%TUJkj;WE>!TaW!N\36SK_h+ld^m)K1+cR](H[S]tU)!n':t-2U#m$h\]uaXRF`ps'+Asl(5%q2^&os8%BLY+%^0esA#geoB4Y1[s%YSOY5jSO7iRu?/\iIU(R"]<FgL"onWZoXA!J<KD"b5)/'),hOXZl]i:Ta'u;F,]p$ePQm-5b(b?L<SNb;<i(TOo&W\6-W\LCj]$F%$C1R"VOTDnV#Psej[f&\a?C;5CeQ&R;$Yq:/P@&l;I)L4"UHC+ZF`q`KUg1f:k5Y&>h&+k=[==$H7gHc)C6?m.3p%0icMIp/[I<E%hA%pU6aRDU8DZqm.20d]f4lh0d>FtET'7>qV<l>CWu,EKC`j:YBpB,1e.m>$CI&1,.60#6i!rUVE/0Q$@nK$'.`_tfF%%rMV$2Eq%^Sus#L#JC;`$"rRO<B/o"Ql5@M+bBF<(u%G;^4:.U]au.,s02Ai4Q2@;1XmRcT9t1,[d*"?+bfk+gQfU%b*7(=!i+'a37KmMtN_g%+gDYRq/^A!oq,-NnF:1aM?1E7@Tdrrb8'V&_^.Bm9&/-A:kaikk*mM.lVVaN!B-gfa&nZZ[9#%9B?h/dA+nUKh8e0LQq&Ga[Rh.I%"BAe'V99U3FRtUbPus=\>s.ZBnQs7n$[lDD<lAL.MiIsj+;mGA@ngM!=;*J2$RmB-I1mn7hm4cNZn-Gl[H&,U/#l3&od>!_Kl,5L%n6VIG`KrHJTCfR*=V31^Z0\j!kfon]/Lt9g$['k&-8N!1'b`/,.66i5/Lr#:p&>UU/&I!.<uscQl:=u/(B.<+(]@+P661`-/35nI%Tk-B%]:if`Qd"i]/3&%]<?t#T6?5+EQ9?p%X9B4G$cs[e(_R:9%VD]A)A]Vrglc>Q1"]`J\eBskl[n'.DT2I6f2u]qQ0"`KU%4`M%-^]W'^!'>P_a6jATe%,5MO9,U1"3@gP#hfl1ou`0#pSgp/EEMiJq.N:4m0N3gS-d'I'B;F%1DTmk#\:^U90BDL@qe8IN\kF<O;Y8%TnN+:94H_cY?FV%W#Zb6;!a]6K^F'-pZeW_2R-c.9M^?X6(k3#]>YPALmoWHmK./b25gUDG5#87(@"HGgfi/I.BVrP3qoq^UcEse%e<8!G&P*7/&C?4'Q?j'$AZ[^]N%B%)_nt7?TgPWg2mC^\PR0?Ul"L<#,/33i@?2F3?5q)->oB!TD+WETT!f?BC^VA.+q>D^SEuLW%o$%K8M@u#q?;mu0@hj:sOKC!Z6j\Lg*GJUO`pL"A3DP?Se#S0sk?&q)W]+1HUp<qUY)BJGEkWEWZPH>ZnU_8a0qPVn/9E?!QWRp.%Rsp%^m0Lm!>U6.t[>CZ[Rfhn2RW:cgZ?Ad"C^i2),&^<Z-053M#UBmhVMJN?ec-Z$H1TaWFd6RK8L/23mu1:c;BpS-i_kMU`I`-p%M"6bVQUP3!BSju)*uR52b/!'u/hk/lo^u?<#RkFF$X(E.pK69+D$(Bb.SrfHh]NuQPqJr0BpGb[mqj^pY*N]5[fj-O0lIWnTp9rp%EJ]DGG3T5;At&n&kfaeM<RpGp&>^D!Q?0:E[8et]eJ1[/l"^Cl,tXp3/X`<sMu[CuGk><VNS1%K6Y[5RjLWQ#Y:\uc1,)8[lYFe8%1Tu1B;^Mieo?<7M2;W%+"ok_f`o]RmB4ib/r&ZSeX[ootZbA@PHMfOp9spdK.l:A:9mpqNg8LB[=gdhWk=%FLITas._pL>hdC20f%-]XJh65O^S(('EqnMIObmMY:^frLQ%RG4O:RMd-IXfCMOVQ)X2;`0\88untKn!TrSWL=^)AmA?\*9YNtL!#dngKrFS6Ot'>]Qq;[%WgTPqL:sUTl"%E+RMk_.QaoF^c&#+oF2^Pt6qYb,Wb+_`lcMGR\G9.TbYU1WW^NS'+m`3'e3Sn5NJ.D_VQ0Hjm=qX/j3`>O+%X`S%WbEY7ou#L;Vk,m\;)=>(MQ<26Tk;<8RYbji\>krWfVgZ9MW3d(=#2Y0>JH&#2Xe)SRA`+.p1e3:_7ck:kQJjTs$JYb781srR&QKE%abNm@bYU+E?HkkZWa"#t$oN*+Fel@`#KdS>`4Dt:)/A<BWgOBdm/cegDger^`_`dLhiFI7D/F%seN-dD`_[].(ol++CrT;*fEcil%4]bKdQD%L#4+A-$`Rq>)W+M=;,>tt02.NGZ,9>ZOS0mhk*TNBB0n(.@"'NY.K'>6h[Y-]].2I6Hi]N/>D,'1T*N,;=ehR6K,dt]H%/J#@9ekt"0p8%AkCUZ;t95eL/q.$'uh3]t;BuP_,j6i%@X=fm#ed?8qXeW9FD<B`F7cp1P?3_uoZFV!0^!JbjLt#Fch:>\Ai8%Lh%Dgn\_Z'tRZdqq!(<^HW:@R4uq@#S';`^%Ld*bD'fTOOnO[J`AX)(8*=kWm+mDd5DFUd8'(*N>8$i!!#ac71kO+#_n-A.Ve'<B=m=%+RI`mq%\Od@_Cu`KG]@m@Kp7pcJfTanQ<#'S/j1J+AGEEYm@D^SRm^J=<U,W@?D=6%1d9g.XOV8R]aJ#dLdps^0h.RNTNGf%)PW:%>;JNsY`>\VbeY/T@rNVK"dt%1q@HR:hsok/WMUeY,P7:iJi1V)pGDJV0W393$W`'-ogTh(A9p1=Yk"-uC'k$jkuK?$!)?U@`=bS8%AmN//95qko'#^9U>VBas!i`=BL*_WqH(>Sm&d4MQ@9KlI\%::<5_Nm@Q=.c0C``;Te1\Tg_2>@1;:YJ')F`E3/A[@"X>Z)@Jh(;r%i//7pb?)*i`"K0(3EL;[;(Y)p+K7kqfRdd2>E]UI<l^N\.I0gH.F^3j;ufp<`"q]qm\-2[@+CMBZNUrtPe\#<OCLq]C9n'uR[oj9%C(%23fRcAgD%rWp#g)"IdP4t1@q57`fRe6bA7jqs4f_fR5-$,,94L96e+[M`@Q^XGVl!k`ek.`n[HWnu0N2pZe.c.20a3\9dg^V4%$<F6%fg<9=JfW$E$RGBM%WPb]'N5RR[W,uh+Pq0#bj9,7H96s<=Q:Zkbo!NaIF=@u(p(j#E&.]"`/MMI'4VS&D<=G_@h>K#@6TZ:%a=#ThKVL7-=gY#:.i)>a2B5ILX*U8%7kATEj(\udRR.d"OP<KeROYT^fPq.P?a^%=.4&_A:[H.1U)S]8W<`1M&PO_d%>9>C,Fc67%[OQ!._<lCLisZ!c-$<EGOBcmXHg.8,4Of'VD]QBE=5OXkWrSW+0ZM[O+PA24UO.WE7B`^iP.,b'F9*-2K7TEff'U<E;I9&%"6juG%R5,:DBhIgX%UibYi(ADg++a$qDPlP#?m*iI4efQA=Xc,FN`^GpDql_a#*$&C7Q(U[Z#"I=:158FpOL[8C'%nCn-X05YU#t_$Fs/=%HB7bNh(6c$<SbX5*P][=C$K*J]tclm]a[@ZAN5uiX@u21#pfVZ1Q=!((gT#!Im:%J+EG2JdnR^f13O,q0Q%g6;J[5ARj+8D;[u2S%%SIkmQ(86c]2Oa5hI1S$PI\8M(mo3-+0k+\ZKW\7GVBW6!COf8&D]T&'s.j6>hrnI;?GZ@]L-eim1(A)-3I?H%!N<THV&X)FW3&.%TJ""78'DQZH3e^$Zf#`1P?8%Mk13(+2Y.Q4f)mML3jEQLB%ptKKP1Bp5`3)qgPL-i.,'8m6S[%]hNg+]>@.9CFA&kIdB&6FoGg,n%6Q1uI/6>f_4dhh^Z(s6H/]tkK?h*/'HXPSeD_&]R[`<ilW;Bf<[`9_q3.*eqgJ;A6p(K7:*\!q!RuebtnNA[BbdPPm-$-I1gE-6R%@U8][\@1b6Zq70*_0-[[UslmVTaZGgpDqAaiSVlV$Be\=?ANmaO_uSJ(Br(\M+mMi`PfDZ8ktrW`OrBV=4):^bkmE"@8kF`n+l[&%?/K5XG!:"G/,N=Ses#Ln:Kj*s[Mo;`42%@`j(@1YkF?I*@^._1Mc_dMh`W_(r"TkI+">n:5MGiPd$:nFi$8!@\-ErI%DJ9K<G/ic%E5,Nm=FYAg=DWM%iM6CBcB;eu2_;/r*c81Od2.[!)R6e8@Q+5(bfE:H?HF9Dnf'1>_eS3V$e;1ugA$ZAE6C]jl*<$;7&jh]BEqp]%5naq3;;46HiXZ,uO0tE(=M8t-eE^2@/LN274s3IINbSGp6Hd\$/>l,q0RrH[FT*\>j[\3o*uS10P[$DtoAAa'-VO^aXAsE`>QW>*%[!eMpO[gEh56MP.`&<,uY\VTaQ3QC_k)1@rAt2i2(sD:R\mC(j'>?;OQQ]AA*k"J/CePpIQrW>_kjLLa_(t%YM+9/.,dK`6"3!d#%"t7-B9_G4=-gHaR5jjN4gP'^F*AF1=Tb\6<A55:TD;g][?YK:noa)t.IYc;CfaQ1OgRHjfS0MtGE\jkNc4dfL_2ca=l='LmOiB+P%E8i](OIOAMG>XSl9\an*PekPS'4Zd-=NOV5Fpo;A#_^13X`lo\$Nr3F=\u?Nbd/4&>uTbI#9MDAH1!\'e&g9M#-`8mc,em(fc@t0%*2falKUZ"VV0cR)U<mO`!Z=M!0T(rL'?K1WaHm)VB+'PtUZd*T-Y+;3X3#@b&"5!#Nm9t^GT7MF]1gQhD6J,W9.'UKe-4@]kaH27%h0KT8ka*GCd:""u//BXN9h2UD4qY-ddRk#NOSNJh6BF"+YVVb]Agqgq#ZAD^@bcR0nH+O?NS_Oi\^87TQnrQb_+9Dc\&;crLF7D9%;Mn1,Fb]^PF0J)''MQ(,!^IqKocW'RN%]+g3X_iajAuP5+##)ocJmi'?r$Y>@lfcY7-k7COt7JdhIdoO8X@<D).+_7*L"!B0R%Qi%)U])K3G=QVW$9DqPHb-Dcsa9,3!"2Kd"LpI(a0(4N'k2lIE>Fe@&"g@rb*q$$P98n:*^5S?FUUU+\[G'F<_rtZUATp!3skT?.j@3%5>G0R8IXhpB:*fhI;))hHJAQ78`Z2E]9!.).Z6k6E'i2*N/N'ClG5msd"LDI&B%bH2"&hNoZYQ+MX\XA*&ob#'pZeE4HE>^'*J,C%dFC``e0*0J:pF'd&dPS\9ff;E`:n4]%8i(%T<sKlEcK/te)A)_RMbXT;\N'`!F6YnH#u;C^?9c<)d8`sYN3bFCLZm<V2uZdKe<H#%"0E^M:H3qp=q2`c!&D9qP=lVb)DhE8b`aZ5ZnM!.XO+<haUIpg@I.sPX94tO=27G85[F#&9ZDg];+6R4RL:AoHY:d(X0aZ:,-[sQ%"-+oT.k&O;_QAt*YXl<Y\;Sg`YZ.XJA8<Fg1?(8-?#1re[X)9JTM3sL3+E1"p\#+t#>tRkfdi]tRFFKY4Nd+,02s>%5T3Z13mbqq%QR$?BTcK9gmbufs[>1UeC^(n5OR?7\<eMZB$IU,'4>,1VUuqR_M2;n9i;RdHU)?>!.#Wf,a?t]>(O!pdkV&;CA/^5&_<C4-oi>3g%BL-sd(7UbE>*9m3F:Ni/=r?\I^)c@(1^`u'U\2/^YCIUWOf8?U]V':h5_1EqE1F]DA;c9Q%2=8)U;Z^ZNn,DV-tI:YARC,DkIhpC%?iUQ`")s)a/s7e<-e#$i=h%g,LI]^gn$?/,AN$_d6%_fEF-\L-e\3#a6T""o&D`KW('(:Wl+a!P(q^^La@ih4RAHJ&(hJ^YD?n*+%*JFo=!`CbC+%@6Q>?+7KVqD25k5YL1!TYfXXP`0e=8fL]A&I*-!%q56r_oM`g7n:8FpB(="%,L$F<+StLMT@K0@RSQ_PY?^(e&7[%B4CDB2'8P>+P-d0+7R@+W;B3>_6^(h4LZI(5WF]qYNP'a02>iJ&p'p&cu--GACZg;LV4[I,/QWVY1gFb/=JlF$T&&=X<<B]K.[H"%Zl'il-9IQ9gG(nS<*e4;g\8e0s$GD+2D;]0/p@lo";?dqQqrp+"ON#Q*<DDI/na/U:b?6La0]7ZNQIt@_Ha+1dW%O1FDUHu:2L`"%O.fF,MoXr58Oj26Z3"u_VJlr0U#JL#HLsc/H=W*<?IkH3]eLoM[=l`c[)A*u.SdH_M7q"?d"O_qs-8qY?C&*XNgKW6)IX*d0!rnP%\nigPLleBP`p]9IaX%_`7!/)M14ftT?,d9!9f5("GsJYDKgeP3'<YLAfmO>Q44BM*%`>=-2PVC"-NNR?j/E?9@6Lgr\V5;:89AeX%2?_"*5(Jf[=#Ll7Tu%jRg%9e8/snNug`F!->a:CZ$7N?[DS]0jG$EGeF<HBJoe\Z$2pIlfWOJn1>qi`A6lYhHq^dI[<#GcdN'):p%N]>;sY-ueV\"31FEI3E3Sl"P/6%&@;O9=1_`Yj@0YY9%8)gO]24t#?4MQe_CMp!JuRY%Mg8r/o3a5[2&s'&OKF)0K!W\W"',pEhK%7gTSRRoR`ZfFOZE$^\sRFc=ReeAB1i%cu,a>OpL!lD2B*Yb5*-e3h+g1<ks*"A;?1/o$,_$(^r6Nf=-Mp(KOs=E+$TT]L3P'9Kc>%BfR^SpR=f",_e%:Jp^'!%EHR':#b@p#ME*;1V3WL)G+X!E%`V]jfWghjOr<[^6G<SUZu#]e\lHe#(;.0=CS_&-us:)fCa1e`#.HA%Os:H_E7RFU00X1s1`l&2XJ6do2B.YaYCM:>K)fBDnu;gFJ6/aZJRT<714k+TjAC)[WX,M[3(+bK=pe%$jFOOCV_urG$Pb>qBfhkl%/.0_<>SH'7hYJBC9$YWhVLAEKmRE[re`[)!q7nsE8Etma!iDKofu'fO9HAcgKQFko\g@tfd$GRrTJTAmIE$j%f3t")3<aoi9#$bl%`,ekgpom1gCp*/K;26V3lO?rDmG/Z=/t!?&Y5/Ecj`he>pc+$4N'!SV35,(43^Qf"0]-MlWl_-rJCV!_0E<;5?D\qVig[0a*T1</%5l,C!JSR#,?5aCRH%MWd!$G^Z7DRIrbZt5a7L'+X-43*%#hapX2ZOi*N=s(5YqWSW%&]@&UPbEGS*6,6UqD.%<pC7t2<Y/MfXuaG%UuXl1+a*m:IqJL7o)69$,>K.!d'5iADW!Bk5,$&[J?sd>c!7`<Ql4&jJ/&8F;LgA5Qp%rY,MXe"8-/Ug"->RCXmY2U;A0)Y?8jn;%!'m1@Q-JJ1'0f3lZfe<5a\28fR1$7lhC:/bjI<(V9Ec%8SV(Ip#'Vui*'F%Q05Xh#7DEW,4g*-4.%pPA?^;O#k]H$Ln.buBad=P(%2*jLW!2/pql-C;JKL#PM)&04L-HYn3B0ok?@Dh?F8Q`2*<R/Yg&<b7'S*Wrhd.%0K@G0;CZuZF>%@>:$?K@h'!$'P0Y9gR<_f7b>%hM$gV1VLs8.T.3p`5!bo8Z9L][Kn5\4&J%,XFcNPIL:[W_!*)NRK?US-_^@Pn_t5/W/O7.3F6qrpd'n#>YYP,K0.GRcG3O$OY.]i%GPk*j>,mZiWtN`hMHY<[!337VckjKgVj)o'=Fi$WDd[.a$*akXXW%htpd\u8(/P!QQ\QjO[Qf>f7?qLj2o3PRLu[01#gtiTaMGML%!"'!0nM<q,g_FEAdboZ:4WQ(LUR)?7HI`TSA?Esc65Him_b+XE&?kn;,+)#$l$X_<I`q5r!8of>r*.,(COg*gKdKPu"<%Ln]jWHC%FtC)+/MZHL/)e9Y'Q#M&)kP7TfJ+h:'Dn.P*WYsG<+Kb_6OmO-+o8$3#]W9B&D"_f.Hl*kp.U3eJ,l'fRnfB)WmHpa.O@=lJ-+'t%er/!lOXLZ^KRB0-)PZ5i`W9bB:?U>k<=T"[UnqP=IG-RIJ/gLbJ,rYP^]<:#R]r]s)be`]i5LefGr+]L_jaI&EB>>LgRQ3UgGZVd%.&-f6F]R)2N"]G1^uHgUFSD;m's?!S*O2fX45;-Ef2,LF!\aM#_tjV]R%mEN0s\PEFM*55.Md*1/!@YaMZe'0)`0QcKB_lK&O9V*%.["5dY]cGkQ.uX\]kAUK_6(ig(@G/UYXP`,kR*MKO1n^Zag=^m5\:GSlj0BPfh20maR!e"c*Q6jLV,qEQJU(Y8\gZ=.n+P;N)gmf%<#dVrD-3&tR+P,\L]GQ=2`N<58Y!_//`;G[I@H#3an4gU)1=@$j!J?6>\Igfjq3^GN^8[VkU*ke72!:>2q?"mL-sH6_XjT)Fm2V3%ONpf*S?cVr_&*/6'R0N"3(;-L@ObLBGpMm'F#5fVE[4%NF(@V;e:#G)3ERqbn-K1FE`n`lZ@oO-TLbp%6pPrER0%]L<7AHM(J/p!%PjY.\AY:46o3+nX5TEuDa3!F-!(%;>29KU]@g4;*:*D7qbm7qh5[MiG+&6c[3.82$XYjZTA2pT9,J9bf*5SpqeeK\Q"[Q2?]$_ul%,oM[D/Re=ofL5gVj^m@\A[_;lZ_Kd5e[]K(7Y,e5B\5$\kbEKt[p!UV!$Y7YK"c2<[7FH"Gssm.M.KE@!2Bf!1KRh>1VLl*+=MkZ%>6%q08SK!]D(7T[Cn'`2-YfcLC4o&NddctP%\0&N28A/CT`Eo7N*$\ua5?HT"kg`-H!Qs5i5d&^12L+X27chokA^I.(XKRa@#uBW%4!fPqZ7[bLJfG+k-)=0#mG$kc>C(P(iH.`F20eUM4D'54Id\9OGDfGoH9^8bj*@R)paI<ar5l"qh2^p]&%pds4O!RZh9Ch2/oWP8%Q]U":=Oq,19-29$Y4>$rJ$g>^&-IoQnp6KAjH6VNGpR<j6BI!da:KD>]l@&/cP"E:/15-krRK)p:4Mq1""-<ASq>n^UI<hs)=KrO%i(m1mX/:Tp,:(%^\]FZL$+Q;kRI=dJ"Zn!oqjHpE&Z2I,5Uu?53"1[o?al?n*>l5V%nC*Wau`U4C&XN'R\^o:Vo&G'2mF25TBTZa%7Yn<)PK6X[?F-(@UMAQ2b`$olX::?+UnBT;V&$c>2IbQd%nHmj&NS*AAhCST6:f"n=(@PbF@DekLnh^-%%VRN/3VD"&S(r@HWfVH%T'$_Q5Vpo*dV\gul'klr6'?Sr0G%r`&+n@>:(".2eHRVR.CV-cHr^$NY+3SnOmn)&6Li3\nQAb/nm$i9QILSNf4VUU[X+_MGaLDR%DajAso,\)Bnjh1D+"V>P6u?pspnMFS9+mOT?<u:3d@a>om:M%gN](Ui_D[9O/$6#cEA@ZhnYlBpd]I7Z)h5)NMP"]R7]RL5;`1b$%@mm:cOMY"O5]m]8qcn9,KJ[Y5S$o?J/C@QWo2ob0P')&^LZFlK\m!AN*RN*QcU1LrO*HaA8/>^_6<'r)UA]Y$b;sAfCU%!(MQG1J%4ZuI_b4BQfmNF.C#!O$KK!M$^LNiYQGuo<3<EE\NlU87OS+t(62gIfM/7-9CP&S2!1ENA_@1b,-K/M4aehO,Tgh)fb:$O>IH,cV8%%-Y-ff:&qtZ;uS6[ZRs5Ubg#lcZk[8JJ+0SD`6j>3Qa/8QhkDoF'5!)!s#sHqdZh?/Ci:H.qTMa9kl>Vp>?=@[<j`R`[hj]MrLKO%!@X]rAebd](C<a]n_%].Bl&1b<LB5g,[E.4,7>7nl?cqU39"lQb_XftOg1JBOTkDjI?ahY3a/-nbH=GQ@>1ohf21G4VH<Df&X7qc%OD7MC;IpZ8_8_!hbBk.LS%\&<]F-b'j@S6=5c[^CP&jea,9.S_kA%b'YjGfjg\t4A1d_]Hq6\>3pJqV1#:kN3j8-Eh$Qnb1%4>um%%BO[\X'c8#>0:Jn8-p(/[9.[\3E@]uah!G.=fp"@YV"[hRgZUhKl-(<@C,qp_I_uXE.8aR4Y23c2W#>l_:qMd?s*^M(6N1LKs2'+%+:W2Je;7c_".3_l/q]YEY`=(%GH9`=M3^"EKaZQZLBUDhcsP6iNsfM28j&p"`0C][=-?"SX.[A4*?kJhBT$,;TrA#T>`;=j9q",C%S3tkJg#'`PM^kg9iC&G9g$PM7XgUal6f:'$GNh6J6s5iO_*sp[[$or,b:/.C<fY9+*0eZ50'ZCPlj%g.PnrtYc<T.!F:Kp#2@&r+%9pbRKc'S9R*AaaSF\K;iAj#CY;<L+.OLiPgF1=ltR+kp#ela*2ZKMEDW</cI:$fKh:2p*@W>[Db70u8Y//jC=W^LA,/;fG)]!eV$%Nb6.)L(G',M1MHpPJ*:u"cEj@D3Vpp1_!9,oCebTZ79oJPuZ;.X)As1Y,X$f5ZC0FV[]Jc-PR&Ee+M*O<)GfhDlBX1D$R)F0"\+;%]"CsgZ+n<n@[C*`N?_O@7G?.g+cjE8^@BF'lm4E'79+PH4I@$_3lb3IVriX*I2TD((cX;q_?_b@"hddgaB'6kLm)6tk)!"]_Ftc;%/MmnUXP+,Qa,)OEer\'iTP<94UbFmQ'sZ5hMfNefb*,4mZOGfu(i<#"$T70R&SoW::C5JaF@D1sVLc&*O')!2e'\scHEC8slLaYc%'[0Br71EV+;D-C$KpHHK3j(Z-*38IBm9\<=AHd^j<X[Xs0n2^eec)u!(+Cu>G#so"TWmW(_^p4;Kg]nV>S_4m<FlfE03@jY,8NPp%%aoo@3@Gc]'1Wh06;ET01^6`2;2,2.g0d*h9ZH!YGkf3DQoG[?6DbkZTCX=8S;<ga>kBTpqYCrKo'/LNKcK$QO$/jJY-/f<<9<I<%$=U,M+%^TQ7=Y;i])r#<:d`Y?"ug)+6HPpO>,=004<+Yp_9s_f1kIK+[$(eT'NDYo*1G4EbMcp`.`iBh*7E)p_@<b/-WphC831-H%VC=C`+\7h6niD$EDQ%M/Sn(Su#F&+R*hn08Yu8V/$d";^3os5Zl="Wu?5]?YYqFqq^p&sI'ji2gU`I-1$r0@4#:L`//A_`S,HG?S%3%]%&aX:YRgn9->e;iUPM&>n1UVcP(lH`%a7(,2Eee%4$*/kSP`WF7iE.\>bMbk1oma.Kr)Ua!@-+$7P9rRLuTkuPO2G&E5g8#$S%S8ZDKadC^3Vc&da3#EsK=_@!PMeeR(A;HTUZeFP@R+Fp8Cn*YH4NfQ3I$)[ZHj;/.9eo=@/2ka#\Dn>87L@&2&k#iqfOV93.:h4r%O@&@h.3YIHi_Hg.Mq1`@F[S24@qS3E)tZg)"\5=cafCm#6H)LT'igI1L5KYD$rtcbM?Y@P;&f0`Gnd+B0NfPNL_<'D$R3Mc5rlHa%6u$%2Tq[gUXAI<YXgHG_Cd_>__FA_r*!RuooN?9Aq'?q`,FYp$25Vc@-)BWX9#t\E/2$Vd/:+o,;MM&dPgFRjP`Y2(TS098$RMV"%J5S_%jA[q)6;f[f6Ttf[-u74a(G`isGn"dPc:j^L(sJ(=2P0W(,iBL)aI".!1r7BdM'iLud596A)PMnm2mg7IB@N#-$u3kNR`oE$%V08@j9Q!D%e&W]o^r2>`D?P:,$s)JFe<X*\a=LUN7'q`'*h#L@[]hH#*"NfSNFO,=grd:6->1[Y]Sk2WK54>m6+E5b1+U3P)7Q=s%L]s%d16oru+tBPGo#*@Yd5$GIq%=p.Al(g_AD%.I2gm;7TXAP2MUFj:fGMtJGu'&^&"+J,5%k/m7gAlTJ7hf]gcchm<Vpm,;%(r$%Wo&!A(feLMG\K?ep.MQI)B.RB7?Cn^T6Ks9eBeJ::+\/lo2=n'1scN3m:XAa%'GRaC.JU_U[U*:et1n<!`+(b@kb?f2]=JO1f2au%*8Ko=@Ggg3hZ\*)BqVQF$+u?/2.;6Z-raqP$*.b"=Po#pOsQJrN[h0Z@'E#<9P'D-`PNs3KH2h;5hVjI9W=g'Ank+')a.^Y!pLl%%VV3L>#<u`^cmYWeJLPPl*jV@NLWoH-/lRK8L+$hF$@X`uGn;Z!kZ]gYV@WVgl857md@d8_i1a1i)],@"T9)oq+es4ET?ou,YsoD;%nY7@=Po4FI`(2*4Um*3hb#48@C.f@5(]["#o=RshK9B,iBM_T@BG97>MfM+D8G*IhLe?.ZZ=k_?+L42/*"b7I#pQeOPp!Aq)F63i%*T`*9gI\HS7?5G'1#n(i'f2=CVf@VDFN)+2iMl+b;D"qp`Y)"3W_GY*BHj.![],_Loa]4p(0,sgf5j;WPc%Lfjr#kQ*\0`;1hS+k%7'#I4b&+@7lggup6jmG"1sr1OZDdJmM71M6/bX_B6o5X;,Vh/B=e]co]+"R(8YSd`'t%He:s3=o'5a',2XMW`M;4uSA`^7_-$#2+%>-'?>7'ssm,Vh1#80YJ#N$E?Y==cZl7*`lK@+M*^E*:jHE("GS.S&P(q2uNU95,TF^6Bq<=\Fdrls8_/-4*_MQ#&:>2f;4S@3NVT%Ydp#Fo(H>:0[bq(U@E-nO:c%HLhQ6-4Z"QCAVc9k0SYAlK$m$//W^u.g-OC8+kMr!;PM%LTu",C3>@.FMNdj4EbGoJad<o*A:0:*%6Sk*pKe\$I"%p&%&/KF;QNH(5g)M^h_*o.@*e>8R_rC;U@>BU;:lGERjE)UB9/qUTIjg8nXGV]Y7AP?b/CA^.[gnTJij2NN>,TaR%5R,s'!gOt0LHuLU@m";?R$/#L<d]!/.7]4?9fi2pA@)J[4>KlfdQD>En_OT52W[fq`5?[;;ORiM8S9>`8.gdP)PTGlg,4Sp%;>pm%D2@UN1+JOM.LWXaAlgg<aQP/-W?KZ"7-)6nLV0Vtjtrmqck0]N#t>'n&fD8[0HGm)a6#+P*^9"*)>3'FkY39'VB.'=AGhY6(T!dV%$6fZu`Kd5EU*Ya0dpUJN<QM*YU\c@%.66Ke`,DtY&a:ePQCVhm0i"kXe.@%h<.(24OV1#RM7'V&U&IAJHu+_YO05(a_t4a#f#B9O%5Aln:8.?HE1aYX!Eiu1L:KZD#Jki?^dcm*lBQJ7B+Fg3%:Km[Ef&\;iLQ#*Q;aXAra>g"O)(!Za/>l)L0rNQ$'mZ^W<l71lMf;8s%Ku50jN+GkI+_+Z`Tj?&QaQOl!jbuB$Ar(hldR$R)pf5E\.qJ:7dR)A>N>SD=;I&"(KGi3e>3/n9fr^te3CM^P:DY,#NToD#VL+B/%6COo(`E"lP6i)u`)s5+Mm#_4F"HbU(&O[IjA;?tcPT20.Kc6*rgpA=228k/>%1Sas/J\4Q;Ga5=9Ts'b6i8+1/CDjS026JCU%`Oo%ngKVaQl8$`]m(\0Ph#ch(=RNT68FrZ/S"lRUhHEs*>Pq+Jl_Jkn3RP^Bfu/322s!`Z`lS^%=&>I?.c(\%A]9=.D(-0AtcL7#<Uuu%]F-Wm=Z36cHY+1Ke_*kYjGAiDE>DQ+>)?j.\F:mtd2>c!+UaMlVXZqslmsFhqXo-#4[6Y@_P:X.&BWD(+soIKiFMUn_)7HY+t6a?%&MBj7-:-]E]F3;E4KA:]j6OGF#YcR?]+1bjOZlD^$Y`R0VcJsOhqATpYV;k]0Vl\)AIPcW-V:,[AP.ml@>G'd+G)"UE05@e%p:NE%,-k$"nN#hWq/$[2OpW)$Kb<m6ZlTX<;*o`SG[lQJ8L]Ti@F.AA"(dlkPT-pXj#R>m5@hMTS&jqdS&t<s]_EetWDGPuo1RNR0PI-'%8QFst)`,VJN@Ie_B[hpF6s0V':@>t3%Gk`%<J!LM)>.L.Ka&;E6emJ%6fNl517X/T2j/2LKDZ$Ch%>Z\p`d[G5oL`jE9^;\-u0s-%/5KS3*`^nuc(b]0PX4Q-;2EcW>F^M(1Qjd2Gn#T'B^`@J'</*+W";A7P=>kQX9$^X2%e8(K-FGu@3LF27A=*VgC+lsY+6W_UPXY(%+WkSik458U;&mEXB_fLW8Oh15#mNOLnu9&dS`+9tL`;Jer7G$QDo&a-2s*aI1p@TPF<hd#;d0[,_%@PtUD2,6CkO%m81$VJhEFOC%%>I@.,)i3mc\UQM,@#uuquekbL]>_/RFF14LmU.29r3W0GtHIC*Sf#_YED89iOf^OAMo+ZKkQYtVD*6*o,em=\*Z!65bt-nr.h(!%l9&VDP-PAQYHn[:?cf!LcXh,!7LYD;:h",51k?N"[R$<)nS_<;aBY7")%)"4&nX\EVRSTM<SN:>TsF/5K,JDBR*U%tO>:!QKXE#k%lu=#;rg,f!*;Zm%4QQU.O-Y*@kk(X2ASIUtnRKDWB)O[YpbBp%3;r&:P(mi5>'dW'roi!6k9'LGm=rZ#!'1P_+2ZI,LW@^\FiNjJ%a,g&r*/=3K`%mB@%@"5@pK;&ng.;W4s%Ip7AF;YHqI<a1#*Z,3O]_/i(`otL_XP(QA9bI-Q/OIW7ATJ+p1:k;`:_/A+dKq,iM4+O%8dgIu*^2c45"pDQ*%&:-S<1$<lJWuKNj:ulhNT:^P?U*c]b?lPR1oU&I6Nf#$\9K8>ENQD?_>Ls!Ku=pY9'+]e>^JA:-HbgbRJ"0%X!_k8QH(5<abtm5OeWE2ogeUfY!8@P;&eRB;&&Z-UrA0\on9S1/1j%JTQapZR-6F(MNU%n(+Hr'*K8`-a)-o"W^7$$6[*J1Fp@'&%:-V@]k]5KFI=@,p;$G/l(Su<=VPDY$;D(<'B`@\G9hE4Wj6\3cJg=6a^,\OIco!1F^DpJN4:G,#&1i+s`XtSS$<H<3X-,Qt*0G'<%Jc8iN,-U'f'i`9qUR.5#M204>.(QXOgWamum1/0"bj.`8"J\ncg+W#l2`aC/"/Se0+3.eD4+flIX\AS;1sSLJ>hs/'hnu8>%^!<S%>@[HGZ8&60^6lg2G1>#@B#guLTlt+A[Q:PA2N1fKQ,WYI[3H2PBq[)dQ(TfQ'b0Y\drr0RLeqj,6@PU<N7eLU?lGo'P1`]T7%#(E%#*%:R@5Vc4#5Fsm\XN`oq.LkuR$rubWRJY1#-0P'^Ia,3_'3:oC;%ocK_,Xh(QdPDC`YeVkg.ZK:NcG8_aVEToLE[Fn6*KP-c@mH%`q(EP$a-,kraE$igaR"`cZ(Cp&iWI&XVg)8AoOk@&iVVN["GVA'%"@0/Z,V/[O4Y9nSBq<L!/[(A8J@=-ttK-<4:KIN3jI]KQV>?%gsVD(Y*0+*5&27L1sAgSJZt(]-#IInQ#5r!@'H!S_I\a6iG?N:X#($nEAj#CasJ&YBJP72bp8irf;"%W#pePIVJf@<,T/T]V4$$e%pl)Hqb`\)HRg,`D'ui`:B+7`)obWas_^@nkS)G%@(U5TgNGp,[(K5h1q1=/WB+AEf##UOam`7<ONZTR4Z&^E=5"*"SNi^Lt+4=k@%E(9!Gb!981L?b.<#A7OhA=K/J:mO[W31E4,D!P=j3#eV;9P)SdU-=B;cQH3b:cX8;O&8<F1CTQt$n[3uc/=B:WqHkD7eWl3?Xqk`%=u@a;Ci#^[j,N%H?ShG%n`Sj></*^emQB'Fk0@I*:ktW>KVkcEnhkP$(u*Cr#@4[noOXUYDY<p12-ZbiL=_LO[W.%iL]kRoU<TB%%F)2=LQK,%SR!"/Z]BfVm;jfSY`cr;2Cs:^*NJ53\#[nsb92UVa]QpBLO/-3[M_58GB:lc(0Q%jQTj5hfL\)cE,;GFaZ0G>p7N>p.%>$$?X)4iPIc!t"4HLm)T<pJ&LkHK$pObhJuVsKeF\9%$tRV&CAo4U8Xk0ZFsM5._h7Q])M]Qs-PdKga>4!(@r,MLpu`cei)"2f*B%).ado4n:\jH3Wp1hpA^M6=m!tT(2/EB:d)Ea0.n_,L7Fa[cMKZRbZDj=5+0pga!\\$Ik9\\,u,-3Z#!fE$Erl1\o(*5CW(o'$JH%%H]OBUO`6Q@0%'`c8<@;+NAQ/3;G@Zc2h2bpCcK%EM)9c0&u`lWU]E$/7Yr_F'34OG\HfA=E"n17Lo-N3!oaN@it>>;/'*Vk]ZO\L%`[.PkVO*r2V&&-4;;MZCH*M7MRj%G;<,YjLO%W<s[QGh^DDqa'jg&-sNRr-9<NBo:E4!aKc[#hr7o&,3\8_a'0YJZ6mm%$hX'?1X%.o7TIDEqJNhGqX-U0dZ8$W&un:Jsh3kY"#IF^0HS/B5rX`Lf9ESOG&Tq6lmecLT/4i?K*j@k)Ll?'9Nh24L-<LKBDim&]rRH<pe_%jE=_`J*M;JU)(:%5fWc#4,ip+qJj3>?%<9XAhR4Cap"`f6I=NZ*,-NXFF%2/l?TFS=qGCE\M.I3ZKo["!`[MC9:O_LV\c!-e(^)Z%!`UAV@a$Gih'%(Fl@S7(W'o"k`s&E5f.RBBd!4%1Km?TZDa4JhX5*'b]1o-:md<<9]TT=XQUlD&H=_*Hb1nr4rlS]+1["D56G4ok%=E%,PS!V(rM9[_-`.o*nYDW(*G<dh5`ub]/436cgGT\:jl-VV&&kFW@>"#QO#F7]<)a8OI4HR?/"mlqI+BsZFjmdRKi<7F`;UW1'%m&#"M*jTUm.39=EUXYdmI5`ACk$u(RSk.ckO5m6bGtW'mk#LqF>OE'RX5`7<S(spD=2b9bg>R<='*-n&543r6g%+R*GX*te[uXLW%hEp,pq/WiB]=OSHX0X646bF`%bOM]4&7-$b+QK'g*QBV<Qr)V7B/-aZ3ATI27Iee2oFbkE'[LTN-F%e!4A+AhIY)Q:4KGGm[u]YK%Q4N#QGVk!FV/]ErY\o$EL"sd+<fe<b:%8THDMm=[]IBF$alT1A;`kW%/q$t=cRd-OWY`W!RloGF>QN0Jo5V;T?Ft9;E?D7'E7Ts,%*tQ:5IlTd,<k[9k^l%hHj7&df8^YZYe%@)XLZiU?4,inA8<ZUUi>iU0>g(QtoqG;!5]0NNMrH`<V(2*IGda[.0/RR(Qgs;25$"ak%0#5KT43*<R@_F1]D84>Bi]5Ao-?DB=M;J?/A.-D(ieb#f[o%(l<^%=D=RM#YG(M+C]I'5&ZP8V&;QB#OKr$D6Qo-*)WUl.Za,Tc8%ghYkgMe+apW`g3Wl#L4[]&]<gY\7;UR9J4\9^;bcl)55s$^YBb]aEW'/mNK<2n*I+][\.-$5LW8?7*+Z?+?=hUs4]qq`O#iU3>Mj%@GgWNmG];X4tULcc6O0N@!^EmVW,!mU3Z:SO5^r"$Yf4^fqE]]Q3=l3=YqcQA%aH1btI;igM'umK;ptg`'QVL6W21p;;7)(%kb)_%[SskY_K/:o;8%4r6>DGD23FkaXdH%n5di6rWY\I-hX[[m+U_/R0<,fu^ofOG8lag:,mtoVl:$>.@VnkOV5R_\hT84Zir*ZC0<,g"%a,2h+CILqiR[C'\4EA0T7J2816ZHh<HD(q!nVc\O,MBtTYIl^X[NJJ^>%1ZETqUROE`9[n2;^&4%)?>q7GPQd")mef@9)_5oK5RS%MCQKtKKNqbW6,Fe#`pHY,kq#9+p*$4[pHl<E'&U5dH@"NfaF5ZOK*N&(N]em=)g1BJfV%^PInYkR=63@s!(4\FR_aZkKS68is9gj%@FQAO$+ZM$q'0dC![:\rP9oNX",L8uL$Q0mB,dsu;ljr#dP7FnM^T.L[LJ$f'L=?rlCD66^S-gQGmtNC?SiPeHiOeb'5PYI*;pnP%(FndUSGM__8p(NqT'5V\[qD_DbA6Dil`/&nObUl-S;3tV1M2/rMbUR0]me4oAnuBE\J3Oj.rti6cr!u;N!QL_UhgrJ#`Q_9mFa\;%'L=X\o+)A[p8Q0)ZNE9)N6;E)aSQ*7UpaQK2m`%:.Ge\D/4f(Q&]AK]2'fd,W5U@B08W6eo#USP(9URD,-,s,"cs_2%X8)g]N9CY%(rlj1S(tD"hJ3OVQD&9$8<f#dGM#Bm""BKdl4gG[i:j`Biq.&/q-N.$C6!L"9<MN@d\#1e-stdgS\/0bg7CDBS^SdM9'O/KLo<[p%/6,./b2M=4K6^UacMF9oZf.B]%b?4iW<tZ@ZGo`f2pUCAB<gYU/ouqf@`Nh3%.bh?%1VZU)#K\V>0"q8D+AkKm&Yu;rH&VS=`7DG%1aA+V_BPC[PbIc9<AU)be;P_dRLtWuV5&(^q[BB/e=j%qXEm`=VIQ+8dh+SYJ'j24iT/4+P#tR6-^]3Wmn154@+C/j0#*FI?Bemt%D.V+Q-8P7g'be7d.k@U$H4eR`%8uhmNjQ0qH;T]K:\W4\:c_pq]BD\^K=[,olcGEk(HlNDTbh-SVNni$e?N&=.hoZFB;>5q0:Ku3%McNOD+s<A9MdDWf?]j717E@gfX'V$!`9J<j)GfK1&donC>0;l8@PcV90?U6\[b$GAN4!N'?A-TH1SX,&.q3hP`(Vfc;V\8g+mfp%%:+npYqR5ZX*QbtSH"]>,[!o1pA^ZBK+"POIA9uXuk50l),5@%@mrs**MO@dM@E?AU/ZQ;^Y:a!UFZ'f/<eQ/Ld4S-Dl3O]'BLUIn%%HWLG<94V0<@8^3P`&)TV<>(^&j7`(U(Z#5:RoW`'j!n2&h5UsSV]U$<N%RN'CsT9*KgK-]&-p2pSotp?8mklGMT2BE>!A`rUCp]%E7#96$e0as4t2nH2q2\"@oJLgY*H4Im:'(rgKZHS.`?.'#"<hQ0VrpgBS-g"OQ9EgpI]mba?;gN.,\QH-Bt6%JkeM-e5)0aV;sdG%S&Zu_>mWo:b3$XV'kY,S+P(2fXZ"D6#ehFJOtiZcP]-pO(@X>pT0:j*_ou`;3r@r\'-OrhL83S2Se`T;BZ1o-YD-OZEhtBAba%pK%RgJ$n"7MI`@;MrfO`cGa*@2J$)Rc59R6X/DSP%BE$PK@./5[Y=3O:?u?ld*FR3n1^l^Sb]b:M==>le3YRY&73Yi;<c=1buonKQd7%IC^/-"IHK6Ni<_-IYld2Q/\\cbC$dt>.ubu24>^=S3:66eC#sWS0![&0p0<>U+(Xr;LadN6(Q)i6:>OGhU=kVj*J!O^o:?Ra0=Pi%Pb(pM<()X>RS2k$+MCZB<o11oq4t3JU?!_*;BVG[h^KbGVQ.;IMKX8);M$W'6)lDuf>V)S$/ehPC`u>l\WFt&nHFcc]2?b/\]VW&%1!f1&+4c$oKMn%^;r&M*$G)D;Hd@5$-'9J7Fl%r@W-&_V?6]l"1o"tRDDj="j4UFEkp0t:hX"!W\iDFG@eNRD&Mnr:]ZId:n]"p-%W(95al^c7Qg"]f#EmbA;bge7:E^msNGG`?hZT2\uabU[Oc0(NlDp,fn<YWPsa\b/5.L!ClME=(=FojtJ'3#uP];)fLmlNQTF\UcS%7o;miCKU/(R]H(p)Ke6rC5inSG3$'NCTJ50"N/$#gh736aP&OP=#1rVfMkj&(A"4ETrEVlk/0Taq(ONZ+-9B!_G]`U[b3^W1a$P>%[Pn;_,GDZ515-s=k]#"$^udehUL2t?hK4HU$jc4oo.&qJJ:L:K`%hFh,D/#h"(EJ'J64N\+R!&CUt:J);/qYm;2dfub0dRA)A'=%%V.hXn=Lu-f;Cd1&Y=mTJ-X337;O@9hRrZ![V8K>7;4B/"RfNO3H!..'"(EJ'J64N\+HY%00PNef1QM3g:BLZ$#Xq`a)A'<5nN'Bs%?L6rX@mM"jk#D)[W7suJU4U_"F]UFCC,(Fa$j\!J6Q?<KMO4E!0f'r&nFj.r5ZD'VW9sY#5bJ^S_AE*C"/F2"AUmh;X`@(BW:Rl^%L&83/Ua5ZOUXo<r/e?ikES?%E"=A=#)Q<uf2moMR.X(d1`q1AgJX'VJ%S=XDoo@t;,EYq.ijXV?"OQ=!?/lYp&Qij!*'l"T:pj+K%`>rE3[&t5p73\3QNME?G\S*K,67Du2FYbF7'W'nNks>B\`@q9@Xt!1&N\:/VVhfZ"3@_uqS0G18D$^T?,*@tP:P2Y5`",qDk4Ll`%/hEeBZ+)B],26&Wj!_.3ILE-rp2k0q'q+eqCt1IJM<i#78k&QKK3)PK>LqmZ.`=TZb_&p^7`AU=-E@Ej#@!,gX11N]<SV"n'q*M4%(KQ[UMlP/SX2nPrWfl0..Gc(;.^E]5P6"!"U<'>!R\5h$^j$sm+;NStRpS]T<aHe^M:A)ll#itkk(#:'<@&K`,+G;$KgF34]87N2%Lg%oFO"LSDUIZs4K+X"-)Chf/-U&U9;_&,mbB:s[0YtpI"2UT]/%UuC1fbc-O83[a4p7?SA@!0K.BL^Xb1jX][2S)3f_Fn*mUL(4%R"o7ZbK'G%QJMJejbcK5lAS..KPqUABGXIWHG!1]!rLg1@k^^^VE@k[5`8:#/ui"]1/t=Y;\b3>=l6'5`UAN9<YZ"pQBbULMA=L?%NOGSP"?'i=Xo]$lki*K]hCD2t;nEB!K2JTfeZOEKDq5mB+!=DrdoF"`OJ,tI0PXZWW\34-])n/O:r2h,0(@]HY)l9g'<3saUh\Hk%jbflnJkKSW8/5d[e`0[djXQYR]dQsu"NO?AJEVlN.T[!5PcGfojbejqThXX+hikUiPUg?17lQ^6+I9=$3*oqG6<Ok6;bE3!(0Xk;%0pO73hW?(`Y(/P$h,LQ0(XtREDRBPG>"qOF.fr$oWb05'bni`).lLd57>e)[ZYb,U8e[<;Ouk4p'aj;eG1B^a31YrWj-KRr'J!Pe%KW9sG0k\iU_.OF>::*D3\mjTO$eQVKjYYEVjr4HeR#kQRN#KKCa@(-P@"ZWSJ=&9\#oI6:;Kh=ogbY34X4Gh]113%HomTugE<!,D%mUI[R!"u"-l"[@[osf";H<a;uDipgs&2pFu(d&[Z#haKKD.'3lVkg*9KNH:eA"0`/keiS*lBIM'SqX48WquIS--WFS#9n)sUg2N1%janXN&Ge6kZIsS/0T6g\q]]@)Jj@*O8^<E^[0[%<;9EB?bGfec>*A/N-i$#VMj`:`Yj0Z[$LD4Y%/6"hWQgMMaDg&gQ3H'aS_QD0%%T31[_"%OU74XE+KX?ZG0JqUfYSlMfH#Q'ZR!a[NV3:QW<ogCASD#)#flSE2Z2Ps0"EG('`R)$T[5f%q*!!Y=I[,,UhlrQ>m.BG9%"'-(#'"=D[MdZ*Z$um-S*)<p*&qO\V`rORgKIhi[2Ui#aU"JlVb8[<o%/[-7F+[g]Ku95,ANQc"K01KON/I>#+n<*pbf7lhJKbT@%;GHG#WNhn7'r\r(I!Q3XK!cM2P3f;#[G=IG9#fh1mMu@a$[HMQ^*JQb"f.B+UBQ5i5i*G9S;Y)t]s:qV;I"s$O<1$8PP<'V,^l_F%TIKc4?VAob45m*W*80n9GGCYYX=8##<5qf@?-K>mm1K$qH#I(1mS(<o1LtK#E]NLY(jmB&:,OJU1MYPheXV,g8*LfN7G%+J^M(P7%-MDaH=_.,Q%Tud)JBR#]"\lnQVW+g34odk=1`E&r:1S+,'/L(RKVP)eM6GV1D#._YmIb>d!PkS'*,M=%71-[KIcgeE68)$d<DJ(m%+Fr[Cf^EB&MWpM\+r4_s&/DMR[$IVI3K^:MY*c/T5[%>R!.a.'Y"59rL<X=!;_`V?6`eJb^6G`Na=4SM%<GW]"`$KQ0d!gXcnVe.%4K+m.l'MM>_-1U$0p1<.((Yp!R6'JfM2mFW6<cPsJ^hqfM56:4;ATiD+?FO;R\JHV/Vl5t=ne^_)lkY+'bd),RPHUp@KrouATalE%MM[pdC^#t_k),Oh3AJu<Oj[8H#693KlV2LqZs_2&nir5`?U_"]iO2b4O\,pl8rm('WSbF'R?-'>:Up_s@k`[o0j;3)pNa.OYp1E.%X$&G)A[Dq`N7OS`9EAY9p@#u+[g01KU8Vt2itXXPg2820DX4ae(,B8IQq&\9'.):R^g\`=m^A2X;pAg2=?(3:Fhep"N7SC#E/ga$%NT#b[QKm&[$K<D6UK+@?)2BVCfNX%$peRsH-qBJ\Z21]Tk#fSDODSnH_GB#:;&u^j7/Rn&"'NY/K'?D).ETHb(oqrQQo8":d>huI%i;BSqTucc?5h2DB]1=QbeJJ_BeC\?.7bprs#&5th?jtNg)$>"hA"\i604UYEgGcDHeR[D&(oh:n<?6b7.%"SE@Ptpg"uNam]60o5%Cq3oo*lM1il543s?o$&*ZNeljb<KSJY)$55*E-VDBauHu:"t4hEtCl>2a4JO'=8EW>ZQ3UA'0%`4c"/&G%Pr=F7%iL)$d+-?DOjA%Np7O<R"I@X_PobQRY)Vqdeh60"Obdc;s_=80mdlYBFcFC47/n.Lp([<,agfO4DhOoL\;k]*Hi3,E]2<@M\&uAj[#uMWg6570KITY%VF:d7/*e`%@<-DkYZQQD@Q$WuYn]'Q0\MD""sFMd;1k2>+b40Op!b*X\d`<kKIgIe,RMnNY2Ym9f^$L&okMiUISN"7&10%dctX-;%2E$1!/L,)E)2'ML#2tFSH&Fikdi_=os7%oO'75C?@M#h.f6nT'2K:FA64``.FG$j<Jh!GZ+(>lBC_Z&KTu^GT3o?CN1E9:mKV2G#%*+N:d1C4`%9D,;?PAnLZ,fJ%O(,/HLaG3L34>R9udZ(1=P7SU-C+"qELZ[*_;mQa,:I1>R1m5>^U)%0h<iRsF>(e=AULY][$F\F5%9YqNAPAl5o,XauYCh"e8%ZPJ^GKhC,_<=<D#s$.NAWR[9noGe>7>Qm]VuB?[0jg3"&W8>_j0<q1W'uM@C6EHH'oOaL3lXmHDun0(%>Tba+O`],r(GQ.lMQ1GQAe%]uWOo*rK8Jom/$4h4MeUS<<#2s-el\E`4Z*Ke:*PTZaGhiFNp*Y/5(gWQ7HaB[S.qM(Fk?3lkcSQo%Uq;u6Y%M4;0"[^+,[LAH-ml0`h54g+d#cGVko#9r*00YcX;@nYjK/Y7h5InQ;GL+K4TjAjOW9j^]4?]B3&WoEXR8O4o$"<ED;Fak%N;bd&LQTFsflFb53e"b1odZ%TcbPcNNRg1q!a>8DE27!k/3g`1)&;(FEGMY'1jgkn1Q]-p<,r\KDtIX>fum+9!7W.C:!X2&2EgL_%DL,n]k!-aXchs5KB@]f'b`_YWb3:dQ414Kg7bP:h3tSA)SMWeeCcbG$HTDJ-4_a8.#1eL4W"[tX%)gi-->[t!^tA1i6JV&=5\G;s%nB?QD>$/)hRGX@Q<]<,cf=Hd@>FF/^-=q>;1V9s'k%H=4qqoWff?9Q6O256XE,]@Be]eQLXQ7lQ1G<"gQsqc+A_Y'Cd;?]]N#S@b%\YOFg__XM)7*sTUbQ>/]Cj>)E1qeNGRG"NK&"%0Xk#`&Fm:-=Q]HS;d=bGF\Fi-!S5,dU2b6MN5HJt7<]6D%=g4F=/0HI?D+?+/=%9o1:SnLVRV4"#7C0[IV63tVU0h/9!qiI%.-148fF+X_#chm_5?M]Vc9bapYL*nu[e.M6.;A)!F'/h%S77&EC;0sg)+;K0'?$%a)Q%Mrl.X(-Qge't%VkU;s,S+*TM8_l[M]At!HJl\JPPqO/1J8";S!Rmis,WK(T<V]oDcRe.8]2Z8Mi;4kk.P8X&lHX.%5]9@g@ZErh9%Egr%JZ.E-i[NJHuRp1(aZ_!oYU!pU.[G;[tfR]sN?tMP[i,.bU.qUr+VL-Y3"([kn.jejkOJ%JnR.WF=:71'Meg'oX:B_?BSpSG2%@ck'm@os;l<pS/bc,nDVb$g0=hiVnFO]hB;bgG%mZqo4/3]$/)`(^&bR;'uW+fAV,O)8CpOi$YP4gPH/f-B&$@F^NW[_H7U2d9@D%UYEh(;7j4Qp(*Y\3P0`Boj@;qGJ1K3D*7"Gr?ljKPc_MYS*HDO[RMf.D01bKkDudNGY,jm8T1_5ilIg5CSp_<\M]E.oBDeFI1F<O%e>kSjC`MNFiI@,kAI*CjLUKD1Lb3NX]6Kk"ZIoJ\oJR?5"gX42XqRkAD%t*XScmYrZ1a$<8@Dtq?c<XN+@=[L+qR>DHnWMi)!s1'%73&\7mU>KRQ$oQ)I(o)V[J<Y(it[JmaGo72gAq_D0eLkn'BNKa!$Wdh&[(-EG:<c1A_P*,]-HAZ-Q:5p,55VDUh^JufMPNK,6u;S%MH\?Z=#n's1u/1%0.8t&9PDhp77;%uP5)iQ+<MFK[^V%u?Gj1>H&]2qBji\BYsAW85O)BA>Ve\%_XgE+IGhHH20789QZ7A&NYCuH%@aK;''aMk%U+k.tH289:/.K].O-QM$%%c_p-CQ-`MR^Va4'TmbQf13*6FO7^"Y%Nm`H`#$:.s>#gcUOs:Sq\SCWdJW9`%FU-b+UZ%5uB4R(sbR&-\=oZ'J&+2,U9"e:\VTaH!$CtP/D[I/AfSG:0+KCa2b&ePd60=g#Yh_g7i&A."_3O;7DI:-C03Q^Fn)E86X2:[Viuc%9K(Gn/EJFfU=d"FLpI9,i`7Pt%Eqh/Pi>N]EE!Qu`F9L6V`eb'gMG&MiA#<[D,V*p3BX%)T842!XEBS+Xf74DCKd)%VYc'jI6n;2%3&;1k9dCmIJi^0s'm$\Hq07<hZ&:!X>9scJM[)^5EK7aY->l4c'2+/kc'*rEU6<F1(JTqd:3o$1:P$dm+N/j?-LO;JYi/\B>(tL$%6scoSe2<QD*Pb3M:,Q"'JHq*gfPED6pa5JY.EQ6ooT*Kb>1k,T=$)L_@&<,G[ArW36NGFW-SUh_EF^8!ha!b'(c^]#Xb6OIO^XM?%57L"Qf>XH@a!,Fi"?I=aP09"Z]546LB78*!0$QdL/(Wp+4?s-]`b"=q6e=qNhYu*<+8Q*dEKg"9'3)\UR8l0-ib=@#rUR+]2RCI#%ZmhFR[tkAl"8pN^O)70PX3d>$Z3hK:1\aePeu&p(-H?f]U&&`RqW<CZO.>$7Lc,Jbi#)jnYnjuf_((X'WrpHjb7U9ccqD!lH&");%D'`_JFCejMPA$='Ak2=<9tDolKAT<rL.tKQa@;LeA7T7,5sL5d'#J@.'5Gu-W>0D5T<U<-<X5FED&&cj?Z8]RgJ%B'q@m?hq&kmh%[ctS!18-UFMdsDl4s:#g?^>d5'f&N)3H=p$PW>-G3@b2QTh:MLnlsacj]!u`!\S()0KLnfJ^P+B:*sstMBC#9!:EFEf6fpri`8D5%GSS4J&0<@<c5E9E)BtFmr99/o_iCc?72/Xu20qeRWH$<hA.aKa1VGUK*OrAB\p(869Zp1;&dZcs;;uQ8.?NiB%A41#1f/"gg9PER%gk8[IhNu^%1rFka(TQth(D_u^TSQ5"Y`Io=KRg'm@6JG9WTIT^!ec%t1(L-L*?B(.AMHa!aC]pdq%5qHBl+d)\pfR\e<j-c;Gi]^%i&K^f8gq-7dq4\k88VliX,,'nTZ"RH:h9]kD<ckGWec;p11P14Es!kJ:r5m?MI%qQCtS@uPh'PW'9VJ"i%sDnLFU14%o(Lj=Q#<n%e4cRS?l(DT2WEYl?PBFLS!S5aE`4c?'p%g:cp\"$2Xb3\k.9>5UfnBWeJbJ-5*?QEol9U%6E6'**?:\XrVrSZm8e@4Q7K3ff^CM4%$u.K&/,qEmX!<#@Yc]5j"M/9bFA!CNV:2A=?hj"oA&O2EXRDW_4rEqnDqM.Zj3,Tfb28#;OV'0<r5adnocTLa4"G&9TBeYnS>3_)%KP)C@AR8Ege^`E@*kP%rW5go=+DRLJ.RYo3PUp&Yf=G<ZT_.3[GQQ>'XNc#!AU[:7?m-ebLPTGZ"(Oun\5N[#LC(U'!tpDpFeHe%%YOET_i?Y#L#"CZcF)f1$o^:R$[#q/KcWlg!O=Y*\C[$b\UKL`9#meq7.P.VH7c^q&:O)lJ;;6jU5(19,Gqq(aeAYl".@SQK?-]ra%Cjh4@]3>)A9;+"@Ku"q48k.Dd>,25#RWCVN!PVQKZkPa#Q82s\qR%TsY%G4lNT@p0"6tZQN\&kd^9M2g+*5W?\s:.eD:[mfL)o&0%XM'\"l);Ij#gXKOSW0lXWf%]jdqp5i6Vle,c/#k;1cQ&nZcO!"HTDoM@$$:p/<.gTYpQ0aG3$6Y-OWSAf*h3t>\4&*eS]`g(8P(:%b<>8tdje\^.$=RjBO[Q_I5CWt!b01R$a@6A)X'lM&,l1>^da\,FfR9AH]c+f7OV\R-Eo+tQtXGB,\cc*S(!W3iitA&"oCn7k)\Pk%k4KJ1e1L;3X5h>Aqf-(Km%rG[G4>6n53V/g+8KH7E2Au1`p(i'PAP<ZM!Xm4@koe5<$9k;`'E6Pd@A!gXIH$3P"I/kC,1'o#N5[H%Yg,]c*R<XpGeqLf6nE58m\am;m5WQ(6q\E#%3N,5]@HuCmKtO;n2^i.7np,u0iu+o9q+/P"WXqP,C0%R81rs`[+7"oMZa8g6m;s8%(*UI>M"m-<mK2LhhR8sX3Y5mIHIf$UA9W(sd?]lc\aDAUCt`GMhHRacr"@7#fu+0b@Y,C,lPi2>BQ%WY\`O8Ti5@jY5Js?YG;Efu%6[IISS#pUSg3:$m$Pf4#Z?@kOnVA#Qku.JjM?b?e(jACj\Lqd>QpPm+KQS2M_Y9&S]@/0pNR,5;71HY?WTKq9KFD@?,eG"=O'&DL%.-X?V86](L's90nmB5l(`I`ue@F[l6SCMJtp,\LoCtX>ehVqS?1M-1Qe9D\.k'V@0mg3<?WWCX1h`;hXa>bQYGT!gYhlCcp]Z9ie%[I@MAiJ6XrmZ5-[_g*0knb;e0J%PnZ3DM#FCb\(dM48<:S2N_f,`A%cjAaP;,OTc%#)bqR^kuCMM]=3e'd`N@nM34Gaf:Br[Ah\?%*Di`k9D.d!CFH/[LR6sP2\^9oh]%uT:ui]@G1ptB9(Ig^q:B%Z1F2c@an*lY=jC&[K]E?31<ZQtH@cAH&87=#-]2PMrfZQCFsU.!%s7G4AKZBP'btI`UccmR&Y0GcqSXua+T!e0gjQ1[:>nPQmLcq#tRFGLS$QOto8ir*!S:"T&ja!TfQC#gX;D'V'9mHhe_M:nV/k_)*%P`'`gWh0d":iGj_SX)C;-T'J5pK2207.DY9Ot+mMA#YULdfC2pJa%[lD>qaU;MBFpQKF52iaIVjpiKn-JJ!V4CZ^'m&3Y]f:iN--%8ESP%[Chf.b=b!5I0X)mVXDddLd.]r4Hk3&T\eCHZPtT)>.osp9Qn@DS]U]kaQggJdF36Wf_BP27RqX?LBi7C?B<L`Y1MX`N\P:a%0gr>mSqY;!#JS@%0f)!6Qp)6a7eB8LE^",;M_UYb*G>pn8,OMWgZpD.0h?_i[iTVJ*FD#ILDE8LdVI`@PdXX--G>UP&SaLaA"dWn%(+M?(<<cgbg=kj7JU["J00Aa1B_H3pX9PJk,s.iA3D+X7!#gIFViSmHUBfnf=7bjdl1-R\I6!,nTZ78pad5/c`t"aseU;Vo0%8S3%Kna6e',j0mk8,?H,3^&95;Dlgk!3u14#256e3e<GQjuM"4lfNm[b2^MV'4:=hMLWnEV]V%@q&[q&m26H>HrG/ha`PT8j4PQiE*lY%"="I@_6n6H&2NlGfj[Eo7"oYD$l?/_oF\lsj>'uY>$X]_TbV3nOQFAgKTP:e($WVEKS\_?ap9Gs.QO+ff*Du3(Q]4a('hb`!Qt_d%#T:h_ItWdB/me4,%u2$njLmc2It[.,9Hdg?,LK.&$o<70Q]dM7I3_K\0TYc2Vj<KeQ]h4$(Pc.!b10%M>7ahU\tH,P]U*0T,CbGb%#9Yl_Qe?W^iCJ%.!L;u'@<t.`QrCT0lTu$LSshhak4FFV!6j[2CH\&#B??14>TX$j]1\i"kliaIaH!3(Neul2274\\T4-3(`:Dbo%n5gn.K[tbjS`M)*q';G$8JS6(?dW#j(p)(o/g[X@i?Mh-'_BDR5ai61onX-8j`>85>-N>6@FF>kn1h2\V`]nj&3[nL@!OsG*tc]n%C%q[150XqB(J0nVj'ha')`AaT7G:E-Un5q@.$lT?UOG8^=d2mB`LlX+;N,#aHD5f./!VEe5N,OWjA-#X"5+7S,nG#ia';o+!RX]b%+7a\8/q5:\lI&%JB??14gl"bm.0X98QVXp$r!Dg?7W=)(-p9<`XhGWuaQFT4Z;2cHVFLX"]VE%i&TD]b-\dd6;PSdaOHL.WI"$?o%C*:[Ir#q\??/m)R?[::>\hqi&9R:&kODH&g&HdE@0u.r=?D.0$8Nt0/OLkWOd#5ZH`C!>qEnGfa">uichZ-WSO-q*qH<*p>p^ddE%TPFfZT48p^*/I4`O0;pq\rWfNF%k!)9/$J(7o[4^+XO6]O+go1)5p8>/GgCp_#)76W<;['PZ4>?kd"!j'5<ID:j85l84g"@(X/[N%ZA;NHgqX$>,9"0h"DhK4;R.O07>U[A_pe)4Y=b,4&k\#Y)gT0+e=FR0Qb&NmmjfuY7*57@Tnj;),0turj0^P_G][;GgPu1aF8*0H%0d]jh/0^FD0fK")q&HL/g&jN#dN2>[`\PD&;e$F0=]NqBB.>bS&YH`omj[^UY7XGLMb"M#/i'iK/5%kOOKN,qFfIg`.qj)oO*FIO%^),quM"3)CI3I3Xa6W.iA"/K:SU9+2+Ek*XM!pI"Y*TU'Y.a/T'@$\n>AeeSrX:(GIKR6X>^kV5D(C5@f6Mn.;L"hc73)UY:AO(]%LH*77P=g-=+]%3ZK\Y`ULm';GG[XC&O?+?fd8kGU0_;mf;A"[A"lAo\JC,MXnrs;iD]l,is2jKE6"BrN+)%#?)XmPBgA69G_-'F"%O1cu5m&,<:8SaY@2esGPG,S@mVf(KTm6%QNGb39^>\Vp9[EI'h\IJ[''W\h:]MRUW]ag>fFK;kA9NOEC-e'Z55]`l*_&\;[21i(s%Q/L;mJk-CuGUYXY2-5Vu_EqD_'_\s+KSj\5:tS?24V=3)nCPK*#Ci;0$jsn$GG])\o0He]T*aNRo$.R$3f&tBY/T9'e)YolXL3+(%_-7.M'?'S*aVVr]=R4-jkb+>qK+=dC5b)RedWm/m25hiLTn@(5XE<M?NWahHLm):A#1N4?Xfj\;qKep=YK]tc6Oq$j,%C/hnj5]N%YGCd_8ig<t'_@0O?W21!P\e\>#YOn\U7Da\0?kKDEqDcHasV4Q?BE=W]>6"i8;mi[k$uoJ@i/cIjtZG\*^iW/k=BIeZq<b.k>`#9%k6)'"fk*e%b)r4?)&9Na;j$HT.og,0SX;\ogWXMQFCdN\])t?#)A)i]I!<g.XQ0b[\U!9=M04Zjk*:SW]H/S+Ilg]dXKqGgBePMO%6pLKn\U!:0a]NY;7?0ggJKRK``j%-$E\?HK.q>Ohg/sCqNS\,cn1oU!jEAp\Et)0`mk*]o/]X1;eFMI]HL.cRZd76_b_bFh>'oV:%_7[CAFs?nsP+,JF3AumleU[;'mqu1ZP:p/5VNhZ;(g@*:Z\#E@9slJH9%ZU7PuhQX(u4>VU81#IA4S4#1:g(6A@rr>De;![q'#oX%Am+_6'?`Q]2R+5mFB)60K`p8NZBN'IrqM0!eFKGH#^J]]QT*uZ-k<Q2-cEhR/,;dX#Ij'Ln\HiYN6Nt*q<uBV%jcj1%]VP-DZbSn%5,dUg84YGX?--/#3bW*fU=[\R*H=dRaiu:3f\`LqJNV'>9e6*WfXrtP_^:Y$]+/0#\a/IYi3#EZ.S@-*q5OT=XKn&Ed8N>KLSg3!%I-Ob%<t;grVq;$_o%uXM`.(99q.'b33>h;MW*mQ=UPocq;E5TacrU`'=E=HIY8f*-:s6kA#-T!tl./pgBb"HTAVA&aPrpqZ9e6O-%)T;2k-'hh0hSet];FNXQY\E2?4ED)(%Qo%3K2q>35'cqJ.L-J+9S;r>_('@KQj-@#EqRgYcIE0Ki2V"jb/W9CWuO]Dl<d\*k:2'`%*^S?E'7c.9#GiD3'cG5t:G-;Wdm="H7m+u8c\#&SA2+$:KX,YQTsVjC5S2'WnRZYb-"!%1@$ETjn3IQ&6RjrSks5.i-%f_8$G!em%c:bj6b/+*aqk6:#@u/L_,8k,*U1o7g3tOR7"EDe3%[?ocG3%b$,8>;_gB^D3P&[_r66Q"]!kH):`<Qt#fNX"-m;MW8Iq<s/BY2n5%ZM-cL;>hVa,Pgp'61phjZW2YENJ9*)7n1>g>46=.2u)?AcoCMMY(H&KJJV;S-8Vhg^^Wh]Hk/_pApp1KDp4rKH@u4@O1AKP-?h$p%o0:l6dA(h;6J4.W(SP5`D:o8r2jV"IH=Lfn`u5qCSnFadmHku+Wj`5<)`p?)^FuDKVL!l;N\rdukI!7[?uqr1bQm1?G+McU2XR&^%3"e!"nq=4\N,8h^H05L]7!Z5JZ\dW'JcERa#-Ah":Yg:_jAVXErGJe4@FoI[^Y"[.q<b\%Mn:nShLFI3Va/KrZW5Y>)tP"lbI&,@%]A(?KIpYC^T4,2;;<B-S`MdYYfGW4V]$05$!B1$49$56U#N,F.QSnk\VTjlj9bS(aT*c%P-Z#>@q.Vq:WMFFof?Je4o,107W7RO3%%GTdXoLX=[oaTJ1Pgm,4"EU8!_$5V\DpUeddfpg,4Dcc=H09IHD`7PuPRL1*ILeoH.N-H1p'ec1"kidiL2HcgqTL::]95JRA^Bik%q_nI9P^K;lK+E!?o?GKuo=l9ZS,DsIg?c#-bYA(_s)%=N.B+N)4#cuI?HHOZlH\odrgG"m[TU%L=Rc0+fJ^nXifE:L@E,p1aJ$)W%)3b@HCdt8U,h\A7q.k7-EuQCj[IpK2"-Ffi11-.BBTI"\Cru5$I[_lPOQ[J_k"E1"ZIjMAPJp2:Z_o`\*2]mjlepDhnU+o*I>Da?%GUdtKaitLrQu*'Mn%]=U^T$2p3Q_!gG1s12@SO&N(AeNqD"3(`A(#7t3/I/)1<ha^*5)&Q)jG^r_P<`npPuX)Gjg&9jN'M);DK"B%Od=BpDM9$fK@:U*/iL>skbkZ.9m\`Ti4+H'*BAE4D1N[=\n/(m%_NdjD&_Q3jNG^'?Vg1"%<@Q]d8QBpYG?;W_bOD0SOI,.2S>7_%r]/'\kP=3$MM%W5Y1P/fI<WcU#c?5\l*WHM.q<Y>6cn8P`EB()I<lRG@JUqtYgLdBDuHk-Z.%#b'F4RV7'S+Hl/s1HSSYI4;TL2B%X-,b#&'kgZZN5Jeac8@ZbiC+.2`(BK0#&EnDlu&M))>=`^`e=j&-R)u`!L*&:SLr:jsGt<9+H!qauHJaQ$h\V&#.\WkD;-=ljkgr%nAN-_#>o<Q@>13lq0f9q<iQC-Hj+]_`PONCN9c(U*OKfoRlL+h&+2E]GW*]+/<cjAK1'T=hc$F4H"84lmbJk&W%&:iEl=G:Ahm>d%i.sb.g)TW]7lk?p-(er&5pAB>**Q@(_OF+t1)SmkQ=!2AcrYf$hFt5<TfB'2i/sQ4mQ6?L#Tie>ns/_SH?-^gaP0BLFC?th%X'VO%U^ooHJQKiMo\fQ8+H_<9%3F1OhR'V"7pIGAG`^!4nHOd-N,C>k_<;)_iK8884&?g2,<MY>1e-uD_'F@_aOrhKS5gGTB??/nea`1f%Oi.#V8.;uANfJ-cIe1YBj1usq4a-I^gLCJD&bal);b"k5JJ",_oTW:[5rJlI)f/ILGjrd?[g(UJFDGttOK62U)7^[AjN1K+298A:%B%oB"WL%Im9^6KL-9GG<D3IEPV)Q</oYq8Vo4/?lD4Bko3?=?]!C7(h5i1YF#N?`da+HqnX70M[*SFD4%rOBKb)WE"%ee-mHW!</%f[#<fq(%Za?C>>r%@]sR&23h=_'=;)7J_,Z<,s*Ik\:09-J<sa9@6taIO5WVK6&S;N?e6s6E/ibm88r8>-UdYHeh>ArL1tgHa5dR%Cidi+nne'F21*qkY.9$ELh9;_4ZZR'0r>qXcU#"aMLu,H?3^!Z.h5lB7b.DrM<8ZFqfY0.c&1,naY\d`DKJTLi+9)@.^d!l.@Y3M%*tPO-q<[,iBfH_5V@)^;_0i)KbK^deYk!b)eU:BA6!Ne6^WeIQ7MC&Rc6#".**opXGK%feH]N!g=mOd"11klO'4\Kf%[e^nkn&`(%P!8;M737eR4s!t82OjD"><dApK6_o<D^Wm/nNnumn?c6kf#!fG^[(?X$8WmA#)o#U^&2*>\qT`oV8LP9HrbZZ%bKXbkC<L)h\a)h%hn@Cg&mq:+gW4q'I_YHp:lUM*%%]R:+Q/Rc>12H/<mSWGH">jKMr-+oIqE(FrFeLFp.tMts7PcsreJ!D0C\*`jce@"5297boX98\%cpLi8&/YV!fZ4QtYV?[`!5p*e>JLL-0-31)"$U**</'JCJ.Ik6_2a&*5ghWE45dXT9,bA!PlD>:FX@VZYld0T'=f/M=.tJPb9D%1%^k[p9J.F#>!?Z3T2hd*oJ.F%i6JNC-P5^qo^]uD((<=<[3T05c);O2o#-J19;Qac.)Ecrq>MhlbLKQ`-c]7c#om2QQkitR7)2/TM%!^#8V!Elo;!#I#ALO5E`.=2aTY</Kqm;NT_3TiFJY!VAH07b*/)N62;\^8Aq+d*]1@D`'71ZBmqI48oo7=,#tQIgJZ-fWMp2WiC.%VE=d9J.E=-M4\c-d=2qBhW$aa5PFV^OW6>eo7:#Egfn*7k)*i((@U4akFM]X.TkT(BQ4B8"fu=D,b77'@4\mDM"O"I'!'m3g2d5O%$Ah2&ai-D1@KB?Y+N;8#1+YIh`5D`.CK<E8`5D]iEU=V2$A\bq7ng"1@G`$sbZ-g+R=\lK.D<ia\HTqRVY4Rt/>TK;+_fk$NC['R%@"lS*VhPGM_W4&:[3+r=q#7:,K*mM?9[Uor((5qM+t;Fb^WpVjYZS\Wf047E?nR@-H?F9mHj%GuO%s,BN!7/;C!gYN"sP\N#r*tH%Mckp\_m!6$Hk[u%@BjVc>S`c]ENrX5WdpjdB*REXiac2UoZQ:+=WR^G;B.\d`Oa*f&#P/?"fs9Z_.HXt+LN]9/Akp;8ArJn?jr"5%Ot7f;!b28q9gNn:)2iXAkXCAfKmM<l"NFos(!Rg(`o;5\$7W#\[tL9?4_J)Ahr^Z:^G\HbL]1aj/2hRK$G=u:<f)^XcG3Nm7+%bN%R)L"RLM:kWs#K8@70A@e=T!cbI"t0ZB$SJn))82'e])5i`j-JMg6q8u&J:QFX#!r+#I-U*Z1jF`j`6R%>Y>F#_[m2'&0H+(k33rK%puZs,D\_[:MMu+&<5Xo^YrFu2n45V6>q:3=>d[%(X.D?8cp'j,^%^2e`YEHHdqjq1)\Q8,mmbSFQb\,^$eZ[0lp*l=4"s66/8;L:%Lj#V-FG0^Y"GSs*TPmG15T&34A?1#N+&=&2!D=l,1D_7MoHT/M&@uC:,VWV?oco8NOD>mL[l+fgf*P=P@PJYV<T4gKH&k<PMB;>]%Mj1q*4cu<ZZh\1@Eej;+n$h52OUKR*'SN61]Q`,%r3ts++^m_4!bS%V?21Gl%(hNJg'88Mf)qfG`KDd*XQ2#WMGim5(TX3"=uHo,%LJ!Gu>_R*F`4!/#Ui5'ZVNe5.MDeXZ2%T(cdMK,2.Dc-b!(c@1UA[>&Hl\T-0-\(L;7(mJg\F55@fKRN,Y;?.@]WJ1ZE`+I%cIfB%l=6ERen70UBYX;r?YBJ]=Ge^7:b.Kho>'Lj:d?jia\Pplg5K>='3M&qXbd2nAjD\PnmsG\JSEutSHtSI5fV4\YW-\X(6ZbX:ni2N%Gi?MgS63)TP#a)%SbioG(]F9o/%9TV>>2[K8=Bh9]jJ_K<2=GjBgpc#alW]njaaEe%9\U_Q"mil5[.[$Tc\sM]X7,R9VR\T(Fk="%<?SV!g[tb5jeF4`S*l_m39LKTYpZa_2_;!W;Wc&H/hg37;::O3c(SGf0_=*t,nE-SMP<[qW47Vja-'f"P8%DsRsIXf:PLN."U:^a%F!.s5Wja@F%2o.fQV0qq#EYuYYG2JS[.e<&>7Ng<!kYVJTc\k#jgn=I#,9asp9j,-/C>nX"sO+L4XaB!k\p0,DD$ZDs5%'@U/pi@%JBF-._@-T(#'VW?^DLrD(d/7o`X8RI5."i2\lfd?ogJ#<):'>U7:CfpGnb<(>/C(m^)0;^?J"*JSAW^SWT`nA1(Us?'pApd@cS52%MV3)iKIouZhs<D&"YD;<:,,E76f[u`-(//eN\;_]Vns/N?.r#A\trjZP0ggp7DTcrU/YMbSlj5-H&jf$]I!98fLjRO=>#-c6#`f1%]hS4&iSGOG*Y^47Q+"RlROhDVA&W@`."ElU"lt7HMHSsRKOCp+c)2\+A%>-X0gV`dg9M)G"Y+&/MF"']:<P'jh+1^*+(A'g5.\3?%FCT_jqDBu55%:mlR2?XR(5!+<`1Xu@;@YGF7YXQo-3iE7W;;rY3=,>>=$,LdI[]mOQ\,Y>q,7bi';\&-HL%mKKO?IDdSg],&Vf!C%Tc:PojE(Yo)qfhiM4#K>P#adNTi)WcB+%&)6IA;l,_UfP1[HN?XNtlX#kort4XD9FY[euBKM&L_LSlD>@sRma7o9O_.]4\:+ta4>%bXEZtP\i`$_P*Mhs4a7Z\hGX&Y_b]Cph2N&V`9+6"ecm8(0C%I,Y?3KTspWj$].20ouRQOkb?F\\L;Q0UM>QA=U8Y+ooOh<*9uhR%+UR+L8Ge&H67l[8\KD#Jd@mf3/d\rX.2ge"+@l-/Lm$3]*niBrgZKS4&-I5m_jL0nbi=BcMI^Dh;%,9+5NjVAQ7()f,>:5(Hd4*#%=@`UO=b?B^)/cn?J$BJp$=cUB+NBUb\%O=^>.u8$&Gb<?#i52=E\24_4rLK*I7eOZ2P>SRY\M(jKi3pjgZo%-[ZR2D_X'.<=(^5p%ZBs+bKDfC,Jm^R---\/F$]q`k>VVfhO9f@P)=<"J:/g4DWKsLl?_.Un!jA*8*b3t+<HDoC:@RHX,dns&"?h8rWdgO+7V=U`Qke5s%HLUT:0(+RboN3m-%HEKY="Rkg[j:_e@`Q$P:;f2@FH'Md.MaIl,uJ:4l/iO90RA[2("KW7n[0[3AgnFeJ8A)_mBOGr;Og&%dh!T*%!sg2+[<?:'Q1p?9\3rQ]`i]tQjMk$`V4d9_jD.+*R]=Z'(0L%N/.0eA3keA#fXihf026K,0Di^h^4sq&elAh*lp/QW)4g#\@^nI0%&^4?L(GAgQp!kW3=Y6eQO04Ed6pe*IZ$XS0&WRpMmmc`Mei.'q]IY[]jLRS4.ITs4$)c6Rf%]cfM4^VW>?eH(,VH(Q#BC1h.@OAk%XZe?&#RfsH\'_kTFcm85#k=i-Q:W#\_k*@#HoLq-#$KUf*ZAE,*$8?4C[Bo)ZPK*%T:n33:\;TUmcWuip6N<bUpN\SkS.*-pd$:S%L0EiW/1;YKWkRq,c">YAr8apGjcRpsWRs)/WItK^(`]$tW7TaZ[?B5hEcEA6Z_ZSQnaSdIKPG/%9'Dn"dI.Q1Xh0-nMc8<6NjY[%%C8iM#>J>UrEH66*JJ$OWc8M`sJl&S+W&(KoC#m\`JjY0,:%IMXQ]j,C+4?"0lO(.@YV*n6VQPHZlcVMFb/-WV[]hJf(Ds>]LD$I:%^osG)8ZjZgE`1<;2K]%?Ea7KV<M5>tWIaF4!cM<8H=lGdR0jICqEjM;TQY_aiIrhLlO/O9A(6hq$ldk<_hjf(!'?8hK%X*-Pg/fu%:`0fkW4I(=PlZ=_Y>\rh[uDbVMAC/Z5e3a6".@0ueoQ2gSPF'?N<'M:NJVe;!>eI(4Elcn,?nY;1"-t9;B-?K@q`\mLW7-^;3CoR%@t7M%3K?I@I.g2.5cdacpOc/cV=<iS1GnUO3_"4^!Bn39==^Om\+>bZ)%OG>L4EN;!77XP*\%TmbCUsXK`N3]]<!0S0H`uLO&sd7%fVd?;VHT`W:UA`t,%42WGjDrUONK8_71DDj_Z;gfZL,lG6eJW&#Br.bb@d;+jAcd4I>L%=*OFLJ(j@t!XNA#j;2r:M\\f#k]Q8k'%1#2#j%M-@C_ZM[RE0.0tfMpS'q`*&]6^l^lLr2M.mNY7gR-0GVEJTN.j31Dkm;q-'?nT.^L:D*L*kWZbh`Q-N+P.!>#cg9r4?%7N%lp2Tm=XS3FNjJf\RlDD,[hC,!d?R.#2bK1hqa)9sQ`^R538@IVLr7X<P;dJ@6BHENOLKe(IBjH?-fW)'M&C<SOrhObhO!Ag3J<f2%IkZZAo@7Zq)07cVpg.e+3cd87Y$RL5;(PuAAe&7\3?QHg>-GUnL[=jBF3%,,b$iL;bsJ&HiU@T^?k,uV<TB4N%=g6i2l?0I0o%!c%m?f\bDc?UB%WU<6S];;V:+Y.=^oLm-fmY$4=C?XJfeUGl^hdN#gq2B(#0O%q@W&1A4'9/iGkN.>Rca:tIe\AK?Y7R[9tsH)1+]YX%i:)J/[\)G>qVs#2c%@`inS1C#..\"R@-1uuaMk3>D"27M/m\SK!GnLWKU"fL86<%o17KJSY&5N\l*:UjYfRjI3AmDGT<"Nn/jJ-1%n`iT$[QTt[k2f4B9323Ma&>0tX,Ur[lGQB-RYlF*V5kKSn1J!@`:gmiKBX<]WPYM@5*"UK&+L!$i51[u_*i2%&?jr:0#T9oa_>_)%GQi.L43)O7MKekc4iFC\D"6f/9Y:FIaT0K%X0A-&kmB:e509TN(hg)<4IV"%ASMHZ?(/gaT"/`%Wuob)mP4RpjO+d%\Ga4cUaliW%>A%3R3Y@^^2Wb&VOJ1]L'<k=,cm%]U(A]_C>VuOtVEJHaFQ/BF75"I$4+N;afaVFr^j>=Z^Q<uRTSStI;SfO9,31XBUdXT>DdM-N%0_S7p6-6n:f^,GNm"]"mLie,Q+''.eVj[Vt_u\ZS/$^p5WN`(79[hp;T8on]&:=>N[;isbjeij/\cpc9jYPMAEu$;(<k&QPi'mEd%X6;:;\Of1(D?c+P)reTs'<0['SeGVtEu(Q+F0CDAhDV1!E?*_CAW#BfH.qRpM1Hn+CnE6C:5Cb7j#oVI)?!/Q$)rJ\rg^o`!rJ[/%pV,H;bZ%(T3B:QWHm_D7j+h&P?>hFB\tPHQKigop'EN9$8]0m-Jb?1Xkf]*#a=TRJNEAgW@B3Y^-KCtKd@.H`-D'q$qRF\Z%R"<T%BiQSW'2eDg#<(qJ?F1q0XGe,p>t0Cs0YINF\>j(T1=#5^5MG:HL9FhS=Q.cDIRG!_F?U##`N709AHXb7Z3%YH&NZhSIgD$a3QJK^%kAFH+-?[q.+gE+bXC'ViDkr]`g_*d%fDC?Q@r@d)l)sm:k[qfiSr.^*pgCMFO>/HDWV83toW\JNfd;g%?lV7+=Bu9JCTYOH43gu0%LTl(KXX?7I:`dk:A^YnH9o!`IGA6F#UXD5&$9JYnHdU%RcV-4tUVu>(^MG:7@s0h754u5B'BS(&]=m((%cB<Cj)fif'fDLIXQ.=*%2Pth@C(Hu6hY!+#B!%#1D)0["4cEI1M]mJ#YB#fB;F@L[6e[0k6EbB0*V(!BG$LrXL&N/LY+e8[\qt7F*F:eFIYXR&miT!9]:_`F%+P4`q*CpI)#:;a#-)HgG_u$5qLSP5MjtMrTkrZhk%t50tK?OR]#O'<Co>&mHGCrEnRQsJjnp%r\2X-CeJdcq[5M<i<1Co:N-Ai,!%GD_g\1r?RG(GgVAab#a4!A%/0,sU+=4\7b`IONmlQ.:L$1>dH'KhVE=`@cg;@!/%\*hB\I=$L#Q&2G=EKhN]Bal2c<j2']ZoBL>Z%O&(_p81p]'mXH;m*dt_\;4b>*]h$44o?H,6#*<p-,<L"iQlH;*@.6oV''=oo?kO=JY^U,no?#pqqas)S+'EA$W>''J6_=c.YW;;;%F5b@.@.<#7mRaq;-dgGbM2Bs\`@t$9mY<JN;$/g*C1&bnmj5m&rg9Y?YPoLT[JO8O'=Bjr(3B!5]pTp7'`Am%MB'1p3HIdQek?6C%diLOnQ4M(WR]/PiEUU,25*2/4%nr0EN`oqu(>YnAP8+dlp-d0V\of1@_rc:B0jED`plqi>(oQ`bqV$.?]#&qgHHt+0\'\ZnG$j3<%[K^crecXB;m;@UiZaDkJ\n>f"JNp#Io*^@/&Xsjm*n.M`K^NKU3"h27>5&2jR'+tWCE2rR\gS+'p-<*,"r:,QLP>,cYuOjWc5Bhl%rf%e"pQ3p1CsH*'1Y1g81Y9hhfUB*!SbJIJ#oigpkQ78r6=AEdIOX]NQ<RN*M-VQX+ArR:>ViN.PX8hX]*3:C!'2d!:'bD*8VV=R%@)8C2-bP_.HU?g]q$,:4Bd/8om^:H=,NT9-:FUu__T(Aq69s)@T9R3Y&*AO;i<,3?pqWO:Z62BDTi/t@R@4sb+gA1RVGbK]a/pG^%HU)=mk_+UoQ1R2E+-B/dU]b`6A(_;GW"K_W_\"FT5Z2g%Faq[kWJ&3E-pd-OHt/JjM_Ru"bCieTU"*D&$IfCLo:"iWL59mXSIh/k%o:3@##GUk5`g#g<Q14!GWJ'W)Pb\mW-%$h5#p7g(Vb39#`6llXUdKKCKM<-tPsO`VGqNY&XN,0\[4H/0G-9$W2G4qKXI.[Xj`8tS%#RYBM*o1Xr2JBEIS$XbaOOLc+=@_*'"/@a[,_c(&D%K7.1eAYIFABD`6>_fApUd+uo_?CN51DlAP*eOHb!&Ek)[)g$En:KrM,9?n%f\iVQM2e>ipcqLlHpH0c;:)>S9Ls"3aG=>Jdfrs-\@kHgK%#)"BW!n),K-I4Zp?n,ZPB='bpEXLg)sb;2#=$XU6:Aa19M'!nV^@G%#9Sco_$<G`OIt8[D+[V1q/K-[cr(-d@FA.1.YR/OVMfRD7qGun4JaWODf:\AQ`k\3&AE'+LIR)(/ES0"mPm.3.FEt1O9;65:j8EO%M!d5)b>ik`mPkll>[cOlHj`&2Q[($C!Kk'B>]GKgL/isIhf(($"#I!Pfg[@m2sF&iL[gqkD24CW3]!`cc9U_!1;su@@+B-G<?!0m%#47R2XuI*bKj.WKq39Wjd<(R`=5A\k@`S5p.L!eo32;c`=f[SqfYXiPMDN#mCSWK+^h/elOE1#B!lQV75]f@<XuNaTI8f&=B->C$%Vt,l>J]&kt#KBun/87^ok:L<V+B&p5Q8:UnVGBdmS6>GeNa'doMDu2RF%0)^9pmbFfo1NO+Z>qOQ8@ZiY'0#p1Cu@U9"O,3+E>U#%JW]qB8Ud,R>L#K7Pnf-n3O9(\)M5GgJIFKdk65JkShI[dk0,PcB0LBZS[BbLF+0aATf[4Za<XR5SCu25R8D+Cc7IAW5hDMJLi*8Y%0OAh/*n(DR2.qq#UP7]r1V]T@3Mu/f=m7+90/0_>Ri"1lF69R:H9H>c=B_j-5bE&Upd!CfBD2<N.>Wimk$+",':@iCJG?VVUFd(?%AY]%+hWfQj7+[rGQBpR"1[!uo_[H@C):nc_.&ic"A,4qbhK")6Z54f/GE#k@F<r#QP2%n<P^H`[g/l1bjDSQZq&=B$+3<Q@#$A1q%%(n]_I=\p>(K9kqg87<m:*p\!QVD+-QT[*0Q].5(_p@A7>p:b(_hY;"bE&g)iT$6!R9dCY^QGYWT9s?ffaj`\_+2n%>]'m4@RO9h%HD]WL`VO]iD>^i+HGagijWKqMjPC022<;+$p*<r@7^d+-\0NJ'_\@K'+1!!B(&X&-"olM7_$>!P82:>jQd1=)a#(!5Zo;(UiAH&l%C"XQ>;L)M<7SEA;f9pF>:5/$.H+HnZom??.Osju>4V/:p>e`K8fC(Z\qE9qMAk*"h:VZk9'mt+3G1DZ]IQhT,Uemdae)MV^5$:t2%,M+]5D(GC"SbIILId$NU,;3HolLg8lqKVkG]l:f#epRAjiDRi-qB%r2r:nqcN9Sr508:Pt&g&dPq>AX?nQiR%a*>7Ko1i3p4$8ng%bqL\`*2!N7GXD0(?\oe!')VK2g:!_)0IuGdC"i:PMjRKBE=[kPPloHn2]9.$3DQB>T:N1C*a"#P':._R=fDMnI=@Z_9g*WqTjs>a%klT266UKW]j5X^[I,ii2Lu>Q8cQt_M\VdR^:mg\I"*+>A="EuHfnR6I2%MtHVi@R"!.@bc33[s\KpB3K*V#,9rkk3=C_LY,:0`?g%H>_H%KaBQsc;0RnmZOV!IU#)K4P/B%:ulB^_uj):&BisX/f\Yd[Tu<u!r589Uj;fj@Yn\dG^oK-1:k"hgDHG]9WO!U/03dRYoB+[%NpH$dRJXd?Tj$FGNs&[=Wa7RE;2Fm[k?69%X-eu09fuhtg*uDW7.RA@Y0j>'mQK15;>,g`\=j#hVT2dD"dZ%Y``9WDUj%Y\;AH7e%dc`mir2cD<(m#TAZZ2f<@Cmc8/6On5Q)V<*1E&W?q<Ybllr+*NQ0@tlBgZ"BFHKMSNt]u"NZ[Gj_L?r4hRPW$97>BakqK"1AXMB:%?lK*.\H*TN*q!EP2C89"$\2Th9.)a2m0>mXbooEV7&9\0=<dIkN9;`.4Aec3>IWfc6s:8l9O@-N:YpSiBei*3&KM.O#I%+jrg7,Y%lR-aFIYE51%7t/IMfI79Wi<8Y9cbqZbfP%AF[8h=r&g/JL"LHiXFKAqlaguf)-aFM6+<Y-is<A-X(<3Nk#bCKi"168+u0MGV$V2m%#hT"'1:=2HA@\h\r>Rfp#?sKP`HTtq_J,("J9E-Ja#-%(,8`hl:!Q*c%cq1I=5iQJQeWE2_k^1i(UNlWVCVe2=Z9knqEG)dhq(?!%#HsB4REPP4%(eAbLPY("@@5>PO3-sdRqPo;gt&Q"3C=k/Fh*jPj@<S(,?^&q0>+3#NZ9pTMlg"sAUaBQ_9EL+m:M4L[UNUEgS$s8%9s1RkDn4Nf,)'c#-./?6E7CAcf]D2>>mG>4=<3\HG*6tmP)cO@p!*./nSb&Tr&Y0LV%6fl`gmWBB4#cRaj;-B'I`=g'>&.YN7dYO%Z(Kp<G:men)bG3-PEt8VAbE<_DNo0\AiULBc-QM^MAo.<S6s#o0G4F<M:N"#1:&\X[!9D%mjh*qB!ud2*&g/_1NNBtGWQR0il+#M%nCT&%FupLVG<l8[AJ[PW6?Y-j%8Io^:g^eicH?V]bUs5sL8jf1FLh=b@,?`[LQ^jIZ13(;&K,bM)oUC1Woca&IU!KgBa'1H@sHh4%2gsN7^_`it&_@IDPM<Y+hHlV)4M,J=5Hl:Zp>#mio;ts9Ni66,;@UPSZ1"kiD[6gIX`oH7I&#DB0-4!NY51#XHal,sZ`AbA]*.D&%W#Tsa+H6WK\=V>+HVBbeKiiDa+3^;!9u:&]ZM(?1/=?]\/-F(#@8Wqg'6Di`2XB2QM'T\JWokA>m2?&U;]A((>!]UXU>[_]G*f^\%%'3be=,bg43RX*,Db$m/mME'>/ou"?^Bd2dq<YaqiMXb[&Y9Zo9)Y*u@_BS;fT-,e5Aj_jqf+aaf["KY4')XmXAeO&AsEpE5&hO4%2,t<<Q\LWF:oD&\q!_TM8\^Z3=8.k[-&:0"gi+lNn_s6!`7$Sgp221+Qs=gf85%cBE9M$t]!YH$*4fmC[0[bs"4:93J`/kjgZr\S%^tn4J[oH_,VUGcs/GkC',Z,C38AjuS5u#2%9,ioD#Ff=Kk"=,-:f<GhEUPs^*.<7(E,6T"=AASN"_,aji/I`k/!-itW0Q>a;Pj[B%a*nk+03bf_^T]du4[6Ip'8APZo7DqX9WA-lk-='.2$\QTKbe#Xejca;9"EB<CUbUBC:>aE`#"JC,@fG0.Ia+D\-84n\_Tn>!3j^L%dk_J2bX<?2\09Ud3514#]s3[<!73#nbW+/!80%Dj:Dsk1Z`tA*qlD%0.Mt(!QFOs>2pa2K'[#jX[*d+AU$JR9h"d[YN<.(9b#=jH%X!CKo$lM0n`Hnbkl/-ii^9JabG0Y!?&9uK<**af5`uEAF(-DuBI%R0`]Zp#NL\>4J&bq;i]!S+)HsYg0"NIEgRF+4;>:Q_QEKSFX%rQ1N#@G6duJn3]+Bg3;1*O*TN4RpX+S2+Bld(_J>Sub`Qh0jfDUXe%o`@U,&n\tZ5CUrX[%$hE+9qYYBoM/<)+fLPVpZ5(0)Vm\h%3CA]*Z'.L*B:SJd3a:9k8As]aLbmZ%1U/8]R]T0D"ius6q_8I.N,[@3]$@UMhnj^p0j"Ue4l,H3'L]d<=(s$oWWu\eU1"Q9p?"]a%)cfXQEm:KB=,cj^,Ta:m6qaQocY*%.d]->K5=Z,/p$_uLVfGngi2;U(,&^]fWDsi<r;el%4Z'9`k"<@FB*S,gYOO_5`fa1m%cu4^%?Sb0JY!^Hp%<tb;4V3L.EZ:W.@saKIGrqYXE4kO[AfY"<3j8<LX1fCfL;YQj8a[%1O667u=O3IFC#hVP?CKnX=-a=Hk^P%l-=`D0%:^7j#?ng5i0NS<8E<hXaP<%I6^0(O:!ZDX(MlRU[cJdd*0C'[LK)nVhX.,\P8otQQFdjbQHP=hB*FiTJ)@q[BRcLc>@0EQ^M6\c;%i!H9`OgBBW=ou6'>+=O,F</`@,af74ckj%n5X@j(ks[[OKU#3JfD''jRb9b)0s;(2]b<8R!sn-RYi4%+'J2([!J&AjPUfjhlars"%/BPR=.W<`Rc7=SB0=WKK*sZ8k&PXhi,s,26RtGdMK:_h?gT_6O1!o^6MFh3HC3%L^,q04tnKpHs%9^7<>SRHt,MRQddfB\d+*RnB%*9"O$fGrGKb/&gpgIkO6N&%=)TQD;O3q0SMk@-YW6b'Y3!BJ1<'s[O=XlQnY9!+hY&`T5/>KiB6Y_f@):cVLD\08Jh59W<D/&ibP%T\\NMboZ3C7?(_UZT(JpZ#H$uqW<scRj7WHSPGX!>[.SRi1?CknK)!1Qa'mDIuqq?k3CF;M-8%Zm/C2K->;d6j!iFo"3Iu5Ql7I`%Hpor2Jh3a$<A*;Y3ZL>NeQ[6<U.j7`@A$NM/M`9ratSO/-I771Jgd[]a9?F`%N4-nFY^n3iL_G6_RE]$E!"LuLg*t9_`Jce*D!VK%!IHFQhYJV*VV.fub0ZLNBV=aM%o?+M1ijd<#^*ba<cTk>mt8#K+K!5_SCa/ZgBe8t07#A6d<V4Q\9H0VeqG>14i*tVes#b^14j]L%r9tLjb_Q&81!4GdWQK=Ca&AcfE/0Jr5-"2fCWcQEj@:tp".JGtVN,N\5jUMaS49[)m."0j\)YX70s_.sS=a1c"BN[2Mp&O4>508t%k^d8KJa>C*M*:uC&FQ-Z3FB7I)@ki]Ed9]1+cF@`r/1W5@=->+WF9!@`4h8'UE6sXe)2:6>4^Eon,.k*,I!%Nk9hbG&H_k"`5nYM%GWndek;VKcq$F@5AokT&:\=&Za3BiTM?4bf0]T%=#)>Q&P"`b2MD[n$it&%9ZBYTiHC9@eH^6h\Qpr"$dEHddbg!,$$DESA!4pJ8%$AFs:%tmuZp/k^-d]FWN/R.ocaU_,q;!msY/Nu^(1PULA&;dK#gk-$*L$52@^?20U*=h.6\i>U^;b=u(4K:$>PO#!5b0"cIILH>g%,#e3IWFoilb%0=^RDMR^UbNkLYg/t\\NdXX4ZuiGA_3^ACnAXKQd10(F`BDsTr6Yr(PnMp\lkrm)P>UFeS\ac`%\0e6l8;?[a?:7%:*A(.e'NIblj\:oYY1l%V<QD0SY?1r<g<]t"d:-OOgPI>*@[N,3k]95jKWMh05]]ZfPDbY+fNd&4^5(9VmSFV1d^g33fTsaHE'q%%0)Ah=r\Pq0hTWD2LpV!,5B9V?'*_^>/o+r]Sle\VB#ZZg.1U^Z[^>C#,:Rm3JaYF9s(/2p8IA[rn.jD4$NG9Q?^\Pbh!uNP4_2,b%lkR2Ck:"E[ZQ^ohb/pkT<jg-#!#iWX,40m01D?="Wc7NYU_10],aNQWB'f[)5+)K$C,^h//18ecFcIY"g)@5h\A>D8=GsUh1E?h2%,U8p^9mr_8^t"AW*oCRF]+Fitl2crNlo?7k[6mL<g`k`YO7QN3XBA-7F-_*#WL"22Ou9O"GWM`Ylb4<j80^TTo8d5+NJaC(]&1CR%3rP/C4PD;Db-I@/*pBl/<EDNR31Z5=ehg@m(bL[il0$XndY\5qP&*OP`A"J1;7<X6DF>L"C-H\b?c*7f]<1to(uMFn9b\o$0T/ti%C]m0Fh7AiZp'2dU;<P9Gje5&sX(k/DF[WsH09,jP\_^R;_31?IUOt&<[goYrE1mi!<2F`^,8^5_ZWer;!hiGhmbJW@1l>_S'Pi@j%ZI3Ycg?=AN[(17TJ%\YW^Ap>MF;Wlm*t]*+c!IJm_S^S+(B_lX4[?=;N.DBn'!p\#=?"Bk-,Bj#853%+2R]pBc!,j%BcPMYGVi0k%$_#<C+SSoM>:1`O5g3nsd121AeTMZM[fDKVXk8I_OBJolm_uPZe03FP[RIV5_Y`CTdpidK#:AD7cKih*VRJq*j%+qEaHG=hb_35*%,.j=9&u.#YR:aRjZr9'GB,>BLaJB7h5e:g(YFTm+N,]4o1LgnsY?j2XC(/-DFc:r!&'0,aL;fodpD=+P<66AOI3_V7\:r?>\&jq1%e`X['j=%o(4Z,Xlg5IHb"_+%F]?a!MC6#`RE+(U;Z>MOgA%KJnO6KfJk&t(`$E`0j"VWYm#OFHZpQusqk%Gb4*VQj@OI:csiNDSQ%@l/&^\E^tP`L&OJPeDA`Lc#R"hB'4$;25tUWTJU#h7LK?P[!4HO%6Mmj)qoJIQT>?-pJc6')ME1g='6,:CW\[H/[>QqI1;TZJ!fb%c%I[BSV%,ir1_Ve-+,6/phl9=TLB@fmVWa&AN$B9LuTD]T=L,%V(B<k4jY,DL;)GJN5?Cr8KZ@"jUFT@_>JimSc!>@J0eD4>%BCY%LKfit/o'=XRQm^D/B:+IJBP5X-_6sd>/Nhro4f-r\O]2qT]lYk)4(5\LV-BOF76n$AM):;9b[8-BQYfP\2FbRBdBPi"<fH?.-WjH%<pa"%TQg=<h:\*OmkLu65BI;<&aR5/'<"u;-UH!MFJ26\WCR5McK_X?!a.8oe>Sf)2s@!7Yr10W;Q:@3P>2!\<>+aV4.slLWRd1\%R3tTBIVCe"'Ha`QAd8@a_M0/f:gG-/F]]u:@6P6?'_YKK$HAS0-H$R,4,g^,pgm(8YeJS,Ab#K,UPR/G2]9NLr\tJ2oLjhoEj=Z:%+nrXRU!V_jL"iT]C<5\42/(J&<15ABQEuum_b3$Fh7p[,!e*ohi=u@frQb/]_B0ZH#8`BX3rclCV3AMU/d`mBp([;$J,J+EcDq$h%J"Jpq#=F>4%/Uo:(lU:]FB?DjSfZj>>"EH`q3JJ!&(BRl1SB#!$=-HjEQS2(SfDAlbJVe)$du^N3'F<>QUdnX6,0GuAJqPkR9#=o%QMorCkND\Xnl1D*\sO=,I*-r--dCrr'?P]%N-Wtl(+T+6S1U]Ket,W^4?Y6thhubu;<!dWL\S?hB/.&&+[q5r*_5QUqOk(-50Y1'%9")7p=7a;@(#iS<T1SbsQ6&``a2,&Nr+:50s#dEbl+^$kh$3rT_971T;8p,@7JKAGC6<7*KCnXiP0&2K9^&t(hfAX,7:lMP)ES]6%4b$X55Mp=KWrH*NY72*i=d156]jZ#_,Z=9PHLWXAUKP>!0<cet>;Og`(26Pg2>K19@8,XtZ;!!l>!";hAhp'p5OBh02;LduQ7:tJ%V^Lk2!f;7RS+d+[HlCbu.6Gpb,*[Fc:$6X>gm9h1d1S"-k\hK+kW*G8>Wt;2r-3a+;J#Qg'Q?3JUH>M\P-o83rZ&tgZJ'.d:Y61>%3@o#=CZ4']R.9uCng_3KAJmWclmAtE<VmhO>r60GZcdDo13mJY8$7o+s4A#%nX4^9f)Boi8(<Y;de)/OS+:g25b?g6SfDBiOa,Ga%T4`f>p#qHWH%0@#2t+kONXd]+oB?1:Sti&kN=I7p&Q[%/qMIa><am&d[\sX`:_t'A^5VjWKDhp/TnI$ErMDTdPW1%"Yt:tdLJMO^%nN#8g0Z6R[Cmo[:JXT3f1M(9C;.:Ng:qcA-rM?nppiE:42S*?DXBGpYT`bUbP5Y&fX/g2DW."WCf"f"#,HZ[TP'&GSGN.BkOOX8<%anF@nOCjZ*S&6I6a#:YZTN#bq*"(6MpkmD'D+Hf"):CIh4/%X6M.$nco\;KOB,[tpRjaF/S,BM*/>)Z8dh_E$U8:eOTWntQ%[D[+%^=ZdFRcq:ujf%1C-sg5"QnrS^W7%>Kfj?'Pq1*8R]LL"Y>LUVoUBEHfZ0>e$Ip!rOg<G;LWGr&FXQbA9;1P*<Ikr1e9JZ]aqSpsb%H&&7*N2q]ZOiFgM;h$Tq&!:bS4#BA%`N3B[\t[e`r5%^SP80iRGAH!meaAj9=`)r/)86/o[d;@;mj>,ZDs2)`gO5$&b,el9"BJ=S%#=pe![1=QcNdl^>E0%2qbh@K`^c&6/\9&BdHW>[:p_!jbQl_kV=bqLSh7?koa!t<<>J#<?)YHjdHPe^A3drsHdo[7VBAQ).5jD?B%e""cLG?CLNrQ*Q,4as`M5""Q(s+<&K4?Y648XOni0:#NW[qsp?_cjSG<#Qb&bo::LcB8(u.;N_t@-./OZ_<,ABSe(Z8LA#@BRec4%qKqG_M#CqFgb`n.b-a#&KK!fpln@I!@`Si#Z<8,J9p*O0?+i=3IO(.X$'sV""ntMWimW@_PRZOqW@(^4H6gc`V8sXuo9HQ53>.r]%\!?TF9R*]4L6XuamtJI%rql;'RACM4Ai!.n\*g8g8(4Z^hk"n6H:/S'K!".fdVX4%)TO7.5!hBtn.B3QH&Sn;UP&_FdB<,gH4F$*%@BaqTKKIIBYhO;7fFLV%bm,\C5#L%!I,68]hNQ1U4sW:&e!16a^Yr>=@kP6kmYO]bLJ3#O=Vh`dhPK+uQ4K8/pGueG4Hf]5/ORX0%egd$apL.j*s(q"kroR!FIqq3ST@R=!O_D"YhQdO?=8U1m?;K:tb_3C-Q>%Um"fHo\+2Vk3pSl*84i"'-4'ped9_=50UG:P\2i272%F^4I3m9&3laYtWs+`1(F$5$['rFI8hs1o'#k;+THO!(GP=t_HfN_NL4WJ*!&g9tB9eqYi7r&aUdWK4<>97t_\BPC-)B+'fo^HZ!t%i'CbW=9_H&dn]@W9(X9DcirG\rgO3[<IYMm=mRMm6(U's*+"_tri'&%P.%C*r=)gh0:ZA.kcZ+n-&q;rqHg\S%RYFO>e$=phbZUc%rS8RZ)rg>d>agQc#b!8WYFrG3Vq]=>J`jU.2U<-9Q\<>=KB.%_bW)cd7Egr+RkAgZO&f!e@M48]'T)'0Wp&1/R'U%h3!J65\UlXn%#rjmhoCK*!/aN0;RVPi7AW,HcEn(o[Oh#_gDq=_.d],t5p7%!;c?'5f-Di:Q2)/D$j.Ns4TObUG3Q6#aK0%3;XID&*no6?ghRI?<%*QAu"qQ]:ebBYC4R%9KU]B,h.fr`G3-E>9*mRPLP'hjg)6j]PVCgE9$_.n[%-<BGQ`_#Hc96qejS@90<jkAR6:jC9&>tYL'NV8h[%3*7S-S%6G#fEt)?3jUV?;ON1&S$&TFedBiDIFno+1K^d(!D6i[]';>@@&(,m;cPJ#Z^@joPScKE&'cjhBBZ=7;M_'Tc8:"eQ$)SS%`bVCe?7S0aXWqO/Q.hcM&<EZ@=u/]%%c<hIS$G`50gr;f$j=)=,Orii>h"lSk<$UNS`sFpXSV/LEIO)G-i[TE:Q\mP;],[[-?g,]%Iu<qQ&!d>,<-4oj:hOhC\G2s=)b*,iK7Z]K'N@+BW#1HPT[K^5RZHZQ%Wi:ZC%G2j#C=G6HnlV_B,asO+DA\[?(7RoRAhVD''bqZ%fB50c_*Gsh+U6*?%l$nsj'9X1;gl%lSfHqY,o5e:`4>B*Is(YSZc.2Y0MpUZc9MQ><I>D0mr^;9:-k`OmBQ-c#Nb>Vm@5WHY's8:%?+Z3uAp]N@N)faoOC,F.#Pg7O3K^\Obp#.e(!RM,:>++OM=i[hW+pgQ4*Ii*7PQ4Hm@084naB-`_$YB9.d/5H`51Q"PC.C'9#'W=%M>_;.bZ#c3U7\0SN'K02-ht%I+Jg@)`K)Y7l1Z>-d#"^ZW%=Qhp2m"6.EUK6]@Vi1m[qclc1l)gEJ)-n+lWu-*tkbs;*Ga`8'Ug'%,.7G%5&)Ln%Yb@5<4BUf[L8GOc@hDeB8J$9%O6g(,uD><.RNk$BI=<;'uFU@0i>jO$CIbdNK&_1ibVS5AV^A4fjE0R$stAj-5A,$%Bt<qJ^OqTA?6q@!.MoXo*qW@/BuAD0X)4Z,]#TD=#L+S:W]SO;C2ipc0RZfDlfR,aL,'*2,ZI!!Vn?#+EDZVpT_cJjobS*19!)#g%rLfsTF*XFOqW=P:gSX\_6Fe$%/C^)*cMW6GErFa,W339:&J`FK^Lg8+P%\2IYbVPO!egcH#Su\rI(!DiS:s"eHI?+BD;n52\]#sc%14/0Bksr%(rCgdY^W6.A;Ao=p;X+L`e=Vt'J"`,'8L[*fljF@s4ier<-Vp`]<T`qf?fH1@N4"G"kbK%mU6A!(>^I$>:>3g30IH)L%qQ]:\*]-jQr/%[M4X_bO8KXEsEr+MS,\L5p-M=%1XC;"Hk)u6O&Y%jf>',q40BA:JY3K1.L*pgEq)F2+@'=Aj3CuL\ageBmN=$jY%\>uI&mN\)E/TYHc2J8d*+ZLF184.3Jpa!+([Ndc<On)h5SP^$%@uVG7:>+sD#UM^s0L@3j*pj9*(jkj.1+E!iVYru<oFJ&o#H'CB%%S"S)T+U/13-VhSP_'",^/8K<Ntu@mUm1$7&VQ>=6DB]4$sD'UhCLj)3^]:`aV#Jb,_F5h,rVV68nq&i8`G^&)-;nk?G,J@+4EM(%q="!@=e&F=hj,!/BRE^5T+YJ25jV!cQ7A8,N.M%^GN4n(HKl8QEFEaS;#Ph<."A\u<;SY7V`t)b9$)R(<lohI_9\+!2R>5&h&^C\%P=gu\l9@lRp"q(CerPGcZKdWWdU+X#HBMk3O+UMSm`;2,;+Fj9hP?<@m(?5X8*)"WMSsrA<_ke.0d##f@6u7ADJc\XI@a]+=HB,5%\uR=6e)O81N*?X@BH12O:eO7iM-0<aS$"`MQuuSLX]#<0G0*9!ED'%6RBdUJ8Eo2hdcX108Q@Q>,Z.4N$(8@?4AZ=s-u9(ZK,#"E%OEBI>IS:W&l6d9U2jt)V8'8'b4^o86'(*(#)I#dWC8iU9:1^'9P/KCY947t3S4dg1.4i?Q'Z4sS>LHlN&#)M:P*7C?QGT(]9S;"0%jhhKpglhNW\Kt%/B^l"BC5H[0W?q",;+p1JB9ldcEGF`/2n(gmZ/cprgt3p9UMZd5'Llf.CklR1\Ybq%X;iP34F*YAL2:#Zc&j&a%S)WN*9KocUce%fFfAs4:H;r?rW(>7T7l^t=a`TFq=K&467jOUV$>/B\H\3#3n17$p%K/H8mWAk/]jH/#kfMfdaSDa<*\*5e=+\-/%Sj(263CpU,T&\X0W8Q+R`(m2_n1_RmS7J$W7PJ@fA7N^C6&1<HjkoC"_q&n.E!e(NRd2e%\fU1"F&6c.,78080ofh*'\'A%5#7&/%'NFQX>1eG!.?=Yc.&\h,W`n$Q2p3.^<qAJkP>)h+Ad.:n9ZHQ*ERfJ);CU>#UHr_"jq+`f0Pm2=m4k!+TW-MQbrYC5ECJG-W#9I&%S!('tN1ENN@3DKrc^Qj(jV!;sYX5eWPKpp$m::ItB5%>6[*sp:e-klD^TEIiRNS2dG<EsDp,%UED+gcm5PZ\O/`doL'XX;X)F:Ih%KU"^_gf"bV`]XKtP_)S$'(1HX)9+$qb6U2)/7h.ZPb=+3bAc2b&Pnq9:-8\gAB[s`7Y`l9jAQUZ,+jf>P-4.&OXYGHXlHXbEeR8F%d5EFAo-aEKe)pS'QP2VZ2`ZR=*SDB^Cf<#OVC%(@;*%i$l,h6A85hEY-QbI2WQ@Hd850Tf7[gX32c>mbU8T-7_KbP\c8i/ch!->I%[bU/b;Z/H115hHp^JTaP35Xf,GW.F*1?NGFG$S_*E[6F:/Ld0T@-5]$M1%^c-_G*jpN33$$hG'FSAIV:(oNq#@>k)\kEmZQ&XaK5%8ChWS7VAsqpEQ/+9h.7%?g7+T3,@TVducgXL[IY1;ba#HP9\f&9pn+`[cKR(faX@^)r-N(d^!GQ8t90[9.%.%MJaN-*\g&r`Y=rt%4GOX\R=\>cUq2epZ"_N%o-A`j`)@NOUsn<NSPp]AV_A+nU;3:E$<&'A.;)DGHn$3Co+Y/*h/h5JVttC0:I0,[HO>5F\0q0c+'b*N%C(=#L>Ba&*(+X%)N-mAbCRts#/Q]brM1%,`.i@jN&`f-q<]"7m:?D'>F*K_]f-$ZT=Kt#?]F&q^i2a40GdBL)'I6[=8Lj*7+&4pY%602_k*s_8qG#u]gj1J<X+n_%_'(<2!.;`>hqZp)7B]g%Hq2CW.^.GboPBQd6l*LbqF/'3$aiCVa:Hi`MHIC.(_*`VlH[Tj/@B^I<%;tdREolE,%R+bu`jRgpAK7!/7KpIdLRs/?2T)*d<8\3rej6P(l5]Y1a+9*$pDA!?p)'Sb>(=;U'$eB(h+@?*O(F./J(W:p%4YaI4%Gp)a`QfsqZ$]ZJ*g]cT:B-oZH+9FLQ$!r:s$=XDK4I5(ioIAuJk3%`_c7\g,@/8Y^dOijQ%F-jL?2cJ95a&Ye]ZY=(oEfI9".>+-%E$Gd\Rc%WnpNhD;M_jX;(K',9";D=5"/?(1qgYO.p`!plB)ut>;]e7,Z9B/!]]M^`)[IJB4:jOM4>:#gT2t_XE2ipADJb6GD,_YO%*95^9E\W%(UElo&0Ge5FCuNMdY`b&c)[I'm8VG"_E2tuf%:[^K]TIZKIhUfsZ74a..CCYWr7FD,IN[<l"$SDF=U1,<Zn@uGEEk2:%[h"%nDasBFhu8`Sn_&HqTlAR<B:Qa3O`YV/$u8\6=gI_kaL?QT!9uTsC;>QZ0%F0Yp7[B6FuF)Id8dDfR2=BI$D;.TM7@Vhd:QdS%fe<UH"L8g8!,RL2`IB"4KpmM'Ye+]/D2M6u_-6>#3j**+dJ9P=ip48b5OI$@lA03^O$8XdmO(l@';JX<]8,ilGf#0`G8U0bEaOYn%^P.Dr4gcXfg^&@a7885[;`e%7(:o1$'^c[fO,F`;OD@ZB9D&!D1c2K2]O8CRD\tii#6s6])CPKT>QLMb;k`B;"4P\Q>#03_BPV>,%Y?7r<,Zrk*-_HD".G&-h@-Uj!2?Ie)FH(QR`I`/8q=gmI24e\_"A!%P+jM&Y\fG*D%ff$A^.q74VIiSP1$DZP*_<RLnQ]Jk&V,]G%TkUsCgE*Pf#jrPN(TVgS?1Z8t'pXWn2m8:oIf4TYl'Un!UTP$MoBX=I$\8-GM:#bM'>_TeP%q8I^!(g5l8Ilb*Ff-o"+XKQ(nY"0%b#'7%XXb[X,828'Z^cAjAnqi0C4+c)+2,JR[YQeZQf[6'`dJ7*llO5"m:Cdm0fh*8dYM;^k@X2Kc2.79X6@+%P-&D/@c9Qt(C%GC%<J!SMV?=)(.I`19jLX*&cHpR\0igMCo7#T&WH.^`4fe1p".=5C+ErmLfB:f05JnX:Jq$O?38q?aa42hPk0=aM.<d!a`0Mp^LN%Z;%N*;Rs7PL%,4<*`o(&mYO?X+/-q`sebYA^H1;]^E0^G(<P.bDmMC1'8_Fgu&lN(E?n"7]]Qm,ncU0lZ&k0n3W5)c'Zq.I$4Nn.)@1%Ni)PmnjmbO=BI;BcrS>Y]@GW#nQZ1$C*gHtfX\Yh$H.&g$l!r8%(pXUb6&9>!'379&4hWUkD2:?0VE&*Mi3.,E,"QMDbR1-Nb1O;%#m?[P9)io:;WP=@&Nn+,YPlZKYJ7M.0PYMEMA1Ci,'t$>ko[sr0eNe7i4Y29YAZnVc\KuC7)tE_6>fRWoS;n9_@@i\5H4r4EV4u5%NtGeo-d5qB$;>OO.VYe_eEAaM&-j%SIfQP!F=[m5Q?rY+qtRGA>_0[\EdpC?V%,JhPk_t(m[n`mfgdEaKa7V=HI?l$%AmY:&lC/K%*^&0@[5G_5C#M4]LFEQMH+*0(+F_--gtf]#'RsmJF/TBMS;1&:KPHCRhD;>R!`qIba64I=;_ZciA:bmA`bia!mLK<r9^b+TN*bZ\%4V9U<_DJ;:(6[a93&QPt&sgI+\=!I$\r)ClQluHO[MXf`efbJeEp7X@KOGt*ikaB4qdm(b21&Vu>/D_C57i-nZKD:aj$.m_p,rU!%9T5dPejf-K6Gq&gk"5o8Ce/"+*e<$d5-TS?8/B.rL0.uag.;?H%5!Wi[b,hr$bZO!=[WTuoVGs]Gi'ts`po:tL@Z1>%*"5]nVo&\%grTb0@uR!fO'Drg41l08-3o.uVWS"R(01LX1ke&[=(mWbUq)bgWQ]=A41`\+"K.tZ`k6,t;L*[5A^7C?!k[C[JL0Dg)[sCq-5,2K%1MbQ6WHnWh3,MI`2%7N5:tjl>l%,)!*C$c:;[*[7%FN\hDGtK>g>.+l4=N`HHEM(]=uSEg4qKd:>s?=LUKb;tIq7!V(pk5Qkue)N%1hi+-:aAb1ZkV+O"u"]O<00I;D"V6Gf-An\er47Qqu.=+%J+X4RKQOM@i[?kiN`.m4nVnf6UF<?_-\l6"a\P(N?lc!Cf#t2(^Q.F%+Of<V=D%fWJA3uVL/gHN.*VHO[0q\7?c/_%'Dole[5bdYECR)d^.!2[2E!*;#5b8;?h3cq?geH^H8c\[6L@Gbn1Tf`><[@J`>]2=%H6Q<gq?As&F+<WP0\<PB*oCBr4oXu\s5UTgks,3g5Q'i>rjRCVqU7\/nR):S?iTSUs5etBRJ^9uq2^$s?iK$Ia'\f(5HU"Ho]s9k%nR)=gn^i9gn,Ms.rjRs'q<*8(^]*jI55s_,F2h?>c7+3$o8iqBO3.jbQb!*t]`7jNs/T`0.loJus8*<Ks7(%-oWS;m0E:\7=+C2#%J,&m:n%\kaO+7!2<7`lT@dh'/ft[OHTDnK'?^CS=^&S+LKn%^'6.i:]XY'u,pBqN6,W(73]Q^b>h=&WQe#%(+81XE?6D92?70'Xq%!'TltaJA(tD-@(UL)=KmJm_C:6N)RT=nKdfUJCDJb$YGLKBFZPpBPGr*YLQ1?@&7XF;Ij5i=rh?Bjd'\VUIml%t6c$e!ZgN!*B.8%5\rD@Y3VFbq88!D>u7XCo=8/c^!uC3i@>MSK538dpAmMh4FqkS6Voif7\869DnnQRJM2H:f[*E0&@gu*R.EGSnlC)[%DjA?br)t?%o"fnM%GWc;*X2&A%I5eTfS/JAc_7!"_s*i&&=.kg=$]^@CYV)&(uYKYj3Spb>J:,GaDiq&o*NrrG;TF\0N?!lE9%4B2p@@^CPV>h%,,.1_3XY-]+bm(p(e/QKO>Rm7BL<&+G]1nfFouT>(8jMpO:hh5&V.P7@?#H%A`O%f=jUM70R\PC&;B'P/;oAe3W]p\1tL9*)uH5G%>%qB[_tYl-FBIf6cO[WK\?@,?DRkHeG#"u0bj/lTYYiGF!+,Hq$q:F$eUt'cc-Rj,L&mFdf25$X3C5nm^8"K77u]VD0*!7cT\R>i%_!QLtTStH']Gr2`ke@UoT@6:&]LoWH)4>d.om!`"WTLSBje_(QhV(l>+2]V6mDVQnH9cUl+6%PeCdu0j?p/%Y83HZ1ZnbDta"j@I%43/rBo=\JNS@gdLMp6frDN$Xi&-EmB&0?9h(S,7rd!BtgGVF;.\!GcQgCVXLTa1a.(u50/]oDIX2hY9oef4_H?e'(c&Huh@L]dWs%#JPXKTq6PpMrW,iX;i]r&1A[n&3s=ST1Y))J1l@7(ZZgeZ53"/WaZV:S*l%AM"US#E]TcU7\/4phk]r$I'k,$=]e41)OhU>fC'M]%$sUW'jBhChp%;4u>th.<p*1+G$!SS5\s9HiA,3")&]eDj@!W#1ZnVVo<Nm)@prNpS^%3oXMrhM;(Am#LdZ!;7qKa6#^,d:,ILAZj%7\Luaig$W#8A#&aR2K4W=r$UsClGulAHVZG&L"7s&As-7c"&qj%EN$4>>Pm$n(n]kLYO#^IDWo$DO"^#5ZJ@80/=4T&1@WGcUI0,%@R-u9Y'bUQ_[)cH\5@]lPHVGr3Z)A6+ZaOU'nlk`CI:(JbB3KoQtjgqRX77>%k,@K(bK'a\Ujf8Skp*>EWWe6dLM)=#Ii@-@-b!%%j*(O@Z@)g[Ft!d7U%DT5cA0`IKh&]f;<"I$q5p4KO*0,998rCpTF;CVp,lIQhVV3qnppArF\dZ"`(\gF9a+WueSu#h"]@eKV5D,@%/D0]g$Ho0Fm<.m*CVJYP/#L2^6e1)sU\!e:QL,>M+&GB;L'Q'[c4QI@)ecGI3K?R5/kR9<_[S;9&7]>0NOLNuN"Wr)9QIo,SjssH%q/)dAQ3*PJ01,T$D!OYrD'I:heI!7aAf)nW/3qC5YT[6"o.6=##:KehWCukuK:=f76[usT+@-C.^'q<bM-)bjGgSlm[K>8t4#0*"%>uj?CpE[coUeB1\Vs;YW@sjfgH0$EXC^GAQ1f[s-7jm.qisT>+SHpM_>gu?iQ><')hZ0G#"E8iX[:n_b:\>aV90%N39m%S;m__A+%fopKl8ANhq].uHD<;/^)[F[).HM^1[bJqG7;M/WY7BD1'7:Q?PNX,_"Y6,F/>'3H_pH<O#_R'+A621sH-e[.Fa8DPW1bG"l\k[)K%].f>/f*5("L.:.p$pZ+3'#)D8[Z</^i0IrJ54X?XWZ+6$0G(8WbiPPX2Ni<D'X,Da)j79&kUuc:6Sp[fp%fR0cGQHU`3)QGJhpcR%'7+&#>YAo[$kXIueoiLROu5>BX378!3eFYZN"suC'GH[Fmb2LXMupu/J6Fi_T#Ft,D-rt/<5+;hIN[43(//E)6EiG3$;enGoHG`X%=Wfe8gn*83_*FRt,-5`3?>XN>*)^FPNHe$G1`[KQ%.f(;-luLTD1"GW1Eo()(o#1c.r2$PP%tI`9H\bPl;0#Q4D/2![XkpRC)S`!%mOCd.M^4C3Q$sJPp:I]<$9/\f!0_rad*-*$m<d%[?p2_h!kO(]oIs'A2>Q]bgLs1t?3G*">GSa!.4ZGU<We$9HX1F"Oe1m"lThi#%.lKb&NVSK//!;Ds&9A@-4(Y;gK1u[Y"4%1'G>&<k3u<o87's%Q,Dm.KR`[9@LuZ#:LKf87]&<W8O,a)``dm?*&Xdsg46#]<BNb6N%+DFjQJBh(nHtGra,?E^QgH'E7<'-MLd;\)m+SYllRZ7-Y\f!W'UiDCf&[Vi#G:Q1!,?E.'b*a\.%e<ll/7_kiO2pDmMf;>Mau86s%Beg:b7L'4(k?=X<Fl[;6W2,+<\(qDthI:XUBKScWE(UZ$_1Jt`aAr(&qr'QR=*48iEoA68hEhYiC0jIuJd&597`Va[O:Pks[`dtB%qYFf'8MoDB7d@/,B/:UBLKkb%X>%qbYt]b517+:5(f@++_rc(q\+be=()/9j*/FhfCuAf#f%$%d@l3.m\^ZUdZ!L>g,$2fJFY09\%TYN.rH'S=d4;CsH2L*M6'=.%["Z<:mZmCB&l\XEOD,CH<j.Qk]hEaP&iTLf&;q'u?FOGj>M-2)R_^;,[g$BSZ\m6H^<X&[/Y/PTh%5EX`-&ITQP_"`I0.5(#jaeR?uf*$8=%?-R"kHlRr3&Q7p3A9^O29@)^6nY!)1E_qV%5p`6]"N"`48L:lWUWj]A:)2r@>&ot!*End%Hk+g_'*rG*]:8dd96-dm7hKIA+'ZdFKYZmmb`.n@`\WquTk4ZS&RVC&mEGmWF67EZB6<0Gh8(o"?c8a<$3NW$Pja`h)!YJC4YRdM%Z_UXR'8cGq6-Tt<B9eJT,\E`'j%3K?-<^$o6A%'E.kn"Q8ojJFOE_k0YA`.R[!9hT\EkOoh#C,-;IF05qCTG%,,C.n4'8h^G;#=$%NLgD(<r`i0BTRTDP\0?E4K51M!/u#-82\E_9^jK5os%Al_"9e*"sg8,K6!CA!Po*]Dqo%rjo^^"\66f>9:<fiF(7G,(h6KKiMA0o%jY1HT12S'+SK-MqS%WmXcVPYI1R%'6]-%TA]O1F+gB3@Kajf@%7Gl$R*f)[@!,AO;h]>n,kj(Kk"8b1pl)oK<>>F>eF6M"kZY1-_%m,^f'kq:'Z[6!o.QWPk/^#*Z(!u$`V7r)DjHYf;]lt:eQ':0e@q$,P1q;%f`\-cm\;uW;^DB,BPKR`m*Nk5,fJ>;Q+s8Am#lcm+k%.loR'XT91A==[9X)D%53U`orm`^$?M#l3J$MSXJs9)7buP--9oM=8'K_dmT3=r7eLVd\2n<BU@bd63UaUU^UfYT4;>D*/D.=b372%L`0EW>X+),\bbi,6%IGX4lA1W+]e1;@&?Q3lc@ENqPG3Z[cW0DN0ioe(!@FTW/033P/P^T;mC`]m-WIR8Y.HD[@8MC6YKkOF,c18%R[lmcr!(j;cju'YWDV*G1<_,oF5Hs]>VT1[6a_[UIeuG+XB>E\N'<>3V[Y%)0HD&4=l/r'QVdC-*UKJ!YmrD_=KZs!=KNZ:+%Vnn%5;4-N*s`?UDM8Hh1"1\5c@'X)h:Y.B&TKK6Lu72'^PSYFFYnLHEAmd2GW:\'/5j-Q:'8$qB0Vtoef@TgSPNmCpDEK]TE_]@S+liV%JhsLZc<RTIe+"4"W"3F-KqLRF=LKZT)dC^p5Y;^?4YM6@oT$mBRX5/=3N2<Dn^a"5n'.otOA2.$?%[4b`3eK6hRZnXHYdV.qq9lC%ZjgTYGaQ7d]IlF`WS\jRAmDPZaj1Q?A*"`ca4?Y(@.JC)2IA0Z>Qa"I'c<%_XuO!VJ:2Nf?u^@<?omI^iKPfe`2^&&Y90.WYCT\)%Q>uPUO1\"X!T=l/i18?PaHnbQC?*Og+?.lXUujL(S74]:*FkkG8NgqB^>946[D#)0a/M5+36`f$RhNQiC-`fZ]aT0;icD@k&D>e/%R;78kGmmI=2@q6])mY[?9`)!Y34Zr=bcY`Rje5/?8jl[^]*6c^'/,jW^CS)_Dh_dRE7PX[QZ]fd?u`i=2s]NjkM+Q0_qrTVENCmS%YT1KKE<]CbR;7VP_ifri\Hfu=m]';&L/[Ni=Lp6B^7I$%HJZ]r)C,2cRk_:cnC^Z_[39602%S&3gVZ<iYC1g]!LQBl\'rqfD>1?*%_i$mNEJhn=/?jQdSJek`)G-'p1nGPoKpIFp'Kd-h1E]?E3Y/qHLebZCG0!R#4u(oUH0I!jBAYsHfBNc+8H?Hea5Jt]>;<Mf5fU"R%n5j&RVGE#.$b^7<VG/^e@IM9;ND/'tAg;Z^CeQViG?A'6k6)c3Ushd=O5V"7A09ob)/)Tg&UiuJYA_!+-4X='n/u^q^KOO\-6<Fg%_4M!n_-)Q@r>`HqYNb/S*-^<Nl_/aN?20,118,q;/t3&mjMF'SEL_aca_S!@qsH%U??%$(ch3Oi'TNFX%j^[3p]9nQHn\K'Qc'pb%M=YjW4fU;X<m"K6o#Igk"Lp%FA%^<6+P&(P7t'GbW9E>Uj!1ljH-,THgUkjQ3ds6'5mQJ3^AN;#X\0qL\2eo+)fqQ40h/DQEc5J$%;c+2NopTA8?[Rn.1QPd8-Q0Ol"6'.Hgk#!Wge'&oG.$5:FfAZI,?NBbc5PQSn*?H]7Ut5cn\&KLWs'$<IM$@lC(\6i3KRh#J\Mlm%-!)^[RR(A*/'l;Em63Of2hL^oG0L9SLZJatbn^H'XdJq;pq;sp=_2Kd8oeSZdZ8qN0fglK`tU`g?O$.<Y)Rh6%FU?gLiO6KR=@>c%'qa>iLZ]/+[6bVhNo5KEjj/C)9tcn(BeSOUq16Imq#fXt\">%F_fAeP\E;YLVY&ecS<`8WY<tlom$=\*e,FGkhG,=kb;[H$EpP>*%kurO@cB$)E=U+H9<Zm$=jJ&&u+.&<`,g<Ap1+?U1>H@.U]3<*gUgtF'8OcNg(pXCnO_4bsb^nu0fR_"Mq#_knnNb/(Z3K?X)mQ\$%mVP$eKo:HtA4jJEf7Kmg/a[j(Q34b%F<$UA2/CA!/1TD]IT1m$QH,*qB$-tu,s+oT#l@`Y6!u`-7nJ!'33*ni^:'*HL\`u1c$/9L%k,K\eb\b=u>&\:K]e)QK^p77,4\s9&%C_M\M0\4mZQe6.dV6]Y^QQW,mW[UK-=t6="]OVkNt_*i@OKcG2=M:N`t(3ccb(crO0e>J%`2L3L7`::!h@[GF6T?g8f/+Uo]aqiIT1Pns1[&YH;:_-C4/E@'EF?K]SsS39G=]d9-t]<)1-<!$2dVjlg_P%#h/_mtlP/nTik52?%)83hDI$YBaN<#AY(b<Or)a3@sY!Ii_<OXBY%kaF!_f:c$=,K\*Gj^Qp.I@;[<P,8kb;lfXQtNS6a*Ke,bCNp_MW=9t*&GL8)*SU8%e%H9aYA]0FEEo*uF=mS!#,Q:OJ^r-s'p$OhnA*V9S25POcZNn=BTBmf8/;`=Q?84GdrH3m)NBNSK0V&,8C[I30^$.I*Y\.\\i]fc%M=-/KT`YRk`u`maL>[fE`[Y$Z`hLK&Gq9KL+%Su#Oe*D*8&Q@#_U,YONQ5IQL)9_278ep&3R"@G=AIc3_!"J.em_0,%g4BS'</l]%mt$mE#Ig\^/l1P7DV)4-!]t]4=.E>Tg).O``X0E]74F:X_2\,qN]_9-On-mS3/'<s!M0YbkSRDJcZW?ZIPCU3iUu0iTH$[r8p?D[%HkkH+V]paCR!B8-1?5hAi^Q8ooj*7unLZtHM07f<Gr<O,-_6I9:Dld;X52$%*p;V"mTo7rJFp/<miXY=IpbC\AkBA74HXl\cH.lT%q2RHop6-=62]PV"18"@Xi>IfD'c?BfYbWb<R6]b[7)$BLLP,7NnFa%3-Kput^uEEjj&UH;f'd!d:B&&mXQtFFHiVOGpN(@?`=*c1%*o="[JU;u2cH.jE$I&(B;daTMMe=>8I?3JF?SIu^@g>./Sg.n'ELnrXe6tAAKT"$o$1n>K@6(RS-e06?&m0VMa#Q+D4C=/eEjjnK%A3pNh:?D_bbD'+2*L8oD<=>2=_m?Aj61L'B&e-!Pc1Uba"&lP?&#UOVpo/8s>n^j\@-g.]K(,sFY8?Qu=m_OZk/4No.'+*R!e1SN%k,^TPG[NR'..j/&4>GaG5+(!KrXPfXKO'r5YWq<p]\IQE*\.0%1\68U])Q-0RD[MCU7:cADY&_4#nrCTgdPJ>08R0nHt#(-HQ[Dh%#@q:<4PXf%gMspt1Y4%ASnlN$"nnpYjDP^aea)11d2XbT*8ZCa:&#^i[>"+ZGp(5s3o":,B)X^Il5LpMQD6bbI\H+2jBq:h_k)L?%/mVV9nGknB0B$o7:7t[[VoqeB]J13T2l#MU\_3Ur27X#7(qc.cAtns#psLEC>Q$NDDR'U\V.VEDJnIBLjY/.<*p]ekm;_am3]L>7%p2rJ/18gUQZ=bf])B(2=5-<oYA!nn]HrJq^LO%.mW!Xf?DE]a8h1YOg=l^'IA)],Pe2$b`q"eT1q^T[)KG+IZG?:J310P:R'm#ZE%V_r\mf=m!Oh)l8Eh6[@n9TD'b5t`h_k]i</oI>XrW3:.)JD)aId7b(sS+p)HH48,h$tGC!r$d6_3frjDH!p9W\SP/<\Wet,53Sje%Il4=Hf/Ij!3Y-/\4jV%=`ig`oRSOF#@pD0jm/eOSr"]Vu*fXLAd"^FcLC94<\fKcFr*n,(+F=`Jl`VZ_f:2D\I;?L`H?6f0EkMeZ%g%&H"N#oC_G>2`B+T^_OPFT^FL$MH4j4=7Ma5M@9J][R3X'83R(eVEgZ8SQFbl\:(Rg0_32]5t(rj$3*8N5Wdb=+/`IPe4=o0C%R%UR]=?7kWH+*hG;L&<8\.,eog"k,O3_;`ZoliMV_`(p">Y-]VHL<uLhiI.,XiDn=XMIJe-\hE3J`Bg84,]e)AZ384ISb>m[Kmi#_L%k^:'W`M;nH7VdL%.45qHFNIgOVAh5[ZU_01LI1RGR>Gmd0^kL;W&nn993qp=QN3h81VLMoLqIXi0RDV%JjgfpDt8=_RKG0fhdik;%AW%D=DmJNiFHoAro[id*0[*PtgNDSoL*uG$oY,UXB6`<]oTpRlSHuoI^@pf;II>)O-N)<H7M=!*!RYF.S8Z7lrRHcf3aW:6V5n6a%pJ!]H#Le+^.d$:P]Pei^Gend.Jhrq[&+[C?htGYOLS%<4G>IQ$^khWKIg:i)#$*:&d\(qLo;u_6a<en*DmEe@?:Q(''iXNs@G,TB%iIga;/fBD]Xrl9*_SIS:U"tXll%TjORU_kUU;E6,6;POeT*Jm@&:t!X:!HH54[?<#>]t/j!/t[;,?IM*ob-53Nn1th.*?;HCD,T(%P7\5G.Slk,lcA\:3!\'"i2Bnb9^G3^3#UL8fklC`;2ISY8_#gj$!f@$%@aQqOnA:`M$O=;Pa=L;iW$mT#K[3#DtS$6?8s$_8[&_]%?9!cuq;\:f:*@NHeB/.HYkpkTb@5D_m>B;WLgA'7OPn\eGq:3[OVc:J+toGsb^>!Baj$,:HJug>ZiGdr:.BOHb%4&OL]i;+9=pTu%Re#dXFnbfOVE;j,SLm#Qf"8mh$\U\Wco@B,1mO?>"W9MGST$K%Q^@U)A10a38-WNtOfmKb>gm5(pVM1UiJ$lSd8C1iX[AI,5VJWm%GQ[g3_T@$>;uRm'KbKS%dccH*:*=cDUlBaV5"8[qdi,dh_'_"8*-7Pf:-Jp;b&G6ijN<X.YUhpK\`%pDFMhh].om9'C]`k8fuX[N%j*6qus!&<r>^+*]!9An+JITR!KIs-ghl2?nYSD%8fm(3-1Y6`>=Dg)9Oeer83b>^M4QKt85.PVi0B^7;V@D:8(JYIQdJfd3cD=%6%gPE`D!;[54dF->%Rp8"*!uN_R/@%4!ej).?P(JhU,l^(&S15;4h(?YQZLi1O@Is&Q]R1^)WhN9g`2T,LiH3#NE&sk&3#RLJWXifi%iKS445b2iqd1FZpE,,.`n\?$tTB^lH!W(Y`#$Kb&=5#kD>Y38lqqe^.M=8\V-5o?%&DrsklpPat3S*giJXKtiDDbRt4a6@BP:Zq5%_PP,d1rn^*dh-Z8\M7E6?jBB:G!&i%dVB>8>ck_!)&;^Uc9ipK[N9;lY@osMRWt7,mXn;8Tp;DmJhunchpHG!HJ]/.!%*VWgMu]Q%?nAZb3pL\F1>P_ASXjHJDG3)jcg$(f-Vr[qY0S/#XN0,'6e&\0E6:^4U3FF6^BNeOP;C4[=4mYj?;BLMg_3`l@lQu^'$4)pBJ4H(%b*N@`0_aK[i8>.gQau'C\0(tcn9a68CjV/_6#i\jaDKJj&&3YWIX@C@&c9f^k6%84+VGIV:-+qgB@'dIkRYdWet%WB\hd%N)kj\?%P.NW]lE"Bm+(J*Ce$&&<,d@_SSM_S5e59i-%8l@EMp:`Ee6*HrFq?Za1@#"=Z;+pSCZ;-J`Y)Df\m&8!p+!A"l1^hp.nO.#<KS#L%;kF_+_#i,6'3VHi-F.MW797Gs)b!5<DIrAfZ]86h,GI*Vd*+oJ#]\$X$Y^M0)=Hs]`p-l*2-,kQWn1?O<);RM@qD\ONSHgZ2+;?=%2"HLs-mPUoDX?/6Tk>X[^hP8aO8qI>A%h?\F!+!3\3G-T.r)Kdg6Tb$edi[SM&NE,Vm/:[)Cq:%l,o1'@o0b*o3>77a)GAiP`G2E%KA0VOLY/I*`_._)I60okT+jdh@s(I&<]3501H\@q/8Ia<$7G]*QXQJ^+Z(rZ`]9$$@ko=-P[(uWd2Lm/LC]N,d:WoZCCP01m[5$O%n&sjSYYu>c<)-rZQti]O+7MSR]uIW<eQ>aJQc-m/i3-rhXRgA.YV'GfCJ"lte+8b:=?!)YCSGBBNf117<=boSYW?4pX()]C8(,%p%`,>u5T*XI`dnW3-a#\o3-#E6*Fr4/oPF#u9a$ra4F\G6TP_tuZ=O#lOTbSBbkT][rC\4V&*+i/\]l2NGK=84lIf;jU2dRYLbXC$A%M+d`*:`)KV*1IoLU][]5XEXp:)XQKn`QAIu5.?4/7DgLQY\6R#@Kd&NRD:(Ke080!RD]H\`XKa^`s,LNon`GoZO'J5%XGDWFjO`$%Fd3+[HH8HrQ"?P,-9+EOc-B,(&S])tg6V$*UY99mTt7fb1<G6(bMGtr(P"D1EV61\[AVihn'[L7!h%(W4VM>RHU1p`)iC]ZDFu`7%P>)]#lJXkHM5r)s3dCCu9\/5e=:aJ,QhphXl"0_s!slR&,P3ZZfp-Bpab[6ebLmcUp]?l025Dj.OAQKtBrCNb4[1NH'nn]l?X+Mn%'-fZ.^?UO=X,a0nMMt"RF-OXQ0_:<m$Y^kdat)=$PndL,er>L$\fhE^X<a4F<&t3I&pD7t<`X.>Gu)D#EYDP\':?QB`bWjHPi?7P%)e18#"d]G.MfN1?V2DdP0p]T^6L,LRU9(Mk$L?8G.'_WQT?Dj>[>V,CL-<44/Whp<*):i3O96%sgCA<+lV[&N8)!SuRDbP-eZFaN%Q!!SO,KhI,fk]?oEB&O"Q#DX.YdA()D.tIE.^3gOS/?0nVZJB*76/4G0@(diaNZ"+<=Y1Hl7.>,>I/crlL8h$Xm6Y(Z>":ClHZ'*%DM7:)8=^8kFd83sH-Oi=OHT64J\!9<P"K%KhPfNMIB"HknYrZP@-[$s)@S8b9JiZY$?Bt:.Xr0bj:M/J_o&MN8W>RCF=h1A4OmKS%m+f`]am1us#CEJQ,53g)UJ^)l@nNQ)@C5R#ke-$qV,_f2;cXQ+oe^Ga<YMT)>23'H*.BB<)c1*g@oQJpZ<RH.c'6P@7@#C'XL_,U%AJ<-;=HumnDJu#K.U?/CE7Au;;,o3$-14d;_kt#$Iab!4T;k-rS5kY0@`#-T.]asdB.-'4+-6lX_cr8L8sRpp$T+E[W2tU7ac21Y%)c;$+A!C*k]WTF)9!%r>JtCf!`+nBjM)E[gTsc8PDF>dOa-qH/oHLfP;cG^eDOeS$QAT03eWjtmF'f9T,Gq\_N!_'s@agSe'isDO%VGsQ..i=8(9a9_;(3P8-":OPV`)@ORaqhVq,fDliE`R;:ItpY[94?W\0j,jYNd[6!j.S'P;292H_A$%=6@r^qZc3V[(GKjX,Kd(8%)-U;9WXP`Al)&M1:G/*`<Mkj\WH!r_1e`-^>S2po^<2R9SnP<Jqne[)Pq_si\EQ0O9q/kc&0k><L=cEL1##m\!+LmWaDKDh&&3YW%?@/!u&c5:0IAF'</LfiT9met6-_cN/Z,+t1KBias\1^apk:Tq0Ah4%gA#L(/+@l52TkECQ!rIGLK07S?Ncj&k@o&I[3aj:&,P!h6%.c4.GGq!ckXf>R(7N!Hf^)e$G/JSFIQP42$p8@TFaP#"gKutWLB#>S:.d.N7e#JF(lT+Bufk%l4k;G?aR%g9-,W+?Z&AdJY-K3C9%D^M;]]5nOi=!(H'85:i'S2O%41+pp">fY-q)C72&!!onG__Mt/NKc6HRK(9?=MSW/W&Jb:Q4YFIVFBu9/-r.<oU1Rp-BH77:`F.:%G=oM1]p#<JD+LIi.Fmg0n6T+-pZWTjI=qdnZR?HR99^uik*&gYHWlkUU0O]VUM/EqfZ\F'hO)8gjs:9D8uQkE.4+`5/sRY97U8U3%X@o6<6g^7rjoq&`Zr8-KC)N]@S0K8Yc6a8gM,\GbL;]C8nhY?Mlg7!hU*)%E%Wsj&fq^_I%:.3*`O_<t/#qDAf65S\95h_2?139B%'3Pg#qOE,!=CSWD0OF]6#"!\:a/%,nF@3_8b)GTtG@HUX5qS@CIA.c>]=;Xu]R:V;_ZF$^6U)h),_s#PUR,o],W5"G4ce[pTGi("%)NL^W]e72G$Jj'[EO00aV*->qJ`CdFJ-_fsFQ-QW[i(K)#msl_(94Vi=idlE?Xb!dk1KFYi(9)a+N[8Z'7Knl1VFUi#[RJO,,?iA%XI@`=ACmAp0uLq*7k`k]Y%N1u7@fHjM#%6=2k_fIm@DGiM=U9HY*kIfFg"L`9l%t1Q-]<P@:r$G\@Zr9Pl"Sm^%;c(qsU85&p./g%)g,a\KQ6%6qpLpSS>qT4?cc>DA_3L76n_$r8G&pqZb=8])i!qV%'herNNj8Y)a*r2jdgCFTsUq-*L]]Y].gP7B]<G+,_]?*lgRB%%f(!Rn!+/g8n#7^/]:AHal*f<mZe8Y.Mii`E]-D,68#jKe^\H\tfOa5/0.8"]o]ZN_)Q6V_RXm(:g*4U19d![jfG/CLSrLM+q7+AN%Nal8>lcq7"GCU>)lc#>'.OEGT0s4t*ZNc>.F-8(c.@3f1eeCC[)n-%#8Dc&MiBB!<kn)/C>D"qJjZ;JTl@t:EClN\\*?+nAnkMR[%EsQE54CN:^_2i?h$Op7S7_$c:dYODq-B\9=F,E03r$[^r'jVqX^Kl'@(-adKR*Y<10I#e:\@HX1:/h8<G9-in,'S\Ccp#V<^DV59%X"Fjl#'Zk90GXM'10B@\W!>>B.[*nI=ENMI6UQ0u[koU7aYM.[TKjps@*m5T7hO%9#T+lhXp(L5K4q474LJZ_T?_I.'lHAK[:V&u%$S:'=%I3_=k48(\FOED^<o38]Xf8#N=6XnWOf_BC5u[/KQSE6F0^^Xi]V6@5UE;eVJ0AXkk7I&1<loCsf0&Bt-IHRj?kG"kdnsTD%b/;e+\CnIZ3puA3SCSuS2uUH14S@K4jASf/j$*%6Ka7:4G'9g<4\]cr5g2`'7",m#/&*C)HO^[Y,_2CZ3Q'$r8RO[DlY0BOZ!qd-%)3oM9CksU*H)XH,T(17H!_l"/+JXcCQ])fk.<O#F^IFVTicQ3a(fpE+T!=C&<SLp$n?:O@8^V_`5Sk5_=[%fQ$`JVAjj\+3(qfnZ%'K:%j?IPMaP8+bP(ug*&(O[:ZBGlriFdY*m.b[)^N3ng`So'RK+@BG.q3AWu@XLK@4k'K\4b6.hj;;,Z?!j_r7V0H??\[>+VNFTO%Xub"M$RbL#2RoXdd)@^tPrQO:0^)ZAIsKD%c!h;;fVcKM+M3Jte?L_F_YTt^Go`=1/ME&9d\]Mba1@9EBT"p(OO@;`@RV'/D\b@5%].\dFl"+bF1o5SHF<<gRh[t*[R9lTdo/tJ-_`Np^Q"H5a>]5ZQ'62o5?nd1%C>-;McgZ?#jsCMNhi#LuXn6u'd#]Xi+;uonOH@(`%K0CMT<#Juj+WG&3/bi([]/4=\7r?T>as8AS7SZ!'E2gA<iOlsY(Jel<n4[F2:Lk)!90b^SR&L]]e=rJu2Ef2`M/T.q$jJm!rEH<j%I\KJ#)91VA^J]57=/0$eiPkHTM'\CgHu#<s7&P'$9!A-\U:A0F2'hcZGP*p%IQ)&s;P?OZ\f-Yl(jM1=Ic!KBqQRJD\3>=3HYX-W%0>kg&[[UOiHd7,'H4N"%rj>YmJ0Dk7P'XB#34n)J<U+El=oS`+p\R1fHMu*4jbIb=]`%iS^RnlIqWcVsf7/);meO%>Dgo8]^V"me%l-7Q#:N&FE^_<@?IfANph95DfcQ?McT0E5KnXgre:M009hL>CWo+0_aYQ+Ciq;okhlA%1iVr)uQIX1tBLGOR\GL)nRT)\J2q44>Z%o])FMkDPn1qCeZ@j2^K+Qg`e'O#ds*?V#E-Oac9hfB8cuYORN^HN!]p5QBuuIfRpHg?8~>%AI9_PrivateDataEnd