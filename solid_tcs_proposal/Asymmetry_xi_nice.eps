%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Asymmetry_xi_nice.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 26/02/13
%%BoundingBox: 0 0 272 168
%%HiResBoundingBox: 0 0 271.7192 167.9390
%%CropBox: 0 0 271.7192 167.9390
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2013-02-26T11:57:26+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-26T11:57:26+01:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-26T11:57:26+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>160</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAoAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYqwfSPI2j3um6&#xA;bdvBbPPFeyXkrzWtvIZEb1Y2hJCoaUkqGapqBWuEEdVTBdB02GEG88rWEjrFLJKbOKCReSN+7jQS&#xA;pCxaRN+lAdq98nwxPI/NVeDSfI0srwfoqxjuIjGskMtrEjBpk5ovxLRiR/KT3HbAYEbqjP8ACflX&#xA;/qzWP/SND/zTkFUP8EeU/rv1v9E2fP0/S9P6vDwpy5Vpw+1iqv8A4T8q/wDVmsf+kaH/AJpxVa3k&#xA;/wApMyM2i2BMZ5Ifq0OxoVr9nwY4qu/wn5V/6s1j/wBI0P8AzTiq1fJ/lJWdl0WwBkPJz9Wh3NAt&#xA;fs+CjFVL/BHlP679b/RNnz9P0vT+rw8KcuVacPtYqq/4P8pep6n6FsOdOPL6tDWla0+zirl8n+Ul&#xA;Z2XRbAGQ8nP1aHc0C1+z4KMVWr5L8nqsSrodgFgp6Q+rQ/DRSu3w/wAppiqy38keU4JbmVdJs2N1&#xA;IJWVreEhSI0ionwbLSOvzJxVX/wn5V/6s1j/ANI0P/NOKu/wn5V/6s1j/wBI0P8AzTirv8J+Vf8A&#xA;qzWP/SND/wA04qoWPkjynZ2VvaJpNnIlvGkSySW8LOwRQoLEIKsab4qr/wCE/Kv/AFZrH/pGh/5p&#xA;xVavk/ykrOy6LYAyHk5+rQ7mgWv2fBRirpPJ/lKRCj6LYMp6g20Pz/lxVd/hPyr/ANWax/6Rof8A&#xA;mnFVCx8keU7Oyt7RNJs5Et40iWSS3hZ2CKFBYhBVjTfFV/8Agvyf9X+r/oOw9Dh6fp/VoacKUp9n&#xA;wxVc3k/ykzIzaLYExnkh+rQ7GhWv2fBjiqhdeRPJ9xbzQnR7OITkNI8dvCrVXjvUoeygYqif8J+V&#xA;f+rNY/8ASND/AM04q7/CflX/AKs1j/0jQ/8ANOKpP5x8o+W28p6x6Om2ltKtnOyzRW1vzUrGW25x&#xA;uN6U6fLffFWW4q7FXYqkXkoWg0FPq0Po1lmM37poucnqHk/xKvOv84qD44qnuKqc1tbzhBPEkojd&#xA;ZIw6huLoaqwr0ZT0OEEjkqBGhwQoBYTS2RVZxGsbFow855GRo35KzK2612HyyfiE891bDa5bsQyR&#xA;XsVYEQofRlAIpPI/IlDQ/EFWm1Rj6T5K2uuWQZEuBJaPJ6/EXCMg42/945fdFWhqCTuOnfB4Z6b/&#xA;ALVR0UsU0SSxOskUih45EIZWVhUEEbEEZEilXYFdirsVdirsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVSLz2LQ+TNbF3D68H1OblF6TTVPA8TwVXJ4tQ1pt17YqnuKsf81al5is59NGkW3r&#xA;wyzAXhEbSkKHT4TxI4K0ZkPM9CB1rQqpJpnmHzpc+Zxbi3kfRnuG9OWexntW+r8Pi5NJxCcHHwV3&#xA;YHx6Kp/5Oe9bRoxcRRxxKzi3aORpGZfUbd1KIEPsC3zxVPMVdirsVdirmUMCrCoOxB6EYql82g6V&#xA;I0jrCYJZREsk1s728hEBrGpeIoeK/wAvQjY7ZMZJK4Wurwyhob1biFpZpJYrqMc+Lr+6iiki9MIq&#xA;P3dHYr3rvjcT0/H49yrG1LUreEvd6c7mOFHkNm4nDSs3F441YRyMFHxcio2w8API/NURHq+mvK0I&#xA;nVJVmNtwkrGWmC8yicwvM8d/hrtgMCqLyCuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuJABJNA&#xA;OpxVBfpvSzP6EdwJpVn+qyLCGl4TcefCTgG9P4T+1TJ+HKrVXsryG8tluIRII3LACWOSFwVYqaxy&#xA;qjjcdxkZRo0VSnzu96vlPVjaRRzObO4EglkaIBPRerAqktW9qD54FTzFXYq7FUm8oRPHoMPOZ5eb&#xA;ysvMIOAMjUReCr8I96n3xVOcVdirsVdirsVdirsVdiq1o43KllDFDyQkA0PSoxtUtHlzToYBFYep&#xA;pqpAbaFbRzHHHGX51SHeDkG6MUqNx0OWeKSd9/f+LVVNtrEcxaK8jkieaMmKeLdIFWkioyFaux+I&#xA;M1QOlMFx7lW/X9ViVTc6aW+GZ5DayrMFEe8aj1BA7NKvQBaA7E98PDE8j81c+v6bCrG6Z7QIsLOb&#xA;iOSNQbg0jXmy8GauxCsaHrj4ZPLdUZDdW0xYQzJKUdo34MGo6bMpodivcZAghVXArsVdirsVdirs&#xA;VdiriabnpiqX3GvaZCHCSG6lWEXAgtVaeRoi/phlWMNUFtvv8Dlgxk+SrvX1aWfjHbJBBHPwkkmc&#xA;FpIeFecSx8qHntR6bYKjXNVEaBBPCE1aRtULQiC4jnA+ryBX9Tk1sP3PKtN+NaCmHxCPp2+/5qml&#xA;MrVKdWt47WVdVtwYroyW8N3JFD60k0AlKiIiooAZSeX7O5y2Bv0nluqzzpE8vlDWkSZ4GNlcH1Iw&#xA;hYUjYkfGrrvSh2+W+VKnOKuxV2KpF5KFoNBT6tD6NZZjN+6aLnJ6h5P8Srzr/OKg+OKp7irsVdir&#xA;sVdirsVdirsVdirsVdirsVdiqGl0vTZZY5ZbSF5YnaWKRo1LJI68GdWIqGZfhJHbJCZHVUN/h+xS&#xA;ERW8lxaqsH1aMQ3EyqicudVQsY+df2+PKm1abZLxT1o/BVRtPuxIXj1GdVaaOUxssLqEjAVolrHy&#xA;CyUqxrWvQjBxDuVpbXWFMf8Ap8bBfWMgeD7XP+5A4uvER9/5vEY3HuVox+YAhAuLRpPRjAcwSKDO&#xA;D+9bj6rURh9leVR3Y4bh3H8fBV5TW/U2ltvT+sAgGOTl9W4/EtfU/vOXRulP2cHp8/2qpra680SL&#xA;LqEAk9OVZXhtigLsT6Toryy8fTHUEnkfDphuPd9v7FbbTLyUMJtTuKMsI4xCKMK0Rq7KQhf970YF&#xA;iKfZpjxjuCrl0TThMJnV55UmkuY2nlkm4SSrwb0xIzBF47BFoo7DB4hVFwQQQQpDBGsUMY4pGgCq&#xA;o8ABsMiSTzVfgVD31/aWNubi6kEcQIUHclmPRVUVLMewG+RnMRFlIFpcia1qg5yO+lWR+xCgU3Tj&#xA;xdzyWKv8qgt/lDplVTn/AER9v7E7BL/MGm3WmaRcPY3VxJbOFims5JmLcZWEZaK4cmSJhy5VLFfb&#xA;CAcREgdrF3v1W7RHnOS0uPImrS3cAmglsJHMIT6yKmOqUWMPy4tQ8gKDrl5FFiyHArsVdiqTeUGu&#xA;DoMPrIiUeUR8HL1T1GozVVOLHw3+eKpzirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdiqXajrKW0ws7aM3mpOKpaIacV/nlbcRp7nr2ByqeWjQ3l3JAW2GjstwL/AFKQXeo0&#xA;PBqUihB6rAh+z7sfiP4YIYt+KW8vu9ySe5M8uYoLXLNrzR721X7c0Eix06hyp4kfJqZXljxQI8kg&#xA;7sZa/F1+Vd5Lpy28gj0+5gjij5wQIsSNGY1HFyvpotAKUJHWm+WmXFUv5wB+YtSGFxPqbzyTX/li&#xA;S7jfWodLXUhdXz6hGr3iWzzXDlYWh/dSC4R7cmICqfBscCHoXmDy1q16ukJZag4XTpFaZppGDycG&#xA;RhITGPjcCNl32Ic18CqhYfKmsyeY7TVbqZEjtru4ufSSd5lMdxAsfpenJEoqsiB1cMCtKUoxxVM/&#xA;J1vLFo0bvcyTrKzskcgjCxj1G+FOCI1P9Yk4qnmKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KrZJI442kkYJGgLO7EAADckk4CaVJzqF/qx4aT/AKPZH7eqOv2h4W8bD4v9dvh8&#xA;OWUccp/TsO/9X62VVzTDTtMtNPhMdupq55zSuS0kjnq8jndmy2GMRGyCbRWTQ7FXYqwOa3um8l+Z&#xA;bBbq6t/qH11EkpCVMSwsEij5pJ+740Y7Bgx2NMrxfQB3WPt/UylzWT3Xl7TfNDeXtJvNQ0fUgtu0&#xA;VrZwzXlky3LOFrb+nPDbxK0Z5svpU7sBljFnVqt0ttGt3IktyFAmliQxIzdyqM8pUexc/PFVXFUi&#xA;8lC0Ggp9Wh9Gssxm/dNFzk9Q8n+JV51/nFQfHFU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2Kpbea7bxTtZ2kbX2oCnK2hp8Fehlc/DGP9bfwByqWYA0N5fjn3MhFRTRbi9dZ9bk&#xA;W4oeUenx1+qoQagkHeVh4vt4KMiMRlvPfy6ftW+5OMvYuxV2KuxV2KsT82WUcHlzzY97AJ7C6t2n&#xA;jjEZn/efVxGf3aq52aNWrTbrlcIkSl3H9SSUXqEHliXzRAl5psdxqj/VfSupI0cKUF1PbsOR2aI2&#xA;8hVgKgtseuWIZDirsVSbyg1wdBh9ZESjyiPg5eqeo1GaqpxY+G/zxVOcVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdiqVz+YrIStb2SvqN2uzQ2oDhT4SSEiNP8AZNXKTnHIeo+X4plwqZ0/&#xA;WNQNdRuPqlsf+PKzZgxHhJcUV/oQL8zg4Jy+o0O4fr/Utgckys7K0soFt7SFYYV6IgoKnqfcnxy2&#xA;MBEUEEq2SQ7FXYq7FXYq7FUm86NcL5Q1o26JJL9SuKJI5jWnpty+IK52WpG2/t1xVLbnWvJsnm22&#xA;U6mG1QGBUjiBeANxu4YUkmVWjR5DPKFVnBYqKDxVZBf6vpmnvbx3tykD3cght1c0LuaAAfSQK9Kk&#xA;DuMVUF8y6E2oLpwvY/rryPCsG/L1IxyZenWnTx3p0OKoDypdWFvoMXqXimssnL1ZV+B2kakYqRTp&#xA;sMBkBzWmQK6uoZCGU9GBqDhVvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FWnkSNC8jBEXqzGgH0nEm&#xA;lSx/M2jcilvOb2UbenZq1wQfAmIMF/2RGUnPDob927LhK0Xuv3X+81illGek164Z/mIYSa/TIuPF&#xA;M8hXv/UP1rQa/wAPC531W7mv69YCfRt/l6UdOQ/4yFsHg39Rv7vl+teLuTSCCCCJYYI1iiQUSNAF&#xA;UD2A2y4AAUGK/CrsVdirsVdirsVdirsVSPzyYP8AB+sLNP8AVw9nOFkDhCWETMFBPjTp4YqwzzTo&#xA;kWpavDqV/omrWd7FLbC4jsJNOWC7kt5g9vwvZXjnjBlIWqtE7D4Sv2RirNL3yzaavBp0mpRtDd2S&#xA;ggRTGWlSjNGZXUNIvOJCSQCePzBVULXyNpcGqrqck9xc3Ql9djM0fFpAnBSwRE+zuR7n5UVX+Ure&#xA;yn0FA1oqgySCQSRqPUKyN8f+UN9jgIB5qjH8r+XGJb9G2yMerRxrG33oFOVfl8f80MuIrf8ADdin&#xA;+8811bd6RXM3H/gGZk/DHwB0sfErxN/oa+T+51i8UfyuLeQf8NFy/wCGx8I9JH7P1Lfk76p5jT+7&#xA;1K3kHhNakk/THLHT7seHJ/OHy/ath1fNC9rGX6Zovp6S4/vP6P2rs7615lX7WnWrf6l25/4lbrjx&#xA;ZO4fP9i0HfpHW1+3pBbx9O4ib7ufp7Y8c/5v2rQ73fpTVRudGuCO4EttX6Kygfjj4kv5p+z9a0O9&#xA;36Y1D/qx3v8Awdl/2U4+LL+bL/Y/8Utebv0rqp3Gi3AHYNLbA/TSVh+OPiS/mn7P1rQ73fpDXW+x&#xA;pPGvT1LiNfv4CTHjn/N+1aHe71/M7/Zs7KEdi1zLIfpUQIP+GxvJ3D5/sXZr6v5mk+1e2kC+EdvJ&#xA;I3/BPKB/wuPDkPUD4ftXZv8AQt5J/vTq13IO6R+lAv3xoJP+Hx8InnI/YFvydH5Z0NWDyWouZAai&#xA;S6Z7lgfENMZCMRgh3X79/vXiKZoiIoVFCqOigUA+7LgGLeKuxV2KuxV2KuxV2KuxV2KuxV2KpH55&#xA;EH+D9YaaD6wEs5ysYQOQxiZQwB8K9fDFWJ3v5PaFZ+YbTXdK063vnS9huJbS+JZoWNzC7XVrcHlI&#xA;rwLGzLGxKndRxBoVXpGKuxVJvKH1j9Aw+tw+3L6fCv2PUanKv7WKpzirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqTedPrH+ENa+r8PV+pXFPUrxp6bcum/2&#xA;a0xVOcVdirsVSTyasY0GLhMZqySlqsG4N6jVQU6AeGKp3irsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdirsVdirsVdirsVdirsVdirsVdiqSeeFjbydrQkmMC/Up6yqwQg+maDkf5jtiqd4qknm&#xA;PzTBoc9hFLA0ovZODOCFCJ6kcRbf7TcplovcV8KFVKNN/MZNQ1u006LTnSG6uJoPrbuSq8EkeIFU&#xA;RiryCCQ8X4hQv2qkAqpp5MmjfRlRLd4eDycmZAiyMZGqykfa6dcVT7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUh89zRx+UNXElu9yr2k6lEQSUPpMQzA9&#xA;gR1xVPsVU5ra2nKGaJJTE3OMuobi1CvJa9DQkYqh7fRtHtpUmtrG3hliDLFJHEiMof7QUgAgNTfF&#xA;UF5Q+sfoGH1uH25fT4V+x6jU5V/axVOcVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVSbzp9Y/wAIa19X4er9SuKepXjT025dN/s1piqc4q7FXYqknk1YxoMX&#xA;CYzVklLVYNwb1Gqgp0A8MVTvFXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FUk88LG3k7WhJMYF+pT1lVghB9M0HI/zHbFU7xV2KuxVJPJrRnQYuEJhpJKGqoX&#xA;m3qNVxTqD44qneKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KpJ54aNfJ2tGSEzr9SnrEqhyT6ZoeJ/lO+Kp3irH/ADVd+ZoLjTRo0Jkhab/TSqq54h0+BuX2&#xA;UaP1CWG4IXxoVUh0PVfzFuddh+uWzxaW8zlxJCiARVcFSxo4CD0zHUBmJatabKozQvMN1p9rbWd5&#xA;Y3TA3EsRMVjfExRj1X5uRCytVlVRxNPiriqe/wCJtO/3zff9w++/6o4q7/E2nf75vv8AuH33/VHF&#xA;Xf4m07/fN9/3D77/AKo4qof4stPrvofU7/0PT5/WPqF9Tnypwp6Hhv1xVX/xNp3++b7/ALh99/1R&#xA;xVa3mnTVZB6GoHmeII06+IGxNT+52G2Krv8AE2nf75vv+4fff9UcVWr5p01mcehqA4HiSdOvgDsD&#xA;Ufudxviql/iy0+u+h9Tv/Q9Pn9Y+oX1OfKnCnoeG/XFVX/FOm+pw9DUK05cv0dfcetKV9Hrirl80&#xA;6azOPQ1AcDxJOnXwB2BqP3O43xVavmzTWWJvq+oj1aUB02/BWqlvjHo/D0pv3xVZb+bLSSW5SSzv&#xA;4khkCQubC+PqoY0fmP3G1Gdk/wBjiqv/AIm07/fN9/3D77/qjirv8Tad/vm+/wC4fff9UcVd/ibT&#xA;v9833/cPvv8AqjiqhY+bLSeyt557O/tp5Y0eW3NhfMY3ZQWQn0BXidumKq/+JtO/3zff9w++/wCq&#xA;OKrV806azOPQ1AcDxJOnXwB2BqP3O43xV0nmnTUQsYNQanZdOvifuEOKrv8AE2nf75vv+4fff9Uc&#xA;VULHzZaT2VvPPZ39tPLGjy25sL5jG7KCyE+gK8Tt0xVf/izTfq/r/V9Rpw58P0bf8+lacfRry9sV&#xA;XN5p01WQehqB5niCNOviBsTU/udhtiqhdeb7OK3mkgstQnliIURfo++XlXiaqTAdgG/DFUT/AIm0&#xA;7/fN9/3D77/qjirv8Tad/vm+/wC4fff9UcVSfzfrzXPlrUrfTba7kuZraaMRyafqHxBomFF4w/aJ&#xA;IpirLcVdiqF1U6gNMvDpwVtQEEhs1k+wZuB9MN7cqVxVgV5dfmqYbRLSO45K0pmlZLL1Ht2ncI0g&#xA;I4CdbfgUWMcedeQptillHk6XzM9ncr5hDfW1eH0iVjUcDaQepQxAKT9Y9Wvv0+HjihP8VSTzg3mF&#xA;dFb9AB/rxkjDGIRGURFvjMYn/dE/63avfFWJXl7+bTaoxt4XjtA4RlWO1aMFIVCsnI+q0ck4l9Sp&#xA;5AcONASSpZd5Ql1qTQom1kTi+9Sav1pYUm9IysYRILekXJYyqsVABI+kqE6xV2KpR5qfXV0gnRQ5&#xA;vPViDel6RkERcCQoJgYyQv8AN2rTemKsNvtS/Nh76tpayRw+p6bx+nbmMGOCMIwZiXMUtz6wkO5C&#xA;BCvGpJUsv8nHXzoMJ16QzaiXl5TNGsJeP1G9JjCoHpco6HgSSvQknFCdYqx7zPN5pivtNfR0aSzV&#xA;i2oIgiJZRPBVTz+L/eY3BXhQ8wm9NiqgPKk3nttTiGvBxaPFcFwUgCiYJZlQDGOQQSm6EdTUoBy3&#xA;4kqswxV2Ksb8x3Xmq31iwfTIXm0xI3e8SNYm5FWWqNzpJUx8vT4dW+12xVKPKNz+Yb6xaprq3K2h&#xA;t2NyJI7MResUjNOUPx8lmEyrQ8fT9PYsWYKs7xV2KuxVjvma58zwanpjaVG0livNr9ERHL0lgBRu&#xA;XxL/AKOZ2XiRVwo9mVSXyvcfmPLrVodZLrYcGN3bmGGNQzwISwlUMXWO6EkaIOLcOLsXBrirMdX1&#xA;fTdH06bUtSnW2srcAyzMCaciFUAKCxLMQAAKk7DFVLSfMGi6v6h027S6EQRmKVoUlXlFIpIHOOQA&#xA;8HWqtQ0O2Kpbrlx5ph1+wawieTSEUvepGsR5UDclbn+85fY9PhSpry2xVMPLr6m2mk6mXNyLi6Ct&#xA;KqI5gFzILcsECr/ccO3z3xVMsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdiqVeatCHmDy1qehtObZdStpLVrhVDsglUqWUEj4gDsa7HfFUu8o6Fc2WreY9&#xA;Subf6s2oXkcVjHVTSxsreOCADiTQNIJZAP8AKxVk2KuxV2KuxV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#">
         <xmpMM:OriginalDocumentID>xmp.did:F77F1174072068119457C6D96EE244EC</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:FC7F117407206811AB088599DB67065B</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:FC7F117407206811AB088599DB67065B</xmpMM:DocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068119457C6D96EE244EC</stEvt:instanceID>
                  <stEvt:when>2013-01-16T17:52:03+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FC7F117407206811AB088599DB67065B</stEvt:instanceID>
                  <stEvt:when>2013-02-26T11:57:26+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F77F1174072068119457C6D96EE244EC</stRef:instanceID>
            <stRef:documentID>xmp.did:F77F1174072068119457C6D96EE244EC</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F77F1174072068119457C6D96EE244EC</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -167.939 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 167.939 li
271.719 167.939 li
271.719 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
2 lc
0 lj
3.25 ml
[.72 2.88 ] 0 dsh
true sadj
31.4502 3.22803 mo
35.875 4.87549 li
43.6299 6.51221 li
47.0713 8.13623 li
53.27 9.74854 li
58.7373 11.3462 li
63.6289 12.9292 li
68.0532 14.4961 li
73.9883 16.0454 li
79.249 17.5742 li
85.4482 19.0825 li
89.6079 20.5664 li
95.8071 22.0234 li
101.275 23.4502 li
106.166 24.8452 li
111.427 26.2031 li
116.895 27.519 li
122.445 28.7915 li
127.401 30.0112 li
132.934 31.1753 li
138.344 32.2764 li
143.605 33.3071 li
149.073 34.2603 li
154.295 35.1274 li
159.579 35.8984 li
165.112 36.5654 li
170.522 37.1152 li
175.783 37.5391 li
181.067 37.8223 li
186.473 37.9541 li
191.757 37.9194 li
197.16 37.7051 li
202.468 37.2964 li
207.858 36.6782 li
213.152 35.8374 li
218.486 34.7593 li
223.862 33.4351 li
229.208 31.8623 li
234.529 30.0503 li
239.88 28.0503 li
245.238 25.9985 li
250.583 24.2651 li
255.93 23.9351 li
261.288 28.7944 li
266.62 59.4741 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.247059 .239216 .6 rgb
@
[] 0 dsh
31.4502 84.6382 mo
35.875 85.3521 li
43.6299 86.0376 li
47.0713 86.687 li
53.27 87.3032 li
58.7373 87.8794 li
63.6289 88.4146 li
68.0532 88.9019 li
73.9883 89.3413 li
79.249 89.7251 li
85.4482 90.0513 li
89.6079 90.3149 li
95.8071 90.5103 li
101.275 90.6313 li
106.166 90.6753 li
111.427 90.6343 li
116.895 90.5015 li
122.445 90.27 li
127.401 89.9341 li
132.934 89.4858 li
138.344 88.9194 li
143.605 88.2231 li
149.073 87.3931 li
154.295 86.4175 li
159.579 85.2896 li
165.112 83.9995 li
170.522 82.5425 li
175.783 80.9067 li
181.067 79.0854 li
186.473 77.0698 li
191.757 74.8545 li
197.16 72.4331 li
202.468 69.8003 li
207.858 66.9502 li
213.152 63.8804 li
218.486 60.5894 li
223.862 57.0791 li
229.208 53.3594 li
234.529 49.4492 li
239.88 45.4004 li
245.238 41.3462 li
250.583 37.6343 li
255.93 35.2725 li
261.288 37.8232 li
266.62 64.8652 li
.6 .545098 .239216 rgb
@
.4 lw
271.519 .200195 mo
271.519 151.599 li
26.5513 .200195 mo
271.519 .200195 li
26.5513 151.599 mo
26.5513 .200195 li
271.519 151.599 mo
26.5513 151.599 li
0 0 0 rgb
@
0 lc
31.4502 151.599 mo
31.4502 148.704 li
@
26.8853 158.785 mo
27.0015 158.445 27.0596 157.954 27.0596 157.311 cv
27.0596 156.798 27.0244 156.39 26.9551 156.084 cv
26.8242 155.515 26.5796 155.231 26.2207 155.231 cv
25.8623 155.231 25.6167 155.524 25.4839 156.11 cv
25.4141 156.421 25.3794 156.833 25.3794 157.342 cv
25.3794 157.821 25.415 158.204 25.4868 158.491 cv
25.6216 159.026 25.875 159.293 26.2461 159.293 cv
26.5562 159.293 26.7695 159.124 26.8853 158.785 cv
cp
27.3662 155.823 mo
27.5791 156.234 27.686 156.707 27.686 157.24 cv
27.686 157.66 27.6206 158.055 27.4897 158.426 cv
27.2427 159.125 26.8159 159.474 26.208 159.474 cv
25.7925 159.474 25.4507 159.285 25.1831 158.908 cv
24.896 158.504 24.7529 157.958 24.7529 157.265 cv
24.7529 156.721 24.8486 156.252 25.0405 155.86 cv
25.3003 155.327 25.6987 155.06 26.2368 155.06 cv
26.7217 155.06 27.0981 155.314 27.3662 155.823 cv
cp
.137255 .121569 .12549 rgb
f
28.4961 159.383 mo
28.4268 159.313 28.3921 159.228 28.3921 159.128 cv
28.3921 159.03 28.4272 158.945 28.498 158.875 cv
28.5684 158.806 28.6533 158.771 28.7524 158.771 cv
28.8516 158.771 28.936 158.806 29.0059 158.875 cv
29.0752 158.945 29.1104 159.03 29.1104 159.128 cv
29.1104 159.228 29.0757 159.313 29.0073 159.383 cv
28.939 159.455 28.854 159.49 28.7524 159.49 cv
28.6514 159.49 28.5659 159.455 28.4961 159.383 cv
cp
f
31.3931 158.785 mo
31.5093 158.445 31.5674 157.954 31.5674 157.311 cv
31.5674 156.798 31.5322 156.39 31.4629 156.084 cv
31.332 155.515 31.0874 155.231 30.7285 155.231 cv
30.3701 155.231 30.1245 155.524 29.9917 156.11 cv
29.9219 156.421 29.8872 156.833 29.8872 157.342 cv
29.8872 157.821 29.9229 158.204 29.9946 158.491 cv
30.1294 159.026 30.3828 159.293 30.7539 159.293 cv
31.064 159.293 31.2773 159.124 31.3931 158.785 cv
cp
31.874 155.823 mo
32.0869 156.234 32.1938 156.707 32.1938 157.24 cv
32.1938 157.66 32.1284 158.055 31.9976 158.426 cv
31.7505 159.125 31.3237 159.474 30.7158 159.474 cv
30.3003 159.474 29.9585 159.285 29.6909 158.908 cv
29.4038 158.504 29.2607 157.958 29.2607 157.265 cv
29.2607 156.721 29.3564 156.252 29.5483 155.86 cv
29.8081 155.327 30.2065 155.06 30.7446 155.06 cv
31.2295 155.06 31.606 155.314 31.874 155.823 cv
cp
f
34.3931 158.785 mo
34.5093 158.445 34.5674 157.954 34.5674 157.311 cv
34.5674 156.798 34.5322 156.39 34.4629 156.084 cv
34.332 155.515 34.0874 155.231 33.7285 155.231 cv
33.3701 155.231 33.1245 155.524 32.9917 156.11 cv
32.9219 156.421 32.8872 156.833 32.8872 157.342 cv
32.8872 157.821 32.9229 158.204 32.9946 158.491 cv
33.1294 159.026 33.3828 159.293 33.7539 159.293 cv
34.064 159.293 34.2773 159.124 34.3931 158.785 cv
cp
34.874 155.823 mo
35.0869 156.234 35.1938 156.707 35.1938 157.24 cv
35.1938 157.66 35.1284 158.055 34.9976 158.426 cv
34.7505 159.125 34.3237 159.474 33.7158 159.474 cv
33.3003 159.474 32.9585 159.285 32.6909 158.908 cv
32.4038 158.504 32.2607 157.958 32.2607 157.265 cv
32.2607 156.721 32.3564 156.252 32.5483 155.86 cv
32.8081 155.327 33.2065 155.06 33.7446 155.06 cv
34.2295 155.06 34.606 155.314 34.874 155.823 cv
cp
f
37.1357 155.09 mo
37.1367 155.095 37.1372 155.107 37.1372 155.126 cv
37.1372 158.936 li
37.1372 159.098 37.1807 159.202 37.2676 159.246 cv
37.3545 159.291 37.5166 159.317 37.7544 159.325 cv
37.7544 159.414 li
35.9668 159.414 li
35.9668 159.319 li
36.2217 159.306 36.3887 159.271 36.4668 159.214 cv
36.5444 159.158 36.5835 159.034 36.5835 158.844 cv
36.5835 155.915 li
36.5835 155.813 36.5708 155.736 36.5459 155.683 cv
36.5205 155.63 36.4653 155.604 36.3813 155.604 cv
36.3262 155.604 36.2549 155.62 36.1675 155.65 cv
36.0801 155.68 35.998 155.712 35.9224 155.747 cv
35.9224 155.658 li
37.0835 155.066 li
37.1216 155.066 li
37.1299 155.077 37.1348 155.084 37.1357 155.09 cv
cp
f
63.6289 151.599 mo
63.6289 148.704 li
0 0 0 rgb
@
59.0728 158.785 mo
59.189 158.445 59.2471 157.954 59.2471 157.311 cv
59.2471 156.798 59.2119 156.39 59.1426 156.084 cv
59.0117 155.515 58.7671 155.231 58.4082 155.231 cv
58.0498 155.231 57.8042 155.524 57.6714 156.11 cv
57.6016 156.421 57.5669 156.833 57.5669 157.342 cv
57.5669 157.821 57.6025 158.204 57.6743 158.491 cv
57.8091 159.026 58.0625 159.293 58.4336 159.293 cv
58.7437 159.293 58.957 159.124 59.0728 158.785 cv
cp
59.5537 155.823 mo
59.7666 156.234 59.8735 156.707 59.8735 157.24 cv
59.8735 157.66 59.8081 158.055 59.6772 158.426 cv
59.4302 159.125 59.0034 159.474 58.3955 159.474 cv
57.98 159.474 57.6382 159.285 57.3706 158.908 cv
57.0835 158.504 56.9404 157.958 56.9404 157.265 cv
56.9404 156.721 57.0361 156.252 57.228 155.86 cv
57.4878 155.327 57.8862 155.06 58.4243 155.06 cv
58.9092 155.06 59.2856 155.314 59.5537 155.823 cv
cp
.137255 .121569 .12549 rgb
f
60.6836 159.383 mo
60.6143 159.313 60.5796 159.228 60.5796 159.128 cv
60.5796 159.03 60.6147 158.945 60.6855 158.875 cv
60.7559 158.806 60.8408 158.771 60.9399 158.771 cv
61.0391 158.771 61.1235 158.806 61.1934 158.875 cv
61.2627 158.945 61.2979 159.03 61.2979 159.128 cv
61.2979 159.228 61.2632 159.313 61.1948 159.383 cv
61.1265 159.455 61.0415 159.49 60.9399 159.49 cv
60.8389 159.49 60.7534 159.455 60.6836 159.383 cv
cp
f
63.5728 158.794 mo
63.689 158.455 63.7471 157.963 63.7471 157.321 cv
63.7471 156.808 63.7119 156.4 63.6426 156.094 cv
63.5117 155.525 63.2671 155.241 62.9082 155.241 cv
62.5498 155.241 62.3042 155.534 62.1714 156.12 cv
62.1016 156.431 62.0669 156.842 62.0669 157.352 cv
62.0669 157.831 62.1025 158.213 62.1743 158.5 cv
62.3091 159.036 62.5625 159.303 62.9336 159.303 cv
63.2437 159.303 63.457 159.133 63.5728 158.794 cv
cp
64.0537 155.833 mo
64.2666 156.244 64.3735 156.716 64.3735 157.25 cv
64.3735 157.669 64.3081 158.065 64.1772 158.436 cv
63.9302 159.134 63.5034 159.484 62.8955 159.484 cv
62.48 159.484 62.1382 159.294 61.8706 158.917 cv
61.5835 158.514 61.4404 157.967 61.4404 157.275 cv
61.4404 156.731 61.5361 156.262 61.728 155.87 cv
61.9878 155.336 62.3862 155.07 62.9243 155.07 cv
63.4092 155.07 63.7856 155.324 64.0537 155.833 cv
cp
f
66.5728 158.794 mo
66.689 158.455 66.7471 157.963 66.7471 157.321 cv
66.7471 156.808 66.7119 156.4 66.6426 156.094 cv
66.5117 155.525 66.2671 155.241 65.9082 155.241 cv
65.5498 155.241 65.3042 155.534 65.1714 156.12 cv
65.1016 156.431 65.0669 156.842 65.0669 157.352 cv
65.0669 157.831 65.1025 158.213 65.1743 158.5 cv
65.3091 159.036 65.5625 159.303 65.9336 159.303 cv
66.2437 159.303 66.457 159.133 66.5728 158.794 cv
cp
67.0537 155.833 mo
67.2666 156.244 67.3735 156.716 67.3735 157.25 cv
67.3735 157.669 67.3081 158.065 67.1772 158.436 cv
66.9302 159.134 66.5034 159.484 65.8955 159.484 cv
65.48 159.484 65.1382 159.294 64.8706 158.917 cv
64.5835 158.514 64.4404 157.967 64.4404 157.275 cv
64.4404 156.731 64.5361 156.262 64.728 155.87 cv
64.9878 155.336 65.3862 155.07 65.9243 155.07 cv
66.4092 155.07 66.7856 155.324 67.0537 155.833 cv
cp
f
67.5767 159.35 mo
68.3486 158.549 68.873 157.961 69.1494 157.586 cv
69.4258 157.211 69.564 156.845 69.564 156.49 cv
69.564 156.177 69.4795 155.94 69.3105 155.777 cv
69.1421 155.613 68.9404 155.532 68.7065 155.532 cv
68.4175 155.532 68.1831 155.637 68.0039 155.847 cv
67.9048 155.963 67.8101 156.142 67.7192 156.382 cv
67.583 156.353 li
67.6885 155.869 67.8672 155.532 68.1196 155.343 cv
68.3716 155.155 68.6421 155.06 68.9312 155.06 cv
69.2876 155.06 69.5762 155.172 69.7964 155.397 cv
70.0166 155.622 70.127 155.896 70.127 156.22 cv
70.127 156.566 70.0078 156.899 69.7695 157.219 cv
69.5308 157.54 69.0127 158.11 68.2153 158.93 cv
69.668 158.93 li
69.8706 158.93 70.0132 158.906 70.0952 158.857 cv
70.1777 158.809 70.2705 158.691 70.374 158.503 cv
70.4561 158.541 li
70.105 159.423 li
67.5767 159.423 li
67.5767 159.35 li
cp
f
106.166 151.599 mo
106.166 148.704 li
0 0 0 rgb
@
101.612 158.785 mo
101.728 158.445 101.786 157.954 101.786 157.311 cv
101.786 156.798 101.751 156.39 101.682 156.084 cv
101.551 155.515 101.306 155.231 100.947 155.231 cv
100.589 155.231 100.343 155.524 100.21 156.11 cv
100.141 156.421 100.106 156.833 100.106 157.342 cv
100.106 157.821 100.142 158.204 100.213 158.491 cv
100.348 159.026 100.602 159.293 100.973 159.293 cv
101.283 159.293 101.496 159.124 101.612 158.785 cv
cp
102.093 155.823 mo
102.306 156.234 102.413 156.707 102.413 157.24 cv
102.413 157.66 102.347 158.055 102.216 158.426 cv
101.969 159.125 101.542 159.474 100.935 159.474 cv
100.519 159.474 100.177 159.285 99.9097 158.908 cv
99.6226 158.504 99.4795 157.958 99.4795 157.265 cv
99.4795 156.721 99.5752 156.252 99.7671 155.86 cv
100.027 155.327 100.425 155.06 100.963 155.06 cv
101.448 155.06 101.825 155.314 102.093 155.823 cv
cp
.137255 .121569 .12549 rgb
f
103.223 159.383 mo
103.153 159.313 103.119 159.228 103.119 159.128 cv
103.119 159.03 103.154 158.945 103.225 158.875 cv
103.295 158.806 103.38 158.771 103.479 158.771 cv
103.578 158.771 103.663 158.806 103.732 158.875 cv
103.802 158.945 103.837 159.03 103.837 159.128 cv
103.837 159.228 103.802 159.313 103.734 159.383 cv
103.666 159.455 103.581 159.49 103.479 159.49 cv
103.378 159.49 103.292 159.455 103.223 159.383 cv
cp
f
106.112 158.883 mo
106.228 158.543 106.286 158.052 106.286 157.41 cv
106.286 156.897 106.251 156.489 106.182 156.183 cv
106.051 155.614 105.806 155.33 105.447 155.33 cv
105.089 155.33 104.843 155.623 104.71 156.208 cv
104.641 156.52 104.606 156.931 104.606 157.441 cv
104.606 157.919 104.642 158.302 104.713 158.589 cv
104.848 159.125 105.102 159.392 105.473 159.392 cv
105.783 159.392 105.996 159.222 106.112 158.883 cv
cp
106.593 155.921 mo
106.806 156.333 106.913 156.805 106.913 157.338 cv
106.913 157.758 106.847 158.154 106.716 158.525 cv
106.469 159.223 106.042 159.573 105.435 159.573 cv
105.019 159.573 104.677 159.383 104.41 159.006 cv
104.123 158.603 103.979 158.056 103.979 157.364 cv
103.979 156.82 104.075 156.351 104.267 155.958 cv
104.527 155.425 104.925 155.159 105.463 155.159 cv
105.948 155.159 106.325 155.413 106.593 155.921 cv
cp
f
109.112 158.883 mo
109.228 158.543 109.286 158.052 109.286 157.41 cv
109.286 156.897 109.251 156.489 109.182 156.183 cv
109.051 155.614 108.806 155.33 108.447 155.33 cv
108.089 155.33 107.843 155.623 107.71 156.208 cv
107.641 156.52 107.606 156.931 107.606 157.441 cv
107.606 157.919 107.642 158.302 107.713 158.589 cv
107.848 159.125 108.102 159.392 108.473 159.392 cv
108.783 159.392 108.996 159.222 109.112 158.883 cv
cp
109.593 155.921 mo
109.806 156.333 109.913 156.805 109.913 157.338 cv
109.913 157.758 109.847 158.154 109.716 158.525 cv
109.469 159.223 109.042 159.573 108.435 159.573 cv
108.019 159.573 107.677 159.383 107.41 159.006 cv
107.123 158.603 106.979 158.056 106.979 157.364 cv
106.979 156.82 107.075 156.351 107.267 155.958 cv
107.527 155.425 107.925 155.159 108.463 155.159 cv
108.948 155.159 109.325 155.413 109.593 155.921 cv
cp
f
110.881 159.137 mo
111.077 159.273 111.227 159.341 111.333 159.341 cv
111.576 159.341 111.788 159.234 111.97 159.02 cv
112.151 158.806 112.242 158.542 112.242 158.231 cv
112.242 157.684 111.951 157.292 111.368 157.05 cv
111.044 156.917 110.744 156.851 110.464 156.851 cv
110.418 156.851 110.389 156.85 110.377 156.846 cv
110.366 156.843 110.352 156.833 110.335 156.813 cv
110.339 156.796 110.343 156.782 110.346 156.771 cv
110.349 156.759 110.353 156.748 110.357 156.738 cv
111.047 155.225 li
112.404 155.225 li
112.471 155.225 112.523 155.213 112.56 155.19 cv
112.597 155.167 112.645 155.124 112.704 155.06 cv
112.755 155.105 li
112.511 155.69 li
112.502 155.709 112.479 155.721 112.441 155.726 cv
112.403 155.732 112.362 155.734 112.318 155.734 cv
111.092 155.734 li
110.822 156.288 li
111.169 156.347 111.422 156.403 111.583 156.456 cv
111.847 156.544 112.067 156.675 112.245 156.848 cv
112.397 156.998 112.512 157.167 112.59 157.353 cv
112.668 157.54 112.707 157.737 112.707 157.946 cv
112.707 158.413 112.541 158.801 112.208 159.114 cv
111.875 159.425 111.455 159.582 110.946 159.582 cv
110.739 159.582 110.572 159.562 110.445 159.522 cv
110.234 159.457 110.128 159.339 110.128 159.17 cv
110.128 159.107 110.151 159.052 110.197 159.004 cv
110.242 158.957 110.313 158.933 110.407 158.933 cv
110.528 158.933 110.686 159.001 110.881 159.137 cv
cp
f
138.344 151.599 mo
138.344 148.704 li
0 0 0 rgb
@
133.784 158.785 mo
133.9 158.445 133.958 157.954 133.958 157.311 cv
133.958 156.798 133.923 156.39 133.854 156.084 cv
133.723 155.515 133.478 155.231 133.119 155.231 cv
132.761 155.231 132.515 155.524 132.382 156.11 cv
132.313 156.421 132.278 156.833 132.278 157.342 cv
132.278 157.821 132.313 158.204 132.385 158.491 cv
132.52 159.026 132.773 159.293 133.145 159.293 cv
133.455 159.293 133.668 159.124 133.784 158.785 cv
cp
134.265 155.823 mo
134.478 156.234 134.584 156.707 134.584 157.24 cv
134.584 157.66 134.519 158.055 134.388 158.426 cv
134.141 159.125 133.714 159.474 133.106 159.474 cv
132.691 159.474 132.349 159.285 132.082 158.908 cv
131.794 158.504 131.651 157.958 131.651 157.265 cv
131.651 156.721 131.747 156.252 131.939 155.86 cv
132.199 155.327 132.597 155.06 133.135 155.06 cv
133.62 155.06 133.997 155.314 134.265 155.823 cv
cp
.137255 .121569 .12549 rgb
f
135.395 159.383 mo
135.325 159.313 135.291 159.228 135.291 159.128 cv
135.291 159.03 135.326 158.945 135.396 158.875 cv
135.467 158.806 135.552 158.771 135.651 158.771 cv
135.75 158.771 135.834 158.806 135.904 158.875 cv
135.974 158.945 136.009 159.03 136.009 159.128 cv
136.009 159.228 135.974 159.313 135.906 159.383 cv
135.837 159.455 135.752 159.49 135.651 159.49 cv
135.55 159.49 135.464 159.455 135.395 159.383 cv
cp
f
138.292 158.785 mo
138.408 158.445 138.466 157.954 138.466 157.311 cv
138.466 156.798 138.431 156.39 138.361 156.084 cv
138.23 155.515 137.986 155.231 137.627 155.231 cv
137.269 155.231 137.023 155.524 136.89 156.11 cv
136.82 156.421 136.786 156.833 136.786 157.342 cv
136.786 157.821 136.821 158.204 136.893 158.491 cv
137.028 159.026 137.281 159.293 137.652 159.293 cv
137.962 159.293 138.176 159.124 138.292 158.785 cv
cp
138.772 155.823 mo
138.985 156.234 139.092 156.707 139.092 157.24 cv
139.092 157.66 139.027 158.055 138.896 158.426 cv
138.649 159.125 138.222 159.474 137.614 159.474 cv
137.199 159.474 136.857 159.285 136.589 158.908 cv
136.302 158.504 136.159 157.958 136.159 157.265 cv
136.159 156.721 136.255 156.252 136.447 155.86 cv
136.707 155.327 137.105 155.06 137.643 155.06 cv
138.128 155.06 138.504 155.314 138.772 155.823 cv
cp
f
141.034 155.09 mo
141.035 155.095 141.035 155.107 141.035 155.126 cv
141.035 158.936 li
141.035 159.098 141.079 159.202 141.166 159.246 cv
141.252 159.291 141.415 159.317 141.652 159.325 cv
141.652 159.414 li
139.865 159.414 li
139.865 159.319 li
140.12 159.306 140.287 159.271 140.365 159.214 cv
140.442 159.158 140.481 159.034 140.481 158.844 cv
140.481 155.915 li
140.481 155.813 140.469 155.736 140.444 155.683 cv
140.418 155.63 140.363 155.604 140.279 155.604 cv
140.224 155.604 140.153 155.62 140.065 155.65 cv
139.978 155.68 139.896 155.712 139.82 155.747 cv
139.82 155.658 li
140.981 155.066 li
141.02 155.066 li
141.028 155.077 141.033 155.084 141.034 155.09 cv
cp
f
170.522 151.599 mo
170.522 148.704 li
0 0 0 rgb
@
167.397 158.794 mo
167.513 158.455 167.571 157.963 167.571 157.321 cv
167.571 156.808 167.537 156.4 167.466 156.094 cv
167.335 155.525 167.091 155.241 166.733 155.241 cv
166.374 155.241 166.128 155.534 165.996 156.12 cv
165.925 156.431 165.891 156.842 165.891 157.352 cv
165.891 157.831 165.927 158.213 165.999 158.5 cv
166.133 159.036 166.386 159.303 166.758 159.303 cv
167.068 159.303 167.281 159.133 167.397 158.794 cv
cp
167.878 155.833 mo
168.091 156.244 168.198 156.716 168.198 157.25 cv
168.198 157.669 168.132 158.065 168.001 158.436 cv
167.754 159.134 167.328 159.484 166.72 159.484 cv
166.304 159.484 165.962 159.294 165.695 158.917 cv
165.408 158.514 165.264 157.967 165.264 157.275 cv
165.264 156.731 165.361 156.262 165.552 155.87 cv
165.812 155.336 166.21 155.07 166.749 155.07 cv
167.234 155.07 167.61 155.324 167.878 155.833 cv
cp
.137255 .121569 .12549 rgb
f
169.008 159.393 mo
168.938 159.323 168.904 159.238 168.904 159.138 cv
168.904 159.04 168.939 158.955 169.009 158.885 cv
169.081 158.816 169.166 158.781 169.264 158.781 cv
169.364 158.781 169.448 158.816 169.517 158.885 cv
169.587 158.955 169.622 159.04 169.622 159.138 cv
169.622 159.238 169.587 159.323 169.519 159.393 cv
169.451 159.464 169.366 159.5 169.264 159.5 cv
169.163 159.5 169.078 159.464 169.008 159.393 cv
cp
f
171.897 158.794 mo
172.013 158.455 172.071 157.963 172.071 157.321 cv
172.071 156.808 172.037 156.4 171.966 156.094 cv
171.835 155.525 171.591 155.241 171.233 155.241 cv
170.874 155.241 170.628 155.534 170.496 156.12 cv
170.425 156.431 170.391 156.842 170.391 157.352 cv
170.391 157.831 170.427 158.213 170.499 158.5 cv
170.633 159.036 170.886 159.303 171.258 159.303 cv
171.568 159.303 171.781 159.133 171.897 158.794 cv
cp
172.378 155.833 mo
172.591 156.244 172.698 156.716 172.698 157.25 cv
172.698 157.669 172.632 158.065 172.501 158.436 cv
172.254 159.134 171.828 159.484 171.22 159.484 cv
170.804 159.484 170.462 159.294 170.195 158.917 cv
169.908 158.514 169.764 157.967 169.764 157.275 cv
169.764 156.731 169.861 156.262 170.052 155.87 cv
170.312 155.336 170.71 155.07 171.249 155.07 cv
171.734 155.07 172.11 155.324 172.378 155.833 cv
cp
f
172.901 159.35 mo
173.672 158.549 174.197 157.961 174.473 157.586 cv
174.75 157.211 174.887 156.845 174.887 156.49 cv
174.887 156.177 174.803 155.94 174.634 155.777 cv
174.465 155.613 174.264 155.532 174.03 155.532 cv
173.741 155.532 173.507 155.637 173.328 155.847 cv
173.228 155.963 173.133 156.142 173.042 156.382 cv
172.907 156.353 li
173.012 155.869 173.191 155.532 173.443 155.343 cv
173.695 155.155 173.965 155.06 174.254 155.06 cv
174.611 155.06 174.9 155.172 175.12 155.397 cv
175.34 155.622 175.451 155.896 175.451 156.22 cv
175.451 156.566 175.332 156.899 175.093 157.219 cv
174.855 157.54 174.336 158.11 173.539 158.93 cv
174.992 158.93 li
175.194 158.93 175.336 158.906 175.419 158.857 cv
175.501 158.809 175.594 158.691 175.698 158.503 cv
175.78 158.541 li
175.428 159.423 li
172.901 159.423 li
172.901 159.35 li
cp
f
213.06 151.599 mo
213.06 148.704 li
0 0 0 rgb
@
210.143 158.883 mo
210.259 158.543 210.317 158.052 210.317 157.41 cv
210.317 156.897 210.283 156.489 210.212 156.183 cv
210.082 155.614 209.837 155.33 209.479 155.33 cv
209.12 155.33 208.875 155.623 208.742 156.208 cv
208.671 156.52 208.637 156.931 208.637 157.441 cv
208.637 157.919 208.673 158.302 208.745 158.589 cv
208.879 159.125 209.132 159.392 209.504 159.392 cv
209.814 159.392 210.027 159.222 210.143 158.883 cv
cp
210.625 155.921 mo
210.837 156.333 210.944 156.805 210.944 157.338 cv
210.944 157.758 210.878 158.154 210.748 158.525 cv
210.5 159.223 210.074 159.573 209.466 159.573 cv
209.05 159.573 208.708 159.383 208.441 159.006 cv
208.154 158.603 208.01 158.056 208.01 157.364 cv
208.01 156.82 208.107 156.351 208.298 155.958 cv
208.558 155.425 208.957 155.159 209.495 155.159 cv
209.98 155.159 210.356 155.413 210.625 155.921 cv
cp
.137255 .121569 .12549 rgb
f
211.754 159.482 mo
211.684 159.412 211.65 159.327 211.65 159.227 cv
211.65 159.128 211.685 159.043 211.755 158.974 cv
211.827 158.905 211.912 158.87 212.01 158.87 cv
212.11 158.87 212.194 158.905 212.263 158.974 cv
212.333 159.043 212.368 159.128 212.368 159.227 cv
212.368 159.327 212.333 159.412 212.265 159.482 cv
212.197 159.553 212.112 159.588 212.01 159.588 cv
211.909 159.588 211.824 159.553 211.754 159.482 cv
cp
f
214.635 158.883 mo
214.751 158.543 214.809 158.052 214.809 157.41 cv
214.809 156.897 214.775 156.489 214.705 156.183 cv
214.574 155.614 214.33 155.33 213.971 155.33 cv
213.612 155.33 213.367 155.623 213.234 156.208 cv
213.164 156.52 213.129 156.931 213.129 157.441 cv
213.129 157.919 213.166 158.302 213.237 158.589 cv
213.372 159.125 213.625 159.392 213.997 159.392 cv
214.306 159.392 214.519 159.222 214.635 158.883 cv
cp
215.117 155.921 mo
215.33 156.333 215.436 156.805 215.436 157.338 cv
215.436 157.758 215.371 158.154 215.24 158.525 cv
214.993 159.223 214.566 159.573 213.958 159.573 cv
213.542 159.573 213.201 159.383 212.933 159.006 cv
212.646 158.603 212.502 158.056 212.502 157.364 cv
212.502 156.82 212.599 156.351 212.791 155.958 cv
213.05 155.425 213.449 155.159 213.987 155.159 cv
214.472 155.159 214.848 155.413 215.117 155.921 cv
cp
f
216.404 159.137 mo
216.599 159.273 216.75 159.341 216.856 159.341 cv
217.098 159.341 217.311 159.234 217.493 159.02 cv
217.674 158.806 217.765 158.542 217.765 158.231 cv
217.765 157.684 217.473 157.292 216.89 157.05 cv
216.567 156.917 216.266 156.851 215.988 156.851 cv
215.941 156.851 215.912 156.85 215.9 156.846 cv
215.889 156.843 215.875 156.833 215.858 156.813 cv
215.862 156.796 215.866 156.782 215.869 156.771 cv
215.872 156.759 215.875 156.748 215.879 156.738 cv
216.57 155.225 li
217.926 155.225 li
217.994 155.225 218.046 155.213 218.083 155.19 cv
218.12 155.167 218.168 155.124 218.227 155.06 cv
218.278 155.105 li
218.034 155.69 li
218.026 155.709 218.002 155.721 217.964 155.726 cv
217.926 155.732 217.885 155.734 217.84 155.734 cv
216.615 155.734 li
216.345 156.288 li
216.692 156.347 216.945 156.403 217.106 156.456 cv
217.37 156.544 217.59 156.675 217.768 156.848 cv
217.919 156.998 218.035 157.167 218.113 157.353 cv
218.191 157.54 218.23 157.737 218.23 157.946 cv
218.23 158.413 218.064 158.801 217.731 159.114 cv
217.399 159.425 216.978 159.582 216.469 159.582 cv
216.262 159.582 216.095 159.562 215.968 159.522 cv
215.757 159.457 215.652 159.339 215.652 159.17 cv
215.652 159.107 215.674 159.052 215.719 159.004 cv
215.765 158.957 215.835 158.933 215.93 158.933 cv
216.05 158.933 216.208 159.001 216.404 159.137 cv
cp
f
245.238 151.599 mo
245.238 148.704 li
0 0 0 rgb
@
243.633 158.785 mo
243.75 158.445 243.807 157.954 243.807 157.311 cv
243.807 156.798 243.773 156.39 243.703 156.084 cv
243.572 155.515 243.328 155.231 242.969 155.231 cv
242.61 155.231 242.365 155.524 242.232 156.11 cv
242.162 156.421 242.127 156.833 242.127 157.342 cv
242.127 157.821 242.164 158.204 242.235 158.491 cv
242.37 159.026 242.623 159.293 242.995 159.293 cv
243.304 159.293 243.517 159.124 243.633 158.785 cv
cp
244.115 155.823 mo
244.328 156.234 244.434 156.707 244.434 157.24 cv
244.434 157.66 244.369 158.055 244.238 158.426 cv
243.991 159.125 243.564 159.474 242.957 159.474 cv
242.541 159.474 242.199 159.285 241.931 158.908 cv
241.644 158.504 241.5 157.958 241.5 157.265 cv
241.5 156.721 241.597 156.252 241.789 155.86 cv
242.048 155.327 242.447 155.06 242.985 155.06 cv
243.47 155.06 243.846 155.314 244.115 155.823 cv
cp
.137255 .121569 .12549 rgb
f
245.245 159.383 mo
245.174 159.313 245.14 159.228 245.14 159.128 cv
245.14 159.03 245.175 158.945 245.246 158.875 cv
245.317 158.806 245.402 158.771 245.5 158.771 cv
245.6 158.771 245.684 158.806 245.753 158.875 cv
245.824 158.945 245.858 159.03 245.858 159.128 cv
245.858 159.228 245.824 159.313 245.755 159.383 cv
245.687 159.455 245.602 159.49 245.5 159.49 cv
245.399 159.49 245.314 159.455 245.245 159.383 cv
cp
f
247.868 155.09 mo
247.869 155.095 247.87 155.107 247.87 155.126 cv
247.87 158.936 li
247.87 159.098 247.913 159.202 248 159.246 cv
248.086 159.291 248.249 159.317 248.486 159.325 cv
248.486 159.414 li
246.699 159.414 li
246.699 159.319 li
246.954 159.306 247.121 159.271 247.199 159.214 cv
247.277 159.158 247.316 159.034 247.316 158.844 cv
247.316 155.915 li
247.316 155.813 247.303 155.736 247.278 155.683 cv
247.252 155.63 247.198 155.604 247.113 155.604 cv
247.058 155.604 246.987 155.62 246.9 155.65 cv
246.812 155.68 246.73 155.712 246.654 155.747 cv
246.654 155.658 li
247.816 155.066 li
247.853 155.066 li
247.862 155.077 247.867 155.084 247.868 155.09 cv
cp
f
240.347 151.599 mo
240.347 150.68 li
234.879 151.599 mo
234.879 150.68 li
228.68 151.599 mo
228.68 150.68 li
221.524 151.599 mo
221.524 150.68 li
202.7 151.599 mo
202.7 150.68 li
189.345 151.599 mo
189.345 150.68 li
133.453 151.599 mo
133.453 150.68 li
127.985 151.599 mo
127.985 150.68 li
121.786 151.599 mo
121.786 150.68 li
114.63 151.599 mo
114.63 150.68 li
95.8071 151.599 mo
95.8071 150.68 li
82.4521 151.599 mo
82.4521 150.68 li
0 0 0 rgb
@
26.5513 148.571 mo
29.4463 148.571 li
@
15.3306 150.56 mo
15.4468 150.22 15.5049 149.729 15.5049 149.086 cv
15.5049 148.574 15.4697 148.166 15.4004 147.86 cv
15.2695 147.291 15.0249 147.006 14.666 147.006 cv
14.3076 147.006 14.062 147.299 13.9292 147.885 cv
13.8594 148.197 13.8247 148.608 13.8247 149.118 cv
13.8247 149.596 13.8604 149.979 13.9321 150.266 cv
14.0669 150.801 14.3203 151.069 14.6914 151.069 cv
15.0015 151.069 15.2148 150.899 15.3306 150.56 cv
cp
15.8115 147.598 mo
16.0244 148.009 16.1313 148.482 16.1313 149.015 cv
16.1313 149.435 16.0659 149.831 15.9351 150.202 cv
15.688 150.9 15.2612 151.25 14.6533 151.25 cv
14.2378 151.25 13.896 151.06 13.6284 150.683 cv
13.3413 150.28 13.1982 149.733 13.1982 149.041 cv
13.1982 148.497 13.2939 148.028 13.4858 147.635 cv
13.7456 147.102 14.144 146.835 14.6821 146.835 cv
15.167 146.835 15.5435 147.089 15.8115 147.598 cv
cp
.137255 .121569 .12549 rgb
f
16.9414 151.159 mo
16.8721 151.088 16.8374 151.003 16.8374 150.904 cv
16.8374 150.805 16.8726 150.72 16.9434 150.651 cv
17.0137 150.582 17.0986 150.546 17.1978 150.546 cv
17.2969 150.546 17.3813 150.582 17.4512 150.651 cv
17.5205 150.72 17.5557 150.805 17.5557 150.904 cv
17.5557 151.003 17.521 151.088 17.4526 151.159 cv
17.3843 151.23 17.2993 151.265 17.1978 151.265 cv
17.0967 151.265 17.0112 151.23 16.9414 151.159 cv
cp
f
19.8306 150.56 mo
19.9468 150.22 20.0049 149.729 20.0049 149.086 cv
20.0049 148.574 19.9697 148.166 19.9004 147.86 cv
19.7695 147.291 19.5249 147.006 19.166 147.006 cv
18.8076 147.006 18.562 147.299 18.4292 147.885 cv
18.3594 148.197 18.3247 148.608 18.3247 149.118 cv
18.3247 149.596 18.3604 149.979 18.4321 150.266 cv
18.5669 150.801 18.8203 151.069 19.1914 151.069 cv
19.5015 151.069 19.7148 150.899 19.8306 150.56 cv
cp
20.3115 147.598 mo
20.5244 148.009 20.6313 148.482 20.6313 149.015 cv
20.6313 149.435 20.5659 149.831 20.4351 150.202 cv
20.188 150.9 19.7612 151.25 19.1533 151.25 cv
18.7378 151.25 18.396 151.06 18.1284 150.683 cv
17.8413 150.28 17.6982 149.733 17.6982 149.041 cv
17.6982 148.497 17.7939 148.028 17.9858 147.635 cv
18.2456 147.102 18.644 146.835 19.1821 146.835 cv
19.667 146.835 20.0435 147.089 20.3115 147.598 cv
cp
f
22.8306 150.56 mo
22.9468 150.22 23.0049 149.729 23.0049 149.086 cv
23.0049 148.574 22.9697 148.166 22.9004 147.86 cv
22.7695 147.291 22.5249 147.006 22.166 147.006 cv
21.8076 147.006 21.562 147.299 21.4292 147.885 cv
21.3594 148.197 21.3247 148.608 21.3247 149.118 cv
21.3247 149.596 21.3604 149.979 21.4321 150.266 cv
21.5669 150.801 21.8203 151.069 22.1914 151.069 cv
22.5015 151.069 22.7148 150.899 22.8306 150.56 cv
cp
23.3115 147.598 mo
23.5244 148.009 23.6313 148.482 23.6313 149.015 cv
23.6313 149.435 23.5659 149.831 23.4351 150.202 cv
23.188 150.9 22.7612 151.25 22.1533 151.25 cv
21.7378 151.25 21.396 151.06 21.1284 150.683 cv
20.8413 150.28 20.6982 149.733 20.6982 149.041 cv
20.6982 148.497 20.7939 148.028 20.9858 147.635 cv
21.2456 147.102 21.644 146.835 22.1821 146.835 cv
22.667 146.835 23.0435 147.089 23.3115 147.598 cv
cp
f
26.5513 116.799 mo
29.4463 116.799 li
26.5513 123.154 mo
28.2881 123.154 li
26.5513 129.508 mo
28.2881 129.508 li
26.5513 135.862 mo
28.2881 135.862 li
26.5513 142.216 mo
28.2881 142.216 li
0 0 0 rgb
@
15.3306 118.787 mo
15.4468 118.447 15.5049 117.956 15.5049 117.313 cv
15.5049 116.8 15.4697 116.392 15.4004 116.086 cv
15.2695 115.517 15.0249 115.233 14.666 115.233 cv
14.3076 115.233 14.062 115.526 13.9292 116.112 cv
13.8594 116.423 13.8247 116.834 13.8247 117.344 cv
13.8247 117.823 13.8604 118.206 13.9321 118.493 cv
14.0669 119.028 14.3203 119.295 14.6914 119.295 cv
15.0015 119.295 15.2148 119.125 15.3306 118.787 cv
cp
15.8115 115.825 mo
16.0244 116.236 16.1313 116.708 16.1313 117.242 cv
16.1313 117.662 16.0659 118.057 15.9351 118.428 cv
15.688 119.126 15.2612 119.476 14.6533 119.476 cv
14.2378 119.476 13.896 119.287 13.6284 118.91 cv
13.3413 118.506 13.1982 117.959 13.1982 117.267 cv
13.1982 116.723 13.2939 116.254 13.4858 115.862 cv
13.7456 115.329 14.144 115.062 14.6821 115.062 cv
15.167 115.062 15.5435 115.316 15.8115 115.825 cv
cp
.137255 .121569 .12549 rgb
f
16.9414 119.385 mo
16.8721 119.315 16.8374 119.23 16.8374 119.13 cv
16.8374 119.032 16.8726 118.947 16.9434 118.877 cv
17.0137 118.808 17.0986 118.773 17.1978 118.773 cv
17.2969 118.773 17.3813 118.808 17.4512 118.877 cv
17.5205 118.947 17.5557 119.032 17.5557 119.13 cv
17.5557 119.23 17.521 119.315 17.4526 119.385 cv
17.3843 119.457 17.2993 119.492 17.1978 119.492 cv
17.0967 119.492 17.0112 119.457 16.9414 119.385 cv
cp
f
19.8306 118.787 mo
19.9468 118.447 20.0049 117.956 20.0049 117.313 cv
20.0049 116.8 19.9697 116.392 19.9004 116.086 cv
19.7695 115.517 19.5249 115.233 19.166 115.233 cv
18.8076 115.233 18.562 115.526 18.4292 116.112 cv
18.3594 116.423 18.3247 116.834 18.3247 117.344 cv
18.3247 117.823 18.3604 118.206 18.4321 118.493 cv
18.5669 119.028 18.8203 119.295 19.1914 119.295 cv
19.5015 119.295 19.7148 119.125 19.8306 118.787 cv
cp
20.3115 115.825 mo
20.5244 116.236 20.6313 116.708 20.6313 117.242 cv
20.6313 117.662 20.5659 118.057 20.4351 118.428 cv
20.188 119.126 19.7612 119.476 19.1533 119.476 cv
18.7378 119.476 18.396 119.287 18.1284 118.91 cv
17.8413 118.506 17.6982 117.959 17.6982 117.267 cv
17.6982 116.723 17.7939 116.254 17.9858 115.862 cv
18.2456 115.329 18.644 115.062 19.1821 115.062 cv
19.667 115.062 20.0435 115.316 20.3115 115.825 cv
cp
f
21.5996 119.041 mo
21.7949 119.176 21.9453 119.245 22.0508 119.245 cv
22.2939 119.245 22.5063 119.137 22.688 118.923 cv
22.8696 118.709 22.9604 118.446 22.9604 118.134 cv
22.9604 117.587 22.6689 117.195 22.0859 116.954 cv
21.7627 116.821 21.4619 116.754 21.1826 116.754 cv
21.1362 116.754 21.1074 116.753 21.0957 116.75 cv
21.084 116.747 21.0698 116.736 21.0532 116.716 cv
21.0571 116.7 21.061 116.685 21.064 116.674 cv
21.0674 116.663 21.0708 116.651 21.0752 116.641 cv
21.7651 115.128 li
23.1221 115.128 li
23.1895 115.128 23.2417 115.117 23.2783 115.093 cv
23.3154 115.07 23.3633 115.027 23.4224 114.963 cv
23.4731 115.008 li
23.229 115.593 li
23.2207 115.613 23.1978 115.625 23.1597 115.629 cv
23.1216 115.635 23.0806 115.637 23.0361 115.637 cv
21.8101 115.637 li
21.5405 116.191 li
21.8872 116.25 22.1406 116.306 22.3008 116.359 cv
22.5649 116.448 22.7856 116.579 22.9629 116.751 cv
23.1152 116.901 23.23 117.07 23.3081 117.256 cv
23.3862 117.443 23.4253 117.64 23.4253 117.849 cv
23.4253 118.316 23.2593 118.705 22.9263 119.017 cv
22.5938 119.329 22.1729 119.485 21.6641 119.485 cv
21.457 119.485 21.2905 119.465 21.1636 119.425 cv
20.9521 119.36 20.8467 119.243 20.8467 119.074 cv
20.8467 119.01 20.8696 118.956 20.915 118.908 cv
20.9604 118.86 21.0308 118.836 21.1255 118.836 cv
21.2461 118.836 21.4038 118.905 21.5996 119.041 cv
cp
f
26.5513 85.0278 mo
29.4463 85.0278 li
26.5513 91.3833 mo
28.2881 91.3833 li
26.5513 97.7368 mo
28.2881 97.7368 li
26.5513 104.091 mo
28.2881 104.091 li
26.5513 110.445 mo
28.2881 110.445 li
0 0 0 rgb
@
15.3306 87.021 mo
15.4468 86.6812 15.5049 86.1899 15.5049 85.5474 cv
15.5049 85.0347 15.4697 84.6265 15.4004 84.3208 cv
15.2695 83.7515 15.0249 83.4673 14.666 83.4673 cv
14.3076 83.4673 14.062 83.7603 13.9292 84.3462 cv
13.8594 84.6577 13.8247 85.0688 13.8247 85.5786 cv
13.8247 86.0571 13.8604 86.4399 13.9321 86.7271 cv
14.0669 87.2622 14.3203 87.5298 14.6914 87.5298 cv
15.0015 87.5298 15.2148 87.3599 15.3306 87.021 cv
cp
15.8115 84.0591 mo
16.0244 84.4702 16.1313 84.9429 16.1313 85.4761 cv
16.1313 85.896 16.0659 86.2915 15.9351 86.6626 cv
15.688 87.3608 15.2612 87.7104 14.6533 87.7104 cv
14.2378 87.7104 13.896 87.521 13.6284 87.144 cv
13.3413 86.7407 13.1982 86.1938 13.1982 85.5015 cv
13.1982 84.9575 13.2939 84.4888 13.4858 84.0962 cv
13.7456 83.563 14.144 83.2964 14.6821 83.2964 cv
15.167 83.2964 15.5435 83.5503 15.8115 84.0591 cv
cp
.137255 .121569 .12549 rgb
f
16.9414 87.6196 mo
16.8721 87.5493 16.8374 87.4644 16.8374 87.3647 cv
16.8374 87.2661 16.8726 87.1812 16.9434 87.1118 cv
17.0137 87.0425 17.0986 87.0073 17.1978 87.0073 cv
17.2969 87.0073 17.3813 87.0425 17.4512 87.1118 cv
17.5205 87.1812 17.5557 87.2661 17.5557 87.3647 cv
17.5557 87.4644 17.521 87.5493 17.4526 87.6196 cv
17.3843 87.6909 17.2993 87.7261 17.1978 87.7261 cv
17.0967 87.7261 17.0112 87.6909 16.9414 87.6196 cv
cp
f
19.5728 83.3267 mo
19.5737 83.3315 19.5742 83.3433 19.5742 83.3628 cv
19.5742 87.1724 li
19.5742 87.3345 19.6177 87.438 19.7046 87.4819 cv
19.7915 87.5269 19.9536 87.5532 20.1914 87.561 cv
20.1914 87.6499 li
18.4038 87.6499 li
18.4038 87.5552 li
18.6587 87.5425 18.8257 87.5073 18.9038 87.4507 cv
18.9814 87.394 19.0205 87.27 19.0205 87.0806 cv
19.0205 84.1509 li
19.0205 84.0493 19.0078 83.9722 18.9829 83.9194 cv
18.9575 83.8667 18.9023 83.8403 18.8184 83.8403 cv
18.7632 83.8403 18.6919 83.856 18.6045 83.8862 cv
18.5171 83.9165 18.4351 83.9487 18.3594 83.9829 cv
18.3594 83.894 li
19.5205 83.3022 li
19.5586 83.3022 li
19.5669 83.313 19.5718 83.3208 19.5728 83.3267 cv
cp
f
22.8306 87.021 mo
22.9468 86.6812 23.0049 86.1899 23.0049 85.5474 cv
23.0049 85.0347 22.9697 84.6265 22.9004 84.3208 cv
22.7695 83.7515 22.5249 83.4673 22.166 83.4673 cv
21.8076 83.4673 21.562 83.7603 21.4292 84.3462 cv
21.3594 84.6577 21.3247 85.0688 21.3247 85.5786 cv
21.3247 86.0571 21.3604 86.4399 21.4321 86.7271 cv
21.5669 87.2622 21.8203 87.5298 22.1914 87.5298 cv
22.5015 87.5298 22.7148 87.3599 22.8306 87.021 cv
cp
23.3115 84.0591 mo
23.5244 84.4702 23.6313 84.9429 23.6313 85.4761 cv
23.6313 85.896 23.5659 86.2915 23.4351 86.6626 cv
23.188 87.3608 22.7612 87.7104 22.1533 87.7104 cv
21.7378 87.7104 21.396 87.521 21.1284 87.144 cv
20.8413 86.7407 20.6982 86.1938 20.6982 85.5015 cv
20.6982 84.9575 20.7939 84.4888 20.9858 84.0962 cv
21.2456 83.563 21.644 83.2964 22.1821 83.2964 cv
22.667 83.2964 23.0435 83.5503 23.3115 84.0591 cv
cp
f
26.5513 53.2573 mo
29.4463 53.2573 li
26.5513 59.6113 mo
28.2881 59.6113 li
26.5513 65.9663 mo
28.2881 65.9663 li
26.5513 72.3203 mo
28.2881 72.3203 li
26.5513 78.6743 mo
28.2881 78.6743 li
0 0 0 rgb
@
15.3306 55.2549 mo
15.4468 54.9155 15.5049 54.4248 15.5049 53.7817 cv
15.5049 53.2695 15.4697 52.8608 15.4004 52.5552 cv
15.2695 51.9858 15.0249 51.7012 14.666 51.7012 cv
14.3076 51.7012 14.062 51.9941 13.9292 52.5801 cv
13.8594 52.8921 13.8247 53.3032 13.8247 53.8135 cv
13.8247 54.292 13.8604 54.6743 13.9321 54.9609 cv
14.0669 55.4966 14.3203 55.7642 14.6914 55.7642 cv
15.0015 55.7642 15.2148 55.5942 15.3306 55.2549 cv
cp
15.8115 52.293 mo
16.0244 52.7046 16.1313 53.1768 16.1313 53.7104 cv
16.1313 54.1304 16.0659 54.5259 15.9351 54.897 cv
15.688 55.5952 15.2612 55.9443 14.6533 55.9443 cv
14.2378 55.9443 13.896 55.7559 13.6284 55.3779 cv
13.3413 54.9751 13.1982 54.4277 13.1982 53.7358 cv
13.1982 53.1919 13.2939 52.7231 13.4858 52.3311 cv
13.7456 51.7974 14.144 51.5308 14.6821 51.5308 cv
15.167 51.5308 15.5435 51.7847 15.8115 52.293 cv
cp
.137255 .121569 .12549 rgb
f
16.9414 55.854 mo
16.8721 55.7837 16.8374 55.6987 16.8374 55.5996 cv
16.8374 55.5005 16.8726 55.416 16.9434 55.3462 cv
17.0137 55.2769 17.0986 55.2422 17.1978 55.2422 cv
17.2969 55.2422 17.3813 55.2769 17.4512 55.3462 cv
17.5205 55.416 17.5557 55.5005 17.5557 55.5996 cv
17.5557 55.6987 17.521 55.7837 17.4526 55.854 cv
17.3843 55.9248 17.2993 55.9604 17.1978 55.9604 cv
17.0967 55.9604 17.0112 55.9248 16.9414 55.854 cv
cp
f
19.5728 51.5605 mo
19.5737 51.5659 19.5742 51.5781 19.5742 51.5972 cv
19.5742 55.4067 li
19.5742 55.5688 19.6177 55.6724 19.7046 55.7168 cv
19.7915 55.7607 19.9536 55.7871 20.1914 55.7959 cv
20.1914 55.8843 li
18.4038 55.8843 li
18.4038 55.7896 li
18.6587 55.7769 18.8257 55.7417 18.9038 55.6851 cv
18.9814 55.6279 19.0205 55.5044 19.0205 55.3149 cv
19.0205 52.3848 li
19.0205 52.2837 19.0078 52.2065 18.9829 52.1538 cv
18.9575 52.1011 18.9023 52.0747 18.8184 52.0747 cv
18.7632 52.0747 18.6919 52.0898 18.6045 52.1206 cv
18.5171 52.1514 18.4351 52.1836 18.3594 52.2173 cv
18.3594 52.1284 li
19.5205 51.5366 li
19.5586 51.5366 li
19.5669 51.5474 19.5718 51.5552 19.5728 51.5605 cv
cp
f
21.5996 55.5093 mo
21.7949 55.6455 21.9453 55.7134 22.0508 55.7134 cv
22.2939 55.7134 22.5063 55.6064 22.688 55.3921 cv
22.8696 55.1782 22.9604 54.915 22.9604 54.603 cv
22.9604 54.0566 22.6689 53.6631 22.0859 53.4229 cv
21.7627 53.2896 21.4619 53.2231 21.1826 53.2231 cv
21.1362 53.2231 21.1074 53.2217 21.0957 53.2188 cv
21.084 53.2153 21.0698 53.2046 21.0532 53.1855 cv
21.0571 53.1685 21.061 53.1543 21.064 53.1426 cv
21.0674 53.1313 21.0708 53.1201 21.0752 53.1094 cv
21.7651 51.5972 li
23.1221 51.5972 li
23.1895 51.5972 23.2417 51.5854 23.2783 51.562 cv
23.3154 51.5391 23.3633 51.4956 23.4224 51.4326 cv
23.4731 51.4766 li
23.229 52.062 li
23.2207 52.0811 23.1978 52.0933 23.1597 52.0986 cv
23.1216 52.104 23.0806 52.1064 23.0361 52.1064 cv
21.8101 52.1064 li
21.5405 52.6602 li
21.8872 52.7192 22.1406 52.7749 22.3008 52.8276 cv
22.5649 52.9165 22.7856 53.0474 22.9629 53.2202 cv
23.1152 53.3701 23.23 53.5381 23.3081 53.7246 cv
23.3862 53.9116 23.4253 54.1094 23.4253 54.3179 cv
23.4253 54.7842 23.2593 55.1733 22.9263 55.4858 cv
22.5938 55.7979 22.1729 55.9541 21.6641 55.9541 cv
21.457 55.9541 21.2905 55.9336 21.1636 55.8936 cv
20.9521 55.8286 20.8467 55.7114 20.8467 55.5425 cv
20.8467 55.4795 20.8696 55.4238 20.915 55.3765 cv
20.9604 55.3291 21.0308 55.3052 21.1255 55.3052 cv
21.2461 55.3052 21.4038 55.373 21.5996 55.5093 cv
cp
f
26.5513 21.4863 mo
29.4463 21.4863 li
26.5513 27.8403 mo
28.2881 27.8403 li
26.5513 34.1943 mo
28.2881 34.1943 li
26.5513 40.5493 mo
28.2881 40.5493 li
26.5513 46.9033 mo
28.2881 46.9033 li
0 0 0 rgb
@
15.3306 23.4814 mo
15.4468 23.1421 15.5049 22.6514 15.5049 22.0083 cv
15.5049 21.4961 15.4697 21.0874 15.4004 20.7817 cv
15.2695 20.2124 15.0249 19.9277 14.666 19.9277 cv
14.3076 19.9277 14.062 20.2207 13.9292 20.8066 cv
13.8594 21.1187 13.8247 21.5298 13.8247 22.04 cv
13.8247 22.5186 13.8604 22.9009 13.9321 23.1875 cv
14.0669 23.7231 14.3203 23.9907 14.6914 23.9907 cv
15.0015 23.9907 15.2148 23.8208 15.3306 23.4814 cv
cp
15.8115 20.5195 mo
16.0244 20.9312 16.1313 21.4033 16.1313 21.937 cv
16.1313 22.3569 16.0659 22.7524 15.9351 23.1235 cv
15.688 23.8218 15.2612 24.1709 14.6533 24.1709 cv
14.2378 24.1709 13.896 23.9824 13.6284 23.6045 cv
13.3413 23.2017 13.1982 22.6543 13.1982 21.9624 cv
13.1982 21.4185 13.2939 20.9497 13.4858 20.5576 cv
13.7456 20.0239 14.144 19.7573 14.6821 19.7573 cv
15.167 19.7573 15.5435 20.0112 15.8115 20.5195 cv
cp
.137255 .121569 .12549 rgb
f
16.9414 24.0806 mo
16.8721 24.0103 16.8374 23.9253 16.8374 23.8262 cv
16.8374 23.7271 16.8726 23.6426 16.9434 23.5728 cv
17.0137 23.5034 17.0986 23.4688 17.1978 23.4688 cv
17.2969 23.4688 17.3813 23.5034 17.4512 23.5728 cv
17.5205 23.6426 17.5557 23.7271 17.5557 23.8262 cv
17.5557 23.9253 17.521 24.0103 17.4526 24.0806 cv
17.3843 24.1514 17.2993 24.187 17.1978 24.187 cv
17.0967 24.187 17.0112 24.1514 16.9414 24.0806 cv
cp
f
17.834 24.0381 mo
18.606 23.2368 19.1304 22.6489 19.4067 22.2739 cv
19.6831 21.8984 19.8213 21.5332 19.8213 21.1768 cv
19.8213 20.8652 19.7368 20.6274 19.5679 20.4639 cv
19.3994 20.3008 19.1978 20.2192 18.9639 20.2192 cv
18.6748 20.2192 18.4404 20.3242 18.2612 20.5352 cv
18.1621 20.6509 18.0674 20.8291 17.9766 21.0693 cv
17.8403 21.041 li
17.9458 20.5562 18.1245 20.2192 18.377 20.0308 cv
18.6289 19.8418 18.8994 19.7476 19.1885 19.7476 cv
19.5449 19.7476 19.8335 19.8599 20.0537 20.0845 cv
20.2739 20.3086 20.3843 20.5835 20.3843 20.9077 cv
20.3843 21.2534 20.2651 21.5864 20.0269 21.9067 cv
19.7881 22.2271 19.27 22.7974 18.4727 23.6172 cv
19.9253 23.6172 li
20.1279 23.6172 20.2705 23.5933 20.3525 23.5444 cv
20.4351 23.4961 20.5278 23.3779 20.6313 23.1904 cv
20.7134 23.2285 li
20.3623 24.1108 li
17.834 24.1108 li
17.834 24.0381 li
cp
f
22.8306 23.4814 mo
22.9468 23.1421 23.0049 22.6514 23.0049 22.0083 cv
23.0049 21.4961 22.9697 21.0874 22.9004 20.7817 cv
22.7695 20.2124 22.5249 19.9277 22.166 19.9277 cv
21.8076 19.9277 21.562 20.2207 21.4292 20.8066 cv
21.3594 21.1187 21.3247 21.5298 21.3247 22.04 cv
21.3247 22.5186 21.3604 22.9009 21.4321 23.1875 cv
21.5669 23.7231 21.8203 23.9907 22.1914 23.9907 cv
22.5015 23.9907 22.7148 23.8208 22.8306 23.4814 cv
cp
23.3115 20.5195 mo
23.5244 20.9312 23.6313 21.4033 23.6313 21.937 cv
23.6313 22.3569 23.5659 22.7524 23.4351 23.1235 cv
23.188 23.8218 22.7612 24.1709 22.1533 24.1709 cv
21.7378 24.1709 21.396 23.9824 21.1284 23.6045 cv
20.8413 23.2017 20.6982 22.6543 20.6982 21.9624 cv
20.6982 21.4185 20.7939 20.9497 20.9858 20.5576 cv
21.2456 20.0239 21.644 19.7573 22.1821 19.7573 cv
22.667 19.7573 23.0435 20.0112 23.3115 20.5195 cv
cp
f
245.238 .200195 mo
245.238 3.09521 li
213.06 .200195 mo
213.06 3.09521 li
170.522 .200195 mo
170.522 3.09521 li
138.344 .200195 mo
138.344 3.09521 li
106.166 .200195 mo
106.166 3.09521 li
63.6289 .200195 mo
63.6289 3.09521 li
31.4502 .200195 mo
31.4502 3.09521 li
26.5513 2.42334 mo
28.2881 2.42334 li
26.5513 8.77832 mo
28.2881 8.77832 li
26.5513 15.1323 mo
28.2881 15.1323 li
0 0 0 rgb
@
240.347 .200195 mo
240.347 1.11914 li
234.879 .200195 mo
234.879 1.11914 li
228.68 .200195 mo
228.68 1.11914 li
221.524 .200195 mo
221.524 1.11914 li
202.7 .200195 mo
202.7 1.11914 li
189.345 .200195 mo
189.345 1.11914 li
133.453 .200195 mo
133.453 1.11914 li
127.985 .200195 mo
127.985 1.11914 li
121.786 .200195 mo
121.786 1.11914 li
114.63 .200195 mo
114.63 1.11914 li
95.8071 .200195 mo
95.8071 1.11914 li
82.4521 .200195 mo
82.4521 1.11914 li
@
271.519 2.42334 mo
269.782 2.42334 li
271.519 8.77832 mo
269.782 8.77832 li
271.519 15.1323 mo
269.782 15.1323 li
271.519 21.4863 mo
268.625 21.4863 li
271.519 27.8403 mo
269.782 27.8403 li
271.519 34.1943 mo
269.782 34.1943 li
271.519 40.5493 mo
269.782 40.5493 li
271.519 46.9033 mo
269.782 46.9033 li
271.519 53.2573 mo
268.625 53.2573 li
271.519 59.6113 mo
269.782 59.6113 li
271.519 65.9663 mo
269.782 65.9663 li
271.519 72.3203 mo
269.782 72.3203 li
271.519 78.6743 mo
269.782 78.6743 li
271.519 85.0278 mo
268.625 85.0278 li
271.519 91.3833 mo
269.782 91.3833 li
271.519 97.7368 mo
269.782 97.7368 li
271.519 104.091 mo
269.782 104.091 li
271.519 110.445 mo
269.782 110.445 li
271.519 116.799 mo
268.625 116.799 li
271.519 123.154 mo
269.782 123.154 li
271.519 129.508 mo
269.782 129.508 li
271.519 135.862 mo
269.782 135.862 li
271.519 142.216 mo
269.782 142.216 li
271.519 148.571 mo
268.625 148.571 li
@
4.73438 96.7856 mo
1.53223 94.8745 li
4.73438 94.564 li
4.73438 96.7856 li
cp
6.16357 97.9507 mo
6.81494 98.3384 6.95068 98.7163 6.97949 99.1431 cv
6.98975 99.2603 6.98975 99.3472 7.17139 99.3472 cv
7.229 99.3472 7.27734 99.2983 7.27734 99.2212 cv
7.27734 98.9595 7.24805 98.6587 7.24805 98.3872 cv
7.24805 98.0659 7.27734 97.7271 7.27734 97.4155 cv
7.27734 97.3579 7.27734 97.2319 7.09424 97.2319 cv
6.98975 97.2319 6.97949 97.3188 6.97949 97.3872 cv
6.95947 97.6108 6.88184 97.8433 6.63916 97.8433 cv
6.52197 97.8433 6.41504 97.7856 6.27832 97.7075 cv
5.03174 96.9702 li
5.03174 94.5347 li
5.23535 94.5161 6.56104 94.3794 6.65771 94.3794 cv
6.94971 94.3794 6.97949 94.8833 6.97949 95.0786 cv
6.97949 95.2144 6.97949 95.311 7.17139 95.311 cv
7.27734 95.311 7.27734 95.1938 7.27734 95.1753 cv
7.27734 94.7759 7.24805 94.3599 7.24805 93.9624 cv
7.24805 93.7192 7.27734 93.1079 7.27734 92.8647 cv
7.27734 92.8071 7.27734 92.6899 7.08447 92.6899 cv
6.97852 92.6899 6.97852 92.7886 6.97852 92.9146 cv
6.97852 93.5151 6.91064 93.5151 6.62891 93.5444 cv
.556641 94.1372 li
.362793 94.1558 .32373 94.1558 .32373 94.3208 cv
.32373 94.4751 .39209 94.5142 .48877 94.5728 cv
6.16357 97.9507 li
cp
f
9.61475 89.1978 mo
9.58594 89.1978 9.56689 89.1978 9.40234 89.3638 cv
8.17822 90.5815 6.34277 90.894 4.85693 90.894 cv
3.16748 90.894 1.47754 90.5239 .263672 89.3247 cv
.147949 89.1978 .12793 89.1978 .0991211 89.1978 cv
.03125 89.1978 0 89.2368 0 89.2954 cv
0 89.3921 .662598 90.271 1.89551 90.8472 cv
2.96338 91.3462 4.0415 91.4634 4.85791 91.4634 cv
5.61523 91.4634 6.79053 91.355 7.8877 90.8179 cv
9.08154 90.2319 9.71289 89.3921 9.71289 89.2944 cv
9.71289 89.2368 9.68408 89.1978 9.61621 89.1978 cv
9.61475 89.1978 li
cp
f
3.19189 84.9849 mo
3.23193 84.2485 3.67725 83.6978 4.52832 83.6978 cv
5.66992 83.6978 7.05322 84.5298 7.16895 85.9819 cv
3.19189 84.9849 li
cp
7.16895 86.2329 mo
7.14014 86.814 6.80176 87.5122 5.8335 87.5122 cv
4.67334 87.5122 3.31885 86.6782 3.19189 85.2349 cv
7.16895 86.2329 li
cp
.773926 84.3892 mo
.754883 84.3892 .647949 84.3599 .638184 84.3599 cv
.62793 84.3599 .541016 84.3599 .541016 84.4761 cv
.541016 84.5728 .570313 84.5825 .734863 84.6196 cv
2.97559 85.1802 li
3.0249 86.7163 4.31885 88.1343 5.64111 88.1343 cv
6.56543 88.1343 7.33398 87.4585 7.40186 86.2808 cv
7.70361 86.3589 8.01465 86.4253 8.31641 86.5034 cv
8.77393 86.6196 9.14355 86.7163 9.17285 86.7163 cv
9.26953 86.7163 9.27979 86.6479 9.27979 86.5991 cv
9.27979 86.5513 9.26953 86.5308 9.24072 86.5024 cv
9.2207 86.4829 8.98779 86.4253 8.85107 86.396 cv
7.40186 86.0298 li
7.35303 84.4751 6.04102 83.0747 4.73682 83.0747 cv
3.96826 83.0747 3.07373 83.5874 2.97559 84.9292 cv
.773926 84.3892 li
cp
f
5.97852 73.4912 mo
5.97852 73.3555 5.97852 73.1704 5.78906 73.1704 cv
5.60107 73.1704 5.60107 73.3555 5.60107 73.5015 cv
5.60107 79.2827 li
5.60107 79.4277 5.60107 79.6113 5.78906 79.6113 cv
5.97852 79.6113 5.97852 79.4277 5.97852 79.293 cv
5.97852 73.4912 li
cp
4.11182 73.5015 mo
4.11182 73.3555 4.11182 73.1704 3.92236 73.1704 cv
3.73291 73.1704 3.73291 73.3555 3.73291 73.4912 cv
3.73291 79.292 li
3.73291 79.4277 3.73291 79.6113 3.92236 79.6113 cv
4.11182 79.6113 4.11182 79.4277 4.11182 79.2827 cv
4.11182 73.5015 li
cp
f
3.65186 67.3545 mo
3.65186 66.2573 li
5.09082 66.5894 5.50977 66.6797 6.16016 66.6797 cv
6.30615 66.6797 6.56885 66.6797 6.89941 66.6006 cv
7.32715 66.5015 7.38525 66.3936 7.38525 66.2451 cv
7.38525 66.0483 7.21045 65.8408 7.01563 65.8408 cv
6.95752 65.8408 6.9375 65.8408 6.80176 65.9009 cv
6.10205 66.1919 5.4707 66.1919 5.19775 66.1919 cv
4.68311 66.1919 4.15771 66.124 3.65186 66.0156 cv
3.65186 64.9033 li
3.65186 64.7749 3.65186 64.4243 3.31885 64.4243 cv
3.08398 64.4243 3.08398 64.627 3.08398 64.812 cv
3.08398 68.063 li
3.08398 68.2754 3.08398 68.6455 3.54248 69.0718 cv
3.9248 69.4116 4.37451 69.6636 4.42383 69.6636 cv
4.43262 69.6636 4.52051 69.6636 4.52051 69.5474 cv
4.52051 69.4697 4.48291 69.4507 4.40381 69.3916 cv
3.65186 68.917 3.65186 68.3535 3.65186 68.1597 cv
3.65186 67.6064 li
4.82813 67.917 6.00391 68.4404 6.88965 68.8481 cv
7.03564 68.9263 7.0542 68.9263 7.12207 68.9263 cv
7.30713 68.9263 7.38525 68.771 7.38525 68.6455 cv
7.38525 68.3535 7.1123 68.2754 6.75342 68.1597 cv
6.30615 68.0239 6.28711 68.0239 5.80029 67.8979 cv
3.65186 67.3545 li
cp
f
.370605 59.7744 mo
.244629 59.7266 .206055 59.7266 .195801 59.7266 cv
.0888672 59.7266 0 59.8135 0 59.9204 cv
0 59.9868 .03125 60.0552 .0888672 60.084 cv
9.34326 63.4399 li
9.47021 63.4878 9.50928 63.4878 9.51807 63.4878 cv
9.625 63.4878 9.71289 63.4009 9.71289 63.2949 cv
9.71289 63.1689 9.64502 63.1401 9.47998 63.082 cv
.370605 59.7744 li
cp
f
6.51953 57.9521 mo
5.52197 56.9243 li
4.18408 55.4106 3.66064 54.8281 2.69189 54.8281 cv
1.58691 54.8281 .811523 55.7012 .811523 56.8843 cv
.811523 57.981 1.7041 58.6982 2.56836 58.6982 cv
3.11182 58.6982 3.11182 58.2095 3.11182 58.1792 cv
3.11182 58.0122 2.99365 57.6704 2.59277 57.6704 cv
2.3374 57.6704 2.08252 57.8477 2.08252 58.1929 cv
2.08252 58.272 2.08252 58.292 2.08252 58.3218 cv
1.4624 58.0991 1.10938 57.5767 1.10938 57.0166 cv
1.10938 56.1377 1.89648 55.7212 2.69287 55.7212 cv
3.47021 55.7212 4.23779 56.2061 4.84033 56.7373 cv
6.91846 58.5928 li
7.02539 58.6982 7.04443 58.6982 7.27734 58.6982 cv
7.27734 55.1001 li
5.58984 54.8281 li
5.58984 55.0723 li
5.87695 55.1211 6.29932 55.189 6.44287 55.2856 cv
6.51953 55.354 6.51953 55.9941 6.51953 56.207 cv
6.51953 57.9521 li
cp
f
4.85693 51.5278 mo
4.09961 51.5278 2.9248 51.6362 1.82764 52.1719 cv
.633789 52.7563 0 53.5942 0 53.6909 cv
0 53.75 .0410156 53.7891 .0991211 53.7891 cv
.12793 53.7891 .147949 53.7891 .321777 53.604 cv
1.28418 52.6509 2.82764 52.0972 4.85693 52.0972 cv
6.51758 52.0972 8.22705 52.457 9.4502 53.6631 cv
9.56689 53.7891 9.58594 53.7891 9.61475 53.7891 cv
9.67383 53.7891 9.71289 53.75 9.71289 53.6909 cv
9.71289 53.5942 9.05225 52.7178 7.81836 52.1431 cv
6.75049 51.646 5.67334 51.5278 4.85693 51.5278 cv
4.85693 51.5278 li
cp
f
233.093 161.682 mo
233.158 161.455 233.196 161.29 233.196 160.947 cv
233.196 160.122 232.688 159.588 231.735 159.588 cv
230.731 159.588 230.071 160.258 229.766 160.709 cv
229.703 159.975 229.169 159.588 228.599 159.588 cv
228.014 159.588 227.773 160.087 227.659 160.318 cv
227.43 160.753 227.265 161.52 227.265 161.558 cv
227.265 161.686 227.392 161.686 227.417 161.686 cv
227.544 161.686 227.557 161.674 227.633 161.393 cv
227.849 160.485 228.103 159.871 228.56 159.871 cv
228.776 159.871 228.954 159.974 228.954 160.457 cv
228.954 160.725 228.916 160.864 228.75 161.525 cv
228.014 164.464 li
227.975 164.655 227.899 164.948 227.899 165.011 cv
227.899 165.241 228.077 165.355 228.268 165.355 cv
228.42 165.355 228.649 165.252 228.738 164.999 cv
228.75 164.972 228.903 164.375 228.979 164.057 cv
229.258 162.912 li
229.334 162.632 229.411 162.352 229.474 162.06 cv
229.5 161.984 229.601 161.564 229.614 161.488 cv
229.652 161.374 230.046 160.661 230.477 160.318 cv
230.756 160.114 231.15 159.871 231.696 159.871 cv
232.242 159.871 232.381 160.304 232.381 160.761 cv
232.381 160.824 232.381 161.052 232.254 161.56 cv
230.806 167.394 li
230.768 167.546 230.768 167.572 230.768 167.597 cv
230.768 167.787 230.909 167.939 231.125 167.939 cv
231.517 167.939 231.607 167.572 231.645 167.431 cv
233.093 161.682 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (Asymmetry_xi_nice.eps)%%CreationDate: 26/02/13 11:57%%Canvassize: 16383%AI9_DataStream%Gb!$l=`\/`OY6KZ,PWASM]tdf*cEXSJGc4ZG3dp]9;.N\ID_tXJjjRBf]!U7/D9;qIrb`*CMgB"k=CVN[:Ji<!XhpREWYaX8"\\P%]=kkgIJ`irh`or-luulP],8sKQ?r8P8,mW&h;Md:Z`g>d,i$#cJ25&k.b-hIZ?O#P./2iZ`OhVWmGk[r]8OSE_\[OKGK5J7G@18g%I_5LRr%7j.I/!X]Y-7<n[ep"!r8K)&jOLm>qs1<#-%,LUh%<8/]"<`$*Y+7CcS"\C**utoIQh$6f:RJVG&Hbm$^CU><[@=NYAW8c%5aHsPS0\!sqYK$cj73';mO6VVVRq*J&K9s/bH@H3lbeeH3''l'Kc1`.!@iHpa/eOD+7G4KkE!6^-S05Krqlc`K!E+`)?/ppiqhKm%iEI.U_^.2;!WPu&e'G3-O,m+%N.ZbdJ+okem@\p>>Nh[qJ,Sg)p51nPFa*^)*s3h]S3Qf6E.?.m<!B\F5;-tX^-)=4rpKWF>I#2I%nDiQL46l&hpBWlXTa[Q5oZn`]n8GIQ5l^YN_uCfhgRmtJ=DYT?TDA380C]^Is.5Q_9^l+:o^7S4?XP*ur4YDNgg?[<*b^+Z-1B;8%["SH"578c2$;l*H"*>tlUarS;hoE;kr-WY^gS_Z53LjFtN]a)/*?SWor>/.5FrlNc7_a:oI5q6%p?E5ZM4hk`rq5+/iL8n&b5Ur-%*%0-o"T=Yn^-=ir4Zq_u^OCrJropR<nu$tcGOtD'Qc&>ZC2:#f\NekuJ+mm26J$B0<u=P2Tg*FO0TMRA&I'pI1K.0nQH$46Bn8;>%()GU_a/c[N\"?9Vb3M84Y:dlT.t1Rq5LetH2?,T5Q^\4CI=+048opPQrPdB`Sn6T)r<g:6LYL!*mV[!J@Bk=S3NV(A=P25LDu">M%BDMuMIs95@Vr(k]lQ&f/h-upfs%7d?YJ7c"#ClU!na>63=1:ELS\60FgjOZ7^AtRq2fJ]eDug@DK`L/2=7<:5&,Yt!qi@AO#eG.@%m.cW<R"!TcI=Gth2NS-<32:u5"^uRuDlW3Gq<d;3hp7AXn#mW4a6i\B7sM65jjh]HQZF"=;>7jiT[NGP+$hk.DD*)XSc%eY+(OcC%n'qRoMW=-rj1C'gGMh<6?2&*s5P<_6-5>_EH[OjX.WG:0/J$5%91#l^&kIQQG$b:8VnW4]r9mnf(['E%=)X/_pHMtiSGL$X^\9DO%hu8aloukUL]BcMQS$AOno'Q8Cn`o-1nEQ?qa2?/C[GbfsE-2Omb)V/#B^OX#4fVYs=$N;6+/mK*+9+lrYBkoe2$cZ%qL81Nk@NX;%>bLUoE2S'\jVlX1:]B8+]>*1M0=t$+?MmfFLB%$npW:1Ah]-h>j6Vt2=0VQCP[rHqF11EOpqHh+`7$s?5CY\K!oH:pOqujOpURY9%"9#HKmr;-+>`Q+*roLJmTaq"^(\m*A_@QYQd,0"dp\!sXs0:oC!WC2cB2ncifdA<OIt+p("I]i#9:^`5)-qXY3.6.&%D16N$pXUU%Rh'E'=s]q\pb2Yi[SbSh]f>o_oA0oSg-7>g0;1Eg3La=f_:'Eil;[ZVo)/%Um%`1)kjL4-ptO=&2Yd4FbK8Z%mZXi)oYnf*p$lNo%(E^>6]2(Tqmb5@!\A*B$#kSA!]"Gf31UJR\3H3FS\iG98M4p#TT6tiB#OMHfnrg98UDgcAm+p^Xm^mPu]H\h;WsYM8]6dqaj6kmk%k1qnSG]+QZ"=\kLhqXbE06\52\FJH8h>Q\b4QdgF]<;^rs)S)EiraEDNaI515_#&^V^Z!0?(>7HcWF@DnGW0PlN;T9)OLW./T%:Y%`>@^H5G(0Ql90Rcf<5^O=7:$M6ZYZPI.__PPm7XW\*ML6>1?<S1DgePEm]i^7S.GLmX[`""[@G/eK<[S?Y^DV"puU/&W\\>-1r%b%AbSQqq+1,I]:VCJ!n6/R3@H9lLXiD,'tJ\cG^X^]fE#L;rH+-dOAcMNadE3ZH?9%&46OuR9C;<c$k&F,5^4Crp0$CIDXT3,JqiXK%Z78<19oCVeCr+^.fLU+pZ+2]GSkC=NI=8]S*bmnZ5*YbcOOYD<W?'m/Hb>,g52QukC'Js)qZ%u"iV)7IBYi4FY_90RpU4N>o6Y,g%FRHiL]lQt$ML/U%7o3CXIQeb?;.cq!`"T38naQ:nkGu>,^:K)Si84-NBZODbF13G81C5tuH`1uZLWca=o/Bb&=-(+tLNq!V0@+Ro%^&u8fp[-eM/uRUe,[T7H0+XCR3<Pc9h;e-?B<2'M\$'u4X9QO"f'bjFINp*,b4<sN'\2r+SDM_V72k_'N8O0jc+D$6_^GJ0pLXq7%M>T4=eMRpr(j%C-)U`1a#D33'o^."*HhcjjrXF[JT0@_4Bjei2\2n">NZZh9?(__sCT%l7`r<]U(K<BnkM7*,pi],uO.#&HG\0Cf%<,^p?d(DF>q=$7Xp/eJI5F\/0m-](E2gAtZF\=7amc!I$KD,mklna".Ac[@3N:hlYep!Fblu#+b/A47C2r5lFT=,%VG+&2&a7IJ)%j=[fu=UqXrh'=5Ucq>?E1cDQLZ1,?OLMWYD*?R6F9`4N*ChZ[cX;rf<qr#;"npbbg\CCD2l[M8sgts4J([iCdmr"_/6_q8'rDiQe%QF(dM]"_NV55rW&2>X5LIQUlKrD>%k!NImHluMj_Qee"KX.N63S7HLgGh_D(3E>gmWX2H7fbU(r(F#T%q0hgGC=9P^lf8!,mdf%#%+#!A4a1(qYgFP0Gb:G5@;E]O[HdK@\9DA$6/LR:il\f,A?5ZFXEVo7\8-7$\m)hf4gTIci2a?[Ocl.3@%B,/aQTRi\EP/o5]#d1l%541)-V^XVtoC21-p<'$(d_hZ.*RD+S@K5Hs=n,XXgV[7B%tB&2h[crRh`foQ5#67eE;MVEgrPNk*JQrla2=!`-`KoY]0/9X"eMRe%qu(t\4Ii-3?1-s3"2Wgl`SGkH*hMUW&R<'IT`&>"mWm(]%0FQ.h<i1&!e?*PDf=0^IYR-9;YK+i#`9FJhS7e5rr)<j2C_P^/pI?]%`N+Lgk1fq/na:&i7#.H5rUK<2/*3I'WtoA6f/UR\3aTg?FL"e@+V1rX9KVO:iePQih',C\;6B8.X[k$S@h,(R]t_LJ\\A%#-JVtB%Y>1[K:?^tA>LaJ.q1.(HGl08<7hn4ePijKV@gB$WBh%HrDse\Did#/!]DLQBLVr0LaF7BVS^b8)%hD`[DpPlslU_9Y%6@$%T!+7^%blW<Zmel%ge`4pM1SOtCRHD"WK:^eP6&^D=nVAg$B:=^B>qLPY&b+uX[_!caEp)oe4:qJlP46N(j+#2AG_1f(!*e%gaoJg<qY^?k%8qYJRZdI7!H+69Zf<];2Rk+$RR)EW.@=fQ(*rBdBrFr)?8V(eWc(6f%dg\`-oErgOpQ-DT+8:3[!dZucS0&iE)9SY#!:Lb=n,^I5%+FF1VEDfEd7r<rHIZjWkr:naYh!,Cmm]HHg>1;aITXLsdBl-OlI.qUTo'YLYr:Lr!AYnhopqtqTF0&*9e.'QYLZb!-W(Dcb=U-.1%lBM!^>`0]0peF]#r=D8K.ML")a\VU=*IDATUW?.,I<)Z&I7F_1LPMeB9Ss$9hC`\pGtpC1_Rmi1<@+$'0qTo*EQA!+CV#Pacl<>-%FG+c<!p*1I3Kk#,s"/*NI,4U_i0T,\b;X&eLj%rFhS$QbU[Z(Z.^h#ZN7S*OL,oH3H[W?h5*KY_>EY&-i_;Uk85V8%1.Trj0CXUT%AP&8QiC!4(]<fhQn<l5oZ[eeAlePp7IITD6YB=JeBeAbjdP/Qh^aGJY])f#$9*bt\%n1p$?(^p=mph'GnEkYDCbir_^4jPp@]oUZ%4CKjPU)9->AKOO>ZJOtIb=IunV)"U^q?k`=j5*(1_ufSbH"]kEq]'u+/FP*r"#.2k.RDJNh#d0[;qn2aWG&B[N<2OIh(S7&`00#u%SDb,1mh</IrgIm4,XE.O&c@"^8/1b8)Fmoa_r0P[T`6k\<[.I/nH7-/T;Wp0m7Y<9MJ\uP((mSR)?Oc5fV4J,+UpB6#2b5Jmp)R_%)@T%B!2Y*:_#Y5c\+^_(NA9j:nr1C=AbngI=7>Xb_)W?UR.gjg;):'i32ejV5hNA=;%MIn@!]ctohn(_p8okLO9GiATFggj@U:0B%MkdGlB^BfYq?)[pV/?J34S62t#)sffk]MCg#e:SI\eKF0+9p!kTo9^fXtBK8A?ZQ:0odq/hZ1j"31MO5#`LKJ)2_==Ta-Q<<S]jS%0N(,DF;`9+Y_`dcYQ\c[K42h]deN[/M6=[PXJO9#/==t4I23V09:b4=%1JP!b<VC6XCYSPd=j`j,1;XQR<fGcYXq:7JYhE%]@"N:%Jn6R`cOf`\<.JA:Eh[Q""cOLhV0_4kOC@6[W4B`RX;G\YC<P9D?c,:JBXBh1*B9U"iLP+rZOt-0A_k_g^6BThlQWdEV-;FZYVrIj%L35k;=TRrqXG[q$K]1]_iEIokbINE06+39k@h.NuS7Q!EiY$iS?,W&GFNV0S\(-1CGSd(?KMdGK&W;X,.e=:mSCO$ol(YN.9D*j@%27uRh9f6,2`R_k]#K+.Zjlj&4>oE]Lpr^/RJQ/7D(Pf<s[oh5#W@3eM.duA]<?Sa*$d4guafo]6[?,-<Q@2-D0Gglop'hJMA$Fb#%^j8X2:YZ=_iCfQkGC_ue1pcWP*9E#k#627<Ud:RI(Us^IH/`15CbY]As*FH@Cgl=1+81Dak[7a7Lg4W6)!i2L\beF-Ds3\8i*MX6%4TC%\6+GF/-fu]u7gre8(WI_aXEo$_J%pWlo2!HG]>'nFP&r+^W.!C;DAeNH@=DW1r4oPh(,_<g7]Z@MB?H7kN:0H)>P.&GMl>$Q%`hXLt2G>>"<^B:*<4t>>a8NrPTA3$ch'89Iq1hc[/C4R@5ERk`66Y_%(8jfn&>+Ibs)NQ88NcJ_i$P)c3t=cjd'mF#Ob[B=@C&Ne%"B%Vt"seNH%,sN-eQR,4B+kIV80t9<=s=(pW[B&[=M+Y^)\[S.S6HtCb6!SAa#Y%#F&2ms#ct`u&1@cgS.htI6\U,mAO7ki!>1J:%%]/)Mbs^NWW0pI'j?3Rt\OruGASEqeHOCX"%*)`V.7t=,-k^Kh8g^2hfU["5I>2'K,@,&UYR5bN9hG`5;5>bR7daN6U$p&+/[n]G%'bqBJ78@H+T"9id+(/QmUr!;FLq4FB*-bK8]L;12%@J_g2+bPmSWO8@1k[UIAH8]%<40T9+Asn3L(ME(#$KNQ(jq#VQXNN0,%sU.%%Q#"]l?C)/;M<)kGipXn0L/3'"W^tr?k*?gch2;O`Ua^2R7mT=%KY3(RR*Tj"ZIMPVASZFRAj$2i]&e;X*bCI*_-^M=N\Uo,f2er%E2.ZMa0c_nGE+*HpBqQVBqi\_7ToMK(]HO:32I`EM!\V[@Ije^CFGha&[T>X6YT-"_R?is"IB8lA3UKq'"dho@+E*OE=J<J7k93U%PBdSXgu)WakF%TC;$Naec3odBIgC9E%"ug?*ZA[kdY%XJ9f9tsrZ5`lX&cX`r7l<]Zj?\HH4H4A#,e1Ff8!1kfSTs$Jms?Nm0/&(%c?;nn/sk?+Ah"GE;bb`"ab9Y]&fgplH'[u2`F&WCf+dVVFb$Q1ZUg.(OQ;U!:S;:o@V*+p<i-g0A3/4>9<^/lNM@J+R3(&\)DW<E%ck3UHet=n:H74tN7nkJT'FL+<;)DfE+OJY"$2'%aJ1j9g"5k/9"Y/"RU-cP'?)V7%/qkIu;3f2:=J64,cGdkHB_DMP2:<D)]S&,`%F;TV+eqklnW5`S+qKh_D:kufY$".=*.LBd+%[i=lJl6,i\j]SqGHAu0XJn3mA3(pkeOc_"*4D[]TaompO_Rd6NO)e]S:iq2?MYp8%*YqV/7],3&V^5+o*O&G.3b18Q0fpW/4(;a3`E9!97BRJq:7ho.P3LJp)N7A1G"5Vg`5YqKViq_X3!.qU\W;@WZ8Y[04`bD4?;C!*%g$ie5n7t2'YB@adA](_5"M^63^Qo>DjqIZ]2uK+&r0gCMCKg=Fg@/l=_67RjYA)7bklebu28A8_^ZH4-=uQ:^2Z1.X]YUd_bHGKp%Y@YVTjTN>a%DS2<^QoQ2=uQ;I2uK+?n7uA%CYJ8n3l/"6c*(j!YNZ2)V@C;;%DSbRr0fPARb.J+\,;]Hr)u#V>+XnYd"km?eK!pg%RT[Rl@`2i6:u;;)-+ZFYP.Wan&9\)#\pHGI9*"Y%UI-/[=jpbQ'B4BT<O-pe,%BC4@CuU*$mMC$nkgDa!>/K?KIiff\W.C0KDgtO%8G/rEM,gpg\?--A.>Y5YLL-r(#ci;+X'2[:kbR+sCa+h)$6Z!&M/jD6Lr\"$.7Y412gW&Ac<+Hp&,hrVq)uND0sV)B`gDA-"f'#t%:cr_b,>4'XA!G7i#2s$!%_7u71deE./X:*TI$Ue[=2C'1KdJCMT#>h!,o[FY9o>OZlBjM==]Hp$Z%rK.$\UU#@L:W!?t><HFtFPW%)%fNEapJPdBL\0Ula?YTIS-jVorpse_g!5XkJCWAWTV-n8'^pH[nXdr(@9d&+s<N<fJWsi[`o,RD3J_WAaGikU`aJ&]-^u.4][!_%7.4s:5)fFO&SScG;II%hI>EVm@<ZGC2%]jDQ0bX[c'Oib>n_e;RVj2ikpJlBc%5,^M$VrbTUR9WCoO]UA^a$U9II/^,!n1]h[c]-%(bRMS-=S:QM$gV+i4?1/DWac=9e=QgfWf:>>-4W\D3J^><*>$"!bBdHORAN9:!r>7pImmhQgC;81K\0t,IrV$p;T`k^!=UM/JH1%%/[\\1=P-b>+A65jTg1P`-;?V5ARs+4^l.>FHfdT5SiL5dB6$EnN]iRj(VJQ[\P[KcRFH-CFOuW"2/iF/1]WGbBT,4D)dDHJg?(O3%[Kb(ZrT(LS/=,4KED?eMLt$r6#jlWo=*=U8-$d!,pernNB*)Nr2J'B<#\gCL[fdnOeS:WkLt*h&Y>_hY/1<AE<4Vu*]nhheC)%j?%(YeM3BG(6OpDkdSe+hk!6F#AMDGZ5.jZpnm`8R"9?0fcD*e7.$.SuGJ>gkfN^V0@C[u[D\J_!&g'YNa"`HnAg%4YNtlPSe'#`=.1%Go@),M3X_XQ0Oc<18ssteMA[_(Y"&R;SD#NLim@WgN@$NZ#W/YEZ>@N9-@nIW\[Y.$<4#1T"rd.3_#E[ik(caMj.;-mnu;12^>+'%F#gF%4g;jj,@3hGI9[&R0%NtOF]MMDA'>.HmCQ=nZnbMW<iMZY:1`2t-E>;'jS^6fh0/(<<!SteMh_j49h8Qgo4gW+9S@^ee*e#?%*4I,m9_YJ(@kCu`qoYa5Qg'(N7[h(Ee!IjLg<tj%/F%;CkuEB_RZ]/LQ--(":G"?-FIBl8+`8dYJK8u)>8QQQ_?YZZ*Q,`l:,.f=%LMKe]mZMrmA\'NhRd!5;0+B^HYh`T^UEr:@lTuU(*Yc(cN/!2.3\L?K$\+VS[8_'K?4G)H=2V?+eW(JQ[2AE`<]'>]=AJ@#g[Jt4%n7k,&X*)=\A^.:;"L"+#YEfX$Q4po72S<5E]NS)"C0C.Ch=,/B_5hFjX)5bTl_ti9g:"ZJ2S@aE]\9g,g=Epj2S@a=n7p_IC0U:E%4i+1A_lIptX7ZV!Q4:$`%Bl'2]NR5+>1U>i:[i+)o4m+NC-BD6D8WDk_lN0-?4@b$eOTfo)<+Z?OXRl\;ea=@YgB%919iNF!EEY:%O<pKlJ6#HVc>8MTU6jLOR0++s$AZTn_+Y#+aC_`Y\0(ck=`!Yj>aBDt5=O$,g&eaGR>FgM$6b8^H%K:?hb&nbeKX.(D"N/:4c(D0%['EgCPoP#hdE2rp0h\jhU*>8n@&%ia=W\0=Zm4O"O>^L1'3u<u)J-!HjZYc\-E+:B:_`o\CWjW4=@:o1qR9RbMM>NE\o?^a;o6mh%`el`*>/GCj#bD[lNs2HC.f"nAH%E]+J8Xj%UOj-3+CsQs,3W,qLBH)F?<4=9l$FE-KS9KN?-7`RAOuo#Y#/P@EK#uZ6k`QGC@>@+%?Le_l,jZgc>s]4E^%"jVB$Y8!,mbgmi^auCJ/a>aMJG2JR(ss7DbBUe`04PpQrf1L-ZR=/99U^0/5b<1^hCJfE>i<<-b/X,5NHJA%.9+=519fZec]TNYCRP)O)-)]aNLp@c)W'Fcl%nl9=H*20Lb.Q`AOd+N+Hu`aBRr'@9PYQ,(-pkgP<XFa,:B;/d/k/_h,l.(,1P#'%4o-]"jCeQF<bEC(=[c>7Zrf^:/KO/;(9E=df]m1e6sADi`R0:(4P"$`/^R&ZGRe?2Jc2X8j`?YC]g3Cd5;F31S&t!N4:WJ[Y8Ki'%<dUN%>-Q"[;FE(/NY[>[UErk.[i%[D<ZIIZd6]W;?<VNZ@.I\`#pRl79Pq1tQAh5AV9W$]f?&!=i$@JD4'H$V>8*!S*%_G8/4U^4%*ANQiMm9#\.pjRpK,lP"'H\Yl$T4q$7glae0?2CkSI6bbKSRKCU0smUP!,IeQHcM5G57[&96IS5"Yn<O:d5#c==_Ae=U%cX:\@fZ%<cBA(GVnV_&s?,,8&fLUW5^n#L_&(;Jk-0uVo%P)-o4`k0$P---FkGbF.(QRe#;&"SK"_f(?&VIf<Gs$h(81IM&N@_Kc1Z-Rt]SO%P&[.RSddUdofq&rb4W,!X_FB6ItF.9UQm-W!>d5(-s;7M@>7$q=+knh,b,SmT/(Q9+J?5+VHLi4CS2d^P#S6@:=&#'MtFm.\/rsI%W(9]5'gfQjF@*2Ob`[j*Tdo>qQf1<MX%4TS)G`b"Oe03ZF&`NAr&Z&*LP!]LQ0D_>("H9\Q\$PO0&8hposI@IK*q:'H,tf+.f*e1%l(dYM(@$KZ\V^TUZW)q92V$kdh/2:laRgqga\M1j;%lp+-e,E+^8O&[fhXkQC_\CPU(J,/!`Yt.N($XX/CG>.<=%%JVBR%HGc!**%&aAA-UcthM-\TO?WCRi*_HT6?V6gqFP-\9;c1NfO.amoT)dn`Q_cgt62,WIZY-N`ubV)l)MY-1J9E7qP:0GtL9F"X@&@ENuiJ#KK%32fLuKEig(;"%@@WUpp5T!sta07Lg?`NP[EO;5*FUbf&?Qrt#hR2(emZN@REf&G9)>25EHbHba2ZE0H/O=dfI%C<JPZaLOkg,@1/%f$%<`%C6,C@TH0oT:$G*[pdkIf$"I'[:7_[gi[5J&R7+B&C8RXohEYF!+f2b3jU"a1Fq%gAlbA:M-0kIR2,V3B%F8hR2*bWAlbG_%27&T[c)c`Fbh<ZHX;3$m`QDh*7:aZEAQ^`<[X2Uem+n+5E<p/g`AsNWFYdrOAd(8LOp8u`j#kS%J5rP9(r-D=492]en__\r*(4$F%N[!P9Nla]6?gUfqEj43c.V'G(q^cP$P_@(>K$g.s*j9W[(KR";eZB(23>H3[@I8t"@H$0*3k9n+M/_&0I+AIFDioutEg7ic+[\Yb%m/fqWNc7!cEgs&@lJuV*'+cG^alD=l.HX(mH$#Jdil$bq\pU1b?sF@VKlB%B+YU-#UtF\ZAO3S=7\jd!:'m+^Gef<Rk![?kl)o6i%%1074qOiWdKgt5O%5=]nbnujC*@%A[W'O3'!7=g?%C]/VY%#O'HQ:@F>(X8<aBChScUK-ER?LW)/La))6'aW\$EkqVM'r(8DPqaF%fXO@\&Uu:3p`T5s%p<Fnki'O.c0,\NA7:mk>R)IJQ'O20Q\=JcGfeIF<5O0(]Z_O1`pch\-cZf]3XCj`U<HCcCaoEcQGaH+8GZ_u%72?Z09&nGDABi]%G6aCIP#5YM@4:.#mc,?uAUc-(rj\K.X45B_F-.:?)3nif;D"_MQH6Z(+7Qtp1g@\5468"%a>V'X+*K;nGp5<e%R#XqNj-Y+SP4-.14R<A*]pU>Sa5SW.JM6"f5"(#pU02bN;%kApa6JH@R2-:S9F.(l]N#8;3@Tt<;Ge`%*$@h5><(LX=(RZWY6FiT%'a3-O#`@D9l&s2U:aP>^WHrRbR^644r=:2>NDkSL0k[`41%uWsjtLr*LGZR(0Fp#$BO#VG4W8rIJa/&2bup!2F'')+DsEe/`5l'C%*2mI.=\989-63q!AqC^N#uML\>#Q&c%2F`PmZaL<$?BlLST8tP+9cbkTMl>]=Rt0CVjp3*.G(imPbZ,&H2-GSkFStAN)P`H5*TlR%Eif^SFgkf:>',sUKb9-l23.b)pqnJgRC011@_-=HF7KuP-&D_XI<&Gb'A:5t3K'h;Y%-9>LG`)bmFX"GM"B*3/XjO+0faF#[ERgr%LW9icDI%3D?J4#<>_n&B;MJnKUML(uQ,A:Ci_91^!^WRe[$,^PGi^Kr?9,%,g[lliS9Y%`.n=HV&k*qP*4@q"\<pN=Ql<\liMY]Z%l(V-kH8'qpg<IjDPer/M/#cPIEXeR?d5mj1M(S.MF(ugC5L$CkhVq//$]I97k5;,X2$[1t69q7Yf,;3U!24K$eh>Y%"KZI;U(dK(%9dL%Zra$$tc)h%=>iq>&U.')OF5O%\.dQScTkF=Ee=LK?Q4THZC71Y&^Kf64Z)(n5e^cQQg/E@9Y9hh@lc;@jJ6ANi<b(bhTHcc(%e1T)Q1'IH,O[,h5aNRY8N^uAB.fp_G:rMX\lA-uk4JX7+60fJhHQpuB*Et2Z^kcogFVl@S)^djG@U0ToL01?5TX/+`+C2'!2T0pf%_cF>)GRu75hF=GGjEd"$Sr.@N8Qr!e<eOl.<_MNCSqo)]qKDF/Y2`kodPHt9f1AWV&qo>=%G'_hY"j"c6:@se9]\=c<96pba`Tq_%jK4>Fk=Lob3p6AnW)Z?OZ:`TGTjJDuJW:Z$o-$)$[E;&SOmI=/[EX<:nWa)AYkJir0%^oDK&'fYf[1G<GUqG:SqoD/Q("M+*nd+:%m'p^i%g0q1?H[A[#/IiYBIF<Y'q33:J"F2RY(m/o7/_3CKX"q1JhSATq\7Sb!1a8WM!G:3/Au6Q$[NCACkLn95V:"nY\[?f%KnNL%HEU-]!<i%"TlTf(BEj+8JP;H$q$;57K+IcL9[823`b>iVc@KA-JLT+/Ja6r7X'Nli3=s,:Ls7pk6DE09R'e^nEXlVf^7PLq0XCH[%nY3qK3=u1]f\^]ZK\D-o#L3^VdSOjWI8FQCS^)d/7X6_S#](4FV_'044g%mM]MWt!H1n"P$a<AGcP4D[&-RZ/qDjWDPB.kR5.JN/%*!fuL+'G@[+G:>JkW'2\=\`"2,S@dta*k"(ce:V^\eATR%.#p]Ifec]"IV<m5=DTXoToEmJE\=N4B@\r3098P3+82(8/4#85:HUf%:qi#tTtgtjM"T4qC^a_.@[49&,4QRa=.'1Z`&Khq:fT$*+os,a<)aJA&KA?:UU>f1XN<]6J>=918@&i+)V93IiT'De=3e'48^\+]%b=.F%o&=F'=-pkB5Y6DN%YTUjI06#IZX66*dIb?Dbk8X^o0ALa5WJ]RTqGOOUmY)6CjC(#i<2[QikRAQOXb+/Rn=QSK[<l:Ob$%:%fS",'9PDm4--:itV+pYK8O5a<nm"7V'mGG1+OVM_8]6i-`'>cAU>SlU+sH6,b-(b.dLQfHflF4-Kkg0%J#I#b9@:^GQbrF^6Y^Y+%]-8_c"&,XDIN[E#hJP@h%T,HQLtRQQBj9tgR,jO/>.S>1L9T+e:7"S!)BsPY(qn[;SQM[FhC8b2nU,4a.QsZfG_%igLlItt6-HYY%l!hK&P(9Nc53hQr1PTUc&kO2GMg8&DRu"r0o>dZ$;"FNA&+VjggEo/Q%$>^W`:V>_1'YFh5#-R&2:6)X\UO9Ic6S4Y\B,?Qo"BLf%_i*/GQ"1Hb0WG!0MUn!cS(g40D"ios:OEVB&aZabX9?-Z<j3O%"af8,:F"N>ftA0fGgq*Vm$M'9$$JS"[:"dG0@,4jpVTS,A,bFj%Y[]<G/D)CudL(."W*i]*$[/U`(@7E^\/+FumPkMr!7EFNTkeNjfV@NH=K8eBm-C&YJj"_,=pam^dPXItUK;mWliu[*?*PR*,G&P<%"FF+!Act2%Qo57o5iO?IED"i7*CcsNJfTq4$[/'$[9sM.NDB_)+MDIpG59r"p49GUV`LneV[om44#U^em+CB%YiCD>"acnh5jD%.%=+YiXD/6tJ#GK)F,&--^i(\6TWl9ik.-f:EZuQ:/2.!W3&YZG5AsFSp/e=U"%MfX@c@iI7""VM,Ni&mu6t-Ou:ifYt24u&b`jBbS%S2XU4fF@DJFQA%cf#5hdWC"lWXW.pR!.@Wn8$!f:j`R,)0@mLN65F]tE`tJ_DO.5dUm30*94qoXHE<VfQ`3i?XC=aOVkti`Co=X\%lCbV#VDJK&oSi)<7k_>,;mB!L94g1.,E86MbOO.N\ji"Q+^ASEY@mHi=`0=m=[$8Y=jAm=FI*WSnU&Ba6V&uUWDtR<O;mki-+Wlj%<UMTb8_5cAOc"(_E':NI^F7^4#f^^P@YKt+&1WI6$/s*KC:e@/PZa"P72HQp$RA*irCA`fl%6uQq/_^%:=WE+O!L.T1UD(5q3D%g%I[K4t'&Mq4>AaQ?XXuJj1?sQ;SC*!$HZD!=.8[h.X.2ZamYGI39aG;e+i:+1Ai*B0Md1KO),5p@e6VH$Yo&r=Eo@Jh.L!t@8q%mb%cLHKB<-\26(b]m%9ITG,91BS(4b&bQRdbdOR[[p'UZA\9A2F`h1R\@kZ:M,!AMdiO0$0A;P1#"cF=*ah!V2uZ>UAZAOuS\:1a0jt%'+??aD31eSfUKLE]=u0mjE=CkRpm?C3@B,4-8Z<2jP1HgHRD3ZRKfWL9n\UP7!"g\CIR7^P1)g?87=m1BgP3gQ)#p-[mOj3O]h)B%MlBO78LGsd$'DkkfMIa"B^UMk(4#YkEGr-);,Yk.7T.]g@8[b?,Wdt32=]iT]ipSf\5=GjfJS^!DsF^)4;mKlf'?R#X,.%Spbl&B%-pZ4L2NtW(k:uEre_uGlNG]#sBE1$t;8=E\a>n<^Y"o>jDAQpi'7qXa/M=CqU?KA54;(g_X@aNrq[bL>Te)X[?F_7gT%`kmU?_!9%8jfgU9hA.6S*qYH_N%)38U>F-raP_70^3kdUQ80EI"jh:>YOda,"\-RABlgFKFHTeqOK]JZG]n!,3q[']oIB@IWKk<i;PBRFK.=(%U4!JjNnN3.Ml__U7><c\LktX`mQhG)/eQ#nSDtsaFA>AsQZ3b8#jONi-L9YRO(1SK$J=/;)0(gs>W^W83Mp!E;)"<uRP-Oo\O!e`%mo`XrR\NkE$1e:@-?5J,b`cj(6^hWtNu0m:Q[;B0X%RN`ZCS=$P/BD8q.f&H0J@f.o-DTN%U;kL=IL&::8A9h!H_Hsck,:UEKrMS%LiQ0H$>C:;nGOJT\g#:TY,EtK0fNH;kIN(fE^IcDGqWG;;4c><AOJOdhBshromX.hb570.7[+jN7<oqL,n]6Ame=,`4Neno+j.--%X$]EnlA-2:L$aX]</*%s,l)cKetThAh0V:N'sX^">5DcDC5tmJ.3]H-1ARo*28(>qM!Dj8[caP4&s?RT_YL0eop]YTW>^lbqnd(]%TTR;*8TH:\/Oh#+</S[=HYP$QXInWu$PPOiR>UQ':>,Bc<5]-CE0cB**)0-RK[$0]RS&t0YL^W9:@neuHP5?/PaP,\*>ap`<!G/i%Po</KG_IG,K.E9H;/.R*dA3Wp;Un:Ej?=u78jgS6,YN-2!L*eC#`DbU9dN&C?^&u=_Gm#!'M5rJ*gCcO.nO\(65+2e9u&%KVrspT%':PP6;[KLNRiC$2M"GL`])<3Q0/gT+VG:Emgf-Tg7nBs]Bp#CF._2N8>UAH^]jrHnoO''0VBV=h?>r.YWMOTZ[HFD"a(Wo5jJLoq%]pGi6F&N[,;1dtI4jr&N--E3deFoWr#uacJXFa#<jdC'dC+>3*BA]\Z9QO'*C?gICC9#)q23hqNhP@"]@oop_,W1j5Q\l]`JL(Wo%X!XA]da+7NC+AhSF-`ik=`-f*-._`u,YMl%@e=8!:JF8'\OFK%YXq>E2:XsTRS&B..G<OWSG_iTWUr'1;bfQs:.EJg,nAF/iZp=F%]!A84_,TWW/gE/p/#GN^,hnqq0S[9WIUg8Z/m4];,D-:EV%AELA2#1dog1]5@-YPK?a:4H%gh_o&&Zae)+D+od[.0=27>V*<^`\=%pdp<6ECjUIO7Xa:6>LS<l3U1L^4\.W8<c]/QOl_]^Et'9M>.f2H"fSjH"gZT]S))OQZDX0^$ZJjGS)r]$*g@OgQIgfX^:AC!S"TW%$2uJXE<Ll3c;J4s+SG)tmDPtN8E6W)A]\7F9[j0d?6Ve3/<meX!QeX4OJXWB&EH[lg8,@3@1YXaV_1gKJuEd%fHAUJXJ?n6[n211%e0W%&fNG3+lI46/RcLn2NT;](k%.bnf9pU5WuaUD9me'.GA4ob3Tl8F%?baupiCI@>*>5^;0&WV,qi-5X1=IUHC%;0.M#-I+CLYn%A!"(:DWblf"&UK9H&%NG8qJ5iF&j9+X>O!2(CO4$;E^R97N'gNQZqrA_!a\!eNH]B<MtmkJ;F!%-ehM55suQf-_qq%2&N#T8Yg4,%-Yj">Hqd:Fe#"lQii+^X7HE(WmlKfO)&`t7NVlUjO.>O1O;9]60BQ6Dkuc8%V=#^X*?PfS?e$u/fPbWYj3p;J%t"!A2TA9A8U;=#%<=mqHB8#9u!u`%p'1OEgKG8&sg^p0GT1k+]@UphZ'Y!:rKI\q!%2!p<aJ?=?R&%(-V9*d0:LK@FL0/Ts$78qjTOjC#;V\K^IE.E`%2gTm$W2GWN$,+@nFm[-_+t7C3)_#Y<7]$82)XO142u[-T;VVP!WZJW!%F&>pUTqt4dHi_cE?i[o1^<5T+;Z(C4VT.jDM[tm+\HaL%nZ6l/\.RXE%o6*Y-;7=mYat\'cq&/O-/r1aR1qSd8;g&Z@mi!2`dMC0Q8eXSZ-B96G9ZCZDE?i7TZhgPKrR@nB';9dl-Mc[S!aN?%^as'I]2]&DLFc_8FOqUf".L_/0S>u('f'k3?WptBB>fQ0AgoM_=Oa>)#.'Q@oMGM98qU8=Hs.i?:LY2XU+C':)Tn'Xb(t>6FO]+r%`Z6k"YUI`5@.IRO%6Y7gO-"MN2gU[g:u34-LQ01Z2h];J9:4fNUOWX3$rNH7H?glk_RLCp"tP(?K+L4V><'[=OgBZqi%kaH0#pEt%?MoX8)A2-K*^7`KETjj+Me*U=Eb/>p6BsFC29RKWjQS-T4a\21qSO`\i),!Ea*l#@98Dg@BC-Q>h=@C6\W2e%M24ffgu^:uK*[B`%]HXOVH59tc!)g6LhUP@Q-WM3dfjJr!pEZFGJ*0)urQLF(FtQTC6"X]"]D`iS3Q)jmDSgDO=V^TmF8VMh*3/YB7>pY>B&&CVV1b2s%,=8<D0ukqoSlBAQ0,T*BK;Pknj(R>g5/OVbN(S,.;m5Fh0h$=b?'[<?Tu*']1*0f"ClFTN$@(#>35Sq^KLWNoRYIC%7mP,jP%KC(%-BuV\XDh:#CMLM@kl_\D+q3\TFY5""2eMbR:r>;7<P81X]sNHDE;)>qG>P!P+,[0!-EDWb^"&khjQTfL%$@UhL+kY6K@OFhRt`+C%Gp"Jb1A*9F-B*O%;@Brdnf#>_GnJ\_TBnhEGS[g-\;l!DdUFb.qkh[>^.8J"R:O7#7UA4(C=()f(,pXM0n)/LRtMh5Emj\o>=:Pc%0cC(qW:_=.O1@):OUKQ_,)O_t;n5j2an3#Hmoo!p`DHSu_0Co<Jl,73=o0R/cW)FiDO0]*;s#Il?3@qb4/BJW<4WT6V)om-F9faf%V)r)./DVgg&l-jqOC^$"X!SYm.XKse8pBn7Y,+5V.VJ"+T#+XA%qJ4TMm7@o8*DM[CHofqUcWmcBBbF.T;4PlDjKf+YF&!>8XlRR%B(![&M_KTqkmggdV0f&JMQLtB8=/`[@d/oo/DVft)HfZ+Wn2*2l!Encbt5KJ0:,-Hl!Eo6QV"biI)^&emPrI,l&OCIh/V([l#%)u%mK6DP:,Pbo^%2'K<k;5)-L$O"T;=VmD_9db&8(0e'0T"_c0VR.Hd*p_2K*guDg414i7Yd%ft?:sI"H#&L1etiB@@0YN>nIK)kIKd%GW'A_2JdUrSD`))iRtHofl2OUj+_4,RV1*(B@E;^dtVMeF#S>%S`&2.iRtTsfsKko[,K]FiRr=)B@DTJdtVMa$(d+qSrF\\N@/s/%DKn'WGW)/Ofsp"o\Dc,Njk70&fsp"oFFn/SL1etiB@jKaX>fLhe#*)Jo.[-`cOfT0Wq9DL6M!jt;%E"46A8HnL"Xof$8`En^mQd/%:na:20C6`g[]!YE\GhfVBZA+Y.$HZ[,sFC!c&>8$CBd@N3nKgqWUY?+_]2C1oD+,$ROUrQCQ>8a%`Mk9-4JN$@'!3oX>N&;e/D$u%e.I%iXjMg"0l!8\;0:]o_8CG._@1UmCHFl!B5<Ld+CL^e=JIiP,oU8MbG)8]BQfnh0T=C1c`VJ-;upcp%O/;NZX[q8G4N*8BYs7h%X-5](rN7allP'/$`3AT!jnsg`d;#c.(o2H97$V2BAnUI4[R[[:XukuIli8"'C6'iRmEn4rp1Tc$MM=9OT6#FNfcJ+%@JFV?RX*j4%G9EmTYrlf_-Flu]fV>Ed%(t>i3-$1A)9__eWp5F;HPBOg#f[i!^fmM(7ZC8Oqe`g5\u1M7KRna5XYG^@iajISdR6L*ToS%\[,u%b%#kBZ>YuA;'e/Um]iYRll22Vj]'0=#L73m`(cSh7:efM4uCln@Z\j8A@fBpuBVJ^,AFq:Bmc9g?mA:(\E;R]2>.'5q,,f="lUkf0L%SFfPfCQWe?DNXX]2H0@rZq-1,mhTURnD2[^!komK^fua$I()YYJF=8Q&b+U#<<:tddOr,C6#$OM2b41=)PgZSGD"BNphl1:!T-Vr%0&S=U!kr/M^itE1"amdLNI^KkBG^0o*pp7;%8nG/]1$Ikg+;/@PIED@NI^IEBc$9pg?\mt+tDM4ecgH18\9NA2X(eBh'D@h^71p(%FE`qu#l&;#%Os>-]7B>sW=eXU,jbZI)k1-KGJjc3Mm7g$->=:cC6BJ9hbDNOi4DR\_Rj$J6bmnueBk!o^i-)fD3&/78EIUMh0$U^%!StG\jDYeWPqMJtZE#1dGJ5QD\i+=PK*o$Tj@*$/[Xl$djVJN?8V4FNEY]^a4ETd98Z7#'kRak`8rPXUB\8%i]\ZftCm24CH*pMb%;_/u9;@chO]b69d,J#`BOhq;.E)>g"M\SFqfP(?,3=*Fudo)EVeRZ[$c&"Fs%Sm^()3]lT3$dO7`M$CFLiHFZ?cbRnMWf4HY"5RQ%.J@4Wg(a'j%jR&u7o!,PkT45%C'f;ZOLal))Hjem%f@8l$]#HYS%s,f"m$$H;*mgh9Hlkko&=&-_%)DM1AJ32KTbjp@4)=l2Bn<J%'VgU!6r7:7a)P*'CF6,gY_%.'=Un[L6<b]Zo]A+WFA=K!S@ZgWiJ27V$G7/M(k7hRQaEJ<T_<AB"+*TVB6_6(dQKXMnaY!X2c\>\%UO.k1TdPhV6"D`CDFp93]u\)r(Uj)6\9D9SG!ks'3*i.FHW+Gj.@6$LWq(K"K2+pI;rbdC4N)VA6Y^u[L?B`&2N-h_'B2Y`=-I#l%GDe$8Z&i\50KUZ$U'u*<]dba^<`EVA_KY15m'BQ61snWjKL_RTV6X'J@3$PZY!brU3DiAr6(%c;IPHM]GaeE9<g$%R=9O[s7b'@W%7_L!6AWgkAJ/$Bgo^R5'S4Fs0hlCjQ(*_"]6S-4eW.-97Osp-o8WFF#V=Lr6M.aL6=Y('C&l<7b$/i(j:aRQB67YCEmBqTKc%NSL%3#eq4.PqescVh`.,8C#&GU&Y>nm]9E%:?W.0Ilr;YX-2^"*)4A?naX'4M28n4;"k.N].Qqef.I*T>_`:#TB7K]Fb3IB1/Xp?UU/`%FG;HC2I:ma(X[1X.`HWR)@Ec`A*)?'YK!J*SeFtV.fr3i1`I:PYmc'kN46S]jUGQb_\[+dE(.k:ee?G&e.I8>P\L<\3cA4m"E]E^%\?$nV7m3/Gg^_hJ8OsE2iK^6WE^W/7.FE/q+ok3o3FY3@o6R1ME'uO/0Zs/6>2\"@L*&_ol\?<VlA*04EqRE_!M:mmcZ*s?.+N$V%(pMhqfgn-s/iIiFF\I0olA'&_&(NN7&3+WV3-"^:C?%rQL**/L4\!uA`>,YLLd@l?#[7"Tb`hdc.g#%PPVM3UW,aQBn1rM5=3aJF%]uOc6&_%73N%Y7cKia--,+psPl_D`2`:2!mE(73gcPR(3>nQC]YZ0tJkV[KqK_\sK7eB`(7mh4*7C7O[j&,%.Ld"_m*MLAbh%;&:%=Jo/C"<rc5!HLW14/,YrG=8WK1O]93GD)<</5_cch/;?'J1^8e;2bXD6DVE@#i;"iEAfM@$d>f(3Fdb;6=`G$S_P!hZh[!5,#K%[%gg#LQntNQKjb-Z[i/$/*SW.[!5rqIqOtYKb-0=(lN,I$T/@iVL9>'7L_H1"h]INS</4<*-bEVH"`'3130LBk];F9b9E:(Z>!IhjI%^B!uU@Y(^E,(uP6"N7.\?5IXj+QA_oQ-3FVB31n&QtV:HXW##-"qfU^%V/cn5$*G/&_fP4+E^2X2E^*92gV#\%JITC(`'Cqop'_I%\t.9\%'U_3'X*Uk4f0HoZ>*W9"1r0("=msF.H.\B'Nr$on$]9B#fmUH1qH?k.sG9r#E68I1Q\<R=H%Bj*`h^?9FiWm?)ECB].VRM%b,VB3W:J;HH;M0$BM>u&1-MLNFI=1Km^c)Q(3a%r+C1<OOQnSaUtg*\*`=o-9FiRr?)ECA<Dh/*o$Cro8D0*3=dRgcgGYjDFI=1J%m^c)Q(3a%r+@DJ5R-HFiVQ@@&%k/H'VMCC9Qg#+DY,1cHZI*607!VUC7(MV=4ecb7R3#5n\kJ/"G?nf'6^P'F\:lf7giXKo-lZHh%8!LV<dj*"@9Bd%"UW`:cZDC1"0!gtYs0IM:?87IdZ8&-hRLCW-3)l5Z#s0sWi[KXF`Mbl*,"1alb_-&BKKem:;T=IWfPb]GJU#&<%9@;I4Lp:SZXYXc)4^pGqC/f>sml>Eg8$)cQ8>'((M"omb?qD,=`01TQR"04QCVukc-<s'"%;2WXLdNF%T8+#684cI[7NAkQV%AC'%L'Yl=@ZeGi7UsEb(keE6'h@;[+_J%>&:n[n<IR-hjqD)&dB,ArkfFVuj#UT73("sG**!\a>3<r](in8K(k?-+3?!9Xj2]sFO=_+?%Ye)XNBJl[@L*;?0okJT4-&2aT9ZE75p:BJZ0]`k&TKWc_Xs:rN1K7i+;,,F1@ER!ld(*mb3GK;L\]%+7QK.X8'1+?C)cI5:TnXPB%.>J08#rUgXc/bVbLeKfK@S(b[;i]F9N[CXY&S&s$.P^%P"/=[iVsapj%fbriN5h*WC1Ag4E'o:rhjk<\\5QLt]&?:$VAq=Mo9u.!%m+2\Z1$,?j8V59!aq7OX8TX<U1$'`31?Cu"C<G5uW@9c0V+00P\OElT(?87g;f7PYRW<g9N@@@7nV3KQ,]Idp]B?J[-5gip7d[]_%c"?DCM09jFP:T!LZ/Z\mBio5*Ua<+(i&#$m(efU,`S,;gn=&!$FrUrQ>'o(c,K.-a-_!.MPVVSbSfA&60:dlM:Y(Q$0uR9@N6V&1%(@X(:A&f1I,Zg;u3'q@\o17#$YfPI:eAk!5C9&u/m,JLNc@Re2BM6.-Q!_g=jV91U*$WXca[B_\+XLksQ0^K#%_BTRgMqo)Q'0s`%l\Mh+-7Z=]#RN@!4,sl"FCa$Dg]U4?ot5cI=KpOrKK,lAUL;34E4hCFC/)3u)&&%7lJ+)P#Ur%[$[*[t'2ErS1`_Tto/%(Q'3RI'%Ppd9gbE+Sc$H+E%iin&)_QYRn9GEe[JF<U*;-:c*g&r,Gi#Obp)55fb9GA9:,Z)8/\=bN,.9AO76;HR##R+C*(m]?S+PF[IL*[RG%O`D.km>)(e)CgT^16NqeRUR&.WTcpH=Me>$*./+4'#GeC$,mMiI1P:/1RgjLRoE=\<hgD]UrOZ-&5-+U9%B:tQDI3[6Y%KNENP9n%*:dhI@jaekZ5r7>=[Jh_6.dT"%Z!MaH%@l^lR=<A8-Y>mf;#X)Zu4LEiG=11CGm_:gkO@KYUj4fE:pNQ,Rt:XYUiFtVHF!8QXq`=%.\jL),9nb?^RM1'67+*Rl>3W>#%^rVPunt/AJ(Ut.sk*Y&===SPU0Uo>sK$eV9,`HqGL.Uf2u%2T@O.Io-D.OMTR-+g*0IZH-q1*%ee+dX/7P4FAr3u0;n6K@ggLtXQZk"=_bN?Cb<2<)Q/pC>W=lmJYS<>`D.O;@(PB$#n!D+cQZu@8@Y1m!'a8.TBp$(f'U5G2/4ASB%*&3%)"tWZ&"]UljE_`'j/@W8a"BHgJ=iA3F0j-DrI/d:^S#J:-1CD7P[`0];,UV9.&X5.@EGW?8M9BOtd/VitfnbClr"L(:ctlbC%?-B(hKEBDOdBbYaKF4ge)nTE-Tg1DB_BnY`MdEZ<Jjl:e^DLT8HGJbD]O@lhgpN<7&UOE.Re/'"AIubV#:,,ea!Q4lI+a?6ku6O'%)2:_T4<"UEUfYL'oRfb1qLi`qCXE6GHr'p*/c$1VLsE6TTi&'_B9BPC.EEMZcC"2_8>R)3c6ljO9+Ur_3M-Y*1l")`nGYW]:neM"%^makI8BlF]a;)JEcJ7!@LE>HEe(0u.:=j=!ZJ=^(/<Y8QXYla3\]&"%Vb@TQ@EbWcSH*KM"4j!Mje;LASL/*p.q3Ak6)D"P<jYC+%SS`ZMS9I$:Cs-=XQ<'",SruQ.%0Ba%GIB2[%u[l.D#"bkcUVht*4WNB$=[4'"ngrT/WU98j3VVc.q3Ak6)D"P/cB.qZ9!2*RIVeG%kf9(]8ZlkN7X>F>T^@DcV46Nd,:Dk4jUjf'C7+S55:L;'QVDaATq$jL9-/Z69Fc28X<heafTOjD\fl"+ed_H3VJ`.&G$@@]B/(H[%DTMQll@uq]VD[Fu="?`LGsnBS:V%p02<?o"\)hs2S&tP?f^`-uk?]f9%R?cY(3qCn3AEp*,p#Na+9sEF:<XXKn.FF4puV[!OJI$J%"+SO)'$0GG3I\q\B+3j=(99!o,][o;_i:f-6:mK<gA3u>935KmLhP'X$6#O#X^4E"4=3=jC'\CJnkJ0YflE<6bhELh$5#*:*Uf[h%8FeYT0e'?_XOo)j2C0f9R\h"MXcnEH(AUV?kXcNG#:,,_n:oT+;'E2,>Zq[:_Ib)LZ=]\o_Lk\[;GbXr`uBpN&JrV7ZF*WYCH,9,%7nE,().M<o\$Jp5HB@(f*KCk'=o<N$5\r5cZLA"7F/b>E:1$Z$50,6QBnGRQq7[8N9HmiWNI\oZMb#]2&e9[=QlYEW6S:j-hAp*E%!'TT"0lDLIM%h5*%u,`[<C</?NBhJN>?R4m`XsADIm4'%dQXUD8X%6>db#VYLB\c_/a+4$\RIBcGKalkn)ZH\C_\T4+V2ObK>U(H%ZA9u:"&m036c`R'dKm-Y]JP4&'JGFg&!]aSaB%iZ(p]iu+ECPr1kof]09%+c`Cn+d6h)'c=1g(0Q@5>>09%)Y`ChGs6h/S1o$F?]%KPVAVN?M(cD-";-1UdZ7)oYH[a@#LGkjVE]"u6lGMof_!(ii]j1kof]09%-!`Cj^^6`&3JZ;nOoL2<e6L--/'N?MNF94Q%1n^?Xj%:qS?RMV#XCn^89F:qS'.C_\U_+V2ObA&q$6dMT8i]JP@*;5IFc>0l%);$]0oI,6#B<hD^beX,g=gbKNM1_\m7!R#;r.R\q!h'k<i%Un(OI3]O@b2u_2n@Qqt!1FN]E.<C]L@OMIn.-]]"e?TLZ_(;EH1286CAh!CM)bW1F6eQD"23\;$PUq1S%QN2p"2R;6e$X.\c9R"W%YCNs4()rKY#Fm(sd%Ji<i%1S@$mjd32\?Oue+G6LltBR=;!Jd7QI95p;QkVWPSP4&H3Kh8[$[PO/)VaHK6>=c"l(s##4%L9lS1f<%E.?XO(PC0aEQl[HK6#a!&Fm`R8?Y(Cb68+3\6NE<g=lc>A\VNd:n$\R#3E@$?r5SS"U=(u?XWNIhCi7bqtYnBV`g\,.)u@B6"s+C%(s7:o_,-RF$A3@=;&GPkN5D5-B,!grlkosofs>fjSMjcO;jqg!:-%G%%*F^91FR+WNhPeG4,20oljV%!Z."%VAaBiJiN4)B>'Hg:%m-[J5C&F6KEqh-iV0,lYb3lJjPf@2n.#5i`oZ2>0#NaSJ8"Fff1mEDQ1mDT>*0ar#*0bV:<.CmBh&:+oh:po^Ug;49Eu>HdDf5pA%[k,Wm\\m=h%U&_#%LNg]._gYb.`^Q\Mj7X0TpKOBKO,;lD,D@+<s0NJM]B.2<%c6r/G)!GK[B\V>Y_N'pK:nPRp<9q&,o9/W7AT:%,$4Ikm'l4:20Am:Uc=CT9itP!jXS!aJ3@dA*scPMF?N+0:s%qC^eT]o'/:jO7G\V*EKQ1P.:G=tIdgVD/genV(a;`\aA<R>N4&c(%B.)p]%9=pa51ZcPSnj7XV]nsI3Ra8.ShRaQRMnI^7+"J`]O$cE\HC7tH7d4bE0&D]JPpDQ(.kbNR,dLg-\O*`+)=I\4'.`J,BDeb%,)MBN%1HU0e$VKB"WPbM762'm9ADcPmMcm0^578)]Uf?_(d5)b+nSkB/LaAik_K^AM)/.%6>1L2kk=,;>i9D]Bh@97cj:j!(_La)%AB\&l-[!epJ4EJ?#pYK8@Dr>P!C@<6S45?Ef4(/r#dG^=)+s3D1;L(mj/Nd]k=/-NK2qKilVB]+5(7d"nT]2#H[bm(pF/?\*1FU<%jc=VX]Qu\Hh7h^Yq#'a0/hZ#:I!>=0NhdccrWa#6*r]_X1+[M;IaN4!a<2l50rjQL=WXq+@0`LDS=GsY9Zm?,%Ds-4MjILL.S.7W%E;Td0d`.Mr`<bFM@Y8ndV,3)agZ@qt`]t')kd?d+()E@Tbf9pl0CgZO+?8kYY;.n5\AABBO:KO7pY8NSW#W'rSkSORb2TOl&_h7U%k#(-JR>A-rWH,<*-\S%V(?2A71:g]RQr3"Hc*?(N7HoZq4ZW$=C!s[K@h/B/QfTHT8Qb<=G62$2#UCeBTP<uV)-0Z;M]5Jf1OUfF%fGn6ZUo,6<8[K'D]JdT+dqjqA:8"$uNZi[s0jn/d-+R_82iHkN>*uB^huH^@#%c3f55C=4L_u)JJX/T#nVP,Ya[q:4GK:q.f2R<-%AN5P1M%PZ.UnF0(j-(h^M?1,X8Xo@b),>OO;\_8<ZI^Bc0=e$E;cqP&.T\jm`2E,UMl#WO.[1&>3-mX]#[ClAKV*r@ZaHaikD+VX%*6:X'10+_?:_b<=i"H-9R)&"pOtg=R00%.uihL3F,';,DNE[E\f>F;:b0bRLLt!`q8CH7e/]Nnl;j4"Yj3`mQV3tJDnO3`i768$H%jFK)@4#o)a&!QUPa>c2/d,LKK\gbDeh4h4H3OC1pGpIt*E(]JbHTB9M8qSV8gUMJ2L?>eF!RIr3?^t6I^ZI/$H4!pjK'NDTKOITE%4+dRD.$>i/E]+EbJAMdp#brWGX79DpK.>&J`VH;T3Y^@sjNR.`=r/QTn141XHjg38nu7,WRU?ljNJOBlq5@2%iJrI-3B\1$$`KSK%CoEe-<.Z[V6jJp9TEe;ho"#:FhG2j;?BtgMQ9Y\eDJ#ioI16t.m0s*%CD>^8;Ym8eks2GL,<<!MUDWiY.-:GS`qU7&7EGDp/a19p%B_Y!GO^:sVkh1oQm25b99;o.6gA?4Q@koM<iISn)C<<A."rFDVM*c[Y<QOWL2NNFGa(pUS3:u*>Uu\<"GY6.+WfH^t3[+f)[f-3u%QL,l3Q<o9?LJH2)]J16e9uCibAAo<'A)rWfQA&Q]!L8id&X*8X^cN[qU,11b?WO!_G`+G+:6EP5ZLV3Q3"%"q1&7?r35P7#$)r6U%@)qa_5B.+YnO5in'dL8TQj0:^1a[`W.N$5A6B[ZH?W>Egq!\kYf0a2;E(kZ&1W%Oa779=0Di"gnXf$n,Udb#,!"%e8QO8[sol3\C%kD`Z@;#Et?In*V[iN2'*AWX9,Ct'ZFEO'K&(A*W_.&rD;'d)u"9`V)HB6f2uU()s]@Zibh>$==J`aSB3PUI`?GX4mnAKX*]*ae'"%W&XP5,bh22/XB>#m=c#P+G(h+F_CLkBZK_KisSm)/"_p?mL"TnKA78!B45sF1D+U8+Au.WlOp51]iE%,K=RNI0n'@kQ7"mHLj,&>%IuR@FB;?G2GUR2le(J5n\&B\I-H\*kkT%:+jN[T\G3qu:'h2Q!KTQk&f`Do[RJ=$4H5ZM;K_5)j[Yqqf.&2i+c<m:`MN<Z='Ie;F%NR/["$;#9*1eR=#R\:<\IY18:8ZLRb(#h6XDBThH0Lb":&UN;RWZ'Mrm5^W<kQ2h=^*\e*'SOGZD*0ka4<qf*!f2h;l")817)gDp%L"#`(!b*uhP7k-dRSYS6'0QOoT*s.34:@;%&MssnY;VgD<&t6Ll06/,AFJ\X.)&fn7,=W(-n3`MLt^o<Wu_q.(D]_c6:[+Fo&[fW%Whg&K!n>=paaj_ELcI^;2@Elt`1$2$#`pL6RX4fMQ1'Nb:jsb9:j%Gc[PJQNWZ5?cT=GrT?AqE#>m<+K?0M?UEg48iBd2`r+TN-e%6L`->^,3]92<?ernTiCd=[]3HV\3cP]U8IG=%3h:>W*-hYI7FKbDru"b#%0kp8BVcoA$l;&/HD4)2"q2@&Ctkfl+j?BCnHr;p1\;%UQ>%VGp7#:j_Tq*oJM(4H6DL'[1h7KH6'3o<=r^m@nj'ZfEAlq--4dB*KYtj57^?+9ka>UddJ*fMHa[!>jI)##(uDZhLXTU\2]aP%<r1?k<1JS_*(MVU6X,'O-4#?)aEp)l6>kj\M]h+:+(/eSoHWu/Grb_!BR<ZdMT8`\/?_M+-6FaYnJF%TP!uODM@-&rmSrP'#^FLU%)ar\VS.Ja<4rtrP#@c/uOH`[+PREnCG(pL0K\\I9M]DDc3LHb&]G6Gaj['P+0,Z3b<_^NC[r(TjhAIbg&mP3f_E7NJ;mClA"(`&b%:5d3pC<*4aWQ/mb93]\17N:RoXdG0-JQBU%%QPfY6<Gn-M\AbI='D)C5$a#cB1MK^h'_)#cEDFF55VAI^:Lki4$N'r^O(0Oq653k%pu.A$Gl`'krSRK98/if]lmF=^rpH@LdJ4LG?B?O+^UnghUGMrqPiTQ'P5+X\a2be2e*Y_MUd9n-Kt5%9N5Wq9#\LM*&E@^^,)I?O%9mlNZ+ITDR^Gn#O&JooF]6!3WF)n:c99k"I1-o8A(CDh)^I#V]*u@!-kj?dA=7'H?0+TA(!gVi`+HiqA)Fn##q$q[Aa57\YI$rJ7%Fslil;tsXA]-HJ6na]BJjmltrOiM#F?`!n/l@K^J-q<a1;Ntnt8hqYs.cPV,;5%_q5`uo*PK!nf"tbSORb0m:F-J<-ac6UrhpfW-%E7H'IPW"anX><k+iRLe]?m(l@BBO:Uj5r8Q@hA/jns),Oi]KaT9nVp1Ejoh=0K//PfRR8d7t<bGdi!/4W>c7!1D%#ABdSX4"GJsb%oQIkIgi0h@Fs9P:<`J.+*e$m**S!m].t-r8f,+)rn+/lA,e?ann`)JLXnaRk?D#_TYQ4H?j>CG,H40k\AR=#\,,buMN\`?f+H&LV%0.2RJ!6.)``9SCg>u2f/miM&DS"eaQK=HUi^1J&SC8#9m@HqlA-RgJ:D-l`LL.V:Gp-SND2*1Ur/X=D\r(IJJaX,,_.`lga=M)VP%^I:JTl*T)0[fdRZ.@JB,o24<'W`"K;CKfeR[qg_;'^359p'^WPq0#+-"IZ.g"hha3mK#[CY'(5$m[te,N"a&;;<07Hbf:o37>U#*%Jol/O[CD&V[0&9YB5>9M%^aTJ`plE>+GY@Jg%Rco&1.bBo`*r5d*'b]55OWHo_K*-QS6[73?3PC]<dP^qY'jSiVV[2eb.mGp@dJC%kJQ`cp(i!q\;.ichB!1<O*AX^mbu3u^EEYIPl.l2]/PMs?X7$RH[%ZE"4_1cIJ:kDiHTEd$Pi$b*ZfN\^E5*-0;a-lnba"(%&iGI%<+"Edh]9JCJPQ;TIYR=nS+Oq^Y7Ei>Y5OQ$qWO\=I.PCbru^tp1Bd~>%AI9_PrivateDataEnd