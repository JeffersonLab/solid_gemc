%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TCS_Im_2x2_nice.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 10/01/13
%%BoundingBox: 0 0 406 245
%%HiResBoundingBox: 0 0 405.7754 244.0850
%%CropBox: 0 0 405.7754 244.0850
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-01-10T14:40:13+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qh9SsINR0660+csIL&#xA;yGSCUoeLcJVKNxPY0O2Ksat/JumaPMgtrm5rqMtvBMxn9AiO0tZUhRDbrF9kAdetBXpirI/0Zbfz&#xA;z/8ASRP/AM14q1+irahHO4oa/wDHzcV39+eKtPpNs3+7Lkbqdrm4H2TX+fv3xVx0m1P7dx/0lXHv&#xA;/wAWe+KuTSrZEVPUuG4gDk1zOSadyeeKtjS7YV+Off8A5eJ/+a8VWvpFqyFPUuVqpXkLm4BFe9ef&#xA;X3xVttJtTWr3G/hdXA8PCT2xVyaVbKKepcHcmpuZydzWn2/fbFW/0XbVrzn/AOkif/mvFXfoq22+&#xA;O42Nf96bjv8A7PFVGXTtPtbR5Zp7kQwIXkka6uSQqLuxo9egrikC0Ho6gXdlOHmDXlkZ5YJbiaQK&#xA;37mlI5GcLSp364IysWp5p7hQ7FWNa75B0fWtUXUrqa4SZRGpSJowjLGwejckZuoG9ar1Tiakqo7T&#xA;LCGZbid5p2d7idSBdTlRwnkAAXmAu21BiqMOl2xp8c+3/LxP/wA14q46VbGvx3G4of8ASbj/AJrx&#xA;VaNItaufUuTz7fWbig2A2+PbpirhpFqHDCS52BFPrNwRvTc1f/JxVcdLtj+3P/0kT/8ANeKuOlWx&#xA;r8dxuKH/AEm4/wCa8VWnSLUuWMlzuAKfWbgDau4o/wDlYq79EWvqB/UuagEcfrNxx3Na054quOl2&#xA;x/bn/wCkif8A5rxV36Ltq15z/wDSRP8A814qtGkWoYn1Lnoop9ZuKfCSa/b713xVItTjgabVYIbm&#xA;4VdOsvVkpeXKFZZEcryYP04pX265Hi3pkRsyrJMXEgCp6YqgL6RXudPEbciLirBCpIBglpWvY4qj&#xA;8VdirsVdirsVdirsVdirsVdirsVSbzZM66O1tEzJNfyR2cTqK0MzBTXw+Gu+V5fprv2+bOHO0V6S&#xA;xaraRRLwhjtZlRFChFAeEAADfYfRljBH4q7FVryxJXm6rSlakCnI0HXxOKoTSeX1aStf96bmnKnT&#xA;6w/SnbFUbirsVdirsVdirsVdirsVdirsVdirF9PMtx5d1nVG9XlqIuZIFcASJEiGOJKN8I+zUV23&#xA;yvHvZ7z+z9rOfOmUZYwQOr6NZ6raS2t2ZfRmilgdY5XjBSdCj8lU8W2O3IGmKpNb+WtP0Sa2e35X&#xA;DzTQpxnMS7WtrKkIXgiKWVaAM3xGgq1AKJVOPrGuPullAinp6tw3If7FInH/AA2VcU+4fP8AYnZ3&#xA;DXm/3faw+3pSS/j6kWNT7x+PiuzvR17/AJbLX/pFk/7KMNT7x8v2rs4w692u7U+31aQfj9YwVPvH&#xA;y/auzXra7H9u2t7hR1McrRufkjoV+98bmOgP4/HVdnfpu1jIF6klgT3uFATfp+9QvFv4c64+KBz2&#xA;9/6+S0mAIIBBqDuCMtQ7FXYq7FXYqkl0WvPNdpbqP3OmwvdSsGBHqzVijRkBqCF5MCRlct5Ad2/4&#xA;+35M+UfejJFjGuwEKgkNrNVtuZAkioDt0+nLGCPxVplDKVNaMKGhIO/gRuMVY7f+QtEvbtLmV7j1&#xA;FWNDWX1CyxyicAvKJJP7xEIPKq0+ErVqqprowT6tMUVFrdXXLhvU+u4qdhv44qjsVdirsVdirsVd&#xA;irsVdirsVdiqT+ariVNJktLehu9QpaQAmlDMeBfYE0QNXpkMkiBtzZw533Kup2tvbeWrq1VVNvb2&#xA;bxoslAvGOIgcjSlNvDJRFCgwXeYdYGj6PcaiUEgg4/ARMQS7qg/3niuZf2v2Yz92+FVvlvWZNY0O&#xA;21Se1ewa4DM1rNXnGFdlAfkqFWotSCNumKr7yaOS40/0X50uKt6ZU7NbyEVr2I3xVMMVdirsVWS3&#xA;EEVPVkWPlUryYCvEcmpXwG5xSASofpOzI5Rs0ycPVDwxvKpXps0asCfYb4aTwFz3y0f9xM6qFP8A&#xA;dn4gwGwDU6V3wUvCl72sFszNpjS2Ugk4NCIJXtnZq7mMLQA9S8ZH+Ue2VeFX07fd8k0eqvp+vW9x&#xA;ILefhDdElFCuJIpGX7QikFKkd1IDDwwjJvUtj+OSDEhM8sYuxVRvLy2sraS6upBFBEKu5rtvTtv1&#xA;xSBewSryrBO1pNql0ipeao4ndVrRYwoSJdyT9gcvmTlePe5d/wB3T9fxZTO9BHScv0zb/a4/Vp/5&#xA;eNfUi/2VfwyxgjcVY3pfm+W/826hoA0+RIbCPmdSImWJ35cfSHqwxKzgfE3BmUArua7KsheaFDR3&#xA;VSOIIJA+2eK/8E2wxVC6USLSUuSALi5NW49PXfw7fPFVM63BKSunxSX7D9qAD0hTbeZysf0KSfbK&#xA;vFB+nf8AHemnBNdn3klgskP7EQaeT/kY/pqP+RZxqZ7h9v4+S7N/ocP/AL0Xt3OfH1TD/wBQ4hx8&#xA;LvJ/Hupbb/Qln/vy6/6TLr/qph8IefzP61to6Xcx72uoTx06Ry8Z0+n1AZPucYPDI5E/f+PmttG8&#xA;1W1/3rthcxDrcWlSw92garU/1Gc+2PFIcxfu/V/atBFWl9Z3iF7aVZQp4uFO6t/Ky9VPscnGYlyU&#xA;hXySHYq7FWPWDfpjX21AitlpgeGz5Jxb1nFJGqfipwp7GvSoyvnLyj9/7P0tkthSa61y/Q1/xry+&#xA;ry0405V4Hpy2r88sa1DzMt++gX8VhEst3NE0UavIIlUSfA0hcgj92rF6d6UxVJfInl+KHybp9lcO&#xA;rGL60B9UuGaArPNI37DlJPhYfarTFVa38raPol7DcxMTJdTwLNJclW+G0tZUhVaBACi9D1xVPfr/&#xA;ADANvBLNyjMitx4Kd6AVk47nr8t/DDTLh73H9JyBgDDbiicT8Ux6Veo/dgeA6+Ptivpc1onIyz3E&#xA;rBHMqVk9NUA/ZPpemGQf5dffFeJZbjS4OItYkABoGgj5AFmANWQEAksCa/M7A4aKDInmq+vdMp4W&#xA;xVqVAldFFeJIBKGQ9djt9+NDvQv5XfL+6j416+o1ePLrTh14708dvfBsq0Pf8d4YuVNx6rU5cRtX&#xA;0+nKorTpv7YdlQ97b2V6Al/YeqilhG7IsnEklaqVLOhIUGopSo79IygCKSJEcktX9LWDN9QuTqVq&#xA;EPCznINzEaq5qzUkeiuAQx5KCPtHY18Moecft/b+ObMEHmr/AOKrBVf1Skcicf3ckscLbgliyTmF&#xA;1Ckb1X5VxGaHfXv2XgQjrdeYLpAHZdIjaQTNEXWOdKgLGCeBkB4nm1OFDRan4sBPHsPp6n9AWwAy&#xA;UAAUGwGWtaAkSMa7Aw4eobWYHYcyBJFSpr0xVH4qwSx0jUn/ADYvNXvBBFBJpctnBElwDcen68Rj&#xA;fgpVgH9N2rTbpXFU+1LyXo+oKEuDO0Y9LmrSmQuIGlZQzy85D/vQ/wC18qUxVUsNJ0+6SSWdFnAu&#xA;bn91v6XIXDnk0dSjP/lMK7dshLGJHdIKcgAAACgHQZNDsVQ0moQhmSJXuJEKhkiFacxUfESqdN+u&#xA;GmQi2JL9n/uY40EhBLOSxjHegWgJ8K4rQaWHUDw9S5SoDB/Ti4gk14n4nenH574rY7mvq14BRbxi&#xA;eHEF0Q/H/OeIT7sVsdyEvdIuZ5WuVeJbtUVYZ41eGUEU5cpA0nJSeishHzyuWOJN9e9IIaW48w2j&#xA;EXNsl/bhiEltmCThKbM8cnBCfHg3yGRuUefq+/8AH4pFBaPNFgGVZo5bUszKRdenblQvRiJXSobt&#xA;xrh8WPU179vvTweaAub+91wNY2I4QyLxupaNSE8gwPqVCyMUpSMAqd+TceqZk/T8+n7WQqPvZBYW&#xA;NtYWkdpbLwhiFFHUkk1LE9ySak5KMQBQayVDXlRtE1APx4fVpamQVQUQmrA02GSQi7iCK4gkglHK&#xA;KVWSRakVVhQiooRtiqF0vStN0ewW0so/QtY6seTs7e7PJIWdjTux6YqpXt5bPc2QimV2inDyrGyM&#xA;VR7eUqWH8rAfT2xVFi5dyPRiZgSKu/7tQOSg/a+IniSRRaGlKjJUrSR3rgGWUREgfBCAaEqKjm4P&#xA;KjVoeK/LGwq5bK2DBinNgahpCZCDVjsXLU/vGA9tumDiKq2BXYq7FXYq7FVkkMMopIiuBQgMAehD&#xA;Dr7qDhBVTFhYhgwt46rQqeC7EBgCNttnb7zjxFVfArsVQUnL9M2/2uP1af8Al419SL/ZV/DFUbiq&#xA;XjQNJGstrPoE6iyCP1WeQqABxqsZb01bj8PILypUVocVRc13awhjNMkQTiXLsFp6jcUrU/tNsPE4&#xA;qhtLcJZzPISqrcXRLOVACid96jt88VVfrckr8baIuquFlkk5RqFpXklVPqddqbe+Flw96wacsqr9&#xA;eb60/EpIhqsLAty3hqyHwHKp98bTx1y2VDd26D04QZWUUWKEV3AYha7Iv2CPiIFdu+HhLBs/XWYg&#xA;enEoOx3kJFSOnwU2oe+OyuFtKft3Mhr1ACKOijai8uqk9e57Uo35K76nF1LSkn/i2TxY9m/yz+Hg&#xA;KPEq4Wyr9l5B41dm/l/mJ/l/X44LVo28xr/pMo+Qj/yv8j/KH/Aj3q35K19U5EGSaV6dPi4d1P8A&#xA;usJ3T8SOhph4lVYoYoY1ihRY4kFERAFUDwAG2Am1XYFQetcv0Nf8a8vq8tONOVeB6ctq/PFUZiqH&#xA;vLCC7A9VpF4q6j05HQUkHE8kUhH9uQNMVSS38tadpNzZmAvK01xErtMA/wANvbSpFsgQVUbczv0B&#xA;NAtFWR4q7FXYq7FXYq7FXYq7FXYq7FXYq7FUBIiDXYHCgObWYFuHxECSKg5/wxVH4q0yhlKmtGFD&#xA;QkHfwI3GKpLeeUdMuyomkuGiHocomk9TkbaR5YyXlDy1Dyk1D7UFKUxVV0ywt5Y5pJBzRp7kGArx&#xA;iJ+suebIdnbYfEfDam+NshKkwlulR/SjUyz7H0l6gHoWPRem1evbCAxWfVXlr9abkDX9yuyU3692&#xA;+nDdclRIUKKAUHgMirsVdirsVdirsVdirsVdiqB15VbRNQDAMPq0uzLzGyH9kfa+WKo7FVskkcUb&#xA;SSMEjQFndiAqqBUkk9AMVS261CymmsXt7mOVI5hJI0TxsFje2ldWY12Vl3r4dMVTTFXYq7FXYq0j&#xA;o6K6MGRgCrA1BB3BBGKt4q7FXYq0ro4qrBgCRUGu6mhH0EYq3irsVdiqBdw2twhWJCW8wYArQNzh&#xA;ND+1WhH0YqjsVdiqHm1LToJWhmuoYpUCM0byKrAStwjJBNfjf4V8TtiqC09Z5o5oC/pxiecsQw9U&#xA;q88y0AUDgNgVapJ3FBSuSBAVM44o414RoEWpPFQAKsak0HiTXIkquxV2KtF0DhCw5kEha7kCgJp7&#xA;VGKt4q7FXYq0XQOELDmQSFruQKAmntUYq3irsVdiqB1xwuj3o5Ud7eYRgFeRb02NF5bVoMVR2Koa&#xA;90+2vAPWDBlV0SRGKsvqLxYqQetMVYhd+UbvSr+0j8vaZbXVhd+murvffvSq2pRLcRq7qq8Y2k+y&#xA;n44qyO20KNL24luEtpbZ0iWC3W3jTg68vUblux58l2J2p74qi/0TpX/LFB/yKT+mKu/ROlf8sUH/&#xA;ACKT+mKpH5ssNXhsYj5Z0uxuL0yASLcxR+mI6bt9uI1HgPwxVHx6Ci6isrR2psBAU+qrbov73mCr&#xA;8iCdk+GlcVRv6J0r/lig/wCRSf0xV36J0r/lig/5FJ/TFUs8w2Nxb6cX0TSbW7vq0WKSOIKBxajH&#xA;k8PRqftf1CrtM0a5K2suoWtipaJjd28ECqFlcRkBSTJy4MJBWorUbbYqmf6J0r/lig/5FJ/TFUg8&#xA;4azoXleyhu7jRvrcUrTKfq8cFV9C2lumqJGStUgbiBWp28MVT/8AROlf8sUH/IpP6Yqh9LsEgu76&#xA;U2UFsxl4W80UaI8kHpofiKkn+85DenTpiqZYq0yqylWFVYUI9jirHNZ8j6NexPL6LvcRRcbWIyyC&#xA;MMpdgOIdPtM9G+IVG1dhiqhpuj63eWN1JqFpY6dqMl0WjdLeKRmiEisWkPKRWLrzB6HeuxxVkP6J&#xA;0r/lig/5FJ/TFXfonSv+WKD/AJFJ/TFXfonSv+WKD/kUn9MVYxpekeZruyvU1Kz0/T7sxcLKeKCN&#xA;ysrIQWoWlXgrBTRhvuOgDFVkkWj6csSLLa27yBQHcRIAWpuaU2xVf+idK/5YoP8AkUn9MVd+idK/&#xA;5YoP+RSf0xVjuk2PmC41W5XUdI06z0+KWUW0ohSSSWETusdCszcWeEIxqux7GpVFU7sdGtUsbdLy&#xA;2tpLtYkFzIsSBWkCjmw+Fdi3sMVV/wBE6V/yxQf8ik/piqQeWtZ0LXb3ULSPRvqkunMVl9eOAhqX&#xA;NxaniY2k6PZvsexB74qmeo6NaOLdIdOtZY2mUXSyQxsBCQ3IivHfp4/LFU2xV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxVRu7O1vLdre6iWaBipaNxVSUYMtR8wMVVsVdirsVdirsVdirsVdirsVdirsVdi&#xA;rsVdirsVdiqlFaW0U81xHGqz3JUzyD7TcF4rU+wxVVxV2KobU7L69pt3Zeq8H1qGSH1ojR09RSvJ&#xA;D2Za1GKsdtvK8+nzqkmoXFwl41vbAxEwOkdrbzBGLI/xsdixpvQVBG2Ksh/Rlt/PP/0kT/8ANeKr&#xA;f0VbcSvqXG9d/rM9d/D48VafSLduk1yu6na5n/ZNabuevQ4q0dHtjX97c71/4+Z+9f8AL/ysVXR6&#xA;VbpGqGW4cqAC7XE1TTuaON8VbGl2wJPqXG5r/vRP4U/nxVY2j27RlBNcqeJQOLmeor+1u53GKufR&#xA;7Zq/vbkV8LmceHT4/bFVyaVbqCDLcNuTVriau5Jps42HQYq3+i7bkT6lxuAKfWJ6bf7PFWv0Vbbf&#xA;vLjYk/70z967fb98VWLo1uIwhnumIFC5uZ+R+HjU0cfP54qpW9oLTV0WOS4dJoJGYTTSSoCjRKvF&#xA;XZqHcmtO/XFU0xV2Ksb13yfLqepfXo9SltqrEjwAcoysUol6cl3qgCn9mrEbkFVUfp9hHMJ55Zbn&#xA;k88y8DcShQEmdQVVXoopQU9umKoo6XbEg+pcbGv+9E/hT+fFWjpVseX7y4HIU2uZ9uu4+P3xVb+h&#xA;7erkzXJ51oPrM9FqANqP7VxVy6Pbq4b1rkgAjibmcg1pufjrUcfxOKrzpdsRT1Lgbg7XE/Y1/nxV&#xA;o6VbHl+8uByFNrmfbruPj98VWto9uzlvWuQCAOIuZwBSu4+OtTy/AYq4aPbiUP61zShHA3M/E1Na&#xA;/b6joMVXnS7YinqXA3B2uJ+xr/Pirv0XbcgfUuNgRT6xPTf/AGeKrBo9uDX1rkiiihuZ6fCSa/br&#xA;U13xVCatpMUem3M0c94HhhkdQl1OCxEZoKlx3Feo3xVW0fzHpOsWVvfadK09rdSPFDIUdKtGGJNH&#xA;CtT4DQ0xVM8VQWoCtxp2zH/ST9k0p+4l3O42xVG4q7FXYq7FXYq7FXYq7FXYq7FUNf6npunwia/u&#xA;obSIniHndYwT4AsRU5KMDLkLVR0/XtI1CZoLO6WSdF9Qxbq/AmnMKwBK/wCUNsMsco7kKukH+5m3&#xA;NG/3mn+Kvw/3kW1K9foyCtSa5pcesw6M84GpTwtcRQUbeNTQnlTiOhoCamh8MVRcMyTIXStAzoa+&#xA;KMUP4riq/FUFpIpbSbEf6Tc/aNf+Ph9xudsVRuKuxV2KuxV2KuxV2KuxV2KuxVL38x+XkvBYvqlo&#xA;t6WCC1M8QlLHovAtyr7Uyzwp1dGlVNaFdGvxQt/o8uymjH4D0NRQ/TlasH8iXGoxa1qOkXP91Zai&#xA;0kXqNGbg+rDMOcoS4nK8/T5CqLy3cbNQKs81KyW/066sXkeJbqGSBpYzR1EilSynswrtirH9O8qQ&#xA;aNe28iXVzdtcy28ZEjgBFtLWWNCAvDqPt9a+FNsVZRirsVdirsVdirsVdirsVQ2oalY6datdXswh&#xA;hUheRqSWY0VVUVZmY7KqipPTJRgZGgqVBvMer7oTomnt9liqSXzivXiweKAEeIdvZTlnoj/SP2ft&#xA;VG6f5e0iwmNxDBzvGFHvZ2aa5Yb7GaQtJTfZa0HYZGWWUtun2KhvNEaxQWmrKo9fS7mOUPTf0ZWE&#xA;NwK+HpSFqeKjwyWE2THvH9ioyRQNbgajVNtMCeR47PFsFr196ZSrFfPWo32l+ZvL17AtYZGlgklm&#xA;aJYELCnFS88BaSQNUIoYsEqB8O6rLtM/3mf/AIz3H/J98VSbXvJNrrGofXZL66tmKxo8ULKEZY35&#xA;ioKncEVU/smpG5xVNtIUC2l2YVubknkeX+736bmg9sVRuKuxV2KuxV2KuxV2KuxVK9R1+C2ufqNp&#xA;E+oaoQG+pQUqit0eZ2okS/6xqf2Qx2yyOMkWdgqFGg6hqJEmv3ZeI7jSrRmjtR7SP8Ms/vy4of5M&#xA;l4gj9I+J5/s/G6pn+iNK/RzaaLOFdPdDG1osarEUIoV4ABaUyvjld3uqTWUkr+U9Rs53kmn08Xdm&#xA;7Fz6rLDy9Es9Qebw+mxJPfJ5hvY67/j4qxd9CuNG1DzVrq3P1rUdQniS4NhbejOj21lMyGs1yUl4&#xA;w3Cbq0f2TShpSpWY+S9YTVvK+m3f1lLm4NtCt7Iksc1LgRKZVMkX7tmDHcrt4YqjtQFbjTtmP+kn&#xA;7JpT9xLudxtiqNxV2KuxV2KuxV2KuxVA6trFtpsUfNWmubh/Ss7SIAyzSUrxQEgbDdmOyjckDJwg&#xA;ZKhNM0W4a5XVdZZbjVaH0Y1qYLRW2KQAgfFTZ5SOTey0USnkFcMfp+/3/qVOcqV2KpR5wB/wnrJH&#xA;2ksrh0/1kiZlP0EZbg+uPvCop6HWbZgCQbaajV+H7cXavX3plSsb/MLyxLr0uirLeQwWVpfw3CQy&#xA;W7zO1yhYRsrpNCEojOPiVhWhptiqF8ra3cp5817S725dbeZg2l288kILOrzNN6ESu8hTioPMqu9R&#xA;Q0qVWd4qgtJFLaTYj/Sbn7Rr/wAfD7jc7YqjcVdirsVdirsVdiriabnpirH21C/11zFo8v1bSRtN&#xA;rCgM03ilmGBUjxmIK/yhuq38Ih9W8u79f6lTbTdLsNNthb2UQijqWc1LO7nq8jsSzu3dmJJyqczI&#xA;2VRWRV2KsbYcf8WxULFyJuKnix52McdAaj/fOxrls/pj7v0lUk0TWrTXfJzXWsTG7smmu4728SB4&#xA;PWtxaS1dY0HqH90afZDCnHcjkalWflxp11rH5ex2upi405pFubWS0iYxiKORfT4KpLgCNT8FDQYq&#xA;nVh5Wh0e/gkS4muRPLbxKpEcfppaWsyR1MQjL7H4uVSenTFWUYq7FXYq7FXYq7FUFq2qw6ba+s6P&#xA;NK7CO2tYgDLNK32Y0BI37knZRViQATk4Q4iqG0fSrlJm1PVSkurzrwPp1MdvCTUW8JNDSoq70Bdt&#xA;zQBVWWSY+mP0/f5qm2VK7FXYqh9Stzc6ddWwFTPDJHQGh+NSvU/PJQNEFUq0OYXKaNd/ETcaZ6nK&#xA;p4fEIG2QnY7+GHKKkR5qh77VrtPPmnaUJ1azntJJntPS5MsiluMrSHseNF4n4d6q3MNHBWK2qsv5&#xA;tILKORIZ1uV1O5T1FDTETcUZieLBY0iZQBQEk/arirJ9T8hW19epeHUbpZVWNGDelIrLHKJd+SVr&#xA;VQAa/CK8aVOKp3pCgW0uzCtzck8jy/3e/Tc0HtiqNxV2KuxV2KuxVZPPBbwyTzyLFBEpeWWQhUVV&#xA;FSzMdgAO+EAnYKx8R3PmYhple28udVgYFJb2hO8gO6W57J9qT9qi/C19jH/X+79v3KyJEREVEUKi&#xA;gKqqKAAbAADMdW8VdirsVY1fj/cl5jiozBtLtpaKSrVJukoGBX/fQ75bL6B7z+hWNeQPXsvMOqeX&#xA;hIiWmkXy+hp6yPO8C3EE7qXlaGAfvVXmqqWopHI8q1qV6ViqC1AVuNO2Y/6SfsmlP3Eu53G2Ko3F&#xA;XYq7FXYq7FUDq2sWmmQo03KSadxFa2sQDTTSHokakiviSdlG5IArk4QMlQmk6RdG7Or6uVk1R1KQ&#xA;xIS0NpE2/pQkgVZqD1JKVY+CgASnMVwx+n71TnKldirsVdirsVSy3s7ayvrCztozHbW1lJDAvIlV&#xA;SNoVVdyTUAdT9+GUiTZViX5jS3OleYvLut2sqWrSytps9zJIaMsvxpAkIhmLu/FmBLKo4nlvxoFZ&#xA;tpn+8z/8Z7j/AJPviqKxVBaSKW0mxH+k3P2jX/j4fcbnbFUbirsVdirsVQWqaxp+mRo93JR5Twt7&#xA;dAXmlfrwijWrufkNhudsnDGZclS2HS7/AFiZLvXIxDaRsJLXRQQ6hhusl0wqskgO4RfgU/zEBhYZ&#xA;iO0eff8AqVP8oV2KuxV2KuxVjer/AAatqwox+s6P9lTQt6DzfZNRQj1/Hvlp/u/j+PuVW0nyha6b&#xA;qt5qiXU09zfSRzXHqiEAtGksa09OOM/Zmp8ROyj3rUqYavo9rqtpLa3LzJHLFLAxhleP4ZkKMaKe&#xA;LEA/DyBpiqT2Play0a7tGgmurgyyQQn1ZFoqWtvMsXEIIwAFajAbGnStaqsmxV2KuxV2KpLdeYvW&#xA;mkstEiGo30bFJnDcbWBh19eYAio/32nJ/EAb5cMVby2H2qraVon1Wdr69nN9q0q8ZLtl4qiEg+lB&#xA;HUiKOoG1ST1Ysd8jPJYobR/HNU0ytXYq7FXYq7FXYqgZFA1uBqNU20wJ5Hjs8WwWvX3piqC8w+Vo&#xA;Ndms3ubuaKKykE8VvGsJQyrUByZI5HB4MyfCw2Y4qm0NsscLxVJV2kYkEqf3rlzQjcU5Yqx7UfIG&#xA;kX12t1Jc3sbBY0ZUuGPNYpROod3DyOBIoNGYgdBQFqqoq3u9Ttkk+rabJdwtPcszLPGH5fWJBRUl&#xA;YLxoNviHyycYg8zSqn6evx/eaDqEa9A1bN/wjuHP4ZLwx/OH2/qVv/EkY2bTtQVu6/Vnan0ryU/Q&#xA;cfC8x81a/T1++0OhX71p8TG1iUV8ec6t9ynHwx1kPt/Uqwr5uvDxZrXSID1aIteXBH+SXWGKNvms&#xA;gw/ux3y+z8fYqK0zQdP0+V7hA899KKTX1wxlnYdePNvspXoi0UdhkZ5DLbp3KmOVq7FXYq7FXYq7&#xA;FUv1y3hbS76Ux8phazIHX4ZOPEniHqpFSPHDaphgV2KpfqkqJJZSUZxHMXKxn4qCCU1oCK9OnfEK&#xA;of4kQ7R6bqDt/L9WZPxkKL+OW+F5j5q1+ndRb+60G/YfsuzWaLX3DXAcf8Dj4Y/nD7f1K0bjzdcb&#xA;RWlnYqeks80lw4+cMaRL902GsY6k/Z+Pkq1vLT3v/Hav5r9D9qzT/RrXfqDFGebqf5ZZHGPi19Ir&#xA;7T+PdSpvbwW9vBHDbRpDBGoWKKNQqKo6BVXYDKiSdyqpgV2KuxVwIPTFXYq7FXYqgpKfpq32O1vO&#xA;Ca/D9uHalev0YqjcVdirRZQCSQABU17DFUHpNPq0ooQfrFyaMane4ffqdvDFUbirsVdirqitO/hi&#xA;rsVdirsVdUVp38MVdirsVdiqC1un6GvhQmtvKAqnix/dnYGo3+nFUbiqC1bR7TVbSW1umlEUsUsD&#xA;iKWSOqTIUeoUhWNDtyBp2xVht35WvtFv7eDRbSbU7K/ECag00/pLbJZqlvF6YiaADnA7q1Aa8RWv&#xA;Qqsos9KvRczNeTEwMkYgjinuaq45eqSWfoarx+RxVG/oy2/nn/6SJ/8AmvFXfoy2/nn/AOkif/mv&#xA;FUk81rrNjYRyaDZy6jeNIFa3a5nUBKVL8jKg28D1xVF2uj3yXqCSQLpqQFBFHPc8/VDjhSrUCiPY&#xA;++Kph+jLb+ef/pIn/wCa8Vd+jLb+ef8A6SJ/+a8VSvzCl1YaeZ9Ot7i9ueVBAJ7kk/CxH2X/AJgM&#xA;VXabp97JHZyzwtaRywtJeWwurhpEnk4OACCF2JkDfQcVTL9GW388/wD0kT/814qkvmfWdD8t20Nx&#xA;qBvWjmMoUwyzvQQW8lzIW/eACkUDnxNNsVTr9GW388//AEkT/wDNeKobS7FY72+naJ1dZfShleSV&#xA;xJGY42LBZHcA8vgJHXjiqZ4q0yhlKmtGFDQkHfwI3GKsU1z8v9KvWkvBNd/WY4kESiZnLGCQTxhm&#xA;fnI371EIq/w0+HjvVVbplj5ju7e8uJbZdMu5Lg+kDPcUeMSq/IqsjBVZWk2233oK4qyT9GW388//&#xA;AEkT/wDNeKu/Rlt/PP8A9JE//NeKu/Rlt/PP/wBJE/8AzXirFdMg8339vdtc2a6fdxwslnNJc3JB&#xA;lkStKCSQ8FdVLfOm/GpVZRHpkXpr6jzGSg5lbielab0+PFV36Mtv55/+kif/AJrxV36Mtv55/wDp&#xA;In/5rxVj+kHWLvV7mO90uW1trd5o4Ltru4BaJZ2RGFWNfUjRX4jpTc7riqdWWmOLOAXskhvPTT6y&#xA;Yri49P1eI58OTg8eXSuKq36Mtv55/wDpIn/5rxVJdA1rQtcury2szepLYmkwmlnjqBcT21VrJX+9&#xA;s5V3odsVRmq6THItvGqTTRyTBJwZ7g8YmVlZgRIvHrSvhtiqcYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYqlXmX/D36N/3Pen9S9RePqcq89/s8Pi+zy5U/Y5cvhriqa4q7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FUp0j/Dv6U1T9Gen9f5p+kvT5U5Vfj1+D7fqV4/t8q/FXFU2xV//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-01-10T14:40:13+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-01-10T14:40:13+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F117407206811960DA7D0E48CDD34</stEvt:instanceID>
                  <stEvt:when>2013-01-10T14:40:13+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:F87F117407206811960DA7D0E48CDD34</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F87F117407206811960DA7D0E48CDD34</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F87F117407206811960DA7D0E48CDD34</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -244.085 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 244.085 li
405.775 244.085 li
405.775 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.6 lw
2 lc
0 lj
3.25 ml
[.72 2.88 ] 0 dsh
true sadj
37.605 74.5415 mo
40.2065 73.6963 li
42.8086 72.8584 li
45.4097 72.0273 li
48.0117 71.2051 li
50.6138 70.3921 li
53.2148 69.5884 li
55.8169 68.7944 li
58.4189 68.0103 li
61.0195 67.2393 li
63.6216 66.4814 li
66.2236 65.7373 li
68.8247 65.0083 li
71.4268 64.2974 li
74.0288 63.6045 li
76.6309 62.9331 li
79.2319 62.2842 li
81.834 61.6611 li
84.4355 61.0654 li
87.0366 60.5015 li
89.6387 59.9702 li
92.2407 59.4775 li
94.8418 59.0244 li
97.4438 58.6172 li
100.046 58.2593 li
102.647 57.9541 li
105.249 57.7061 li
107.851 57.5215 li
110.452 57.4043 li
113.054 57.3574 li
115.656 57.3862 li
118.257 57.4932 li
120.859 57.6821 li
123.461 57.9551 li
126.062 58.3115 li
128.664 58.7495 li
131.266 59.2651 li
133.867 59.8516 li
136.469 60.4971 li
139.071 61.1885 li
141.672 61.9043 li
144.274 62.6182 li
146.876 63.2993 li
149.477 63.9072 li
152.079 64.3965 li
154.681 64.7114 li
157.282 64.7925 li
159.884 64.5703 li
162.486 63.9702 li
165.087 62.9131 li
167.689 61.3193 li
170.291 59.1074 li
172.892 56.1963 li
175.494 52.5161 li
178.096 48.0024 li
180.697 42.6045 li
183.299 36.2842 li
185.901 29.0264 li
188.502 20.8301 li
191.104 11.7192 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.247059 .239216 .6 rgb
@
[2.88 2.88 ] 0 dsh
37.605 62.0913 mo
40.2065 61.3784 li
42.8086 60.6714 li
45.4097 59.9692 li
48.0117 59.2725 li
50.6138 58.5811 li
53.2148 57.8965 li
55.8169 57.2202 li
58.4189 56.5503 li
61.0195 55.8901 li
63.6216 55.2402 li
66.2236 54.6001 li
68.8247 53.9731 li
71.4268 53.3594 li
74.0288 52.7603 li
76.6309 52.1792 li
79.2319 51.6162 li
81.834 51.0762 li
84.4355 50.5615 li
87.0366 50.0723 li
89.6387 49.6143 li
92.2407 49.1904 li
94.8418 48.8042 li
97.4438 48.4614 li
100.046 48.165 li
102.647 47.9214 li
105.249 47.7334 li
107.851 47.6084 li
110.452 47.5522 li
113.054 47.5703 li
115.656 47.6685 li
118.257 47.8491 li
120.859 48.1211 li
123.461 48.4863 li
126.062 48.9492 li
128.664 49.5093 li
131.266 50.165 li
133.867 50.9141 li
136.469 51.7495 li
139.071 52.6582 li
141.672 53.6245 li
144.274 54.6245 li
146.876 55.6294 li
149.477 56.6001 li
152.079 57.4922 li
154.681 58.2495 li
157.282 58.8081 li
159.884 59.0923 li
162.486 59.0161 li
165.087 58.4941 li
167.689 57.4214 li
170.291 55.6953 li
172.892 53.2095 li
175.494 49.8584 li
178.096 45.5352 li
180.697 40.1294 li
183.299 33.5464 li
185.901 25.6782 li
188.502 16.4023 li
191.104 5.50928 li
.6 .239216 .443137 rgb
@
1 lw
[] 0 dsh
37.605 33.5674 mo
40.2065 33.2085 li
42.8086 32.8643 li
45.4097 32.5381 li
48.0117 32.2295 li
50.6138 31.9414 li
53.2148 31.6743 li
55.8169 31.4321 li
58.4189 31.2144 li
61.0195 31.0244 li
63.6216 30.8643 li
66.2236 30.7354 li
68.8247 30.6411 li
71.4268 30.5854 li
74.0288 30.5684 li
76.6309 30.5942 li
79.2319 30.6675 li
81.834 30.7891 li
84.4355 30.9663 li
87.0366 31.1982 li
89.6387 31.4912 li
92.2407 31.8491 li
94.8418 32.2754 li
97.4438 32.7744 li
100.046 33.3501 li
102.647 34.0083 li
105.249 34.7495 li
107.851 35.5791 li
110.452 36.5005 li
113.054 37.5161 li
115.656 38.6294 li
118.257 39.8374 li
120.859 41.1421 li
123.461 42.5415 li
126.062 44.0303 li
128.664 45.6016 li
131.266 47.2461 li
133.867 48.9512 li
136.469 50.6982 li
139.071 52.4683 li
141.672 54.2314 li
144.274 55.9561 li
146.876 57.6074 li
149.477 59.1372 li
152.079 60.498 li
154.681 61.6323 li
157.282 62.4785 li
159.884 62.9663 li
162.486 63.0205 li
165.087 62.5635 li
167.689 61.5073 li
170.291 59.7622 li
172.892 57.2354 li
175.494 53.8281 li
178.096 49.4404 li
180.697 43.9595 li
183.299 37.2813 li
185.901 29.2852 li
188.502 19.8291 li
191.104 8.68213 li
.6 .545098 .239216 rgb
@
.4 lw
196.958 1.73535 mo
196.958 102.23 li
34.3525 1.73535 mo
196.958 1.73535 li
34.3525 102.23 mo
34.3525 1.73535 li
196.958 102.23 mo
34.3525 102.23 li
0 0 0 rgb
@
0 lc
193.706 102.23 mo
193.706 100.23 li
@
194.137 106.061 mo
194.138 106.066 194.138 106.079 194.138 106.098 cv
194.138 109.907 li
194.138 110.069 194.182 110.173 194.269 110.217 cv
194.355 110.261 194.518 110.288 194.755 110.296 cv
194.755 110.385 li
192.968 110.385 li
192.968 110.29 li
193.223 110.277 193.39 110.242 193.468 110.186 cv
193.545 110.128 193.584 110.005 193.584 109.815 cv
193.584 106.885 li
193.584 106.784 193.572 106.707 193.547 106.654 cv
193.521 106.602 193.466 106.575 193.382 106.575 cv
193.327 106.575 193.256 106.59 193.168 106.621 cv
193.081 106.652 192.999 106.684 192.923 106.718 cv
192.923 106.629 li
194.084 106.037 li
194.123 106.037 li
194.131 106.048 194.136 106.056 194.137 106.061 cv
cp
.137255 .121569 .12549 rgb
f
141.672 102.23 mo
141.672 100.23 li
0 0 0 rgb
@
136.668 106.287 mo
136.669 106.292 136.669 106.304 136.669 106.323 cv
136.669 110.133 li
136.669 110.295 136.713 110.398 136.8 110.443 cv
136.887 110.487 137.049 110.513 137.287 110.522 cv
137.287 110.61 li
135.499 110.61 li
135.499 110.516 li
135.754 110.503 135.921 110.468 135.999 110.411 cv
136.077 110.354 136.116 110.23 136.116 110.041 cv
136.116 107.111 li
136.116 107.01 136.103 106.933 136.078 106.88 cv
136.053 106.827 135.998 106.801 135.914 106.801 cv
135.858 106.801 135.787 106.816 135.7 106.847 cv
135.612 106.877 135.53 106.91 135.455 106.943 cv
135.455 106.854 li
136.616 106.263 li
136.654 106.263 li
136.662 106.273 136.667 106.281 136.668 106.287 cv
cp
.137255 .121569 .12549 rgb
f
139.926 109.981 mo
140.042 109.642 140.1 109.151 140.1 108.508 cv
140.1 107.996 140.065 107.587 139.996 107.281 cv
139.865 106.712 139.62 106.427 139.261 106.427 cv
138.903 106.427 138.657 106.72 138.524 107.306 cv
138.455 107.618 138.42 108.029 138.42 108.54 cv
138.42 109.018 138.456 109.4 138.527 109.687 cv
138.662 110.223 138.916 110.49 139.287 110.49 cv
139.597 110.49 139.81 110.32 139.926 109.981 cv
cp
140.407 107.019 mo
140.62 107.431 140.727 107.903 140.727 108.437 cv
140.727 108.856 140.661 109.252 140.53 109.623 cv
140.283 110.321 139.856 110.67 139.249 110.67 cv
138.833 110.67 138.491 110.482 138.224 110.104 cv
137.937 109.701 137.793 109.154 137.793 108.462 cv
137.793 107.918 137.889 107.449 138.081 107.057 cv
138.341 106.523 138.739 106.257 139.277 106.257 cv
139.762 106.257 140.139 106.511 140.407 107.019 cv
cp
f
141.798 107.165 mo
141.798 106.906 li
144.158 106.906 li
144.158 107.165 li
141.798 107.165 li
cp
f
147.366 105.15 mo
147.366 105.153 147.367 105.162 147.367 105.176 cv
147.367 107.88 li
147.367 107.996 147.397 108.069 147.459 108.101 cv
147.521 108.132 147.636 108.151 147.805 108.157 cv
147.805 108.22 li
146.536 108.22 li
146.536 108.152 li
146.717 108.144 146.835 108.119 146.891 108.078 cv
146.946 108.038 146.974 107.95 146.974 107.815 cv
146.974 105.735 li
146.974 105.663 146.965 105.608 146.947 105.571 cv
146.929 105.534 146.89 105.515 146.83 105.515 cv
146.791 105.515 146.74 105.526 146.678 105.547 cv
146.616 105.569 146.558 105.592 146.504 105.616 cv
146.504 105.553 li
147.329 105.133 li
147.355 105.133 li
147.361 105.141 147.365 105.146 147.366 105.15 cv
cp
f
89.6387 102.23 mo
89.6387 100.23 li
0 0 0 rgb
@
84.6367 106.061 mo
84.6377 106.066 84.6382 106.079 84.6382 106.098 cv
84.6382 109.907 li
84.6382 110.069 84.6816 110.173 84.7686 110.217 cv
84.8555 110.261 85.0176 110.288 85.2554 110.296 cv
85.2554 110.385 li
83.4678 110.385 li
83.4678 110.29 li
83.7227 110.277 83.8896 110.242 83.9678 110.186 cv
84.0454 110.128 84.0845 110.005 84.0845 109.815 cv
84.0845 106.885 li
84.0845 106.784 84.0718 106.707 84.0469 106.654 cv
84.0215 106.602 83.9663 106.575 83.8823 106.575 cv
83.8271 106.575 83.7559 106.59 83.6685 106.621 cv
83.5811 106.652 83.499 106.684 83.4233 106.718 cv
83.4233 106.629 li
84.5845 106.037 li
84.6226 106.037 li
84.6309 106.048 84.6357 106.056 84.6367 106.061 cv
cp
.137255 .121569 .12549 rgb
f
87.8945 109.755 mo
88.0107 109.416 88.0688 108.925 88.0688 108.282 cv
88.0688 107.77 88.0337 107.361 87.9644 107.056 cv
87.8335 106.486 87.5889 106.202 87.23 106.202 cv
86.8716 106.202 86.626 106.495 86.4932 107.081 cv
86.4233 107.393 86.3887 107.804 86.3887 108.314 cv
86.3887 108.792 86.4243 109.175 86.4961 109.461 cv
86.6309 109.997 86.8843 110.265 87.2554 110.265 cv
87.5654 110.265 87.7788 110.095 87.8945 109.755 cv
cp
88.3755 106.793 mo
88.5884 107.205 88.6953 107.677 88.6953 108.211 cv
88.6953 108.631 88.6299 109.026 88.499 109.397 cv
88.252 110.096 87.8252 110.445 87.2173 110.445 cv
86.8018 110.445 86.46 110.256 86.1924 109.878 cv
85.9053 109.476 85.7622 108.928 85.7622 108.236 cv
85.7622 107.692 85.8579 107.224 86.0498 106.832 cv
86.3096 106.298 86.708 106.031 87.2461 106.031 cv
87.731 106.031 88.1074 106.285 88.3755 106.793 cv
cp
f
89.7749 106.939 mo
89.7749 106.681 li
92.1343 106.681 li
92.1343 106.939 li
89.7749 106.939 li
cp
f
94.1079 107.942 mo
94.6558 107.374 95.0278 106.956 95.2241 106.69 cv
95.4204 106.423 95.5186 106.164 95.5186 105.911 cv
95.5186 105.689 95.4585 105.521 95.3389 105.405 cv
95.2192 105.289 95.0762 105.231 94.9097 105.231 cv
94.7046 105.231 94.5381 105.306 94.4111 105.455 cv
94.3408 105.538 94.2734 105.664 94.209 105.834 cv
94.1123 105.814 li
94.187 105.47 94.314 105.231 94.4932 105.097 cv
94.6719 104.963 94.8643 104.896 95.0693 104.896 cv
95.3223 104.896 95.5273 104.976 95.6836 105.135 cv
95.8403 105.294 95.9185 105.489 95.9185 105.72 cv
95.9185 105.965 95.834 106.202 95.6646 106.429 cv
95.4951 106.657 95.1274 107.062 94.561 107.644 cv
95.5928 107.644 li
95.7363 107.644 95.8374 107.626 95.896 107.592 cv
95.9546 107.558 96.0205 107.474 96.0938 107.341 cv
96.1523 107.368 li
95.9028 107.994 li
94.1079 107.994 li
94.1079 107.942 li
cp
f
37.605 102.23 mo
37.605 100.23 li
0 0 0 rgb
@
32.6055 106.061 mo
32.6064 106.066 32.6069 106.079 32.6069 106.098 cv
32.6069 109.907 li
32.6069 110.069 32.6504 110.173 32.7373 110.217 cv
32.8242 110.261 32.9863 110.288 33.2241 110.296 cv
33.2241 110.385 li
31.4365 110.385 li
31.4365 110.29 li
31.6914 110.277 31.8584 110.242 31.9365 110.186 cv
32.0142 110.128 32.0532 110.005 32.0532 109.815 cv
32.0532 106.885 li
32.0532 106.784 32.0405 106.707 32.0156 106.654 cv
31.9902 106.602 31.9351 106.575 31.8511 106.575 cv
31.7959 106.575 31.7246 106.59 31.6372 106.621 cv
31.5498 106.652 31.4678 106.684 31.3921 106.718 cv
31.3921 106.629 li
32.5532 106.037 li
32.5913 106.037 li
32.5996 106.048 32.6045 106.056 32.6055 106.061 cv
cp
.137255 .121569 .12549 rgb
f
35.8633 109.755 mo
35.9795 109.416 36.0376 108.925 36.0376 108.282 cv
36.0376 107.77 36.0024 107.361 35.9331 107.056 cv
35.8022 106.486 35.5576 106.202 35.1987 106.202 cv
34.8403 106.202 34.5947 106.495 34.4619 107.081 cv
34.3921 107.393 34.3574 107.804 34.3574 108.314 cv
34.3574 108.792 34.3931 109.175 34.4648 109.461 cv
34.5996 109.997 34.853 110.265 35.2241 110.265 cv
35.5342 110.265 35.7476 110.095 35.8633 109.755 cv
cp
36.3442 106.793 mo
36.5571 107.205 36.6641 107.677 36.6641 108.211 cv
36.6641 108.631 36.5986 109.026 36.4678 109.397 cv
36.2207 110.096 35.7939 110.445 35.186 110.445 cv
34.7705 110.445 34.4287 110.256 34.1611 109.878 cv
33.874 109.476 33.731 108.928 33.731 108.236 cv
33.731 107.692 33.8267 107.224 34.0186 106.832 cv
34.2783 106.298 34.6768 106.031 35.2148 106.031 cv
35.6997 106.031 36.0762 106.285 36.3442 106.793 cv
cp
f
37.7358 106.939 mo
37.7358 106.681 li
40.0952 106.681 li
40.0952 106.939 li
37.7358 106.939 li
cp
f
42.6079 107.732 mo
42.7437 107.818 42.8584 107.862 42.9526 107.862 cv
43.1626 107.862 43.3184 107.791 43.4199 107.649 cv
43.522 107.507 43.5728 107.353 43.5728 107.187 cv
43.5728 107.026 43.5317 106.885 43.4492 106.764 cv
43.3101 106.558 43.0747 106.455 42.7437 106.455 cv
42.7241 106.455 42.7056 106.456 42.6875 106.457 cv
42.6699 106.457 42.6489 106.459 42.625 106.462 cv
42.6201 106.403 li
42.8599 106.317 43.0488 106.217 43.1865 106.105 cv
43.3242 105.993 43.3931 105.844 43.3931 105.66 cv
43.3931 105.497 43.3389 105.373 43.23 105.287 cv
43.1216 105.202 42.9976 105.159 42.8584 105.159 cv
42.6938 105.159 42.5483 105.22 42.4224 105.341 cv
42.3535 105.407 42.2793 105.509 42.2002 105.646 cv
42.1304 105.631 li
42.1904 105.403 42.3018 105.221 42.4653 105.085 cv
42.6284 104.949 42.8174 104.88 43.0313 104.88 cv
43.2607 104.88 43.4375 104.943 43.5625 105.069 cv
43.688 105.195 43.7505 105.34 43.7505 105.505 cv
43.7505 105.65 43.6987 105.784 43.5952 105.905 cv
43.5371 105.974 43.4463 106.051 43.3232 106.136 cv
43.4673 106.198 43.5825 106.27 43.6694 106.352 cv
43.8325 106.509 43.9141 106.708 43.9141 106.95 cv
43.9141 107.234 43.8022 107.485 43.5786 107.702 cv
43.3545 107.919 43.0356 108.028 42.6226 108.028 cv
42.4385 108.028 42.3091 108 42.2349 107.946 cv
42.1606 107.891 42.1235 107.833 42.1235 107.77 cv
42.1235 107.73 42.1362 107.693 42.1606 107.657 cv
42.1855 107.621 42.2256 107.603 42.2813 107.603 cv
42.3633 107.603 42.4722 107.646 42.6079 107.732 cv
cp
f
34.3525 102.23 mo
36.3525 102.23 li
0 0 0 rgb
@
19.1177 103.369 mo
19.1177 103.005 li
22.438 103.005 li
22.438 103.369 li
19.1177 103.369 li
cp
.137255 .121569 .12549 rgb
f
24.1401 104.781 mo
24.9121 103.979 25.4365 103.392 25.7129 103.017 cv
25.9893 102.641 26.1274 102.276 26.1274 101.919 cv
26.1274 101.608 26.043 101.37 25.874 101.207 cv
25.7056 101.043 25.5039 100.962 25.27 100.962 cv
24.981 100.962 24.7466 101.067 24.5674 101.278 cv
24.4683 101.394 24.3735 101.572 24.2827 101.812 cv
24.1465 101.784 li
24.252 101.299 24.4307 100.962 24.6831 100.773 cv
24.9351 100.584 25.2056 100.49 25.4946 100.49 cv
25.8511 100.49 26.1396 100.603 26.3599 100.827 cv
26.5801 101.051 26.6904 101.326 26.6904 101.65 cv
26.6904 101.996 26.5713 102.329 26.333 102.649 cv
26.0942 102.97 25.5762 103.54 24.7788 104.36 cv
26.2314 104.36 li
26.4341 104.36 26.5767 104.336 26.6587 104.287 cv
26.7412 104.239 26.834 104.121 26.9375 103.933 cv
27.0195 103.971 li
26.6685 104.854 li
24.1401 104.854 li
24.1401 104.781 li
cp
f
27.7476 104.823 mo
27.6782 104.753 27.6436 104.668 27.6436 104.569 cv
27.6436 104.47 27.6787 104.385 27.7495 104.315 cv
27.8198 104.246 27.9048 104.211 28.0039 104.211 cv
28.103 104.211 28.1875 104.246 28.2573 104.315 cv
28.3267 104.385 28.3618 104.47 28.3618 104.569 cv
28.3618 104.668 28.3271 104.753 28.2588 104.823 cv
28.1904 104.894 28.1055 104.93 28.0039 104.93 cv
27.9028 104.93 27.8174 104.894 27.7476 104.823 cv
cp
f
30.6367 104.224 mo
30.7529 103.885 30.811 103.394 30.811 102.751 cv
30.811 102.239 30.7759 101.83 30.7065 101.524 cv
30.5757 100.955 30.3311 100.67 29.9722 100.67 cv
29.6138 100.67 29.3682 100.963 29.2354 101.549 cv
29.1655 101.861 29.1309 102.272 29.1309 102.783 cv
29.1309 103.261 29.1665 103.644 29.2383 103.93 cv
29.373 104.466 29.6265 104.733 29.9976 104.733 cv
30.3076 104.733 30.521 104.563 30.6367 104.224 cv
cp
31.1177 101.262 mo
31.3306 101.674 31.4375 102.146 31.4375 102.68 cv
31.4375 103.1 31.3721 103.495 31.2412 103.866 cv
30.9941 104.564 30.5674 104.914 29.9595 104.914 cv
29.5439 104.914 29.2021 104.725 28.9346 104.347 cv
28.6475 103.944 28.5044 103.397 28.5044 102.705 cv
28.5044 102.161 28.6001 101.692 28.792 101.3 cv
29.0518 100.767 29.4502 100.5 29.9883 100.5 cv
30.4731 100.5 30.8496 100.754 31.1177 101.262 cv
cp
f
34.3525 77.1064 mo
36.3525 77.1064 li
34.3525 82.1313 mo
35.5527 82.1313 li
34.3525 87.1563 mo
35.5527 87.1563 li
34.3525 92.1812 mo
35.5527 92.1812 li
34.3525 97.2051 mo
35.5527 97.2051 li
0 0 0 rgb
@
19.1177 78.2515 mo
19.1177 77.8882 li
22.438 77.8882 li
22.438 78.2515 li
19.1177 78.2515 li
cp
.137255 .121569 .12549 rgb
f
25.8789 75.4126 mo
25.8799 75.418 25.8804 75.4302 25.8804 75.4492 cv
25.8804 79.2588 li
25.8804 79.4209 25.9238 79.5244 26.0107 79.5688 cv
26.0977 79.6128 26.2598 79.6392 26.4976 79.6479 cv
26.4976 79.7363 li
24.71 79.7363 li
24.71 79.6416 li
24.9648 79.6289 25.1318 79.5938 25.21 79.5371 cv
25.2876 79.48 25.3267 79.3564 25.3267 79.167 cv
25.3267 76.2368 li
25.3267 76.1357 25.314 76.0586 25.2891 76.0059 cv
25.2637 75.9531 25.2085 75.9268 25.1245 75.9268 cv
25.0693 75.9268 24.998 75.9419 24.9106 75.9727 cv
24.8232 76.0034 24.7412 76.0356 24.6655 76.0693 cv
24.6655 75.9805 li
25.8267 75.3887 li
25.8647 75.3887 li
25.873 75.3994 25.8779 75.4072 25.8789 75.4126 cv
cp
f
27.7476 79.7061 mo
27.6782 79.6357 27.6436 79.5508 27.6436 79.4517 cv
27.6436 79.3525 27.6787 79.2681 27.7495 79.1982 cv
27.8198 79.1289 27.9048 79.0942 28.0039 79.0942 cv
28.103 79.0942 28.1875 79.1289 28.2573 79.1982 cv
28.3267 79.2681 28.3618 79.3525 28.3618 79.4517 cv
28.3618 79.5508 28.3271 79.6357 28.2588 79.7061 cv
28.1904 79.7769 28.1055 79.8125 28.0039 79.8125 cv
27.9028 79.8125 27.8174 79.7769 27.7476 79.7061 cv
cp
f
29.4058 79.3613 mo
29.6011 79.4976 29.7515 79.5654 29.8569 79.5654 cv
30.1001 79.5654 30.3125 79.4585 30.4941 79.2441 cv
30.6758 79.0303 30.7666 78.7671 30.7666 78.4551 cv
30.7666 77.9087 30.4751 77.5151 29.8921 77.2749 cv
29.5688 77.1416 29.2681 77.0752 28.9888 77.0752 cv
28.9424 77.0752 28.9136 77.0737 28.9019 77.0708 cv
28.8901 77.0674 28.876 77.0566 28.8594 77.0376 cv
28.8633 77.0205 28.8672 77.0063 28.8701 76.9946 cv
28.8735 76.9834 28.877 76.9722 28.8813 76.9614 cv
29.5713 75.4492 li
30.9282 75.4492 li
30.9956 75.4492 31.0479 75.4375 31.0845 75.4141 cv
31.1216 75.3911 31.1694 75.3477 31.2285 75.2847 cv
31.2793 75.3286 li
31.0352 75.9141 li
31.0269 75.9331 31.0039 75.9453 30.9658 75.9507 cv
30.9277 75.9561 30.8867 75.9585 30.8423 75.9585 cv
29.6162 75.9585 li
29.3467 76.5122 li
29.6934 76.5713 29.9468 76.627 30.1069 76.6797 cv
30.3711 76.7686 30.5918 76.8994 30.769 77.0723 cv
30.9214 77.2222 31.0361 77.3901 31.1143 77.5767 cv
31.1924 77.7637 31.2314 77.9614 31.2314 78.1699 cv
31.2314 78.6362 31.0654 79.0254 30.7324 79.3379 cv
30.3999 79.6499 29.979 79.8062 29.4702 79.8062 cv
29.2632 79.8062 29.0967 79.7856 28.9697 79.7456 cv
28.7583 79.6807 28.6528 79.5635 28.6528 79.3945 cv
28.6528 79.3315 28.6758 79.2759 28.7212 79.2285 cv
28.7666 79.1812 28.8369 79.1572 28.9316 79.1572 cv
29.0522 79.1572 29.21 79.2251 29.4058 79.3613 cv
cp
f
34.3525 51.9834 mo
36.3525 51.9834 li
34.3525 57.0073 mo
35.5527 57.0073 li
34.3525 62.0322 mo
35.5527 62.0322 li
34.3525 67.0571 mo
35.5527 67.0571 li
34.3525 72.0825 mo
35.5527 72.0825 li
0 0 0 rgb
@
19.1177 53.1265 mo
19.1177 52.7632 li
22.438 52.7632 li
22.438 53.1265 li
19.1177 53.1265 li
cp
.137255 .121569 .12549 rgb
f
25.8789 50.2876 mo
25.8799 50.293 25.8804 50.3052 25.8804 50.3242 cv
25.8804 54.1338 li
25.8804 54.2959 25.9238 54.3994 26.0107 54.4438 cv
26.0977 54.4878 26.2598 54.5142 26.4976 54.5229 cv
26.4976 54.6113 li
24.71 54.6113 li
24.71 54.5166 li
24.9648 54.5039 25.1318 54.4688 25.21 54.4121 cv
25.2876 54.355 25.3267 54.2314 25.3267 54.042 cv
25.3267 51.1118 li
25.3267 51.0107 25.314 50.9336 25.2891 50.8809 cv
25.2637 50.8281 25.2085 50.8018 25.1245 50.8018 cv
25.0693 50.8018 24.998 50.8169 24.9106 50.8477 cv
24.8232 50.8784 24.7412 50.9106 24.6655 50.9443 cv
24.6655 50.8555 li
25.8267 50.2637 li
25.8647 50.2637 li
25.873 50.2744 25.8779 50.2822 25.8789 50.2876 cv
cp
f
27.7476 54.5811 mo
27.6782 54.5107 27.6436 54.4258 27.6436 54.3267 cv
27.6436 54.2275 27.6787 54.1431 27.7495 54.0732 cv
27.8198 54.0039 27.9048 53.9692 28.0039 53.9692 cv
28.103 53.9692 28.1875 54.0039 28.2573 54.0732 cv
28.3267 54.1431 28.3618 54.2275 28.3618 54.3267 cv
28.3618 54.4258 28.3271 54.5107 28.2588 54.5811 cv
28.1904 54.6519 28.1055 54.6875 28.0039 54.6875 cv
27.9028 54.6875 27.8174 54.6519 27.7476 54.5811 cv
cp
f
30.6367 53.9819 mo
30.7529 53.6426 30.811 53.1519 30.811 52.5088 cv
30.811 51.9966 30.7759 51.5879 30.7065 51.2822 cv
30.5757 50.7129 30.3311 50.4282 29.9722 50.4282 cv
29.6138 50.4282 29.3682 50.7212 29.2354 51.3071 cv
29.1655 51.6191 29.1309 52.0303 29.1309 52.5405 cv
29.1309 53.019 29.1665 53.4014 29.2383 53.688 cv
29.373 54.2236 29.6265 54.4912 29.9976 54.4912 cv
30.3076 54.4912 30.521 54.3213 30.6367 53.9819 cv
cp
31.1177 51.02 mo
31.3306 51.4316 31.4375 51.9038 31.4375 52.4375 cv
31.4375 52.8574 31.3721 53.2529 31.2412 53.624 cv
30.9941 54.3223 30.5674 54.6714 29.9595 54.6714 cv
29.5439 54.6714 29.2021 54.4829 28.9346 54.105 cv
28.6475 53.7021 28.5044 53.1548 28.5044 52.4629 cv
28.5044 51.9189 28.6001 51.4502 28.792 51.0581 cv
29.0518 50.5244 29.4502 50.2578 29.9883 50.2578 cv
30.4731 50.2578 30.8496 50.5117 31.1177 51.02 cv
cp
f
34.3525 26.8594 mo
36.3525 26.8594 li
34.3525 31.8843 mo
35.5527 31.8843 li
34.3525 36.9082 mo
35.5527 36.9082 li
34.3525 41.9331 mo
35.5527 41.9331 li
34.3525 46.9585 mo
35.5527 46.9585 li
0 0 0 rgb
@
19.1177 28.0015 mo
19.1177 27.6382 li
22.438 27.6382 li
22.438 28.0015 li
19.1177 28.0015 li
cp
.137255 .121569 .12549 rgb
f
26.1367 28.8569 mo
26.2529 28.5176 26.311 28.0269 26.311 27.3838 cv
26.311 26.8716 26.2759 26.4629 26.2065 26.1572 cv
26.0757 25.5879 25.8311 25.3032 25.4722 25.3032 cv
25.1138 25.3032 24.8682 25.5962 24.7354 26.1821 cv
24.6655 26.4941 24.6309 26.9053 24.6309 27.4155 cv
24.6309 27.894 24.6665 28.2764 24.7383 28.563 cv
24.873 29.0986 25.1265 29.3662 25.4976 29.3662 cv
25.8076 29.3662 26.021 29.1963 26.1367 28.8569 cv
cp
26.6177 25.895 mo
26.8306 26.3066 26.9375 26.7788 26.9375 27.3125 cv
26.9375 27.7324 26.8721 28.1279 26.7412 28.499 cv
26.4941 29.1973 26.0674 29.5464 25.4595 29.5464 cv
25.0439 29.5464 24.7021 29.3579 24.4346 28.98 cv
24.1475 28.5771 24.0044 28.0298 24.0044 27.3379 cv
24.0044 26.7939 24.1001 26.3252 24.292 25.9331 cv
24.5518 25.3994 24.9502 25.1328 25.4883 25.1328 cv
25.9731 25.1328 26.3496 25.3867 26.6177 25.895 cv
cp
f
27.7476 29.4561 mo
27.6782 29.3857 27.6436 29.3008 27.6436 29.2017 cv
27.6436 29.1025 27.6787 29.0181 27.7495 28.9482 cv
27.8198 28.8789 27.9048 28.8442 28.0039 28.8442 cv
28.103 28.8442 28.1875 28.8789 28.2573 28.9482 cv
28.3267 29.0181 28.3618 29.1025 28.3618 29.2017 cv
28.3618 29.3008 28.3271 29.3857 28.2588 29.4561 cv
28.1904 29.5269 28.1055 29.5625 28.0039 29.5625 cv
27.9028 29.5625 27.8174 29.5269 27.7476 29.4561 cv
cp
f
29.4058 29.1113 mo
29.6011 29.2476 29.7515 29.3154 29.8569 29.3154 cv
30.1001 29.3154 30.3125 29.2085 30.4941 28.9941 cv
30.6758 28.7803 30.7666 28.5171 30.7666 28.2051 cv
30.7666 27.6587 30.4751 27.2651 29.8921 27.0249 cv
29.5688 26.8916 29.2681 26.8252 28.9888 26.8252 cv
28.9424 26.8252 28.9136 26.8237 28.9019 26.8208 cv
28.8901 26.8174 28.876 26.8066 28.8594 26.7876 cv
28.8633 26.7705 28.8672 26.7563 28.8701 26.7446 cv
28.8735 26.7334 28.877 26.7222 28.8813 26.7114 cv
29.5713 25.1992 li
30.9282 25.1992 li
30.9956 25.1992 31.0479 25.1875 31.0845 25.1641 cv
31.1216 25.1411 31.1694 25.0977 31.2285 25.0347 cv
31.2793 25.0786 li
31.0352 25.6641 li
31.0269 25.6831 31.0039 25.6953 30.9658 25.7007 cv
30.9277 25.7061 30.8867 25.7085 30.8423 25.7085 cv
29.6162 25.7085 li
29.3467 26.2622 li
29.6934 26.3213 29.9468 26.377 30.1069 26.4297 cv
30.3711 26.5186 30.5918 26.6494 30.769 26.8223 cv
30.9214 26.9722 31.0361 27.1401 31.1143 27.3267 cv
31.1924 27.5137 31.2314 27.7114 31.2314 27.9199 cv
31.2314 28.3862 31.0654 28.7754 30.7324 29.0879 cv
30.3999 29.3999 29.979 29.5562 29.4702 29.5562 cv
29.2632 29.5562 29.0967 29.5356 28.9697 29.4956 cv
28.7583 29.4307 28.6528 29.3135 28.6528 29.1445 cv
28.6528 29.0815 28.6758 29.0259 28.7212 28.9785 cv
28.7666 28.9312 28.8369 28.9072 28.9316 28.9072 cv
29.0522 28.9072 29.21 28.9751 29.4058 29.1113 cv
cp
f
34.3525 1.73535 mo
36.3525 1.73535 li
34.3525 6.76025 mo
35.5527 6.76025 li
34.3525 11.7852 mo
35.5527 11.7852 li
34.3525 16.8096 mo
35.5527 16.8096 li
34.3525 21.8345 mo
35.5527 21.8345 li
0 0 0 rgb
@
26.1367 3.72412 mo
26.2529 3.38477 26.311 2.89404 26.311 2.25098 cv
26.311 1.73877 26.2759 1.33008 26.2065 1.02441 cv
26.0757 .455078 25.8311 .17041 25.4722 .17041 cv
25.1138 .17041 24.8682 .463379 24.7354 1.04932 cv
24.6655 1.36133 24.6309 1.77246 24.6309 2.28271 cv
24.6309 2.76123 24.6665 3.14355 24.7383 3.43018 cv
24.873 3.96582 25.1265 4.2334 25.4976 4.2334 cv
25.8076 4.2334 26.021 4.06348 26.1367 3.72412 cv
cp
26.6177 .762207 mo
26.8306 1.17383 26.9375 1.646 26.9375 2.17969 cv
26.9375 2.59961 26.8721 2.99512 26.7412 3.36621 cv
26.4941 4.06445 26.0674 4.41357 25.4595 4.41357 cv
25.0439 4.41357 24.7021 4.2251 24.4346 3.84717 cv
24.1475 3.44434 24.0044 2.89697 24.0044 2.20508 cv
24.0044 1.66113 24.1001 1.19238 24.292 .800293 cv
24.5518 .266602 24.9502 0 25.4883 0 cv
25.9731 0 26.3496 .253906 26.6177 .762207 cv
cp
.137255 .121569 .12549 rgb
f
27.7476 4.32324 mo
27.6782 4.25293 27.6436 4.16797 27.6436 4.06885 cv
27.6436 3.96973 27.6787 3.88525 27.7495 3.81543 cv
27.8198 3.74609 27.9048 3.71143 28.0039 3.71143 cv
28.103 3.71143 28.1875 3.74609 28.2573 3.81543 cv
28.3267 3.88525 28.3618 3.96973 28.3618 4.06885 cv
28.3618 4.16797 28.3271 4.25293 28.2588 4.32324 cv
28.1904 4.39404 28.1055 4.42969 28.0039 4.42969 cv
27.9028 4.42969 27.8174 4.39404 27.7476 4.32324 cv
cp
f
30.6367 3.72412 mo
30.7529 3.38477 30.811 2.89404 30.811 2.25098 cv
30.811 1.73877 30.7759 1.33008 30.7065 1.02441 cv
30.5757 .455078 30.3311 .17041 29.9722 .17041 cv
29.6138 .17041 29.3682 .463379 29.2354 1.04932 cv
29.1655 1.36133 29.1309 1.77246 29.1309 2.28271 cv
29.1309 2.76123 29.1665 3.14355 29.2383 3.43018 cv
29.373 3.96582 29.6265 4.2334 29.9976 4.2334 cv
30.3076 4.2334 30.521 4.06348 30.6367 3.72412 cv
cp
31.1177 .762207 mo
31.3306 1.17383 31.4375 1.646 31.4375 2.17969 cv
31.4375 2.59961 31.3721 2.99512 31.2412 3.36621 cv
30.9941 4.06445 30.5674 4.41357 29.9595 4.41357 cv
29.5439 4.41357 29.2021 4.2251 28.9346 3.84717 cv
28.6475 3.44434 28.5044 2.89697 28.5044 2.20508 cv
28.5044 1.66113 28.6001 1.19238 28.792 .800293 cv
29.0518 .266602 29.4502 0 29.9883 0 cv
30.4731 0 30.8496 .253906 31.1177 .762207 cv
cp
f
193.706 1.73535 mo
193.706 3.73535 li
178.042 1.73535 mo
178.042 3.73535 li
141.672 1.73535 mo
141.672 3.73535 li
126.009 1.73535 mo
126.009 3.73535 li
89.6387 1.73535 mo
89.6387 3.73535 li
73.9746 1.73535 mo
73.9746 3.73535 li
37.605 1.73535 mo
37.605 3.73535 li
0 0 0 rgb
@
.163 lw
191.325 1.73535 mo
191.325 2.34521 li
188.663 1.73535 mo
188.663 2.34521 li
185.646 1.73535 mo
185.646 2.34521 li
182.162 1.73535 mo
182.162 2.34521 li
173 1.73535 mo
173 2.34521 li
166.499 1.73535 mo
166.499 2.34521 li
157.336 1.73535 mo
157.336 2.34521 li
139.291 1.73535 mo
139.291 2.34521 li
136.63 1.73535 mo
136.63 2.34521 li
133.612 1.73535 mo
133.612 2.34521 li
130.129 1.73535 mo
130.129 2.34521 li
120.966 1.73535 mo
120.966 2.34521 li
114.465 1.73535 mo
114.465 2.34521 li
105.303 1.73535 mo
105.303 2.34521 li
87.2578 1.73535 mo
87.2578 2.34521 li
84.5957 1.73535 mo
84.5957 2.34521 li
81.5786 1.73535 mo
81.5786 2.34521 li
78.0947 1.73535 mo
78.0947 2.34521 li
68.9326 1.73535 mo
68.9326 2.34521 li
62.4316 1.73535 mo
62.4316 2.34521 li
53.2686 1.73535 mo
53.2686 2.34521 li
@
.4 lw
196.958 1.73535 mo
194.958 1.73535 li
196.958 6.76025 mo
195.758 6.76025 li
196.958 11.7852 mo
195.758 11.7852 li
196.958 16.8096 mo
195.758 16.8096 li
196.958 21.8345 mo
195.758 21.8345 li
196.958 26.8594 mo
194.958 26.8594 li
196.958 31.8843 mo
195.758 31.8843 li
196.958 36.9082 mo
195.758 36.9082 li
196.958 41.9331 mo
195.758 41.9331 li
196.958 46.9585 mo
195.758 46.9585 li
196.958 51.9834 mo
194.958 51.9834 li
196.958 57.0073 mo
195.758 57.0073 li
196.958 62.0322 mo
195.758 62.0322 li
196.958 67.0571 mo
195.758 67.0571 li
196.958 72.0825 mo
195.758 72.0825 li
196.958 77.1064 mo
194.958 77.1064 li
196.958 82.1313 mo
195.758 82.1313 li
196.958 87.1563 mo
195.758 87.1563 li
196.958 92.1812 mo
195.758 92.1812 li
196.958 97.2051 mo
195.758 97.2051 li
196.958 102.23 mo
194.958 102.23 li
@
.6 lw
2 lc
[.72 2.88 ] 0 dsh
246.222 95.9063 mo
248.824 94.123 li
251.426 92.3843 li
254.026 90.6895 li
256.629 89.0391 li
259.23 87.4355 li
261.832 85.8794 li
264.434 84.3711 li
267.036 82.9121 li
269.637 81.5054 li
272.238 80.1504 li
274.841 78.8491 li
277.441 77.6035 li
280.044 76.415 li
282.646 75.2842 li
285.247 74.2144 li
287.849 73.2061 li
290.451 72.2603 li
293.052 71.3794 li
295.653 70.5654 li
298.256 69.8164 li
300.856 69.1382 li
303.459 68.5283 li
306.061 67.9893 li
308.662 67.5215 li
311.264 67.123 li
313.865 66.7944 li
316.467 66.5352 li
319.068 66.3442 li
321.671 66.2153 li
324.271 66.1494 li
326.874 66.1382 li
329.476 66.1772 li
332.077 66.2583 li
334.679 66.3755 li
337.28 66.5171 li
339.882 66.6724 li
342.483 66.8311 li
345.086 66.9805 li
347.687 67.1001 li
350.289 67.1855 li
352.891 67.2061 li
355.492 67.1475 li
358.094 66.9824 li
360.695 66.6714 li
363.297 66.1812 li
365.898 65.4531 li
368.501 64.4292 li
371.103 63.0405 li
373.704 61.2124 li
376.306 58.8755 li
378.908 55.9614 li
381.509 52.4131 li
384.11 48.1982 li
386.713 43.3013 li
389.313 37.7275 li
391.916 31.5112 li
394.518 24.7075 li
397.119 17.4004 li
399.721 9.69629 li
.247059 .239216 .6 rgb
@
[2.88 2.88 ] 0 dsh
246.222 79.8154 mo
248.824 78.2993 li
251.426 76.8184 li
254.026 75.3794 li
256.629 73.9722 li
259.23 72.6035 li
261.832 71.2705 li
264.434 69.9854 li
267.036 68.7383 li
269.637 67.5342 li
272.238 66.3765 li
274.841 65.2651 li
277.441 64.2002 li
280.044 63.1885 li
282.646 62.2251 li
285.247 61.3164 li
287.849 60.4653 li
290.451 59.6685 li
293.052 58.9355 li
295.653 58.2622 li
298.256 57.6484 li
300.856 57.1084 li
303.459 56.6284 li
306.061 56.2173 li
308.662 55.8804 li
311.264 55.6143 li
313.865 55.415 li
316.467 55.2915 li
319.068 55.2402 li
321.671 55.2563 li
324.271 55.3423 li
326.874 55.4922 li
329.476 55.7021 li
332.077 55.9702 li
334.679 56.2764 li
337.28 56.6392 li
339.882 57.0225 li
342.483 57.4253 li
345.086 57.8491 li
347.687 58.2544 li
350.289 58.6714 li
352.891 59.0195 li
355.492 59.3271 li
358.094 59.5752 li
360.695 59.6924 li
363.297 59.6665 li
365.898 59.4243 li
368.501 58.9102 li
371.103 58.0415 li
373.704 56.7202 li
376.306 54.8745 li
378.908 52.4033 li
381.509 49.2163 li
384.11 45.2612 li
386.713 40.4795 li
389.313 34.8311 li
391.916 28.3174 li
394.518 20.9272 li
397.119 12.6714 li
399.721 3.50342 li
.6 .239216 .443137 rgb
@
1 lw
[] 0 dsh
246.222 53.9194 mo
248.824 52.7305 li
251.426 51.5781 li
254.026 50.4712 li
256.629 49.4004 li
259.23 48.3721 li
261.832 47.3862 li
264.434 46.4561 li
267.036 45.5742 li
269.637 44.7471 li
272.238 43.9775 li
274.841 43.2695 li
277.441 42.6235 li
280.044 42.0483 li
282.646 41.5415 li
285.247 41.1123 li
287.849 40.7642 li
290.451 40.4951 li
293.052 40.3193 li
295.653 40.2324 li
298.256 40.2373 li
300.856 40.3481 li
303.459 40.5542 li
306.061 40.8662 li
308.662 41.2881 li
311.264 41.8164 li
313.865 42.4492 li
316.467 43.1904 li
319.068 44.0361 li
321.671 44.9766 li
324.271 46.0122 li
326.874 47.1304 li
329.476 48.3184 li
332.077 49.5684 li
334.679 50.8516 li
337.28 52.1772 li
339.882 53.4995 li
342.483 54.8071 li
345.086 56.0933 li
347.687 57.3105 li
350.289 58.4824 li
352.891 59.5225 li
355.492 60.4561 li
358.094 61.2632 li
360.695 61.8691 li
363.297 62.2661 li
365.898 62.3823 li
368.501 62.165 li
371.103 61.5361 li
373.704 60.4004 li
376.306 58.6895 li
378.908 56.3071 li
381.509 53.1631 li
384.11 49.2095 li
386.713 44.3882 li
389.313 38.6592 li
391.916 32.0244 li
394.518 24.4683 li
397.119 15.9995 li
399.721 6.56543 li
.6 .545098 .239216 rgb
@
.4 lw
405.575 1.73535 mo
405.575 102.23 li
242.97 1.73535 mo
405.575 1.73535 li
242.97 102.23 mo
242.97 1.73535 li
405.575 102.23 mo
242.97 102.23 li
0 0 0 rgb
@
0 lc
402.322 102.23 mo
402.322 100.23 li
@
402.762 106.061 mo
402.763 106.066 402.764 106.079 402.764 106.098 cv
402.764 109.907 li
402.764 110.069 402.807 110.173 402.894 110.217 cv
402.98 110.261 403.143 110.288 403.38 110.296 cv
403.38 110.385 li
401.593 110.385 li
401.593 110.29 li
401.848 110.277 402.015 110.242 402.093 110.186 cv
402.171 110.128 402.21 110.005 402.21 109.815 cv
402.21 106.885 li
402.21 106.784 402.197 106.707 402.172 106.654 cv
402.146 106.602 402.092 106.575 402.007 106.575 cv
401.952 106.575 401.881 106.59 401.794 106.621 cv
401.706 106.652 401.624 106.684 401.548 106.718 cv
401.548 106.629 li
402.71 106.037 li
402.747 106.037 li
402.756 106.048 402.761 106.056 402.762 106.061 cv
cp
.137255 .121569 .12549 rgb
f
350.289 102.23 mo
350.289 100.23 li
0 0 0 rgb
@
345.293 106.287 mo
345.294 106.292 345.295 106.304 345.295 106.323 cv
345.295 110.133 li
345.295 110.295 345.338 110.398 345.425 110.443 cv
345.512 110.487 345.674 110.513 345.911 110.522 cv
345.911 110.61 li
344.124 110.61 li
344.124 110.516 li
344.379 110.503 344.546 110.468 344.624 110.411 cv
344.702 110.354 344.741 110.23 344.741 110.041 cv
344.741 107.111 li
344.741 107.01 344.729 106.933 344.703 106.88 cv
344.678 106.827 344.623 106.801 344.538 106.801 cv
344.483 106.801 344.412 106.816 344.325 106.847 cv
344.237 106.877 344.155 106.91 344.079 106.943 cv
344.079 106.854 li
345.241 106.263 li
345.278 106.263 li
345.287 106.273 345.292 106.281 345.293 106.287 cv
cp
.137255 .121569 .12549 rgb
f
348.551 109.981 mo
348.667 109.642 348.725 109.151 348.725 108.508 cv
348.725 107.996 348.69 107.587 348.62 107.281 cv
348.489 106.712 348.245 106.427 347.887 106.427 cv
347.527 106.427 347.282 106.72 347.149 107.306 cv
347.079 107.618 347.045 108.029 347.045 108.54 cv
347.045 109.018 347.081 109.4 347.152 109.687 cv
347.287 110.223 347.54 110.49 347.912 110.49 cv
348.222 110.49 348.435 110.32 348.551 109.981 cv
cp
349.032 107.019 mo
349.245 107.431 349.352 107.903 349.352 108.437 cv
349.352 108.856 349.286 109.252 349.155 109.623 cv
348.908 110.321 348.481 110.67 347.874 110.67 cv
347.458 110.67 347.116 110.482 346.849 110.104 cv
346.562 109.701 346.418 109.154 346.418 108.462 cv
346.418 107.918 346.515 107.449 346.706 107.057 cv
346.966 106.523 347.364 106.257 347.902 106.257 cv
348.388 106.257 348.764 106.511 349.032 107.019 cv
cp
f
350.415 107.165 mo
350.415 106.906 li
352.774 106.906 li
352.774 107.165 li
350.415 107.165 li
cp
f
355.99 105.15 mo
355.991 105.153 355.992 105.162 355.992 105.176 cv
355.992 107.88 li
355.992 107.996 356.022 108.069 356.084 108.101 cv
356.146 108.132 356.262 108.151 356.43 108.157 cv
356.43 108.22 li
355.16 108.22 li
355.16 108.152 li
355.342 108.144 355.46 108.119 355.516 108.078 cv
355.571 108.038 355.599 107.95 355.599 107.815 cv
355.599 105.735 li
355.599 105.663 355.59 105.608 355.571 105.571 cv
355.554 105.534 355.515 105.515 355.455 105.515 cv
355.416 105.515 355.365 105.526 355.304 105.547 cv
355.241 105.569 355.183 105.592 355.129 105.616 cv
355.129 105.553 li
355.953 105.133 li
355.98 105.133 li
355.986 105.141 355.99 105.146 355.99 105.15 cv
cp
f
298.256 102.23 mo
298.256 100.23 li
0 0 0 rgb
@
293.254 106.061 mo
293.255 106.066 293.256 106.079 293.256 106.098 cv
293.256 109.907 li
293.256 110.069 293.299 110.173 293.386 110.217 cv
293.473 110.261 293.635 110.288 293.872 110.296 cv
293.872 110.385 li
292.085 110.385 li
292.085 110.29 li
292.34 110.277 292.507 110.242 292.585 110.186 cv
292.663 110.128 292.702 110.005 292.702 109.815 cv
292.702 106.885 li
292.702 106.784 292.689 106.707 292.664 106.654 cv
292.639 106.602 292.584 106.575 292.499 106.575 cv
292.444 106.575 292.373 106.59 292.286 106.621 cv
292.198 106.652 292.116 106.684 292.04 106.718 cv
292.04 106.629 li
293.202 106.037 li
293.239 106.037 li
293.248 106.048 293.253 106.056 293.254 106.061 cv
cp
.137255 .121569 .12549 rgb
f
296.512 109.755 mo
296.628 109.416 296.686 108.925 296.686 108.282 cv
296.686 107.77 296.651 107.361 296.581 107.056 cv
296.45 106.486 296.206 106.202 295.848 106.202 cv
295.488 106.202 295.243 106.495 295.11 107.081 cv
295.04 107.393 295.006 107.804 295.006 108.314 cv
295.006 108.792 295.042 109.175 295.113 109.461 cv
295.248 109.997 295.501 110.265 295.873 110.265 cv
296.183 110.265 296.396 110.095 296.512 109.755 cv
cp
296.993 106.793 mo
297.206 107.205 297.313 107.677 297.313 108.211 cv
297.313 108.631 297.247 109.026 297.116 109.397 cv
296.869 110.096 296.442 110.445 295.835 110.445 cv
295.419 110.445 295.077 110.256 294.81 109.878 cv
294.522 109.476 294.379 108.928 294.379 108.236 cv
294.379 107.692 294.476 107.224 294.667 106.832 cv
294.927 106.298 295.325 106.031 295.863 106.031 cv
296.349 106.031 296.725 106.285 296.993 106.793 cv
cp
f
298.384 106.939 mo
298.384 106.681 li
300.743 106.681 li
300.743 106.939 li
298.384 106.939 li
cp
f
302.725 107.942 mo
303.273 107.374 303.646 106.956 303.842 106.69 cv
304.038 106.423 304.136 106.164 304.136 105.911 cv
304.136 105.689 304.076 105.521 303.956 105.405 cv
303.836 105.289 303.693 105.231 303.527 105.231 cv
303.321 105.231 303.155 105.306 303.028 105.455 cv
302.958 105.538 302.891 105.664 302.826 105.834 cv
302.729 105.814 li
302.805 105.47 302.932 105.231 303.11 105.097 cv
303.289 104.963 303.481 104.896 303.687 104.896 cv
303.939 104.896 304.145 104.976 304.301 105.135 cv
304.457 105.294 304.536 105.489 304.536 105.72 cv
304.536 105.965 304.451 106.202 304.281 106.429 cv
304.112 106.657 303.744 107.062 303.179 107.644 cv
304.21 107.644 li
304.354 107.644 304.455 107.626 304.513 107.592 cv
304.571 107.558 304.638 107.474 304.711 107.341 cv
304.77 107.368 li
304.52 107.994 li
302.725 107.994 li
302.725 107.942 li
cp
f
246.222 102.23 mo
246.222 100.23 li
0 0 0 rgb
@
241.223 106.061 mo
241.224 106.066 241.225 106.079 241.225 106.098 cv
241.225 109.907 li
241.225 110.069 241.268 110.173 241.354 110.217 cv
241.441 110.261 241.604 110.288 241.841 110.296 cv
241.841 110.385 li
240.054 110.385 li
240.054 110.29 li
240.309 110.277 240.476 110.242 240.554 110.186 cv
240.632 110.128 240.671 110.005 240.671 109.815 cv
240.671 106.885 li
240.671 106.784 240.658 106.707 240.633 106.654 cv
240.607 106.602 240.553 106.575 240.468 106.575 cv
240.413 106.575 240.342 106.59 240.255 106.621 cv
240.167 106.652 240.085 106.684 240.009 106.718 cv
240.009 106.629 li
241.171 106.037 li
241.208 106.037 li
241.217 106.048 241.222 106.056 241.223 106.061 cv
cp
.137255 .121569 .12549 rgb
f
244.48 109.755 mo
244.597 109.416 244.654 108.925 244.654 108.282 cv
244.654 107.77 244.62 107.361 244.55 107.056 cv
244.419 106.486 244.175 106.202 243.816 106.202 cv
243.457 106.202 243.212 106.495 243.079 107.081 cv
243.009 107.393 242.975 107.804 242.975 108.314 cv
242.975 108.792 243.011 109.175 243.082 109.461 cv
243.217 109.997 243.47 110.265 243.842 110.265 cv
244.151 110.265 244.364 110.095 244.48 109.755 cv
cp
244.962 106.793 mo
245.175 107.205 245.281 107.677 245.281 108.211 cv
245.281 108.631 245.216 109.026 245.085 109.397 cv
244.838 110.096 244.411 110.445 243.804 110.445 cv
243.388 110.445 243.046 110.256 242.778 109.878 cv
242.491 109.476 242.348 108.928 242.348 108.236 cv
242.348 107.692 242.444 107.224 242.636 106.832 cv
242.896 106.298 243.294 106.031 243.832 106.031 cv
244.317 106.031 244.693 106.285 244.962 106.793 cv
cp
f
246.345 106.939 mo
246.345 106.681 li
248.704 106.681 li
248.704 106.939 li
246.345 106.939 li
cp
f
251.226 107.732 mo
251.36 107.818 251.476 107.862 251.57 107.862 cv
251.779 107.862 251.936 107.791 252.037 107.649 cv
252.139 107.507 252.19 107.353 252.19 107.187 cv
252.19 107.026 252.148 106.885 252.066 106.764 cv
251.927 106.558 251.692 106.455 251.361 106.455 cv
251.342 106.455 251.323 106.456 251.305 106.457 cv
251.287 106.457 251.266 106.459 251.242 106.462 cv
251.237 106.403 li
251.478 106.317 251.666 106.217 251.804 106.105 cv
251.941 105.993 252.011 105.844 252.011 105.66 cv
252.011 105.497 251.956 105.373 251.848 105.287 cv
251.739 105.202 251.615 105.159 251.476 105.159 cv
251.311 105.159 251.166 105.22 251.04 105.341 cv
250.971 105.407 250.896 105.509 250.817 105.646 cv
250.748 105.631 li
250.808 105.403 250.919 105.221 251.082 105.085 cv
251.246 104.949 251.435 104.88 251.648 104.88 cv
251.878 104.88 252.055 104.943 252.18 105.069 cv
252.305 105.195 252.367 105.34 252.367 105.505 cv
252.367 105.65 252.315 105.784 252.213 105.905 cv
252.154 105.974 252.063 106.051 251.94 106.136 cv
252.084 106.198 252.2 106.27 252.286 106.352 cv
252.45 106.509 252.531 106.708 252.531 106.95 cv
252.531 107.234 252.42 107.485 252.195 107.702 cv
251.972 107.919 251.653 108.028 251.239 108.028 cv
251.056 108.028 250.927 108 250.853 107.946 cv
250.778 107.891 250.741 107.833 250.741 107.77 cv
250.741 107.73 250.753 107.693 250.778 107.657 cv
250.803 107.621 250.843 107.603 250.898 107.603 cv
250.98 107.603 251.09 107.646 251.226 107.732 cv
cp
f
242.97 102.23 mo
244.97 102.23 li
0 0 0 rgb
@
227.742 103.369 mo
227.742 103.005 li
231.063 103.005 li
231.063 103.369 li
227.742 103.369 li
cp
.137255 .121569 .12549 rgb
f
232.75 104.781 mo
233.521 103.979 234.046 103.392 234.322 103.017 cv
234.599 102.641 234.736 102.276 234.736 101.919 cv
234.736 101.608 234.652 101.37 234.483 101.207 cv
234.314 101.043 234.113 100.962 233.879 100.962 cv
233.59 100.962 233.356 101.067 233.177 101.278 cv
233.077 101.394 232.982 101.572 232.892 101.812 cv
232.756 101.784 li
232.861 101.299 233.04 100.962 233.292 100.773 cv
233.544 100.584 233.814 100.49 234.104 100.49 cv
234.46 100.49 234.749 100.603 234.969 100.827 cv
235.189 101.051 235.3 101.326 235.3 101.65 cv
235.3 101.996 235.181 102.329 234.942 102.649 cv
234.704 102.97 234.186 103.54 233.388 104.36 cv
234.841 104.36 li
235.043 104.36 235.186 104.336 235.269 104.287 cv
235.351 104.239 235.443 104.121 235.547 103.933 cv
235.629 103.971 li
235.277 104.854 li
232.75 104.854 li
232.75 104.781 li
cp
f
236.357 104.823 mo
236.287 104.753 236.253 104.668 236.253 104.569 cv
236.253 104.47 236.288 104.385 236.358 104.315 cv
236.43 104.246 236.515 104.211 236.613 104.211 cv
236.713 104.211 236.797 104.246 236.866 104.315 cv
236.937 104.385 236.971 104.47 236.971 104.569 cv
236.971 104.668 236.937 104.753 236.868 104.823 cv
236.8 104.894 236.715 104.93 236.613 104.93 cv
236.512 104.93 236.427 104.894 236.357 104.823 cv
cp
f
239.246 104.224 mo
239.362 103.885 239.42 103.394 239.42 102.751 cv
239.42 102.239 239.386 101.83 239.315 101.524 cv
239.185 100.955 238.94 100.67 238.582 100.67 cv
238.223 100.67 237.978 100.963 237.845 101.549 cv
237.774 101.861 237.74 102.272 237.74 102.783 cv
237.74 103.261 237.776 103.644 237.848 103.93 cv
237.982 104.466 238.235 104.733 238.607 104.733 cv
238.917 104.733 239.13 104.563 239.246 104.224 cv
cp
239.728 101.262 mo
239.94 101.674 240.047 102.146 240.047 102.68 cv
240.047 103.1 239.981 103.495 239.851 103.866 cv
239.604 104.564 239.177 104.914 238.569 104.914 cv
238.153 104.914 237.812 104.725 237.544 104.347 cv
237.257 103.944 237.113 103.397 237.113 102.705 cv
237.113 102.161 237.21 101.692 237.401 101.3 cv
237.661 100.767 238.06 100.5 238.598 100.5 cv
239.083 100.5 239.459 100.754 239.728 101.262 cv
cp
f
242.97 77.1064 mo
244.97 77.1064 li
242.97 82.1313 mo
244.17 82.1313 li
242.97 87.1563 mo
244.17 87.1563 li
242.97 92.1812 mo
244.17 92.1812 li
242.97 97.2051 mo
244.17 97.2051 li
0 0 0 rgb
@
227.742 78.2515 mo
227.742 77.8882 li
231.063 77.8882 li
231.063 78.2515 li
227.742 78.2515 li
cp
.137255 .121569 .12549 rgb
f
234.488 75.4126 mo
234.489 75.418 234.49 75.4302 234.49 75.4492 cv
234.49 79.2588 li
234.49 79.4209 234.533 79.5244 234.62 79.5688 cv
234.707 79.6128 234.869 79.6392 235.106 79.6479 cv
235.106 79.7363 li
233.319 79.7363 li
233.319 79.6416 li
233.574 79.6289 233.741 79.5938 233.819 79.5371 cv
233.897 79.48 233.937 79.3564 233.937 79.167 cv
233.937 76.2368 li
233.937 76.1357 233.924 76.0586 233.898 76.0059 cv
233.873 75.9531 233.818 75.9268 233.733 75.9268 cv
233.679 75.9268 233.607 75.9419 233.521 75.9727 cv
233.433 76.0034 233.351 76.0356 233.274 76.0693 cv
233.274 75.9805 li
234.437 75.3887 li
234.474 75.3887 li
234.482 75.3994 234.487 75.4072 234.488 75.4126 cv
cp
f
236.357 79.7061 mo
236.287 79.6357 236.253 79.5508 236.253 79.4517 cv
236.253 79.3525 236.288 79.2681 236.358 79.1982 cv
236.43 79.1289 236.515 79.0942 236.613 79.0942 cv
236.713 79.0942 236.797 79.1289 236.866 79.1982 cv
236.937 79.2681 236.971 79.3525 236.971 79.4517 cv
236.971 79.5508 236.937 79.6357 236.868 79.7061 cv
236.8 79.7769 236.715 79.8125 236.613 79.8125 cv
236.512 79.8125 236.427 79.7769 236.357 79.7061 cv
cp
f
238.015 79.3613 mo
238.21 79.4976 238.36 79.5654 238.467 79.5654 cv
238.709 79.5654 238.922 79.4585 239.104 79.2441 cv
239.285 79.0303 239.376 78.7671 239.376 78.4551 cv
239.376 77.9087 239.084 77.5151 238.501 77.2749 cv
238.178 77.1416 237.877 77.0752 237.599 77.0752 cv
237.552 77.0752 237.522 77.0737 237.511 77.0708 cv
237.5 77.0674 237.485 77.0566 237.469 77.0376 cv
237.473 77.0205 237.477 77.0063 237.479 76.9946 cv
237.482 76.9834 237.486 76.9722 237.49 76.9614 cv
238.181 75.4492 li
239.537 75.4492 li
239.604 75.4492 239.657 75.4375 239.694 75.4141 cv
239.73 75.3911 239.779 75.3477 239.838 75.2847 cv
239.889 75.3286 li
239.645 75.9141 li
239.637 75.9331 239.613 75.9453 239.575 75.9507 cv
239.537 75.9561 239.496 75.9585 239.451 75.9585 cv
238.226 75.9585 li
237.956 76.5122 li
238.303 76.5713 238.556 76.627 238.717 76.6797 cv
238.98 76.7686 239.201 76.8994 239.379 77.0723 cv
239.53 77.2222 239.646 77.3901 239.724 77.5767 cv
239.802 77.7637 239.841 77.9614 239.841 78.1699 cv
239.841 78.6362 239.675 79.0254 239.342 79.3379 cv
239.01 79.6499 238.589 79.8062 238.08 79.8062 cv
237.873 79.8062 237.706 79.7856 237.579 79.7456 cv
237.368 79.6807 237.263 79.5635 237.263 79.3945 cv
237.263 79.3315 237.285 79.2759 237.33 79.2285 cv
237.376 79.1812 237.446 79.1572 237.541 79.1572 cv
237.661 79.1572 237.819 79.2251 238.015 79.3613 cv
cp
f
242.97 51.9834 mo
244.97 51.9834 li
242.97 57.0073 mo
244.17 57.0073 li
242.97 62.0322 mo
244.17 62.0322 li
242.97 67.0571 mo
244.17 67.0571 li
242.97 72.0825 mo
244.17 72.0825 li
0 0 0 rgb
@
227.742 53.1265 mo
227.742 52.7632 li
231.063 52.7632 li
231.063 53.1265 li
227.742 53.1265 li
cp
.137255 .121569 .12549 rgb
f
234.488 50.2876 mo
234.489 50.293 234.49 50.3052 234.49 50.3242 cv
234.49 54.1338 li
234.49 54.2959 234.533 54.3994 234.62 54.4438 cv
234.707 54.4878 234.869 54.5142 235.106 54.5229 cv
235.106 54.6113 li
233.319 54.6113 li
233.319 54.5166 li
233.574 54.5039 233.741 54.4688 233.819 54.4121 cv
233.897 54.355 233.937 54.2314 233.937 54.042 cv
233.937 51.1118 li
233.937 51.0107 233.924 50.9336 233.898 50.8809 cv
233.873 50.8281 233.818 50.8018 233.733 50.8018 cv
233.679 50.8018 233.607 50.8169 233.521 50.8477 cv
233.433 50.8784 233.351 50.9106 233.274 50.9443 cv
233.274 50.8555 li
234.437 50.2637 li
234.474 50.2637 li
234.482 50.2744 234.487 50.2822 234.488 50.2876 cv
cp
f
236.357 54.5811 mo
236.287 54.5107 236.253 54.4258 236.253 54.3267 cv
236.253 54.2275 236.288 54.1431 236.358 54.0732 cv
236.43 54.0039 236.515 53.9692 236.613 53.9692 cv
236.713 53.9692 236.797 54.0039 236.866 54.0732 cv
236.937 54.1431 236.971 54.2275 236.971 54.3267 cv
236.971 54.4258 236.937 54.5107 236.868 54.5811 cv
236.8 54.6519 236.715 54.6875 236.613 54.6875 cv
236.512 54.6875 236.427 54.6519 236.357 54.5811 cv
cp
f
239.246 53.9819 mo
239.362 53.6426 239.42 53.1519 239.42 52.5088 cv
239.42 51.9966 239.386 51.5879 239.315 51.2822 cv
239.185 50.7129 238.94 50.4282 238.582 50.4282 cv
238.223 50.4282 237.978 50.7212 237.845 51.3071 cv
237.774 51.6191 237.74 52.0303 237.74 52.5405 cv
237.74 53.019 237.776 53.4014 237.848 53.688 cv
237.982 54.2236 238.235 54.4912 238.607 54.4912 cv
238.917 54.4912 239.13 54.3213 239.246 53.9819 cv
cp
239.728 51.02 mo
239.94 51.4316 240.047 51.9038 240.047 52.4375 cv
240.047 52.8574 239.981 53.2529 239.851 53.624 cv
239.604 54.3223 239.177 54.6714 238.569 54.6714 cv
238.153 54.6714 237.812 54.4829 237.544 54.105 cv
237.257 53.7021 237.113 53.1548 237.113 52.4629 cv
237.113 51.9189 237.21 51.4502 237.401 51.0581 cv
237.661 50.5244 238.06 50.2578 238.598 50.2578 cv
239.083 50.2578 239.459 50.5117 239.728 51.02 cv
cp
f
242.97 26.8594 mo
244.97 26.8594 li
242.97 31.8843 mo
244.17 31.8843 li
242.97 36.9082 mo
244.17 36.9082 li
242.97 41.9331 mo
244.17 41.9331 li
242.97 46.9585 mo
244.17 46.9585 li
0 0 0 rgb
@
227.742 28.0015 mo
227.742 27.6382 li
231.063 27.6382 li
231.063 28.0015 li
227.742 28.0015 li
cp
.137255 .121569 .12549 rgb
f
234.746 28.8569 mo
234.862 28.5176 234.92 28.0269 234.92 27.3838 cv
234.92 26.8716 234.886 26.4629 234.815 26.1572 cv
234.685 25.5879 234.44 25.3032 234.082 25.3032 cv
233.723 25.3032 233.478 25.5962 233.345 26.1821 cv
233.274 26.4941 233.24 26.9053 233.24 27.4155 cv
233.24 27.894 233.276 28.2764 233.348 28.563 cv
233.482 29.0986 233.735 29.3662 234.107 29.3662 cv
234.417 29.3662 234.63 29.1963 234.746 28.8569 cv
cp
235.228 25.895 mo
235.44 26.3066 235.547 26.7788 235.547 27.3125 cv
235.547 27.7324 235.481 28.1279 235.351 28.499 cv
235.104 29.1973 234.677 29.5464 234.069 29.5464 cv
233.653 29.5464 233.312 29.3579 233.044 28.98 cv
232.757 28.5771 232.613 28.0298 232.613 27.3379 cv
232.613 26.7939 232.71 26.3252 232.901 25.9331 cv
233.161 25.3994 233.56 25.1328 234.098 25.1328 cv
234.583 25.1328 234.959 25.3867 235.228 25.895 cv
cp
f
236.357 29.4561 mo
236.287 29.3857 236.253 29.3008 236.253 29.2017 cv
236.253 29.1025 236.288 29.0181 236.358 28.9482 cv
236.43 28.8789 236.515 28.8442 236.613 28.8442 cv
236.713 28.8442 236.797 28.8789 236.866 28.9482 cv
236.937 29.0181 236.971 29.1025 236.971 29.2017 cv
236.971 29.3008 236.937 29.3857 236.868 29.4561 cv
236.8 29.5269 236.715 29.5625 236.613 29.5625 cv
236.512 29.5625 236.427 29.5269 236.357 29.4561 cv
cp
f
238.015 29.1113 mo
238.21 29.2476 238.36 29.3154 238.467 29.3154 cv
238.709 29.3154 238.922 29.2085 239.104 28.9941 cv
239.285 28.7803 239.376 28.5171 239.376 28.2051 cv
239.376 27.6587 239.084 27.2651 238.501 27.0249 cv
238.178 26.8916 237.877 26.8252 237.599 26.8252 cv
237.552 26.8252 237.522 26.8237 237.511 26.8208 cv
237.5 26.8174 237.485 26.8066 237.469 26.7876 cv
237.473 26.7705 237.477 26.7563 237.479 26.7446 cv
237.482 26.7334 237.486 26.7222 237.49 26.7114 cv
238.181 25.1992 li
239.537 25.1992 li
239.604 25.1992 239.657 25.1875 239.694 25.1641 cv
239.73 25.1411 239.779 25.0977 239.838 25.0347 cv
239.889 25.0786 li
239.645 25.6641 li
239.637 25.6831 239.613 25.6953 239.575 25.7007 cv
239.537 25.7061 239.496 25.7085 239.451 25.7085 cv
238.226 25.7085 li
237.956 26.2622 li
238.303 26.3213 238.556 26.377 238.717 26.4297 cv
238.98 26.5186 239.201 26.6494 239.379 26.8223 cv
239.53 26.9722 239.646 27.1401 239.724 27.3267 cv
239.802 27.5137 239.841 27.7114 239.841 27.9199 cv
239.841 28.3862 239.675 28.7754 239.342 29.0879 cv
239.01 29.3999 238.589 29.5562 238.08 29.5562 cv
237.873 29.5562 237.706 29.5356 237.579 29.4956 cv
237.368 29.4307 237.263 29.3135 237.263 29.1445 cv
237.263 29.0815 237.285 29.0259 237.33 28.9785 cv
237.376 28.9312 237.446 28.9072 237.541 28.9072 cv
237.661 28.9072 237.819 28.9751 238.015 29.1113 cv
cp
f
242.97 1.73535 mo
244.97 1.73535 li
242.97 6.76025 mo
244.17 6.76025 li
242.97 11.7852 mo
244.17 11.7852 li
242.97 16.8096 mo
244.17 16.8096 li
242.97 21.8345 mo
244.17 21.8345 li
0 0 0 rgb
@
234.746 3.72412 mo
234.862 3.38477 234.92 2.89404 234.92 2.25098 cv
234.92 1.73877 234.886 1.33008 234.815 1.02441 cv
234.685 .455078 234.44 .17041 234.082 .17041 cv
233.723 .17041 233.478 .463379 233.345 1.04932 cv
233.274 1.36133 233.24 1.77246 233.24 2.28271 cv
233.24 2.76123 233.276 3.14355 233.348 3.43018 cv
233.482 3.96582 233.735 4.2334 234.107 4.2334 cv
234.417 4.2334 234.63 4.06348 234.746 3.72412 cv
cp
235.228 .762207 mo
235.44 1.17383 235.547 1.646 235.547 2.17969 cv
235.547 2.59961 235.481 2.99512 235.351 3.36621 cv
235.104 4.06445 234.677 4.41357 234.069 4.41357 cv
233.653 4.41357 233.312 4.2251 233.044 3.84717 cv
232.757 3.44434 232.613 2.89697 232.613 2.20508 cv
232.613 1.66113 232.71 1.19238 232.901 .800293 cv
233.161 .266602 233.56 0 234.098 0 cv
234.583 0 234.959 .253906 235.228 .762207 cv
cp
.137255 .121569 .12549 rgb
f
236.357 4.32324 mo
236.287 4.25293 236.253 4.16797 236.253 4.06885 cv
236.253 3.96973 236.288 3.88525 236.358 3.81543 cv
236.43 3.74609 236.515 3.71143 236.613 3.71143 cv
236.713 3.71143 236.797 3.74609 236.866 3.81543 cv
236.937 3.88525 236.971 3.96973 236.971 4.06885 cv
236.971 4.16797 236.937 4.25293 236.868 4.32324 cv
236.8 4.39404 236.715 4.42969 236.613 4.42969 cv
236.512 4.42969 236.427 4.39404 236.357 4.32324 cv
cp
f
239.246 3.72412 mo
239.362 3.38477 239.42 2.89404 239.42 2.25098 cv
239.42 1.73877 239.386 1.33008 239.315 1.02441 cv
239.185 .455078 238.94 .17041 238.582 .17041 cv
238.223 .17041 237.978 .463379 237.845 1.04932 cv
237.774 1.36133 237.74 1.77246 237.74 2.28271 cv
237.74 2.76123 237.776 3.14355 237.848 3.43018 cv
237.982 3.96582 238.235 4.2334 238.607 4.2334 cv
238.917 4.2334 239.13 4.06348 239.246 3.72412 cv
cp
239.728 .762207 mo
239.94 1.17383 240.047 1.646 240.047 2.17969 cv
240.047 2.59961 239.981 2.99512 239.851 3.36621 cv
239.604 4.06445 239.177 4.41357 238.569 4.41357 cv
238.153 4.41357 237.812 4.2251 237.544 3.84717 cv
237.257 3.44434 237.113 2.89697 237.113 2.20508 cv
237.113 1.66113 237.21 1.19238 237.401 .800293 cv
237.661 .266602 238.06 0 238.598 0 cv
239.083 0 239.459 .253906 239.728 .762207 cv
cp
f
402.322 1.73535 mo
402.322 3.73535 li
386.659 1.73535 mo
386.659 3.73535 li
350.289 1.73535 mo
350.289 3.73535 li
334.625 1.73535 mo
334.625 3.73535 li
298.256 1.73535 mo
298.256 3.73535 li
282.592 1.73535 mo
282.592 3.73535 li
246.222 1.73535 mo
246.222 3.73535 li
0 0 0 rgb
@
.163 lw
399.941 1.73535 mo
399.941 2.34521 li
397.279 1.73535 mo
397.279 2.34521 li
394.263 1.73535 mo
394.263 2.34521 li
390.778 1.73535 mo
390.778 2.34521 li
381.615 1.73535 mo
381.615 2.34521 li
375.115 1.73535 mo
375.115 2.34521 li
365.953 1.73535 mo
365.953 2.34521 li
347.908 1.73535 mo
347.908 2.34521 li
345.247 1.73535 mo
345.247 2.34521 li
342.229 1.73535 mo
342.229 2.34521 li
338.746 1.73535 mo
338.746 2.34521 li
329.583 1.73535 mo
329.583 2.34521 li
323.082 1.73535 mo
323.082 2.34521 li
313.919 1.73535 mo
313.919 2.34521 li
295.875 1.73535 mo
295.875 2.34521 li
293.213 1.73535 mo
293.213 2.34521 li
290.195 1.73535 mo
290.195 2.34521 li
286.712 1.73535 mo
286.712 2.34521 li
277.549 1.73535 mo
277.549 2.34521 li
271.048 1.73535 mo
271.048 2.34521 li
261.886 1.73535 mo
261.886 2.34521 li
@
.4 lw
405.575 1.73535 mo
403.575 1.73535 li
405.575 6.76025 mo
404.375 6.76025 li
405.575 11.7852 mo
404.375 11.7852 li
405.575 16.8096 mo
404.375 16.8096 li
405.575 21.8345 mo
404.375 21.8345 li
405.575 26.8594 mo
403.575 26.8594 li
405.575 31.8843 mo
404.375 31.8843 li
405.575 36.9082 mo
404.375 36.9082 li
405.575 41.9331 mo
404.375 41.9331 li
405.575 46.9585 mo
404.375 46.9585 li
405.575 51.9834 mo
403.575 51.9834 li
405.575 57.0073 mo
404.375 57.0073 li
405.575 62.0322 mo
404.375 62.0322 li
405.575 67.0571 mo
404.375 67.0571 li
405.575 72.0825 mo
404.375 72.0825 li
405.575 77.1064 mo
403.575 77.1064 li
405.575 82.1313 mo
404.375 82.1313 li
405.575 87.1563 mo
404.375 87.1563 li
405.575 92.1812 mo
404.375 92.1812 li
405.575 97.2051 mo
404.375 97.2051 li
405.575 102.23 mo
403.575 102.23 li
@
1 lw
2 lc
37.605 225.252 mo
40.2065 225.234 li
42.8086 225.193 li
45.4097 225.127 li
48.0117 225.033 li
50.6138 224.906 li
53.2148 224.746 li
55.8169 224.544 li
58.4189 224.301 li
61.0195 224.006 li
63.6216 223.659 li
66.2236 223.255 li
68.8247 222.785 li
71.4268 222.246 li
74.0288 221.632 li
76.6309 220.936 li
79.2319 220.15 li
81.834 219.27 li
84.4355 218.285 li
87.0366 217.193 li
89.6387 215.987 li
92.2407 214.66 li
94.8418 213.209 li
97.4438 211.626 li
100.046 209.911 li
102.647 208.062 li
105.249 206.079 li
107.851 203.965 li
110.452 201.725 li
113.054 199.364 li
115.656 196.895 li
118.257 194.333 li
120.859 191.694 li
123.461 188.997 li
126.062 186.266 li
128.664 183.523 li
131.266 180.798 li
133.867 178.116 li
136.469 175.503 li
139.071 172.981 li
141.672 170.574 li
144.274 168.301 li
146.876 166.169 li
149.477 164.193 li
152.079 162.37 li
154.681 160.698 li
157.282 159.165 li
159.884 157.762 li
162.486 156.473 li
165.087 155.274 li
167.689 154.16 li
170.291 153.12 li
172.892 152.16 li
175.494 151.31 li
178.096 150.651 li
180.697 150.391 li
183.299 150.931 li
185.901 153.362 li
188.502 161.146 li
191.104 192.772 li
.247059 .239216 .6 rgb
@
.4 lw
196.958 129.432 mo
196.958 229.927 li
34.3525 129.432 mo
196.958 129.432 li
34.3525 229.927 mo
34.3525 129.432 li
196.958 229.927 mo
34.3525 229.927 li
0 0 0 rgb
@
0 lc
193.706 229.927 mo
193.706 227.927 li
@
194.137 233.757 mo
194.138 233.762 194.138 233.773 194.138 233.793 cv
194.138 237.603 li
194.138 237.765 194.182 237.868 194.269 237.912 cv
194.355 237.957 194.518 237.983 194.755 237.991 cv
194.755 238.08 li
192.968 238.08 li
192.968 237.985 li
193.223 237.973 193.39 237.938 193.468 237.881 cv
193.545 237.824 193.584 237.7 193.584 237.511 cv
193.584 234.581 li
193.584 234.479 193.572 234.402 193.547 234.35 cv
193.521 234.297 193.466 234.271 193.382 234.271 cv
193.327 234.271 193.256 234.286 193.168 234.316 cv
193.081 234.347 192.999 234.379 192.923 234.413 cv
192.923 234.324 li
194.084 233.732 li
194.123 233.732 li
194.131 233.743 194.136 233.751 194.137 233.757 cv
cp
.137255 .121569 .12549 rgb
f
141.672 229.927 mo
141.672 227.927 li
0 0 0 rgb
@
136.668 233.99 mo
136.669 233.995 136.669 234.007 136.669 234.026 cv
136.669 237.836 li
136.669 237.998 136.713 238.102 136.8 238.146 cv
136.887 238.19 137.049 238.217 137.287 238.225 cv
137.287 238.313 li
135.499 238.313 li
135.499 238.219 li
135.754 238.206 135.921 238.171 135.999 238.114 cv
136.077 238.058 136.116 237.934 136.116 237.744 cv
136.116 234.814 li
136.116 234.713 136.103 234.636 136.078 234.583 cv
136.053 234.53 135.998 234.504 135.914 234.504 cv
135.858 234.504 135.787 234.52 135.7 234.55 cv
135.612 234.58 135.53 234.612 135.455 234.646 cv
135.455 234.558 li
136.616 233.966 li
136.654 233.966 li
136.662 233.977 136.667 233.984 136.668 233.99 cv
cp
.137255 .121569 .12549 rgb
f
139.926 237.685 mo
140.042 237.345 140.1 236.854 140.1 236.211 cv
140.1 235.698 140.065 235.29 139.996 234.984 cv
139.865 234.415 139.62 234.131 139.261 234.131 cv
138.903 234.131 138.657 234.424 138.524 235.01 cv
138.455 235.321 138.42 235.732 138.42 236.242 cv
138.42 236.721 138.456 237.104 138.527 237.391 cv
138.662 237.926 138.916 238.193 139.287 238.193 cv
139.597 238.193 139.81 238.023 139.926 237.685 cv
cp
140.407 234.723 mo
140.62 235.134 140.727 235.606 140.727 236.14 cv
140.727 236.56 140.661 236.955 140.53 237.326 cv
140.283 238.024 139.856 238.374 139.249 238.374 cv
138.833 238.374 138.491 238.185 138.224 237.808 cv
137.937 237.404 137.793 236.857 137.793 236.165 cv
137.793 235.621 137.889 235.152 138.081 234.76 cv
138.341 234.227 138.739 233.96 139.277 233.96 cv
139.762 233.96 140.139 234.214 140.407 234.723 cv
cp
f
141.798 234.859 mo
141.798 234.602 li
144.158 234.602 li
144.158 234.859 li
141.798 234.859 li
cp
f
147.366 232.845 mo
147.366 232.849 147.367 232.857 147.367 232.871 cv
147.367 235.576 li
147.367 235.691 147.397 235.765 147.459 235.796 cv
147.521 235.827 147.636 235.846 147.805 235.853 cv
147.805 235.915 li
146.536 235.915 li
146.536 235.848 li
146.717 235.839 146.835 235.813 146.891 235.773 cv
146.946 235.733 146.974 235.646 146.974 235.511 cv
146.974 233.431 li
146.974 233.358 146.965 233.304 146.947 233.267 cv
146.929 233.229 146.89 233.21 146.83 233.21 cv
146.791 233.21 146.74 233.221 146.678 233.243 cv
146.616 233.265 146.558 233.287 146.504 233.312 cv
146.504 233.248 li
147.329 232.828 li
147.355 232.828 li
147.361 232.836 147.365 232.842 147.366 232.845 cv
cp
f
89.6387 229.927 mo
89.6387 227.927 li
0 0 0 rgb
@
84.6367 233.757 mo
84.6377 233.762 84.6382 233.773 84.6382 233.793 cv
84.6382 237.603 li
84.6382 237.765 84.6816 237.868 84.7686 237.912 cv
84.8555 237.957 85.0176 237.983 85.2554 237.991 cv
85.2554 238.08 li
83.4678 238.08 li
83.4678 237.985 li
83.7227 237.973 83.8896 237.938 83.9678 237.881 cv
84.0454 237.824 84.0845 237.7 84.0845 237.511 cv
84.0845 234.581 li
84.0845 234.479 84.0718 234.402 84.0469 234.35 cv
84.0215 234.297 83.9663 234.271 83.8823 234.271 cv
83.8271 234.271 83.7559 234.286 83.6685 234.316 cv
83.5811 234.347 83.499 234.379 83.4233 234.413 cv
83.4233 234.324 li
84.5845 233.732 li
84.6226 233.732 li
84.6309 233.743 84.6357 233.751 84.6367 233.757 cv
cp
.137255 .121569 .12549 rgb
f
87.8945 237.451 mo
88.0107 237.111 88.0688 236.62 88.0688 235.978 cv
88.0688 235.465 88.0337 235.057 87.9644 234.751 cv
87.8335 234.182 87.5889 233.897 87.23 233.897 cv
86.8716 233.897 86.626 234.19 86.4932 234.776 cv
86.4233 235.088 86.3887 235.499 86.3887 236.009 cv
86.3887 236.487 86.4243 236.87 86.4961 237.157 cv
86.6309 237.692 86.8843 237.96 87.2554 237.96 cv
87.5654 237.96 87.7788 237.79 87.8945 237.451 cv
cp
88.3755 234.489 mo
88.5884 234.9 88.6953 235.373 88.6953 235.906 cv
88.6953 236.326 88.6299 236.722 88.499 237.093 cv
88.252 237.791 87.8252 238.141 87.2173 238.141 cv
86.8018 238.141 86.46 237.951 86.1924 237.574 cv
85.9053 237.171 85.7622 236.624 85.7622 235.932 cv
85.7622 235.388 85.8579 234.919 86.0498 234.526 cv
86.3096 233.993 86.708 233.727 87.2461 233.727 cv
87.731 233.727 88.1074 233.98 88.3755 234.489 cv
cp
f
89.7749 234.634 mo
89.7749 234.376 li
92.1343 234.376 li
92.1343 234.634 li
89.7749 234.634 li
cp
f
94.1079 235.638 mo
94.6558 235.069 95.0278 234.651 95.2241 234.385 cv
95.4204 234.119 95.5186 233.859 95.5186 233.606 cv
95.5186 233.385 95.4585 233.216 95.3389 233.101 cv
95.2192 232.984 95.0762 232.926 94.9097 232.926 cv
94.7046 232.926 94.5381 233.001 94.4111 233.15 cv
94.3408 233.233 94.2734 233.359 94.209 233.53 cv
94.1123 233.51 li
94.187 233.165 94.314 232.927 94.4932 232.792 cv
94.6719 232.658 94.8643 232.592 95.0693 232.592 cv
95.3223 232.592 95.5273 232.671 95.6836 232.83 cv
95.8403 232.99 95.9185 233.185 95.9185 233.415 cv
95.9185 233.661 95.834 233.897 95.6646 234.125 cv
95.4951 234.352 95.1274 234.757 94.561 235.339 cv
95.5928 235.339 li
95.7363 235.339 95.8374 235.322 95.896 235.287 cv
95.9546 235.253 96.0205 235.169 96.0938 235.036 cv
96.1523 235.063 li
95.9028 235.689 li
94.1079 235.689 li
94.1079 235.638 li
cp
f
37.605 229.927 mo
37.605 227.927 li
0 0 0 rgb
@
32.6055 233.757 mo
32.6064 233.762 32.6069 233.773 32.6069 233.793 cv
32.6069 237.603 li
32.6069 237.765 32.6504 237.868 32.7373 237.912 cv
32.8242 237.957 32.9863 237.983 33.2241 237.991 cv
33.2241 238.08 li
31.4365 238.08 li
31.4365 237.985 li
31.6914 237.973 31.8584 237.938 31.9365 237.881 cv
32.0142 237.824 32.0532 237.7 32.0532 237.511 cv
32.0532 234.581 li
32.0532 234.479 32.0405 234.402 32.0156 234.35 cv
31.9902 234.297 31.9351 234.271 31.8511 234.271 cv
31.7959 234.271 31.7246 234.286 31.6372 234.316 cv
31.5498 234.347 31.4678 234.379 31.3921 234.413 cv
31.3921 234.324 li
32.5532 233.732 li
32.5913 233.732 li
32.5996 233.743 32.6045 233.751 32.6055 233.757 cv
cp
.137255 .121569 .12549 rgb
f
35.8633 237.451 mo
35.9795 237.111 36.0376 236.62 36.0376 235.978 cv
36.0376 235.465 36.0024 235.057 35.9331 234.751 cv
35.8022 234.182 35.5576 233.897 35.1987 233.897 cv
34.8403 233.897 34.5947 234.19 34.4619 234.776 cv
34.3921 235.088 34.3574 235.499 34.3574 236.009 cv
34.3574 236.487 34.3931 236.87 34.4648 237.157 cv
34.5996 237.692 34.853 237.96 35.2241 237.96 cv
35.5342 237.96 35.7476 237.79 35.8633 237.451 cv
cp
36.3442 234.489 mo
36.5571 234.9 36.6641 235.373 36.6641 235.906 cv
36.6641 236.326 36.5986 236.722 36.4678 237.093 cv
36.2207 237.791 35.7939 238.141 35.186 238.141 cv
34.7705 238.141 34.4287 237.951 34.1611 237.574 cv
33.874 237.171 33.731 236.624 33.731 235.932 cv
33.731 235.388 33.8267 234.919 34.0186 234.526 cv
34.2783 233.993 34.6768 233.727 35.2148 233.727 cv
35.6997 233.727 36.0762 233.98 36.3442 234.489 cv
cp
f
37.7358 234.634 mo
37.7358 234.376 li
40.0952 234.376 li
40.0952 234.634 li
37.7358 234.634 li
cp
f
42.6079 235.428 mo
42.7437 235.514 42.8584 235.557 42.9526 235.557 cv
43.1626 235.557 43.3184 235.486 43.4199 235.345 cv
43.522 235.202 43.5728 235.049 43.5728 234.882 cv
43.5728 234.722 43.5317 234.58 43.4492 234.459 cv
43.3101 234.253 43.0747 234.15 42.7437 234.15 cv
42.7241 234.15 42.7056 234.151 42.6875 234.151 cv
42.6699 234.152 42.6489 234.154 42.625 234.157 cv
42.6201 234.099 li
42.8599 234.012 43.0488 233.912 43.1865 233.8 cv
43.3242 233.688 43.3931 233.539 43.3931 233.355 cv
43.3931 233.192 43.3389 233.067 43.23 232.982 cv
43.1216 232.896 42.9976 232.854 42.8584 232.854 cv
42.6938 232.854 42.5483 232.915 42.4224 233.036 cv
42.3535 233.103 42.2793 233.204 42.2002 233.342 cv
42.1304 233.326 li
42.1904 233.099 42.3018 232.916 42.4653 232.78 cv
42.6284 232.644 42.8174 232.576 43.0313 232.576 cv
43.2607 232.576 43.4375 232.639 43.5625 232.765 cv
43.688 232.891 43.7505 233.035 43.7505 233.2 cv
43.7505 233.346 43.6987 233.479 43.5952 233.601 cv
43.5371 233.669 43.4463 233.746 43.3232 233.831 cv
43.4673 233.893 43.5825 233.965 43.6694 234.047 cv
43.8325 234.204 43.9141 234.403 43.9141 234.645 cv
43.9141 234.93 43.8022 235.181 43.5786 235.397 cv
43.3545 235.614 43.0356 235.724 42.6226 235.724 cv
42.4385 235.724 42.3091 235.696 42.2349 235.642 cv
42.1606 235.587 42.1235 235.527 42.1235 235.465 cv
42.1235 235.426 42.1362 235.389 42.1606 235.353 cv
42.1855 235.316 42.2256 235.299 42.2813 235.299 cv
42.3633 235.299 42.4722 235.342 42.6079 235.428 cv
cp
f
34.3525 229.927 mo
36.3525 229.927 li
0 0 0 rgb
@
19.1177 231.063 mo
19.1177 230.7 li
22.438 230.7 li
22.438 231.063 li
19.1177 231.063 li
cp
.137255 .121569 .12549 rgb
f
26.1367 231.92 mo
26.2529 231.58 26.311 231.089 26.311 230.446 cv
26.311 229.934 26.2759 229.525 26.2065 229.22 cv
26.0757 228.65 25.8311 228.366 25.4722 228.366 cv
25.1138 228.366 24.8682 228.659 24.7354 229.245 cv
24.6655 229.557 24.6309 229.968 24.6309 230.478 cv
24.6309 230.956 24.6665 231.339 24.7383 231.626 cv
24.873 232.161 25.1265 232.429 25.4976 232.429 cv
25.8076 232.429 26.021 232.259 26.1367 231.92 cv
cp
26.6177 228.958 mo
26.8306 229.369 26.9375 229.842 26.9375 230.375 cv
26.9375 230.795 26.8721 231.19 26.7412 231.562 cv
26.4941 232.26 26.0674 232.609 25.4595 232.609 cv
25.0439 232.609 24.7021 232.42 24.4346 232.043 cv
24.1475 231.64 24.0044 231.093 24.0044 230.4 cv
24.0044 229.856 24.1001 229.388 24.292 228.995 cv
24.5518 228.462 24.9502 228.195 25.4883 228.195 cv
25.9731 228.195 26.3496 228.449 26.6177 228.958 cv
cp
f
27.7476 232.519 mo
27.6782 232.448 27.6436 232.363 27.6436 232.264 cv
27.6436 232.165 27.6787 232.08 27.7495 232.011 cv
27.8198 231.941 27.9048 231.906 28.0039 231.906 cv
28.103 231.906 28.1875 231.941 28.2573 232.011 cv
28.3267 232.08 28.3618 232.165 28.3618 232.264 cv
28.3618 232.363 28.3271 232.448 28.2588 232.519 cv
28.1904 232.59 28.1055 232.625 28.0039 232.625 cv
27.9028 232.625 27.8174 232.59 27.7476 232.519 cv
cp
f
30.7666 230.606 mo
30.6187 230.243 30.3677 230.062 30.0137 230.062 cv
29.6865 230.062 29.4692 230.159 29.3618 230.353 cv
29.2983 230.467 29.2666 230.656 29.2666 230.923 cv
29.2666 231.267 29.3398 231.603 29.4868 231.932 cv
29.6333 232.261 29.8647 232.426 30.1812 232.426 cv
30.4321 232.426 30.6147 232.318 30.7285 232.104 cv
30.8423 231.891 30.8994 231.64 30.8994 231.353 cv
30.8994 231.072 30.855 230.823 30.7666 230.606 cv
cp
31.1064 232.153 mo
30.8589 232.464 30.5366 232.618 30.1401 232.618 cv
29.7686 232.618 29.4307 232.444 29.126 232.097 cv
28.8213 231.748 28.6689 231.285 28.6689 230.707 cv
28.6689 229.963 28.9639 229.323 29.5547 228.79 cv
30.082 228.343 30.6748 228.119 31.333 228.119 cv
31.3486 228.224 li
31.085 228.272 30.8579 228.338 30.667 228.421 cv
30.4761 228.505 30.3057 228.621 30.1558 228.771 cv
30.002 228.923 29.8574 229.116 29.7222 229.35 cv
29.5874 229.584 29.4946 229.816 29.4438 230.046 cv
29.5747 229.966 29.6875 229.907 29.7827 229.869 cv
29.9512 229.802 30.1211 229.768 30.292 229.768 cv
30.6274 229.768 30.9087 229.884 31.1367 230.115 cv
31.3647 230.348 31.4785 230.679 31.4785 231.109 cv
31.4785 231.495 31.3545 231.843 31.1064 232.153 cv
cp
f
34.3525 204.804 mo
36.3525 204.804 li
34.3525 211.084 mo
35.5527 211.084 li
34.3525 217.364 mo
35.5527 217.364 li
34.3525 223.646 mo
35.5527 223.646 li
0 0 0 rgb
@
19.1177 205.938 mo
19.1177 205.575 li
22.438 205.575 li
22.438 205.938 li
19.1177 205.938 li
cp
.137255 .121569 .12549 rgb
f
26.1367 206.795 mo
26.2529 206.455 26.311 205.964 26.311 205.321 cv
26.311 204.809 26.2759 204.4 26.2065 204.095 cv
26.0757 203.525 25.8311 203.241 25.4722 203.241 cv
25.1138 203.241 24.8682 203.534 24.7354 204.12 cv
24.6655 204.432 24.6309 204.843 24.6309 205.353 cv
24.6309 205.831 24.6665 206.214 24.7383 206.501 cv
24.873 207.036 25.1265 207.304 25.4976 207.304 cv
25.8076 207.304 26.021 207.134 26.1367 206.795 cv
cp
26.6177 203.833 mo
26.8306 204.244 26.9375 204.717 26.9375 205.25 cv
26.9375 205.67 26.8721 206.065 26.7412 206.437 cv
26.4941 207.135 26.0674 207.484 25.4595 207.484 cv
25.0439 207.484 24.7021 207.295 24.4346 206.918 cv
24.1475 206.515 24.0044 205.968 24.0044 205.275 cv
24.0044 204.731 24.1001 204.263 24.292 203.87 cv
24.5518 203.337 24.9502 203.07 25.4883 203.07 cv
25.9731 203.07 26.3496 203.324 26.6177 203.833 cv
cp
f
27.7476 207.394 mo
27.6782 207.323 27.6436 207.238 27.6436 207.139 cv
27.6436 207.04 27.6787 206.955 27.7495 206.886 cv
27.8198 206.816 27.9048 206.781 28.0039 206.781 cv
28.103 206.781 28.1875 206.816 28.2573 206.886 cv
28.3267 206.955 28.3618 207.04 28.3618 207.139 cv
28.3618 207.238 28.3271 207.323 28.2588 207.394 cv
28.1904 207.465 28.1055 207.5 28.0039 207.5 cv
27.9028 207.5 27.8174 207.465 27.7476 207.394 cv
cp
f
30.3364 203.729 mo
28.7832 205.924 li
30.3364 205.924 li
30.3364 203.729 li
cp
30.5449 203.076 mo
30.8457 203.076 li
30.8457 205.924 li
31.5068 205.924 li
31.5068 206.345 li
30.8457 206.345 li
30.8457 207.424 li
30.3428 207.424 li
30.3428 206.345 li
28.52 206.345 li
28.52 205.924 li
30.5449 203.076 li
cp
f
34.3525 179.68 mo
36.3525 179.68 li
34.3525 185.96 mo
35.5527 185.96 li
34.3525 192.241 mo
35.5527 192.241 li
34.3525 198.522 mo
35.5527 198.522 li
0 0 0 rgb
@
19.1177 180.813 mo
19.1177 180.45 li
22.438 180.45 li
22.438 180.813 li
19.1177 180.813 li
cp
.137255 .121569 .12549 rgb
f
26.1367 181.67 mo
26.2529 181.33 26.311 180.839 26.311 180.196 cv
26.311 179.684 26.2759 179.275 26.2065 178.97 cv
26.0757 178.4 25.8311 178.116 25.4722 178.116 cv
25.1138 178.116 24.8682 178.409 24.7354 178.995 cv
24.6655 179.307 24.6309 179.718 24.6309 180.228 cv
24.6309 180.706 24.6665 181.089 24.7383 181.376 cv
24.873 181.911 25.1265 182.179 25.4976 182.179 cv
25.8076 182.179 26.021 182.009 26.1367 181.67 cv
cp
26.6177 178.708 mo
26.8306 179.119 26.9375 179.592 26.9375 180.125 cv
26.9375 180.545 26.8721 180.94 26.7412 181.312 cv
26.4941 182.01 26.0674 182.359 25.4595 182.359 cv
25.0439 182.359 24.7021 182.17 24.4346 181.793 cv
24.1475 181.39 24.0044 180.843 24.0044 180.15 cv
24.0044 179.606 24.1001 179.138 24.292 178.745 cv
24.5518 178.212 24.9502 177.945 25.4883 177.945 cv
25.9731 177.945 26.3496 178.199 26.6177 178.708 cv
cp
f
27.7476 182.269 mo
27.6782 182.198 27.6436 182.113 27.6436 182.014 cv
27.6436 181.915 27.6787 181.83 27.7495 181.761 cv
27.8198 181.691 27.9048 181.656 28.0039 181.656 cv
28.103 181.656 28.1875 181.691 28.2573 181.761 cv
28.3267 181.83 28.3618 181.915 28.3618 182.014 cv
28.3618 182.113 28.3271 182.198 28.2588 182.269 cv
28.1904 182.34 28.1055 182.375 28.0039 182.375 cv
27.9028 182.375 27.8174 182.34 27.7476 182.269 cv
cp
f
28.6401 182.226 mo
29.4121 181.425 29.9365 180.837 30.2129 180.462 cv
30.4893 180.087 30.6274 179.721 30.6274 179.365 cv
30.6274 179.053 30.543 178.815 30.374 178.652 cv
30.2056 178.488 30.0039 178.407 29.77 178.407 cv
29.481 178.407 29.2466 178.513 29.0674 178.723 cv
28.9683 178.839 28.8735 179.018 28.7827 179.258 cv
28.6465 179.229 li
28.752 178.744 28.9307 178.407 29.1831 178.219 cv
29.4351 178.03 29.7056 177.936 29.9946 177.936 cv
30.3511 177.936 30.6396 178.048 30.8599 178.272 cv
31.0801 178.497 31.1904 178.771 31.1904 179.096 cv
31.1904 179.441 31.0713 179.774 30.833 180.095 cv
30.5942 180.415 30.0762 180.985 29.2788 181.806 cv
30.7314 181.806 li
30.9341 181.806 31.0767 181.781 31.1587 181.732 cv
31.2412 181.685 31.334 181.566 31.4375 181.379 cv
31.5195 181.416 li
31.1685 182.299 li
28.6401 182.299 li
28.6401 182.226 li
cp
f
34.3525 154.556 mo
36.3525 154.556 li
34.3525 160.836 mo
35.5527 160.836 li
34.3525 167.117 mo
35.5527 167.117 li
34.3525 173.398 mo
35.5527 173.398 li
0 0 0 rgb
@
26.1367 156.545 mo
26.2529 156.205 26.311 155.714 26.311 155.071 cv
26.311 154.559 26.2759 154.15 26.2065 153.845 cv
26.0757 153.275 25.8311 152.991 25.4722 152.991 cv
25.1138 152.991 24.8682 153.284 24.7354 153.87 cv
24.6655 154.182 24.6309 154.593 24.6309 155.103 cv
24.6309 155.581 24.6665 155.964 24.7383 156.251 cv
24.873 156.786 25.1265 157.054 25.4976 157.054 cv
25.8076 157.054 26.021 156.884 26.1367 156.545 cv
cp
26.6177 153.583 mo
26.8306 153.994 26.9375 154.467 26.9375 155 cv
26.9375 155.42 26.8721 155.815 26.7412 156.187 cv
26.4941 156.885 26.0674 157.234 25.4595 157.234 cv
25.0439 157.234 24.7021 157.045 24.4346 156.668 cv
24.1475 156.265 24.0044 155.718 24.0044 155.025 cv
24.0044 154.481 24.1001 154.013 24.292 153.62 cv
24.5518 153.087 24.9502 152.82 25.4883 152.82 cv
25.9731 152.82 26.3496 153.074 26.6177 153.583 cv
cp
.137255 .121569 .12549 rgb
f
27.7476 157.144 mo
27.6782 157.073 27.6436 156.988 27.6436 156.889 cv
27.6436 156.79 27.6787 156.705 27.7495 156.636 cv
27.8198 156.566 27.9048 156.531 28.0039 156.531 cv
28.103 156.531 28.1875 156.566 28.2573 156.636 cv
28.3267 156.705 28.3618 156.79 28.3618 156.889 cv
28.3618 156.988 28.3271 157.073 28.2588 157.144 cv
28.1904 157.215 28.1055 157.25 28.0039 157.25 cv
27.9028 157.25 27.8174 157.215 27.7476 157.144 cv
cp
f
30.6367 156.545 mo
30.7529 156.205 30.811 155.714 30.811 155.071 cv
30.811 154.559 30.7759 154.15 30.7065 153.845 cv
30.5757 153.275 30.3311 152.991 29.9722 152.991 cv
29.6138 152.991 29.3682 153.284 29.2354 153.87 cv
29.1655 154.182 29.1309 154.593 29.1309 155.103 cv
29.1309 155.581 29.1665 155.964 29.2383 156.251 cv
29.373 156.786 29.6265 157.054 29.9976 157.054 cv
30.3076 157.054 30.521 156.884 30.6367 156.545 cv
cp
31.1177 153.583 mo
31.3306 153.994 31.4375 154.467 31.4375 155 cv
31.4375 155.42 31.3721 155.815 31.2412 156.187 cv
30.9941 156.885 30.5674 157.234 29.9595 157.234 cv
29.5439 157.234 29.2021 157.045 28.9346 156.668 cv
28.6475 156.265 28.5044 155.718 28.5044 155.025 cv
28.5044 154.481 28.6001 154.013 28.792 153.62 cv
29.0518 153.087 29.4502 152.82 29.9883 152.82 cv
30.4731 152.82 30.8496 153.074 31.1177 153.583 cv
cp
f
34.3525 129.432 mo
36.3525 129.432 li
34.3525 135.712 mo
35.5527 135.712 li
34.3525 141.993 mo
35.5527 141.993 li
34.3525 148.274 mo
35.5527 148.274 li
0 0 0 rgb
@
26.1367 131.42 mo
26.2529 131.08 26.311 130.589 26.311 129.946 cv
26.311 129.434 26.2759 129.025 26.2065 128.72 cv
26.0757 128.15 25.8311 127.866 25.4722 127.866 cv
25.1138 127.866 24.8682 128.159 24.7354 128.745 cv
24.6655 129.057 24.6309 129.468 24.6309 129.978 cv
24.6309 130.456 24.6665 130.839 24.7383 131.126 cv
24.873 131.661 25.1265 131.929 25.4976 131.929 cv
25.8076 131.929 26.021 131.759 26.1367 131.42 cv
cp
26.6177 128.458 mo
26.8306 128.869 26.9375 129.342 26.9375 129.875 cv
26.9375 130.295 26.8721 130.69 26.7412 131.062 cv
26.4941 131.76 26.0674 132.109 25.4595 132.109 cv
25.0439 132.109 24.7021 131.92 24.4346 131.543 cv
24.1475 131.14 24.0044 130.593 24.0044 129.9 cv
24.0044 129.356 24.1001 128.888 24.292 128.495 cv
24.5518 127.962 24.9502 127.695 25.4883 127.695 cv
25.9731 127.695 26.3496 127.949 26.6177 128.458 cv
cp
.137255 .121569 .12549 rgb
f
27.7476 132.019 mo
27.6782 131.948 27.6436 131.863 27.6436 131.764 cv
27.6436 131.665 27.6787 131.58 27.7495 131.511 cv
27.8198 131.441 27.9048 131.406 28.0039 131.406 cv
28.103 131.406 28.1875 131.441 28.2573 131.511 cv
28.3267 131.58 28.3618 131.665 28.3618 131.764 cv
28.3618 131.863 28.3271 131.948 28.2588 132.019 cv
28.1904 132.09 28.1055 132.125 28.0039 132.125 cv
27.9028 132.125 27.8174 132.09 27.7476 132.019 cv
cp
f
28.6401 131.976 mo
29.4121 131.175 29.9365 130.587 30.2129 130.212 cv
30.4893 129.837 30.6274 129.471 30.6274 129.115 cv
30.6274 128.803 30.543 128.565 30.374 128.402 cv
30.2056 128.238 30.0039 128.157 29.77 128.157 cv
29.481 128.157 29.2466 128.263 29.0674 128.473 cv
28.9683 128.589 28.8735 128.768 28.7827 129.008 cv
28.6465 128.979 li
28.752 128.494 28.9307 128.157 29.1831 127.969 cv
29.4351 127.78 29.7056 127.686 29.9946 127.686 cv
30.3511 127.686 30.6396 127.798 30.8599 128.022 cv
31.0801 128.247 31.1904 128.521 31.1904 128.846 cv
31.1904 129.191 31.0713 129.524 30.833 129.845 cv
30.5942 130.165 30.0762 130.735 29.2788 131.556 cv
30.7314 131.556 li
30.9341 131.556 31.0767 131.531 31.1587 131.482 cv
31.2412 131.435 31.334 131.316 31.4375 131.129 cv
31.5195 131.166 li
31.1685 132.049 li
28.6401 132.049 li
28.6401 131.976 li
cp
f
193.706 129.432 mo
193.706 131.432 li
178.042 129.432 mo
178.042 131.432 li
141.672 129.432 mo
141.672 131.432 li
126.009 129.432 mo
126.009 131.432 li
89.6387 129.432 mo
89.6387 131.432 li
73.9746 129.432 mo
73.9746 131.432 li
37.605 129.432 mo
37.605 131.432 li
0 0 0 rgb
@
.163 lw
191.325 129.432 mo
191.325 130.041 li
188.663 129.432 mo
188.663 130.041 li
185.646 129.432 mo
185.646 130.041 li
182.162 129.432 mo
182.162 130.041 li
173 129.432 mo
173 130.041 li
166.499 129.432 mo
166.499 130.041 li
157.336 129.432 mo
157.336 130.041 li
139.291 129.432 mo
139.291 130.041 li
136.63 129.432 mo
136.63 130.041 li
133.612 129.432 mo
133.612 130.041 li
130.129 129.432 mo
130.129 130.041 li
120.966 129.432 mo
120.966 130.041 li
114.465 129.432 mo
114.465 130.041 li
105.303 129.432 mo
105.303 130.041 li
87.2578 129.432 mo
87.2578 130.041 li
84.5957 129.432 mo
84.5957 130.041 li
81.5786 129.432 mo
81.5786 130.041 li
78.0947 129.432 mo
78.0947 130.041 li
68.9326 129.432 mo
68.9326 130.041 li
62.4316 129.432 mo
62.4316 130.041 li
53.2686 129.432 mo
53.2686 130.041 li
@
.4 lw
196.958 129.432 mo
194.958 129.432 li
196.958 135.712 mo
195.758 135.712 li
196.958 141.993 mo
195.758 141.993 li
196.958 148.274 mo
195.758 148.274 li
196.958 154.556 mo
194.958 154.556 li
196.958 160.836 mo
195.758 160.836 li
196.958 167.117 mo
195.758 167.117 li
196.958 173.398 mo
195.758 173.398 li
196.958 179.68 mo
194.958 179.68 li
196.958 185.96 mo
195.758 185.96 li
196.958 192.241 mo
195.758 192.241 li
196.958 198.522 mo
195.758 198.522 li
196.958 204.804 mo
194.958 204.804 li
196.958 211.084 mo
195.758 211.084 li
196.958 217.364 mo
195.758 217.364 li
196.958 223.646 mo
195.758 223.646 li
196.958 229.927 mo
194.958 229.927 li
@
1 lw
2 lc
246.222 210.563 mo
248.824 210.837 li
251.426 211.104 li
254.026 211.351 li
256.629 211.59 li
259.23 211.814 li
261.832 212.022 li
264.434 212.191 li
267.036 212.334 li
269.637 212.441 li
272.238 212.504 li
274.841 212.516 li
277.441 212.474 li
280.044 212.364 li
282.646 212.187 li
285.247 211.928 li
287.849 211.575 li
290.451 211.136 li
293.052 210.58 li
295.653 209.914 li
298.256 209.133 li
300.856 208.211 li
303.459 207.166 li
306.061 205.98 li
308.662 204.647 li
311.264 203.172 li
313.865 201.563 li
316.467 199.813 li
319.068 197.93 li
321.671 195.933 li
324.271 193.827 li
326.874 191.631 li
329.476 189.368 li
332.077 187.051 li
334.679 184.725 li
337.28 182.362 li
339.882 180.039 li
342.483 177.76 li
345.086 175.516 li
347.687 173.37 li
350.289 171.258 li
352.891 169.299 li
355.492 167.405 li
358.094 165.567 li
360.695 163.845 li
363.297 162.187 li
365.898 160.609 li
368.501 159.09 li
371.103 157.639 li
373.704 156.271 li
376.306 154.965 li
378.908 153.754 li
381.509 152.697 li
384.11 151.822 li
386.713 151.269 li
389.313 151.303 li
391.916 152.393 li
394.518 155.866 li
397.119 165.789 li
399.721 203.962 li
.247059 .239216 .6 rgb
@
.4 lw
405.575 129.432 mo
405.575 229.927 li
242.97 129.432 mo
405.575 129.432 li
242.97 229.927 mo
242.97 129.432 li
405.575 229.927 mo
242.97 229.927 li
0 0 0 rgb
@
0 lc
402.322 229.927 mo
402.322 227.927 li
@
402.762 233.757 mo
402.763 233.762 402.764 233.773 402.764 233.793 cv
402.764 237.603 li
402.764 237.765 402.807 237.868 402.894 237.912 cv
402.98 237.957 403.143 237.983 403.38 237.991 cv
403.38 238.08 li
401.593 238.08 li
401.593 237.985 li
401.848 237.973 402.015 237.938 402.093 237.881 cv
402.171 237.824 402.21 237.7 402.21 237.511 cv
402.21 234.581 li
402.21 234.479 402.197 234.402 402.172 234.35 cv
402.146 234.297 402.092 234.271 402.007 234.271 cv
401.952 234.271 401.881 234.286 401.794 234.316 cv
401.706 234.347 401.624 234.379 401.548 234.413 cv
401.548 234.324 li
402.71 233.732 li
402.747 233.732 li
402.756 233.743 402.761 233.751 402.762 233.757 cv
cp
.137255 .121569 .12549 rgb
f
350.289 229.927 mo
350.289 227.927 li
0 0 0 rgb
@
345.293 233.99 mo
345.294 233.995 345.295 234.007 345.295 234.026 cv
345.295 237.836 li
345.295 237.998 345.338 238.102 345.425 238.146 cv
345.512 238.19 345.674 238.217 345.911 238.225 cv
345.911 238.313 li
344.124 238.313 li
344.124 238.219 li
344.379 238.206 344.546 238.171 344.624 238.114 cv
344.702 238.058 344.741 237.934 344.741 237.744 cv
344.741 234.814 li
344.741 234.713 344.729 234.636 344.703 234.583 cv
344.678 234.53 344.623 234.504 344.538 234.504 cv
344.483 234.504 344.412 234.52 344.325 234.55 cv
344.237 234.58 344.155 234.612 344.079 234.646 cv
344.079 234.558 li
345.241 233.966 li
345.278 233.966 li
345.287 233.977 345.292 233.984 345.293 233.99 cv
cp
.137255 .121569 .12549 rgb
f
348.551 237.685 mo
348.667 237.345 348.725 236.854 348.725 236.211 cv
348.725 235.698 348.69 235.29 348.62 234.984 cv
348.489 234.415 348.245 234.131 347.887 234.131 cv
347.527 234.131 347.282 234.424 347.149 235.01 cv
347.079 235.321 347.045 235.732 347.045 236.242 cv
347.045 236.721 347.081 237.104 347.152 237.391 cv
347.287 237.926 347.54 238.193 347.912 238.193 cv
348.222 238.193 348.435 238.023 348.551 237.685 cv
cp
349.032 234.723 mo
349.245 235.134 349.352 235.606 349.352 236.14 cv
349.352 236.56 349.286 236.955 349.155 237.326 cv
348.908 238.024 348.481 238.374 347.874 238.374 cv
347.458 238.374 347.116 238.185 346.849 237.808 cv
346.562 237.404 346.418 236.857 346.418 236.165 cv
346.418 235.621 346.515 235.152 346.706 234.76 cv
346.966 234.227 347.364 233.96 347.902 233.96 cv
348.388 233.96 348.764 234.214 349.032 234.723 cv
cp
f
350.415 234.859 mo
350.415 234.602 li
352.774 234.602 li
352.774 234.859 li
350.415 234.859 li
cp
f
355.99 232.845 mo
355.991 232.849 355.992 232.857 355.992 232.871 cv
355.992 235.576 li
355.992 235.691 356.022 235.765 356.084 235.796 cv
356.146 235.827 356.262 235.846 356.43 235.853 cv
356.43 235.915 li
355.16 235.915 li
355.16 235.848 li
355.342 235.839 355.46 235.813 355.516 235.773 cv
355.571 235.733 355.599 235.646 355.599 235.511 cv
355.599 233.431 li
355.599 233.358 355.59 233.304 355.571 233.267 cv
355.554 233.229 355.515 233.21 355.455 233.21 cv
355.416 233.21 355.365 233.221 355.304 233.243 cv
355.241 233.265 355.183 233.287 355.129 233.312 cv
355.129 233.248 li
355.953 232.828 li
355.98 232.828 li
355.986 232.836 355.99 232.842 355.99 232.845 cv
cp
f
298.256 229.927 mo
298.256 227.927 li
0 0 0 rgb
@
293.254 233.757 mo
293.255 233.762 293.256 233.773 293.256 233.793 cv
293.256 237.603 li
293.256 237.765 293.299 237.868 293.386 237.912 cv
293.473 237.957 293.635 237.983 293.872 237.991 cv
293.872 238.08 li
292.085 238.08 li
292.085 237.985 li
292.34 237.973 292.507 237.938 292.585 237.881 cv
292.663 237.824 292.702 237.7 292.702 237.511 cv
292.702 234.581 li
292.702 234.479 292.689 234.402 292.664 234.35 cv
292.639 234.297 292.584 234.271 292.499 234.271 cv
292.444 234.271 292.373 234.286 292.286 234.316 cv
292.198 234.347 292.116 234.379 292.04 234.413 cv
292.04 234.324 li
293.202 233.732 li
293.239 233.732 li
293.248 233.743 293.253 233.751 293.254 233.757 cv
cp
.137255 .121569 .12549 rgb
f
296.512 237.451 mo
296.628 237.111 296.686 236.62 296.686 235.978 cv
296.686 235.465 296.651 235.057 296.581 234.751 cv
296.45 234.182 296.206 233.897 295.848 233.897 cv
295.488 233.897 295.243 234.19 295.11 234.776 cv
295.04 235.088 295.006 235.499 295.006 236.009 cv
295.006 236.487 295.042 236.87 295.113 237.157 cv
295.248 237.692 295.501 237.96 295.873 237.96 cv
296.183 237.96 296.396 237.79 296.512 237.451 cv
cp
296.993 234.489 mo
297.206 234.9 297.313 235.373 297.313 235.906 cv
297.313 236.326 297.247 236.722 297.116 237.093 cv
296.869 237.791 296.442 238.141 295.835 238.141 cv
295.419 238.141 295.077 237.951 294.81 237.574 cv
294.522 237.171 294.379 236.624 294.379 235.932 cv
294.379 235.388 294.476 234.919 294.667 234.526 cv
294.927 233.993 295.325 233.727 295.863 233.727 cv
296.349 233.727 296.725 233.98 296.993 234.489 cv
cp
f
298.384 234.634 mo
298.384 234.376 li
300.743 234.376 li
300.743 234.634 li
298.384 234.634 li
cp
f
302.725 235.638 mo
303.273 235.069 303.646 234.651 303.842 234.385 cv
304.038 234.119 304.136 233.859 304.136 233.606 cv
304.136 233.385 304.076 233.216 303.956 233.101 cv
303.836 232.984 303.693 232.926 303.527 232.926 cv
303.321 232.926 303.155 233.001 303.028 233.15 cv
302.958 233.233 302.891 233.359 302.826 233.53 cv
302.729 233.51 li
302.805 233.165 302.932 232.927 303.11 232.792 cv
303.289 232.658 303.481 232.592 303.687 232.592 cv
303.939 232.592 304.145 232.671 304.301 232.83 cv
304.457 232.99 304.536 233.185 304.536 233.415 cv
304.536 233.661 304.451 233.897 304.281 234.125 cv
304.112 234.352 303.744 234.757 303.179 235.339 cv
304.21 235.339 li
304.354 235.339 304.455 235.322 304.513 235.287 cv
304.571 235.253 304.638 235.169 304.711 235.036 cv
304.77 235.063 li
304.52 235.689 li
302.725 235.689 li
302.725 235.638 li
cp
f
246.222 229.927 mo
246.222 227.927 li
0 0 0 rgb
@
241.223 233.757 mo
241.224 233.762 241.225 233.773 241.225 233.793 cv
241.225 237.603 li
241.225 237.765 241.268 237.868 241.354 237.912 cv
241.441 237.957 241.604 237.983 241.841 237.991 cv
241.841 238.08 li
240.054 238.08 li
240.054 237.985 li
240.309 237.973 240.476 237.938 240.554 237.881 cv
240.632 237.824 240.671 237.7 240.671 237.511 cv
240.671 234.581 li
240.671 234.479 240.658 234.402 240.633 234.35 cv
240.607 234.297 240.553 234.271 240.468 234.271 cv
240.413 234.271 240.342 234.286 240.255 234.316 cv
240.167 234.347 240.085 234.379 240.009 234.413 cv
240.009 234.324 li
241.171 233.732 li
241.208 233.732 li
241.217 233.743 241.222 233.751 241.223 233.757 cv
cp
.137255 .121569 .12549 rgb
f
244.48 237.451 mo
244.597 237.111 244.654 236.62 244.654 235.978 cv
244.654 235.465 244.62 235.057 244.55 234.751 cv
244.419 234.182 244.175 233.897 243.816 233.897 cv
243.457 233.897 243.212 234.19 243.079 234.776 cv
243.009 235.088 242.975 235.499 242.975 236.009 cv
242.975 236.487 243.011 236.87 243.082 237.157 cv
243.217 237.692 243.47 237.96 243.842 237.96 cv
244.151 237.96 244.364 237.79 244.48 237.451 cv
cp
244.962 234.489 mo
245.175 234.9 245.281 235.373 245.281 235.906 cv
245.281 236.326 245.216 236.722 245.085 237.093 cv
244.838 237.791 244.411 238.141 243.804 238.141 cv
243.388 238.141 243.046 237.951 242.778 237.574 cv
242.491 237.171 242.348 236.624 242.348 235.932 cv
242.348 235.388 242.444 234.919 242.636 234.526 cv
242.896 233.993 243.294 233.727 243.832 233.727 cv
244.317 233.727 244.693 233.98 244.962 234.489 cv
cp
f
246.345 234.634 mo
246.345 234.376 li
248.704 234.376 li
248.704 234.634 li
246.345 234.634 li
cp
f
251.226 235.428 mo
251.36 235.514 251.476 235.557 251.57 235.557 cv
251.779 235.557 251.936 235.486 252.037 235.345 cv
252.139 235.202 252.19 235.049 252.19 234.882 cv
252.19 234.722 252.148 234.58 252.066 234.459 cv
251.927 234.253 251.692 234.15 251.361 234.15 cv
251.342 234.15 251.323 234.151 251.305 234.151 cv
251.287 234.152 251.266 234.154 251.242 234.157 cv
251.237 234.099 li
251.478 234.012 251.666 233.912 251.804 233.8 cv
251.941 233.688 252.011 233.539 252.011 233.355 cv
252.011 233.192 251.956 233.067 251.848 232.982 cv
251.739 232.896 251.615 232.854 251.476 232.854 cv
251.311 232.854 251.166 232.915 251.04 233.036 cv
250.971 233.103 250.896 233.204 250.817 233.342 cv
250.748 233.326 li
250.808 233.099 250.919 232.916 251.082 232.78 cv
251.246 232.644 251.435 232.576 251.648 232.576 cv
251.878 232.576 252.055 232.639 252.18 232.765 cv
252.305 232.891 252.367 233.035 252.367 233.2 cv
252.367 233.346 252.315 233.479 252.213 233.601 cv
252.154 233.669 252.063 233.746 251.94 233.831 cv
252.084 233.893 252.2 233.965 252.286 234.047 cv
252.45 234.204 252.531 234.403 252.531 234.645 cv
252.531 234.93 252.42 235.181 252.195 235.397 cv
251.972 235.614 251.653 235.724 251.239 235.724 cv
251.056 235.724 250.927 235.696 250.853 235.642 cv
250.778 235.587 250.741 235.527 250.741 235.465 cv
250.741 235.426 250.753 235.389 250.778 235.353 cv
250.803 235.316 250.843 235.299 250.898 235.299 cv
250.98 235.299 251.09 235.342 251.226 235.428 cv
cp
f
242.97 229.927 mo
244.97 229.927 li
0 0 0 rgb
@
227.742 231.063 mo
227.742 230.7 li
231.063 230.7 li
231.063 231.063 li
227.742 231.063 li
cp
.137255 .121569 .12549 rgb
f
234.746 231.92 mo
234.862 231.58 234.92 231.089 234.92 230.446 cv
234.92 229.934 234.886 229.525 234.815 229.22 cv
234.685 228.65 234.44 228.366 234.082 228.366 cv
233.723 228.366 233.478 228.659 233.345 229.245 cv
233.274 229.557 233.24 229.968 233.24 230.478 cv
233.24 230.956 233.276 231.339 233.348 231.626 cv
233.482 232.161 233.735 232.429 234.107 232.429 cv
234.417 232.429 234.63 232.259 234.746 231.92 cv
cp
235.228 228.958 mo
235.44 229.369 235.547 229.842 235.547 230.375 cv
235.547 230.795 235.481 231.19 235.351 231.562 cv
235.104 232.26 234.677 232.609 234.069 232.609 cv
233.653 232.609 233.312 232.42 233.044 232.043 cv
232.757 231.64 232.613 231.093 232.613 230.4 cv
232.613 229.856 232.71 229.388 232.901 228.995 cv
233.161 228.462 233.56 228.195 234.098 228.195 cv
234.583 228.195 234.959 228.449 235.228 228.958 cv
cp
f
236.357 232.519 mo
236.287 232.448 236.253 232.363 236.253 232.264 cv
236.253 232.165 236.288 232.08 236.358 232.011 cv
236.43 231.941 236.515 231.906 236.613 231.906 cv
236.713 231.906 236.797 231.941 236.866 232.011 cv
236.937 232.08 236.971 232.165 236.971 232.264 cv
236.971 232.363 236.937 232.448 236.868 232.519 cv
236.8 232.59 236.715 232.625 236.613 232.625 cv
236.512 232.625 236.427 232.59 236.357 232.519 cv
cp
f
239.376 230.606 mo
239.229 230.243 238.978 230.062 238.623 230.062 cv
238.296 230.062 238.079 230.159 237.971 230.353 cv
237.908 230.467 237.876 230.656 237.876 230.923 cv
237.876 231.267 237.949 231.603 238.096 231.932 cv
238.242 232.261 238.475 232.426 238.791 232.426 cv
239.042 232.426 239.224 232.318 239.338 232.104 cv
239.452 231.891 239.509 231.64 239.509 231.353 cv
239.509 231.072 239.465 230.823 239.376 230.606 cv
cp
239.716 232.153 mo
239.468 232.464 239.146 232.618 238.749 232.618 cv
238.378 232.618 238.04 232.444 237.735 232.097 cv
237.431 231.748 237.278 231.285 237.278 230.707 cv
237.278 229.963 237.573 229.323 238.164 228.79 cv
238.691 228.343 239.284 228.119 239.942 228.119 cv
239.958 228.224 li
239.694 228.272 239.467 228.338 239.276 228.421 cv
239.085 228.505 238.915 228.621 238.766 228.771 cv
238.611 228.923 238.467 229.116 238.332 229.35 cv
238.196 229.584 238.104 229.816 238.054 230.046 cv
238.185 229.966 238.297 229.907 238.392 229.869 cv
238.561 229.802 238.73 229.768 238.901 229.768 cv
239.236 229.768 239.519 229.884 239.746 230.115 cv
239.974 230.348 240.088 230.679 240.088 231.109 cv
240.088 231.495 239.964 231.843 239.716 232.153 cv
cp
f
242.97 204.804 mo
244.97 204.804 li
242.97 211.084 mo
244.17 211.084 li
242.97 217.364 mo
244.17 217.364 li
242.97 223.646 mo
244.17 223.646 li
0 0 0 rgb
@
227.742 205.938 mo
227.742 205.575 li
231.063 205.575 li
231.063 205.938 li
227.742 205.938 li
cp
.137255 .121569 .12549 rgb
f
234.746 206.795 mo
234.862 206.455 234.92 205.964 234.92 205.321 cv
234.92 204.809 234.886 204.4 234.815 204.095 cv
234.685 203.525 234.44 203.241 234.082 203.241 cv
233.723 203.241 233.478 203.534 233.345 204.12 cv
233.274 204.432 233.24 204.843 233.24 205.353 cv
233.24 205.831 233.276 206.214 233.348 206.501 cv
233.482 207.036 233.735 207.304 234.107 207.304 cv
234.417 207.304 234.63 207.134 234.746 206.795 cv
cp
235.228 203.833 mo
235.44 204.244 235.547 204.717 235.547 205.25 cv
235.547 205.67 235.481 206.065 235.351 206.437 cv
235.104 207.135 234.677 207.484 234.069 207.484 cv
233.653 207.484 233.312 207.295 233.044 206.918 cv
232.757 206.515 232.613 205.968 232.613 205.275 cv
232.613 204.731 232.71 204.263 232.901 203.87 cv
233.161 203.337 233.56 203.07 234.098 203.07 cv
234.583 203.07 234.959 203.324 235.228 203.833 cv
cp
f
236.357 207.394 mo
236.287 207.323 236.253 207.238 236.253 207.139 cv
236.253 207.04 236.288 206.955 236.358 206.886 cv
236.43 206.816 236.515 206.781 236.613 206.781 cv
236.713 206.781 236.797 206.816 236.866 206.886 cv
236.937 206.955 236.971 207.04 236.971 207.139 cv
236.971 207.238 236.937 207.323 236.868 207.394 cv
236.8 207.465 236.715 207.5 236.613 207.5 cv
236.512 207.5 236.427 207.465 236.357 207.394 cv
cp
f
238.945 203.729 mo
237.393 205.924 li
238.945 205.924 li
238.945 203.729 li
cp
239.154 203.076 mo
239.455 203.076 li
239.455 205.924 li
240.116 205.924 li
240.116 206.345 li
239.455 206.345 li
239.455 207.424 li
238.952 207.424 li
238.952 206.345 li
237.13 206.345 li
237.13 205.924 li
239.154 203.076 li
cp
f
242.97 179.68 mo
244.97 179.68 li
242.97 185.96 mo
244.17 185.96 li
242.97 192.241 mo
244.17 192.241 li
242.97 198.522 mo
244.17 198.522 li
0 0 0 rgb
@
227.742 180.813 mo
227.742 180.45 li
231.063 180.45 li
231.063 180.813 li
227.742 180.813 li
cp
.137255 .121569 .12549 rgb
f
234.746 181.67 mo
234.862 181.33 234.92 180.839 234.92 180.196 cv
234.92 179.684 234.886 179.275 234.815 178.97 cv
234.685 178.4 234.44 178.116 234.082 178.116 cv
233.723 178.116 233.478 178.409 233.345 178.995 cv
233.274 179.307 233.24 179.718 233.24 180.228 cv
233.24 180.706 233.276 181.089 233.348 181.376 cv
233.482 181.911 233.735 182.179 234.107 182.179 cv
234.417 182.179 234.63 182.009 234.746 181.67 cv
cp
235.228 178.708 mo
235.44 179.119 235.547 179.592 235.547 180.125 cv
235.547 180.545 235.481 180.94 235.351 181.312 cv
235.104 182.01 234.677 182.359 234.069 182.359 cv
233.653 182.359 233.312 182.17 233.044 181.793 cv
232.757 181.39 232.613 180.843 232.613 180.15 cv
232.613 179.606 232.71 179.138 232.901 178.745 cv
233.161 178.212 233.56 177.945 234.098 177.945 cv
234.583 177.945 234.959 178.199 235.228 178.708 cv
cp
f
236.357 182.269 mo
236.287 182.198 236.253 182.113 236.253 182.014 cv
236.253 181.915 236.288 181.83 236.358 181.761 cv
236.43 181.691 236.515 181.656 236.613 181.656 cv
236.713 181.656 236.797 181.691 236.866 181.761 cv
236.937 181.83 236.971 181.915 236.971 182.014 cv
236.971 182.113 236.937 182.198 236.868 182.269 cv
236.8 182.34 236.715 182.375 236.613 182.375 cv
236.512 182.375 236.427 182.34 236.357 182.269 cv
cp
f
237.25 182.226 mo
238.021 181.425 238.546 180.837 238.822 180.462 cv
239.099 180.087 239.236 179.721 239.236 179.365 cv
239.236 179.053 239.152 178.815 238.983 178.652 cv
238.814 178.488 238.613 178.407 238.379 178.407 cv
238.09 178.407 237.856 178.513 237.677 178.723 cv
237.577 178.839 237.482 179.018 237.392 179.258 cv
237.256 179.229 li
237.361 178.744 237.54 178.407 237.792 178.219 cv
238.044 178.03 238.314 177.936 238.604 177.936 cv
238.96 177.936 239.249 178.048 239.469 178.272 cv
239.689 178.497 239.8 178.771 239.8 179.096 cv
239.8 179.441 239.681 179.774 239.442 180.095 cv
239.204 180.415 238.686 180.985 237.888 181.806 cv
239.341 181.806 li
239.543 181.806 239.686 181.781 239.769 181.732 cv
239.851 181.685 239.943 181.566 240.047 181.379 cv
240.129 181.416 li
239.777 182.299 li
237.25 182.299 li
237.25 182.226 li
cp
f
242.97 154.556 mo
244.97 154.556 li
242.97 160.836 mo
244.17 160.836 li
242.97 167.117 mo
244.17 167.117 li
242.97 173.398 mo
244.17 173.398 li
0 0 0 rgb
@
234.746 156.545 mo
234.862 156.205 234.92 155.714 234.92 155.071 cv
234.92 154.559 234.886 154.15 234.815 153.845 cv
234.685 153.275 234.44 152.991 234.082 152.991 cv
233.723 152.991 233.478 153.284 233.345 153.87 cv
233.274 154.182 233.24 154.593 233.24 155.103 cv
233.24 155.581 233.276 155.964 233.348 156.251 cv
233.482 156.786 233.735 157.054 234.107 157.054 cv
234.417 157.054 234.63 156.884 234.746 156.545 cv
cp
235.228 153.583 mo
235.44 153.994 235.547 154.467 235.547 155 cv
235.547 155.42 235.481 155.815 235.351 156.187 cv
235.104 156.885 234.677 157.234 234.069 157.234 cv
233.653 157.234 233.312 157.045 233.044 156.668 cv
232.757 156.265 232.613 155.718 232.613 155.025 cv
232.613 154.481 232.71 154.013 232.901 153.62 cv
233.161 153.087 233.56 152.82 234.098 152.82 cv
234.583 152.82 234.959 153.074 235.228 153.583 cv
cp
.137255 .121569 .12549 rgb
f
236.357 157.144 mo
236.287 157.073 236.253 156.988 236.253 156.889 cv
236.253 156.79 236.288 156.705 236.358 156.636 cv
236.43 156.566 236.515 156.531 236.613 156.531 cv
236.713 156.531 236.797 156.566 236.866 156.636 cv
236.937 156.705 236.971 156.79 236.971 156.889 cv
236.971 156.988 236.937 157.073 236.868 157.144 cv
236.8 157.215 236.715 157.25 236.613 157.25 cv
236.512 157.25 236.427 157.215 236.357 157.144 cv
cp
f
239.246 156.545 mo
239.362 156.205 239.42 155.714 239.42 155.071 cv
239.42 154.559 239.386 154.15 239.315 153.845 cv
239.185 153.275 238.94 152.991 238.582 152.991 cv
238.223 152.991 237.978 153.284 237.845 153.87 cv
237.774 154.182 237.74 154.593 237.74 155.103 cv
237.74 155.581 237.776 155.964 237.848 156.251 cv
237.982 156.786 238.235 157.054 238.607 157.054 cv
238.917 157.054 239.13 156.884 239.246 156.545 cv
cp
239.728 153.583 mo
239.94 153.994 240.047 154.467 240.047 155 cv
240.047 155.42 239.981 155.815 239.851 156.187 cv
239.604 156.885 239.177 157.234 238.569 157.234 cv
238.153 157.234 237.812 157.045 237.544 156.668 cv
237.257 156.265 237.113 155.718 237.113 155.025 cv
237.113 154.481 237.21 154.013 237.401 153.62 cv
237.661 153.087 238.06 152.82 238.598 152.82 cv
239.083 152.82 239.459 153.074 239.728 153.583 cv
cp
f
242.97 129.432 mo
244.97 129.432 li
242.97 135.712 mo
244.17 135.712 li
242.97 141.993 mo
244.17 141.993 li
242.97 148.274 mo
244.17 148.274 li
0 0 0 rgb
@
234.746 131.42 mo
234.862 131.08 234.92 130.589 234.92 129.946 cv
234.92 129.434 234.886 129.025 234.815 128.72 cv
234.685 128.15 234.44 127.866 234.082 127.866 cv
233.723 127.866 233.478 128.159 233.345 128.745 cv
233.274 129.057 233.24 129.468 233.24 129.978 cv
233.24 130.456 233.276 130.839 233.348 131.126 cv
233.482 131.661 233.735 131.929 234.107 131.929 cv
234.417 131.929 234.63 131.759 234.746 131.42 cv
cp
235.228 128.458 mo
235.44 128.869 235.547 129.342 235.547 129.875 cv
235.547 130.295 235.481 130.69 235.351 131.062 cv
235.104 131.76 234.677 132.109 234.069 132.109 cv
233.653 132.109 233.312 131.92 233.044 131.543 cv
232.757 131.14 232.613 130.593 232.613 129.9 cv
232.613 129.356 232.71 128.888 232.901 128.495 cv
233.161 127.962 233.56 127.695 234.098 127.695 cv
234.583 127.695 234.959 127.949 235.228 128.458 cv
cp
.137255 .121569 .12549 rgb
f
236.357 132.019 mo
236.287 131.948 236.253 131.863 236.253 131.764 cv
236.253 131.665 236.288 131.58 236.358 131.511 cv
236.43 131.441 236.515 131.406 236.613 131.406 cv
236.713 131.406 236.797 131.441 236.866 131.511 cv
236.937 131.58 236.971 131.665 236.971 131.764 cv
236.971 131.863 236.937 131.948 236.868 132.019 cv
236.8 132.09 236.715 132.125 236.613 132.125 cv
236.512 132.125 236.427 132.09 236.357 132.019 cv
cp
f
237.25 131.976 mo
238.021 131.175 238.546 130.587 238.822 130.212 cv
239.099 129.837 239.236 129.471 239.236 129.115 cv
239.236 128.803 239.152 128.565 238.983 128.402 cv
238.814 128.238 238.613 128.157 238.379 128.157 cv
238.09 128.157 237.856 128.263 237.677 128.473 cv
237.577 128.589 237.482 128.768 237.392 129.008 cv
237.256 128.979 li
237.361 128.494 237.54 128.157 237.792 127.969 cv
238.044 127.78 238.314 127.686 238.604 127.686 cv
238.96 127.686 239.249 127.798 239.469 128.022 cv
239.689 128.247 239.8 128.521 239.8 128.846 cv
239.8 129.191 239.681 129.524 239.442 129.845 cv
239.204 130.165 238.686 130.735 237.888 131.556 cv
239.341 131.556 li
239.543 131.556 239.686 131.531 239.769 131.482 cv
239.851 131.435 239.943 131.316 240.047 131.129 cv
240.129 131.166 li
239.777 132.049 li
237.25 132.049 li
237.25 131.976 li
cp
f
402.322 129.432 mo
402.322 131.432 li
386.659 129.432 mo
386.659 131.432 li
350.289 129.432 mo
350.289 131.432 li
334.625 129.432 mo
334.625 131.432 li
298.256 129.432 mo
298.256 131.432 li
282.592 129.432 mo
282.592 131.432 li
246.222 129.432 mo
246.222 131.432 li
0 0 0 rgb
@
.163 lw
399.941 129.432 mo
399.941 130.041 li
397.279 129.432 mo
397.279 130.041 li
394.263 129.432 mo
394.263 130.041 li
390.778 129.432 mo
390.778 130.041 li
381.615 129.432 mo
381.615 130.041 li
375.115 129.432 mo
375.115 130.041 li
365.953 129.432 mo
365.953 130.041 li
347.908 129.432 mo
347.908 130.041 li
345.247 129.432 mo
345.247 130.041 li
342.229 129.432 mo
342.229 130.041 li
338.746 129.432 mo
338.746 130.041 li
329.583 129.432 mo
329.583 130.041 li
323.082 129.432 mo
323.082 130.041 li
313.919 129.432 mo
313.919 130.041 li
295.875 129.432 mo
295.875 130.041 li
293.213 129.432 mo
293.213 130.041 li
290.195 129.432 mo
290.195 130.041 li
286.712 129.432 mo
286.712 130.041 li
277.549 129.432 mo
277.549 130.041 li
271.048 129.432 mo
271.048 130.041 li
261.886 129.432 mo
261.886 130.041 li
@
.4 lw
405.575 129.432 mo
403.575 129.432 li
405.575 135.712 mo
404.375 135.712 li
405.575 141.993 mo
404.375 141.993 li
405.575 148.274 mo
404.375 148.274 li
405.575 154.556 mo
403.575 154.556 li
405.575 160.836 mo
404.375 160.836 li
405.575 167.117 mo
404.375 167.117 li
405.575 173.398 mo
404.375 173.398 li
405.575 179.68 mo
403.575 179.68 li
405.575 185.96 mo
404.375 185.96 li
405.575 192.241 mo
404.375 192.241 li
405.575 198.522 mo
404.375 198.522 li
405.575 204.804 mo
403.575 204.804 li
405.575 211.084 mo
404.375 211.084 li
405.575 217.364 mo
404.375 217.364 li
405.575 223.646 mo
404.375 223.646 li
405.575 229.927 mo
403.575 229.927 li
@
1.84961 206.47 mo
1.58594 206.47 1.50586 206.448 1.50586 205.876 cv
1.50586 205.688 li
1.28223 205.688 li
1.30371 205.942 1.30371 206.521 1.30371 206.796 cv
1.30371 207.081 1.30371 207.657 1.28223 207.913 cv
1.50586 207.913 li
1.50586 207.724 li
1.50586 207.144 1.58691 207.12 1.84961 207.12 cv
5.69971 207.12 li
5.9624 207.12 6.04248 207.144 6.04248 207.724 cv
6.04248 207.913 li
6.26709 207.913 li
6.24463 207.657 6.24463 207.081 6.24463 206.804 cv
6.24463 206.519 6.24463 205.942 6.26709 205.688 cv
6.04248 205.688 li
6.04248 205.876 li
6.04248 206.448 5.9624 206.47 5.69971 206.47 cv
1.84961 206.47 li
cp
f
3.74805 204.7 mo
5.71338 204.7 li
6.04248 204.7 6.04248 204.778 6.04248 205.259 cv
6.26709 205.259 li
6.25928 205.003 6.24463 204.632 6.24463 204.435 cv
6.24463 204.245 6.25928 203.866 6.26709 203.618 cv
6.04248 203.618 li
6.04248 204.11 6.04248 204.19 5.71338 204.19 cv
4.3667 204.19 li
3.60498 204.19 3.19434 203.673 3.19434 203.206 cv
3.19434 202.745 3.59033 202.665 4.00732 202.665 cv
5.71338 202.665 li
6.04248 202.665 6.04248 202.745 6.04248 203.231 cv
6.26709 203.231 li
6.25928 202.976 6.24463 202.603 6.24463 202.405 cv
6.24463 202.216 6.25928 201.837 6.26709 201.589 cv
6.04248 201.589 li
6.04248 202.075 6.04248 202.155 5.71338 202.155 cv
4.3667 202.155 li
3.60498 202.155 3.19434 201.638 3.19434 201.171 cv
3.19434 200.71 3.59033 200.63 4.00732 200.63 cv
5.71338 200.63 li
6.04248 200.63 6.04248 200.71 6.04248 201.202 cv
6.26709 201.202 li
6.25928 200.946 6.24463 200.573 6.24463 200.378 cv
6.24463 200.188 6.25928 199.808 6.26709 199.56 cv
6.04248 199.56 li
6.04248 199.933 6.04248 200.114 5.82324 200.12 cv
4.42383 200.12 li
3.79395 200.12 3.56641 200.12 3.30273 200.349 cv
3.17822 200.45 3.03174 200.69 3.03174 201.116 cv
3.03174 201.729 3.47607 202.05 3.75684 202.175 cv
3.11328 202.278 3.03174 202.817 3.03174 203.147 cv
3.03174 203.681 3.34961 204.024 3.80762 204.229 cv
3.03174 204.229 li
3.11182 205.259 li
3.33691 205.259 li
3.33691 204.757 3.38916 204.698 3.74805 204.698 cv
3.74805 204.7 li
cp
f
3.82227 196.993 mo
3.47949 196.899 3.10645 196.806 2.75586 196.731 cv
2.2666 196.644 1.77686 196.593 1.68896 196.593 cv
1.28223 196.593 1.28223 196.993 1.28223 197.081 cv
1.28223 197.636 1.48682 198.132 1.7207 198.476 cv
2.12158 199.065 2.61133 199.257 2.64795 199.257 cv
2.69824 199.257 2.69824 199.204 2.69824 199.183 cv
2.69824 199.124 2.61133 198.78 2.33545 198.628 cv
1.96533 198.431 1.68896 198.22 1.68896 197.562 cv
1.68896 197.263 1.89307 197.212 2.00977 197.212 cv
2.01758 197.212 2.36035 197.235 2.86279 197.321 cv
3.06738 197.358 3.19775 197.38 3.82471 197.532 cv
3.82471 197.796 li
3.83252 198.001 4.06543 198.337 4.17529 198.337 cv
4.21875 198.337 4.22656 198.329 4.22656 198.169 cv
4.22656 197.644 li
4.73682 197.796 5.43604 198.001 6.32568 198.337 cv
6.49365 198.401 6.5083 198.401 6.51611 198.401 cv
6.56641 198.401 6.56641 198.343 6.56641 198.329 cv
6.56641 198.228 6.47168 198.001 6.32568 197.854 cv
6.28223 197.817 6.26758 197.804 6.19531 197.774 cv
5.55273 197.519 4.89697 197.3 4.22656 197.11 cv
4.22656 195.468 li
4.22656 195.388 4.22656 195.249 4.1543 195.134 cv
4.46045 195.214 5.64844 195.511 6.22412 195.511 cv
6.43555 195.511 6.625 195.388 6.625 195.073 cv
6.625 194.104 6.01953 193.563 5.78564 193.563 cv
5.74219 193.563 5.72803 193.601 5.72803 193.638 cv
5.72803 193.694 5.83105 194.083 6.11768 194.19 cv
6.17725 194.22 6.18408 194.228 6.20654 194.366 cv
6.21826 194.446 6.22363 194.585 6.22363 194.593 cv
6.22363 194.724 6.13623 194.892 5.90967 194.892 cv
5.82227 194.892 5.4209 194.841 5.26025 194.819 cv
4.4502 194.694 3.07861 194.337 1.41455 193.71 cv
1.36328 193.688 1.34863 193.688 1.33398 193.688 cv
1.28223 193.688 1.28223 193.731 1.28223 193.761 cv
1.28223 193.87 1.38477 194.083 1.50928 194.22 cv
1.52344 194.228 1.56006 194.271 1.62598 194.3 cv
2.3418 194.593 3.07861 194.819 3.82324 195.038 cv
3.82227 196.993 li
cp
f
.219238 191.849 mo
.147461 191.905 .142578 191.911 .142578 192.013 cv
.142578 192.896 li
.326172 192.896 li
.326172 192.743 li
.326172 192.522 .351563 192.396 .356445 192.37 cv
3.07178 192.37 li
3.20898 192.37 3.43848 192.37 3.43848 192.897 cv
3.62207 192.897 li
3.60645 192.688 3.60156 192.483 3.60156 192.274 cv
3.60156 192.065 3.60645 191.86 3.62207 191.651 cv
3.43848 191.651 li
3.43848 192.167 3.20898 192.167 3.0708 192.167 cv
.490723 192.167 li
3.54492 189.899 li
3.6167 189.849 3.62207 189.843 3.62207 189.782 cv
3.62207 189.685 3.57666 189.685 3.47949 189.685 cv
.692871 189.685 li
.555664 189.685 .326172 189.685 .326172 189.169 cv
.142578 189.169 li
.158203 189.378 .163086 189.581 .163086 189.792 cv
.163086 190.001 .158203 190.206 .142578 190.415 cv
.326172 190.415 li
.326172 189.888 .555664 189.888 .692871 189.888 cv
2.85059 189.888 li
.219238 191.849 li
cp
f
2.27832 185.544 mo
2.27832 185.718 li
2.7793 185.772 3.43848 185.849 3.43848 186.813 cv
3.43848 187.323 li
3.43848 187.562 3.39746 187.567 3.23975 187.567 cv
.560547 187.567 li
.392578 187.567 .326172 187.567 .326172 187.091 cv
.326172 186.913 li
.142578 186.913 li
.147461 187.019 .163086 187.675 .163086 187.808 cv
.163086 188.001 .142578 188.579 .142578 188.583 cv
.326172 188.583 li
.326172 188.46 li
.326172 188.065 .376953 188.056 .555664 188.056 cv
3.20898 188.056 li
3.38232 188.056 3.43848 188.065 3.43848 188.46 cv
3.43848 188.583 li
3.62207 188.583 li
3.62207 185.698 li
2.27832 185.544 li
cp
f
3.56055 183.009 mo
3.56055 183.603 3.07617 184.331 1.82129 184.331 cv
.637207 184.331 .203125 183.587 .203125 183.009 cv
.203125 182.433 .637207 181.687 1.82129 181.687 cv
3.07617 181.687 3.56055 182.417 3.56055 183.009 cv
3.56055 183.009 li
cp
1.90039 181.138 mo
.882324 181.138 .0400391 181.972 .0400391 183.011 cv
.0400391 184.054 .882324 184.882 1.90039 184.882 cv
2.89844 184.882 3.72363 184.054 3.72363 183.011 cv
3.72363 181.968 2.89844 181.138 1.90039 181.138 cv
1.90039 181.138 li
cp
f
4.57813 173.987 mo
4.57813 173.864 4.57813 173.731 4.43555 173.731 cv
4.29297 173.731 4.29297 173.864 4.29297 173.987 cv
4.29297 177.935 li
4.29297 178.058 4.29297 178.19 4.43555 178.19 cv
4.57813 178.19 4.57813 178.058 4.57813 177.935 cv
4.57813 173.987 li
cp
f
1.84961 169.847 mo
1.58594 169.847 1.50586 169.823 1.50586 169.253 cv
1.50586 169.063 li
1.28223 169.063 li
1.30371 169.319 1.30371 169.896 1.30371 170.173 cv
1.30371 170.458 1.30371 171.032 1.28223 171.288 cv
1.50586 171.288 li
1.50586 171.099 li
1.50586 170.519 1.58691 170.497 1.84961 170.497 cv
5.69971 170.497 li
5.9624 170.497 6.04248 170.519 6.04248 171.099 cv
6.04248 171.288 li
6.26709 171.288 li
6.24463 171.032 6.24463 170.456 6.24463 170.181 cv
6.24463 169.896 6.24463 169.319 6.26709 169.063 cv
6.04248 169.063 li
6.04248 169.251 li
6.04248 169.823 5.9624 169.847 5.69971 169.847 cv
1.84961 169.847 li
cp
f
3.74805 168.075 mo
5.71338 168.075 li
6.04248 168.075 6.04248 168.155 6.04248 168.634 cv
6.26709 168.634 li
6.25928 168.38 6.24463 168.007 6.24463 167.812 cv
6.24463 167.622 6.25928 167.241 6.26709 166.993 cv
6.04248 166.993 li
6.04248 167.485 6.04248 167.567 5.71338 167.567 cv
4.3667 167.567 li
3.60498 167.567 3.19434 167.048 3.19434 166.581 cv
3.19434 166.12 3.59033 166.04 4.00732 166.04 cv
5.71338 166.04 li
6.04248 166.04 6.04248 166.12 6.04248 166.606 cv
6.26709 166.606 li
6.25928 166.351 6.24463 165.978 6.24463 165.782 cv
6.24463 165.593 6.25928 165.212 6.26709 164.964 cv
6.04248 164.964 li
6.04248 165.452 6.04248 165.532 5.71338 165.532 cv
4.3667 165.532 li
3.60498 165.532 3.19434 165.013 3.19434 164.546 cv
3.19434 164.087 3.59033 164.005 4.00732 164.005 cv
5.71338 164.005 li
6.04248 164.005 6.04248 164.087 6.04248 164.577 cv
6.26709 164.577 li
6.25928 164.321 6.24463 163.95 6.24463 163.753 cv
6.24463 163.563 6.25928 163.185 6.26709 162.935 cv
6.04248 162.935 li
6.04248 163.31 6.04248 163.489 5.82324 163.497 cv
4.42383 163.497 li
3.79395 163.497 3.56641 163.497 3.30273 163.724 cv
3.17822 163.825 3.03174 164.067 3.03174 164.491 cv
3.03174 165.104 3.47607 165.425 3.75684 165.55 cv
3.11328 165.653 3.03174 166.194 3.03174 166.522 cv
3.03174 167.056 3.34961 167.399 3.80762 167.604 cv
3.03174 167.604 li
3.11182 168.634 li
3.33691 168.634 li
3.33691 168.132 3.38916 168.075 3.74805 168.075 cv
3.74805 168.075 li
cp
f
3.82227 160.37 mo
3.47949 160.276 3.10645 160.181 2.75586 160.106 cv
2.2666 160.021 1.77686 159.968 1.68896 159.968 cv
1.28223 159.968 1.28223 160.37 1.28223 160.458 cv
1.28223 161.011 1.48682 161.507 1.7207 161.851 cv
2.12158 162.442 2.61133 162.632 2.64795 162.632 cv
2.69824 162.632 2.69824 162.581 2.69824 162.558 cv
2.69824 162.501 2.61133 162.157 2.33545 162.003 cv
1.96533 161.808 1.68896 161.595 1.68896 160.938 cv
1.68896 160.64 1.89307 160.589 2.00977 160.589 cv
2.01758 160.589 2.36035 160.61 2.86279 160.698 cv
3.06738 160.735 3.19775 160.757 3.82471 160.909 cv
3.82471 161.173 li
3.83252 161.376 4.06543 161.712 4.17529 161.712 cv
4.21875 161.712 4.22656 161.706 4.22656 161.544 cv
4.22656 161.019 li
4.73682 161.173 5.43604 161.376 6.32568 161.712 cv
6.49365 161.778 6.5083 161.778 6.51611 161.778 cv
6.56641 161.778 6.56641 161.72 6.56641 161.706 cv
6.56641 161.603 6.47168 161.376 6.32568 161.231 cv
6.28223 161.194 6.26758 161.179 6.19531 161.151 cv
5.55273 160.896 4.89697 160.677 4.22656 160.485 cv
4.22656 158.845 li
4.22656 158.765 4.22656 158.626 4.1543 158.509 cv
4.46045 158.589 5.64844 158.888 6.22412 158.888 cv
6.43555 158.888 6.625 158.765 6.625 158.45 cv
6.625 157.479 6.01953 156.938 5.78564 156.938 cv
5.74219 156.938 5.72803 156.976 5.72803 157.013 cv
5.72803 157.071 5.83105 157.458 6.11768 157.567 cv
6.17725 157.597 6.18408 157.604 6.20654 157.743 cv
6.21826 157.823 6.22363 157.962 6.22363 157.968 cv
6.22363 158.099 6.13623 158.269 5.90967 158.269 cv
5.82227 158.269 5.4209 158.216 5.26025 158.194 cv
4.4502 158.071 3.07861 157.714 1.41455 157.085 cv
1.36328 157.063 1.34863 157.063 1.33398 157.063 cv
1.28223 157.063 1.28223 157.108 1.28223 157.136 cv
1.28223 157.245 1.38477 157.458 1.50928 157.597 cv
1.52344 157.604 1.56006 157.647 1.62598 157.677 cv
2.3418 157.968 3.07861 158.194 3.82324 158.413 cv
3.82227 160.37 li
cp
f
2.27832 153.214 mo
2.27832 153.388 li
2.7793 153.442 3.43848 153.519 3.43848 154.481 cv
3.43848 154.991 li
3.43848 155.231 3.39746 155.235 3.23975 155.235 cv
.560547 155.235 li
.392578 155.235 .326172 155.235 .326172 154.759 cv
.326172 154.581 li
.142578 154.581 li
.147461 154.688 .163086 155.343 .163086 155.476 cv
.163086 155.669 .142578 156.247 .142578 156.253 cv
.326172 156.253 li
.326172 156.13 li
.326172 155.733 .376953 155.724 .555664 155.724 cv
3.20898 155.724 li
3.38232 155.724 3.43848 155.735 3.43848 156.13 cv
3.43848 156.253 li
3.62207 156.253 li
3.62207 153.366 li
2.27832 153.214 li
cp
f
3.56055 150.7 mo
3.56055 151.292 3.07617 152.021 1.82129 152.021 cv
.637207 152.021 .203125 151.276 .203125 150.7 cv
.203125 150.122 .637207 149.376 1.82129 149.376 cv
3.07617 149.376 3.56055 150.106 3.56055 150.7 cv
3.56055 150.7 li
cp
1.90039 148.827 mo
.882324 148.827 .0400391 149.661 .0400391 150.7 cv
.0400391 151.743 .882324 152.571 1.90039 152.571 cv
2.89844 152.571 3.72363 151.743 3.72363 150.7 cv
3.72363 149.657 2.89844 148.827 1.90039 148.827 cv
1.90039 148.827 li
cp
f
.5 lw
10 ml
9.37256 208.124 mo
9.37256 148.091 li
@
11.7788 188.157 mo
11.5151 188.157 11.4351 188.136 11.4351 187.563 cv
11.4351 187.376 li
11.2109 187.376 li
11.2329 187.63 11.2329 188.206 11.2329 188.485 cv
11.2329 188.771 11.2329 189.345 11.2109 189.601 cv
11.4351 189.601 li
11.4351 189.411 li
11.4351 188.831 11.5151 188.81 11.7788 188.81 cv
15.6289 188.81 li
15.8916 188.81 15.9722 188.831 15.9722 189.411 cv
15.9722 189.601 li
16.1953 189.601 li
16.1743 189.345 16.1743 188.769 16.1743 188.491 cv
16.1743 188.206 16.1743 187.63 16.1953 187.376 cv
15.9722 187.376 li
15.9722 187.563 li
15.9722 188.136 15.8916 188.157 15.6284 188.157 cv
11.7788 188.157 li
cp
f
13.6777 186.388 mo
15.6426 186.388 li
15.9722 186.388 15.9722 186.466 15.9722 186.948 cv
16.1953 186.948 li
16.1885 186.692 16.1743 186.319 16.1743 186.122 cv
16.1743 185.933 16.1885 185.554 16.1953 185.306 cv
15.9722 185.306 li
15.9722 185.798 15.9722 185.878 15.6426 185.878 cv
14.2959 185.878 li
13.5342 185.878 13.124 185.36 13.124 184.894 cv
13.124 184.433 13.5195 184.353 13.937 184.353 cv
15.6426 184.353 li
15.9722 184.353 15.9722 184.433 15.9722 184.919 cv
16.1953 184.919 li
16.1885 184.663 16.1743 184.29 16.1743 184.095 cv
16.1743 183.905 16.1885 183.524 16.1953 183.276 cv
15.9722 183.276 li
15.9722 183.763 15.9722 183.843 15.6426 183.843 cv
14.2959 183.843 li
13.5342 183.843 13.124 183.325 13.124 182.858 cv
13.124 182.397 13.5195 182.317 13.937 182.317 cv
15.6426 182.317 li
15.9722 182.317 15.9722 182.397 15.9722 182.89 cv
16.1953 182.89 li
16.1885 182.634 16.1743 182.261 16.1743 182.065 cv
16.1743 181.876 16.1885 181.495 16.1953 181.249 cv
15.9722 181.249 li
15.9722 181.622 15.9722 181.802 15.7529 181.81 cv
14.353 181.81 li
13.7236 181.81 13.4961 181.81 13.2324 182.036 cv
13.1079 182.14 12.9609 182.38 12.9609 182.804 cv
12.9609 183.417 13.4043 183.739 13.686 183.862 cv
13.043 183.966 12.9609 184.507 12.9609 184.835 cv
12.9609 185.368 13.2793 185.712 13.7373 185.917 cv
12.9609 185.917 li
13.041 186.946 li
13.2666 186.946 li
13.2666 186.444 13.3184 186.386 13.6777 186.386 cv
13.6777 186.388 li
cp
f
13.752 178.683 mo
13.4082 178.587 13.0361 178.493 12.6846 178.419 cv
12.1958 178.331 11.7061 178.28 11.6187 178.28 cv
11.2109 178.28 11.2109 178.683 11.2109 178.771 cv
11.2109 179.323 11.4165 179.821 11.6494 180.163 cv
12.0508 180.753 12.5405 180.944 12.5762 180.944 cv
12.6274 180.944 12.6274 180.894 12.6274 180.87 cv
12.6274 180.812 12.5405 180.468 12.2651 180.315 cv
11.895 180.118 11.6187 179.907 11.6187 179.251 cv
11.6187 178.952 11.8223 178.901 11.939 178.901 cv
11.9468 178.901 12.2891 178.923 12.792 179.011 cv
12.9971 179.046 13.1274 179.067 13.7544 179.222 cv
13.7544 179.483 li
13.7617 179.688 13.9946 180.024 14.105 180.024 cv
14.1484 180.024 14.1563 180.017 14.1563 179.856 cv
14.1563 179.331 li
14.666 179.483 15.3657 179.688 16.2554 180.024 cv
16.4224 180.091 16.4375 180.091 16.4443 180.091 cv
16.4956 180.091 16.4956 180.032 16.4956 180.017 cv
16.4956 179.915 16.4009 179.688 16.2554 179.542 cv
16.2119 179.507 16.1973 179.491 16.124 179.462 cv
15.4824 179.206 14.8267 178.987 14.1563 178.798 cv
14.1563 177.155 li
14.1563 177.075 14.1563 176.937 14.0825 176.821 cv
14.3887 176.901 15.5771 177.2 16.1538 177.2 cv
16.3643 177.2 16.5547 177.075 16.5547 176.761 cv
16.5547 175.79 15.9492 175.251 15.7153 175.251 cv
15.6719 175.251 15.6563 175.288 15.6563 175.325 cv
15.6563 175.384 15.7598 175.771 16.0469 175.88 cv
16.106 175.909 16.1138 175.915 16.1357 176.054 cv
16.147 176.134 16.1528 176.274 16.1528 176.28 cv
16.1528 176.411 16.0649 176.579 15.8389 176.579 cv
15.752 176.579 15.3501 176.528 15.1899 176.507 cv
14.3794 176.384 13.0078 176.024 11.3438 175.397 cv
11.2925 175.376 11.2783 175.376 11.2637 175.376 cv
11.2114 175.376 11.2114 175.419 11.2114 175.448 cv
11.2114 175.558 11.314 175.771 11.4385 175.909 cv
11.4531 175.915 11.4897 175.96 11.5552 175.989 cv
12.27 176.28 13.0078 176.507 13.752 176.726 cv
13.752 178.683 li
cp
f
12.7573 171.524 mo
12.7573 171.698 li
13.2578 171.755 13.917 171.831 13.917 172.794 cv
13.917 173.304 li
13.917 173.542 13.8765 173.548 13.7183 173.548 cv
11.0386 173.548 li
10.8706 173.548 10.8037 173.548 10.8037 173.071 cv
10.8037 172.894 li
10.6211 172.894 li
10.6265 173.001 10.6416 173.655 10.6416 173.788 cv
10.6416 173.981 10.6211 174.56 10.6211 174.563 cv
10.8037 174.563 li
10.8037 174.442 li
10.8037 174.048 10.856 174.038 11.0332 174.038 cv
13.6875 174.038 li
13.8608 174.038 13.917 174.048 13.917 174.442 cv
13.917 174.563 li
14.1006 174.563 li
14.1006 171.679 li
12.7573 171.524 li
cp
f
14.0391 169.011 mo
14.0391 169.604 13.5547 170.333 12.2998 170.333 cv
11.1162 170.333 10.6816 169.589 10.6816 169.011 cv
10.6816 168.433 11.1162 167.688 12.2998 167.688 cv
13.5547 167.688 14.0391 168.417 14.0391 169.011 cv
14.0391 169.011 li
cp
12.3794 167.138 mo
11.3599 167.138 10.519 167.974 10.519 169.011 cv
10.519 170.054 11.3599 170.884 12.3794 170.884 cv
13.3774 170.884 14.2021 170.054 14.2021 169.011 cv
14.2021 167.97 13.3774 167.138 12.3794 167.138 cv
12.3794 167.138 li
cp
f
209.773 206.47 mo
209.51 206.47 209.43 206.448 209.43 205.876 cv
209.43 205.688 li
209.205 205.688 li
209.227 205.942 209.227 206.519 209.227 206.796 cv
209.227 207.081 209.227 207.657 209.205 207.913 cv
209.43 207.913 li
209.43 207.724 li
209.43 207.144 209.51 207.12 209.773 207.12 cv
213.623 207.12 li
213.887 207.12 213.967 207.144 213.967 207.724 cv
213.967 207.913 li
214.189 207.913 li
214.168 207.657 214.168 207.081 214.168 206.804 cv
214.168 206.519 214.168 205.942 214.189 205.688 cv
213.967 205.688 li
213.967 205.876 li
213.967 206.448 213.887 206.47 213.623 206.47 cv
209.773 206.47 li
cp
f
211.672 204.7 mo
213.637 204.7 li
213.967 204.7 213.967 204.778 213.967 205.259 cv
214.189 205.259 li
214.184 205.003 214.168 204.632 214.168 204.435 cv
214.168 204.245 214.184 203.866 214.189 203.616 cv
213.967 203.616 li
213.967 204.11 213.967 204.19 213.637 204.19 cv
212.291 204.19 li
211.529 204.19 211.119 203.673 211.119 203.206 cv
211.119 202.745 211.514 202.665 211.932 202.665 cv
213.637 202.665 li
213.967 202.665 213.967 202.745 213.967 203.229 cv
214.189 203.229 li
214.184 202.976 214.168 202.603 214.168 202.405 cv
214.168 202.216 214.184 201.837 214.189 201.589 cv
213.967 201.589 li
213.967 202.075 213.967 202.155 213.637 202.155 cv
212.291 202.155 li
211.529 202.155 211.119 201.638 211.119 201.171 cv
211.119 200.71 211.514 200.63 211.932 200.63 cv
213.637 200.63 li
213.967 200.63 213.967 200.71 213.967 201.2 cv
214.189 201.2 li
214.184 200.946 214.168 200.573 214.168 200.378 cv
214.168 200.188 214.184 199.808 214.189 199.56 cv
213.967 199.56 li
213.967 199.933 213.967 200.114 213.746 200.122 cv
212.348 200.122 li
211.719 200.122 211.49 200.122 211.227 200.349 cv
211.102 200.45 210.955 200.69 210.955 201.116 cv
210.955 201.729 211.398 202.05 211.68 202.175 cv
211.037 202.278 210.955 202.817 210.955 203.147 cv
210.955 203.681 211.273 204.024 211.73 204.228 cv
210.955 204.228 li
211.035 205.259 li
211.26 205.259 li
211.26 204.757 211.313 204.698 211.672 204.698 cv
211.672 204.7 li
cp
f
211.746 196.995 mo
211.402 196.899 211.031 196.804 210.68 196.731 cv
210.189 196.644 209.701 196.593 209.613 196.593 cv
209.205 196.593 209.205 196.995 209.205 197.081 cv
209.205 197.636 209.41 198.132 209.643 198.476 cv
210.045 199.065 210.535 199.257 210.57 199.257 cv
210.621 199.257 210.621 199.206 210.621 199.183 cv
210.621 199.124 210.535 198.78 210.26 198.628 cv
209.889 198.431 209.613 198.22 209.613 197.562 cv
209.613 197.265 209.816 197.212 209.934 197.212 cv
209.941 197.212 210.283 197.235 210.787 197.321 cv
210.99 197.358 211.121 197.38 211.748 197.534 cv
211.748 197.796 li
211.756 198.001 211.988 198.337 212.1 198.337 cv
212.143 198.337 212.15 198.329 212.15 198.167 cv
212.15 197.642 li
212.66 197.796 213.359 198.001 214.25 198.337 cv
214.416 198.401 214.432 198.401 214.439 198.401 cv
214.49 198.401 214.49 198.343 214.49 198.329 cv
214.49 198.228 214.395 198.001 214.25 197.854 cv
214.205 197.817 214.191 197.804 214.117 197.774 cv
213.477 197.519 212.82 197.3 212.15 197.11 cv
212.15 195.468 li
212.15 195.388 212.15 195.249 212.076 195.132 cv
212.383 195.214 213.572 195.513 214.148 195.513 cv
214.359 195.513 214.549 195.388 214.549 195.073 cv
214.549 194.103 213.943 193.563 213.709 193.563 cv
213.666 193.563 213.65 193.599 213.65 193.638 cv
213.65 193.694 213.754 194.083 214.041 194.19 cv
214.1 194.22 214.107 194.228 214.131 194.366 cv
214.141 194.446 214.146 194.585 214.146 194.593 cv
214.146 194.724 214.059 194.892 213.834 194.892 cv
213.746 194.892 213.344 194.841 213.184 194.819 cv
212.373 194.694 211.002 194.337 209.338 193.71 cv
209.287 193.688 209.271 193.688 209.258 193.688 cv
209.205 193.688 209.205 193.731 209.205 193.761 cv
209.205 193.87 209.309 194.083 209.434 194.22 cv
209.447 194.228 209.484 194.272 209.549 194.3 cv
210.264 194.593 211.002 194.819 211.746 195.038 cv
211.746 196.995 li
cp
f
208.143 191.849 mo
208.072 191.905 208.066 191.911 208.066 192.013 cv
208.066 192.897 li
208.248 192.897 li
208.248 192.743 li
208.248 192.522 208.275 192.396 208.281 192.37 cv
210.996 192.37 li
211.133 192.37 211.361 192.37 211.361 192.897 cv
211.545 192.897 li
211.529 192.688 211.525 192.483 211.525 192.274 cv
211.525 192.063 211.529 191.86 211.545 191.651 cv
211.361 191.651 li
211.361 192.167 211.133 192.167 210.994 192.167 cv
208.414 192.167 li
211.469 189.897 li
211.541 189.847 211.545 189.843 211.545 189.782 cv
211.545 189.685 211.5 189.685 211.402 189.685 cv
208.617 189.685 li
208.479 189.685 208.25 189.685 208.25 189.169 cv
208.066 189.169 li
208.082 189.378 208.086 189.581 208.086 189.792 cv
208.086 190.001 208.082 190.206 208.066 190.415 cv
208.25 190.415 li
208.25 189.888 208.479 189.888 208.617 189.888 cv
210.775 189.888 li
208.143 191.849 li
cp
f
210.201 185.544 mo
210.201 185.718 li
210.703 185.772 211.361 185.849 211.361 186.813 cv
211.361 187.323 li
211.361 187.562 211.32 187.567 211.164 187.567 cv
208.482 187.567 li
208.314 187.567 208.248 187.567 208.248 187.091 cv
208.248 186.913 li
208.066 186.913 li
208.072 187.021 208.086 187.673 208.086 187.808 cv
208.086 188.001 208.066 188.577 208.066 188.583 cv
208.248 188.583 li
208.248 188.46 li
208.248 188.065 208.301 188.056 208.479 188.056 cv
211.133 188.056 li
211.307 188.056 211.361 188.065 211.361 188.46 cv
211.361 188.583 li
211.545 188.583 li
211.545 185.698 li
210.201 185.544 li
cp
f
211.484 183.011 mo
211.484 183.603 211 184.331 209.744 184.331 cv
208.561 184.331 208.127 183.587 208.127 183.011 cv
208.127 182.433 208.561 181.687 209.744 181.687 cv
211 181.687 211.484 182.417 211.484 183.011 cv
211.484 183.011 li
cp
209.824 181.138 mo
208.805 181.138 207.965 181.972 207.965 183.011 cv
207.965 184.054 208.805 184.882 209.824 184.882 cv
210.822 184.882 211.646 184.054 211.646 183.011 cv
211.646 181.968 210.822 181.138 209.824 181.138 cv
209.824 181.138 li
cp
f
212.502 173.987 mo
212.502 173.864 212.502 173.731 212.359 173.731 cv
212.217 173.731 212.217 173.864 212.217 173.987 cv
212.217 177.935 li
212.217 178.058 212.217 178.188 212.359 178.188 cv
212.502 178.188 212.502 178.058 212.502 177.935 cv
212.502 173.987 li
cp
f
209.773 169.847 mo
209.51 169.847 209.43 169.823 209.43 169.251 cv
209.43 169.063 li
209.205 169.063 li
209.227 169.319 209.227 169.896 209.227 170.173 cv
209.227 170.456 209.227 171.034 209.205 171.29 cv
209.43 171.29 li
209.43 171.099 li
209.43 170.519 209.51 170.495 209.773 170.495 cv
213.623 170.495 li
213.887 170.495 213.967 170.519 213.967 171.099 cv
213.967 171.29 li
214.189 171.29 li
214.168 171.034 214.168 170.456 214.168 170.179 cv
214.168 169.896 214.168 169.319 214.189 169.063 cv
213.967 169.063 li
213.967 169.251 li
213.967 169.823 213.887 169.845 213.623 169.845 cv
209.773 169.847 li
cp
f
211.672 168.075 mo
213.637 168.075 li
213.967 168.075 213.967 168.153 213.967 168.634 cv
214.189 168.634 li
214.184 168.38 214.168 168.007 214.168 167.812 cv
214.168 167.62 214.184 167.241 214.189 166.993 cv
213.967 166.993 li
213.967 167.485 213.967 167.567 213.637 167.567 cv
212.291 167.567 li
211.529 167.567 211.119 167.048 211.119 166.581 cv
211.119 166.12 211.514 166.04 211.932 166.04 cv
213.637 166.04 li
213.967 166.04 213.967 166.12 213.967 166.606 cv
214.189 166.606 li
214.184 166.351 214.168 165.979 214.168 165.782 cv
214.168 165.593 214.184 165.212 214.189 164.964 cv
213.967 164.964 li
213.967 165.452 213.967 165.532 213.637 165.532 cv
212.291 165.532 li
211.529 165.532 211.119 165.013 211.119 164.546 cv
211.119 164.085 211.514 164.005 211.932 164.005 cv
213.637 164.005 li
213.967 164.005 213.967 164.087 213.967 164.577 cv
214.189 164.577 li
214.184 164.321 214.168 163.95 214.168 163.753 cv
214.168 163.563 214.184 163.185 214.189 162.935 cv
213.967 162.935 li
213.967 163.31 213.967 163.489 213.746 163.497 cv
212.348 163.497 li
211.719 163.497 211.49 163.497 211.227 163.724 cv
211.102 163.825 210.955 164.067 210.955 164.491 cv
210.955 165.104 211.398 165.427 211.68 165.55 cv
211.037 165.653 210.955 166.194 210.955 166.522 cv
210.955 167.056 211.273 167.399 211.73 167.604 cv
210.955 167.604 li
211.035 168.634 li
211.26 168.634 li
211.26 168.132 211.313 168.075 211.672 168.075 cv
211.672 168.075 li
cp
f
211.746 160.37 mo
211.402 160.274 211.031 160.181 210.68 160.106 cv
210.189 160.021 209.701 159.968 209.613 159.968 cv
209.205 159.968 209.205 160.37 209.205 160.456 cv
209.205 161.011 209.41 161.507 209.643 161.851 cv
210.045 162.442 210.535 162.632 210.57 162.632 cv
210.621 162.632 210.621 162.581 210.621 162.558 cv
210.621 162.501 210.535 162.157 210.26 162.003 cv
209.889 161.808 209.613 161.595 209.613 160.938 cv
209.613 160.64 209.816 160.587 209.934 160.587 cv
209.941 160.587 210.283 160.61 210.787 160.698 cv
210.99 160.735 211.121 160.755 211.748 160.909 cv
211.748 161.173 li
211.756 161.376 211.988 161.712 212.1 161.712 cv
212.143 161.712 212.15 161.706 212.15 161.544 cv
212.15 161.019 li
212.66 161.173 213.359 161.376 214.25 161.712 cv
214.416 161.778 214.432 161.778 214.439 161.778 cv
214.49 161.778 214.49 161.72 214.49 161.706 cv
214.49 161.603 214.395 161.376 214.25 161.231 cv
214.205 161.194 214.191 161.181 214.117 161.149 cv
213.477 160.896 212.82 160.675 212.15 160.485 cv
212.15 158.845 li
212.15 158.763 212.15 158.626 212.076 158.509 cv
212.383 158.589 213.572 158.888 214.148 158.888 cv
214.359 158.888 214.549 158.763 214.549 158.45 cv
214.549 157.479 213.943 156.938 213.709 156.938 cv
213.666 156.938 213.65 156.976 213.65 157.013 cv
213.65 157.069 213.754 157.458 214.041 157.567 cv
214.1 157.595 214.107 157.603 214.131 157.743 cv
214.141 157.823 214.146 157.96 214.146 157.968 cv
214.146 158.101 214.059 158.269 213.834 158.269 cv
213.746 158.269 213.344 158.216 213.184 158.194 cv
212.373 158.069 211.002 157.714 209.338 157.085 cv
209.287 157.063 209.271 157.063 209.258 157.063 cv
209.205 157.063 209.205 157.108 209.205 157.136 cv
209.205 157.245 209.309 157.458 209.434 157.595 cv
209.447 157.603 209.484 157.647 209.549 157.677 cv
210.264 157.968 211.002 158.194 211.746 158.413 cv
211.746 160.37 li
cp
f
210.201 153.214 mo
210.201 153.386 li
210.703 153.442 211.361 153.519 211.361 154.481 cv
211.361 154.991 li
211.361 155.231 211.32 155.235 211.164 155.235 cv
208.482 155.235 li
208.314 155.235 208.248 155.235 208.248 154.759 cv
208.248 154.581 li
208.066 154.581 li
208.072 154.688 208.086 155.343 208.086 155.476 cv
208.086 155.669 208.066 156.247 208.066 156.253 cv
208.248 156.253 li
208.248 156.13 li
208.248 155.735 208.301 155.724 208.479 155.724 cv
211.133 155.724 li
211.307 155.724 211.361 155.735 211.361 156.13 cv
211.361 156.253 li
211.545 156.253 li
211.545 153.366 li
210.201 153.214 li
cp
f
211.484 150.698 mo
211.484 151.292 211 152.021 209.744 152.021 cv
208.561 152.021 208.127 151.276 208.127 150.698 cv
208.127 150.122 208.561 149.376 209.744 149.376 cv
211 149.376 211.484 150.106 211.484 150.698 cv
211.484 150.698 li
cp
209.824 148.827 mo
208.805 148.827 207.965 149.661 207.965 150.7 cv
207.965 151.741 208.805 152.571 209.824 152.571 cv
210.822 152.571 211.646 151.741 211.646 150.7 cv
211.646 149.655 210.822 148.827 209.824 148.827 cv
209.824 148.827 li
cp
f
217.295 208.122 mo
217.295 148.091 li
@
219.701 188.157 mo
219.439 188.157 219.359 188.136 219.359 187.563 cv
219.359 187.376 li
219.135 187.376 li
219.156 187.63 219.156 188.206 219.156 188.485 cv
219.156 188.769 219.156 189.345 219.135 189.601 cv
219.359 189.601 li
219.359 189.409 li
219.359 188.831 219.439 188.81 219.701 188.81 cv
223.553 188.81 li
223.816 188.81 223.896 188.831 223.896 189.409 cv
223.896 189.601 li
224.119 189.601 li
224.098 189.345 224.098 188.769 224.098 188.491 cv
224.098 188.206 224.098 187.63 224.119 187.374 cv
223.896 187.374 li
223.896 187.563 li
223.896 188.136 223.816 188.157 223.553 188.157 cv
219.701 188.157 li
cp
f
221.602 186.386 mo
223.566 186.386 li
223.896 186.386 223.896 186.468 223.896 186.946 cv
224.119 186.946 li
224.113 186.692 224.098 186.319 224.098 186.122 cv
224.098 185.933 224.113 185.552 224.119 185.306 cv
223.896 185.306 li
223.896 185.798 223.896 185.878 223.566 185.878 cv
222.219 185.878 li
221.457 185.878 221.047 185.36 221.047 184.894 cv
221.047 184.433 221.443 184.353 221.861 184.353 cv
223.566 184.353 li
223.896 184.353 223.896 184.433 223.896 184.917 cv
224.119 184.917 li
224.113 184.663 224.098 184.29 224.098 184.095 cv
224.098 183.903 224.113 183.524 224.119 183.276 cv
223.896 183.276 li
223.896 183.763 223.896 183.843 223.566 183.843 cv
222.219 183.843 li
221.457 183.843 221.047 183.325 221.047 182.858 cv
221.047 182.397 221.443 182.317 221.861 182.317 cv
223.566 182.317 li
223.896 182.317 223.896 182.397 223.896 182.89 cv
224.119 182.89 li
224.113 182.634 224.098 182.263 224.098 182.065 cv
224.098 181.876 224.113 181.495 224.119 181.247 cv
223.896 181.247 li
223.896 181.622 223.896 181.802 223.676 181.81 cv
222.277 181.81 li
221.646 181.81 221.42 181.81 221.156 182.036 cv
221.031 182.138 220.885 182.38 220.885 182.802 cv
220.885 183.417 221.328 183.737 221.609 183.862 cv
220.965 183.966 220.885 184.507 220.885 184.835 cv
220.885 185.368 221.201 185.712 221.66 185.915 cv
220.885 185.915 li
220.965 186.946 li
221.189 186.946 li
221.189 186.444 221.242 186.386 221.602 186.386 cv
221.602 186.386 li
cp
f
221.674 178.683 mo
221.332 178.587 220.959 178.491 220.607 178.419 cv
220.119 178.331 219.631 178.28 219.541 178.28 cv
219.135 178.28 219.135 178.683 219.135 178.771 cv
219.135 179.323 219.34 179.819 219.572 180.163 cv
219.975 180.753 220.463 180.942 220.5 180.942 cv
220.551 180.942 220.551 180.892 220.551 180.87 cv
220.551 180.812 220.465 180.47 220.188 180.315 cv
219.818 180.118 219.541 179.907 219.541 179.251 cv
219.541 178.95 219.746 178.899 219.863 178.899 cv
219.869 178.899 220.213 178.921 220.715 179.011 cv
220.92 179.046 221.051 179.067 221.678 179.222 cv
221.678 179.485 li
221.686 179.688 221.918 180.024 222.027 180.024 cv
222.072 180.024 222.078 180.017 222.078 179.856 cv
222.078 179.331 li
222.59 179.485 223.289 179.688 224.18 180.024 cv
224.346 180.091 224.361 180.091 224.369 180.091 cv
224.42 180.091 224.42 180.03 224.42 180.017 cv
224.42 179.915 224.324 179.688 224.18 179.542 cv
224.135 179.507 224.121 179.491 224.047 179.462 cv
223.406 179.206 222.75 178.987 222.08 178.798 cv
222.08 177.155 li
222.08 177.075 222.08 176.937 222.006 176.819 cv
222.313 176.901 223.5 177.2 224.076 177.2 cv
224.287 177.2 224.479 177.075 224.479 176.763 cv
224.479 175.792 223.871 175.251 223.639 175.251 cv
223.594 175.251 223.58 175.288 223.58 175.325 cv
223.58 175.384 223.684 175.769 223.971 175.88 cv
224.029 175.909 224.037 175.915 224.059 176.054 cv
224.07 176.134 224.076 176.272 224.076 176.28 cv
224.076 176.411 223.988 176.579 223.762 176.579 cv
223.674 176.579 223.273 176.528 223.113 176.507 cv
222.303 176.384 220.932 176.024 219.268 175.397 cv
219.217 175.376 219.201 175.376 219.186 175.376 cv
219.135 175.376 219.135 175.419 219.135 175.448 cv
219.135 175.558 219.238 175.769 219.361 175.909 cv
219.375 175.915 219.412 175.96 219.479 175.989 cv
220.193 176.28 220.932 176.507 221.676 176.726 cv
221.674 178.683 li
cp
f
220.682 171.524 mo
220.682 171.698 li
221.182 171.755 221.842 171.831 221.842 172.794 cv
221.842 173.304 li
221.842 173.542 221.801 173.548 221.643 173.548 cv
218.963 173.548 li
218.795 173.548 218.729 173.548 218.729 173.071 cv
218.729 172.894 li
218.545 172.894 li
218.549 173.001 218.564 173.655 218.564 173.788 cv
218.564 173.981 218.545 174.56 218.545 174.565 cv
218.729 174.565 li
218.729 174.442 li
218.729 174.046 218.779 174.036 218.957 174.036 cv
221.611 174.036 li
221.785 174.036 221.842 174.048 221.842 174.442 cv
221.842 174.565 li
222.023 174.565 li
222.023 171.679 li
220.682 171.524 li
cp
f
221.963 169.011 mo
221.963 169.604 221.479 170.333 220.223 170.333 cv
219.039 170.333 218.605 169.589 218.605 169.011 cv
218.605 168.433 219.039 167.688 220.223 167.688 cv
221.479 167.688 221.963 168.419 221.963 169.011 cv
221.963 169.011 li
cp
220.303 167.138 mo
219.283 167.138 218.443 167.974 218.443 169.011 cv
218.443 170.054 219.283 170.884 220.303 170.884 cv
221.301 170.884 222.125 170.054 222.125 169.011 cv
222.125 167.97 221.301 167.138 220.303 167.138 cv
220.303 167.138 li
cp
f
177.29 110.863 mo
177.346 110.666 177.379 110.523 177.379 110.228 cv
177.379 109.516 176.94 109.056 176.118 109.056 cv
175.252 109.056 174.683 109.634 174.419 110.023 cv
174.364 109.389 173.904 109.056 173.411 109.056 cv
172.906 109.056 172.699 109.487 172.601 109.685 cv
172.403 110.061 172.261 110.723 172.261 110.755 cv
172.261 110.866 172.37 110.866 172.392 110.866 cv
172.501 110.866 172.513 110.855 172.578 110.613 cv
172.765 109.83 172.983 109.3 173.378 109.3 cv
173.564 109.3 173.718 109.389 173.718 109.806 cv
173.718 110.036 173.686 110.157 173.543 110.728 cv
172.906 113.263 li
172.874 113.428 172.808 113.68 172.808 113.735 cv
172.808 113.933 172.961 114.031 173.126 114.031 cv
173.258 114.031 173.454 113.945 173.531 113.724 cv
173.543 113.703 173.674 113.186 173.739 112.913 cv
173.98 111.924 li
174.047 111.682 174.112 111.441 174.167 111.188 cv
174.189 111.123 174.276 110.761 174.288 110.695 cv
174.32 110.596 174.66 109.981 175.032 109.685 cv
175.273 109.509 175.613 109.3 176.084 109.3 cv
176.556 109.3 176.676 109.673 176.676 110.067 cv
176.676 110.122 176.676 110.319 176.566 110.757 cv
175.316 115.791 li
175.284 115.924 175.284 115.945 175.284 115.967 cv
175.284 116.131 175.404 116.262 175.591 116.262 cv
175.931 116.262 176.008 115.945 176.041 115.824 cv
177.29 110.863 li
cp
f
177.29 238.687 mo
177.346 238.489 177.379 238.347 177.379 238.051 cv
177.379 237.339 176.94 236.879 176.118 236.879 cv
175.252 236.879 174.683 237.457 174.419 237.847 cv
174.364 237.212 173.904 236.879 173.411 236.879 cv
172.906 236.879 172.699 237.31 172.601 237.509 cv
172.403 237.884 172.261 238.546 172.261 238.579 cv
172.261 238.689 172.37 238.689 172.392 238.689 cv
172.501 238.689 172.513 238.679 172.578 238.437 cv
172.765 237.653 172.983 237.123 173.378 237.123 cv
173.564 237.123 173.718 237.212 173.718 237.629 cv
173.718 237.858 173.686 237.979 173.543 238.551 cv
172.906 241.087 li
172.874 241.251 172.808 241.503 172.808 241.558 cv
172.808 241.757 172.961 241.854 173.126 241.854 cv
173.258 241.854 173.454 241.769 173.531 241.548 cv
173.543 241.526 173.674 241.009 173.739 240.735 cv
173.98 239.747 li
174.047 239.505 174.112 239.265 174.167 239.012 cv
174.189 238.946 174.276 238.584 174.288 238.519 cv
174.32 238.419 174.66 237.804 175.032 237.508 cv
175.273 237.332 175.613 237.123 176.084 237.123 cv
176.556 237.123 176.676 237.497 176.676 237.891 cv
176.676 237.945 176.676 238.143 176.566 238.58 cv
175.316 243.614 li
175.284 243.747 175.284 243.769 175.284 243.79 cv
175.284 243.954 175.404 244.085 175.591 244.085 cv
175.931 244.085 176.008 243.769 176.041 243.647 cv
177.29 238.687 li
cp
f
386.534 110.85 mo
386.59 110.652 386.623 110.509 386.623 110.214 cv
386.623 109.502 386.185 109.042 385.362 109.042 cv
384.496 109.042 383.927 109.62 383.663 110.01 cv
383.608 109.375 383.148 109.042 382.655 109.042 cv
382.15 109.042 381.943 109.473 381.845 109.671 cv
381.647 110.047 381.505 110.709 381.505 110.742 cv
381.505 110.853 381.614 110.853 381.636 110.853 cv
381.745 110.853 381.757 110.841 381.822 110.599 cv
382.009 109.816 382.228 109.286 382.622 109.286 cv
382.809 109.286 382.962 109.375 382.962 109.792 cv
382.962 110.022 382.93 110.143 382.787 110.714 cv
382.15 113.25 li
382.118 113.415 382.052 113.667 382.052 113.721 cv
382.052 113.919 382.205 114.017 382.37 114.017 cv
382.502 114.017 382.698 113.931 382.775 113.71 cv
382.787 113.689 382.918 113.172 382.983 112.899 cv
383.225 111.911 li
383.291 111.668 383.356 111.427 383.411 111.175 cv
383.434 111.109 383.521 110.747 383.532 110.681 cv
383.564 110.582 383.904 109.967 384.276 109.671 cv
384.518 109.495 384.857 109.286 385.328 109.286 cv
385.8 109.286 385.92 109.66 385.92 110.054 cv
385.92 110.108 385.92 110.306 385.811 110.743 cv
384.561 115.777 li
384.528 115.91 384.528 115.932 384.528 115.953 cv
384.528 116.117 384.648 116.248 384.835 116.248 cv
385.175 116.248 385.252 115.932 385.285 115.811 cv
386.534 110.85 li
cp
f
386.534 238.673 mo
386.59 238.476 386.623 238.333 386.623 238.037 cv
386.623 237.325 386.185 236.865 385.362 236.865 cv
384.496 236.865 383.927 237.443 383.663 237.833 cv
383.608 237.198 383.148 236.865 382.655 236.865 cv
382.15 236.865 381.943 237.296 381.845 237.495 cv
381.647 237.87 381.505 238.532 381.505 238.565 cv
381.505 238.676 381.614 238.676 381.636 238.676 cv
381.745 238.676 381.757 238.665 381.822 238.423 cv
382.009 237.64 382.228 237.109 382.622 237.109 cv
382.809 237.109 382.962 237.198 382.962 237.615 cv
382.962 237.845 382.93 237.966 382.787 238.537 cv
382.15 241.073 li
382.118 241.237 382.052 241.489 382.052 241.544 cv
382.052 241.743 382.205 241.841 382.37 241.841 cv
382.502 241.841 382.698 241.755 382.775 241.534 cv
382.787 241.513 382.918 240.995 382.983 240.722 cv
383.225 239.733 li
383.291 239.491 383.356 239.251 383.411 238.998 cv
383.434 238.933 383.521 238.57 383.532 238.505 cv
383.564 238.405 383.904 237.79 384.276 237.494 cv
384.518 237.318 384.857 237.109 385.328 237.109 cv
385.8 237.109 385.92 237.483 385.92 237.877 cv
385.92 237.932 385.92 238.129 385.811 238.566 cv
384.561 243.601 li
384.528 243.733 384.528 243.755 384.528 243.776 cv
384.528 243.94 384.648 244.071 384.835 244.071 cv
385.175 244.071 385.252 243.755 385.285 243.634 cv
386.534 238.673 li
cp
f
13.189 62.6758 mo
13.0508 62.6377 12.9507 62.6143 12.7437 62.6143 cv
12.2432 62.6143 11.9209 62.9219 11.9209 63.499 cv
11.9209 64.1064 12.3267 64.5068 12.5996 64.6914 cv
12.1548 64.7295 11.9209 65.0527 11.9209 65.3994 cv
11.9209 65.7529 12.2231 65.8984 12.3623 65.9678 cv
12.626 66.1064 13.0908 66.207 13.1138 66.207 cv
13.1914 66.207 13.1914 66.1299 13.1914 66.1143 cv
13.1914 66.0371 13.1831 66.0293 13.0137 65.9834 cv
12.4639 65.8525 12.0918 65.6992 12.0918 65.4219 cv
12.0918 65.291 12.1543 65.1836 12.4468 65.1836 cv
12.6084 65.1836 12.6934 65.2061 13.0938 65.3066 cv
14.874 65.7529 li
14.9893 65.7764 15.1665 65.8223 15.2051 65.8223 cv
15.3438 65.8223 15.4126 65.7139 15.4126 65.5986 cv
15.4126 65.5068 15.3516 65.3682 15.1968 65.3145 cv
15.1821 65.3066 14.8198 65.2148 14.627 65.168 cv
13.9341 64.999 li
13.7642 64.9531 13.5942 64.9072 13.4175 64.8682 cv
13.3716 64.8525 13.1172 64.791 13.0708 64.7842 cv
13.002 64.7607 12.5698 64.5215 12.3623 64.2607 cv
12.2383 64.0918 12.0918 63.8535 12.0918 63.5234 cv
12.0918 63.1924 12.354 63.1074 12.6309 63.1074 cv
12.6689 63.1074 12.8071 63.1074 13.1147 63.1836 cv
16.6484 64.0615 li
16.7407 64.085 16.7559 64.085 16.771 64.085 cv
16.8862 64.085 16.9785 63.999 16.9785 63.8691 cv
16.9785 63.6309 16.7559 63.5771 16.6714 63.5537 cv
13.189 62.6758 li
cp
f
10.6748 58.0264 mo
10.3979 58.0264 10.3125 58.0049 10.3125 57.4014 cv
10.3125 57.2031 li
10.0771 57.2031 li
10.1001 57.4717 10.1001 58.0791 10.1001 58.3711 cv
10.1001 58.6709 10.1001 59.2783 10.0771 59.5479 cv
10.3125 59.5479 li
10.3125 59.3467 li
10.3125 58.7363 10.3979 58.7129 10.6748 58.7129 cv
14.731 58.7129 li
15.0083 58.7129 15.0928 58.7363 15.0928 59.3467 cv
15.0928 59.5479 li
15.3286 59.5479 li
15.3052 59.2783 15.3052 58.6709 15.3052 58.3789 cv
15.3052 58.0791 15.3052 57.4717 15.3286 57.2021 cv
15.0928 57.2021 li
15.0928 57.4014 li
15.0928 58.0039 15.0083 58.0264 14.731 58.0264 cv
10.6748 58.0264 li
cp
f
12.6753 56.1621 mo
14.7451 56.1621 li
15.0928 56.1621 15.0928 56.2461 15.0928 56.752 cv
15.3286 56.752 li
15.3208 56.4824 15.3052 56.0908 15.3052 55.8838 cv
15.3052 55.6836 15.3208 55.2832 15.3286 55.0225 cv
15.0928 55.0225 li
15.0928 55.541 15.0928 55.626 14.7456 55.626 cv
13.3262 55.626 li
12.5244 55.626 12.0918 55.0801 12.0918 54.5879 cv
12.0918 54.1035 12.5093 54.0186 12.9492 54.0186 cv
14.7456 54.0186 li
15.0928 54.0186 15.0928 54.1025 15.0928 54.6143 cv
15.3286 54.6143 li
15.3208 54.3457 15.3052 53.9531 15.3052 53.7461 cv
15.3052 53.5459 15.3208 53.1465 15.3286 52.8848 cv
15.0928 52.8848 li
15.0928 53.3975 15.0928 53.4824 14.7456 53.4824 cv
13.3262 53.4824 li
12.5244 53.4824 12.0918 52.9365 12.0918 52.4443 cv
12.0918 51.959 12.5093 51.875 12.9492 51.875 cv
14.7456 51.875 li
15.0928 51.875 15.0928 51.96 15.0928 52.4775 cv
15.3286 52.4775 li
15.3208 52.209 15.3052 51.8164 15.3052 51.6084 cv
15.3052 51.4092 15.3208 51.0088 15.3286 50.7471 cv
15.0928 50.7471 li
15.0928 51.1416 15.0928 51.3311 14.8608 51.3389 cv
13.3872 51.3389 li
12.7236 51.3389 12.4844 51.3389 12.2065 51.5781 cv
12.0757 51.6855 11.9209 51.9395 11.9209 52.3867 cv
11.9209 53.0332 12.3882 53.3711 12.6841 53.502 cv
12.0068 53.6104 11.9209 54.1797 11.9209 54.5264 cv
11.9209 55.0889 12.2549 55.4502 12.7383 55.666 cv
11.9209 55.666 li
12.0049 56.752 li
12.2422 56.752 li
12.2422 56.2227 12.2964 56.1621 12.6748 56.1621 cv
12.6753 56.1621 li
cp
f
12.7539 48.0449 mo
12.3916 47.9443 11.9995 47.8438 11.6294 47.7686 cv
11.1143 47.6758 10.5986 47.6221 10.5059 47.6221 cv
10.0771 47.6221 10.0771 48.0449 10.0771 48.1367 cv
10.0771 48.7207 10.293 49.2432 10.5391 49.6045 cv
10.9619 50.2275 11.4771 50.4277 11.5156 50.4277 cv
11.5693 50.4277 11.5693 50.374 11.5693 50.3506 cv
11.5693 50.2891 11.4775 49.9277 11.1875 49.7656 cv
10.7969 49.5586 10.5063 49.3359 10.5063 48.6436 cv
10.5063 48.3291 10.7217 48.2744 10.8442 48.2744 cv
10.8516 48.2744 11.2129 48.2979 11.7427 48.3906 cv
11.958 48.4287 12.0957 48.4521 12.7563 48.6133 cv
12.7563 48.8896 li
12.7642 49.1045 13.0103 49.459 13.125 49.459 cv
13.1709 49.459 13.1787 49.4502 13.1787 49.2822 cv
13.1787 48.7285 li
13.7168 48.8896 14.4541 49.1045 15.3911 49.459 cv
15.5669 49.5283 15.583 49.5283 15.5908 49.5283 cv
15.6445 49.5283 15.6445 49.4668 15.6445 49.4502 cv
15.6445 49.3428 15.5449 49.1045 15.3911 48.9512 cv
15.3452 48.9131 15.3301 48.8975 15.2524 48.8672 cv
14.5767 48.5977 13.8857 48.3672 13.1792 48.167 cv
13.1792 46.4375 li
13.1792 46.3525 13.1792 46.207 13.1025 46.083 cv
13.4253 46.1689 14.6768 46.4834 15.2837 46.4834 cv
15.5068 46.4834 15.7061 46.3525 15.7061 46.0215 cv
15.7061 45 15.0684 44.4307 14.8223 44.4307 cv
14.7764 44.4307 14.7603 44.4688 14.7603 44.5088 cv
14.7603 44.5693 14.8691 44.9766 15.1719 45.0918 cv
15.2339 45.123 15.2422 45.1309 15.2646 45.2773 cv
15.2773 45.3613 15.2832 45.5068 15.2832 45.5146 cv
15.2832 45.6533 15.1909 45.8301 14.9526 45.8301 cv
14.8604 45.8301 14.4375 45.7764 14.2686 45.7529 cv
13.415 45.6221 11.9702 45.2461 10.2168 44.585 cv
10.1631 44.5615 10.1479 44.5615 10.1323 44.5615 cv
10.0776 44.5615 10.0776 44.6074 10.0776 44.6387 cv
10.0776 44.7539 10.186 44.9766 10.3164 45.123 cv
10.3315 45.1309 10.3696 45.1768 10.4395 45.208 cv
11.1934 45.5146 11.9702 45.7529 12.7539 45.9844 cv
12.7539 48.0449 li
cp
f
221.146 62.6758 mo
221.008 62.6377 220.908 62.6143 220.701 62.6143 cv
220.2 62.6143 219.878 62.9219 219.878 63.499 cv
219.878 64.1064 220.283 64.5068 220.557 64.6914 cv
220.111 64.7295 219.878 65.0527 219.878 65.3994 cv
219.878 65.7529 220.18 65.8984 220.319 65.9678 cv
220.583 66.1064 221.048 66.207 221.07 66.207 cv
221.148 66.207 221.148 66.1299 221.148 66.1143 cv
221.148 66.0371 221.141 66.0293 220.971 65.9834 cv
220.421 65.8525 220.049 65.6992 220.049 65.4219 cv
220.049 65.291 220.111 65.1836 220.404 65.1836 cv
220.565 65.1836 220.65 65.2061 221.051 65.3066 cv
222.831 65.7529 li
222.946 65.7764 223.123 65.8223 223.162 65.8223 cv
223.301 65.8223 223.369 65.7139 223.369 65.5986 cv
223.369 65.5068 223.309 65.3682 223.154 65.3145 cv
223.139 65.3066 222.777 65.2148 222.584 65.168 cv
221.891 64.999 li
221.721 64.9531 221.551 64.9072 221.375 64.8682 cv
221.328 64.8525 221.074 64.791 221.027 64.7842 cv
220.959 64.7607 220.527 64.5215 220.319 64.2607 cv
220.195 64.0918 220.049 63.8535 220.049 63.5234 cv
220.049 63.1924 220.311 63.1074 220.588 63.1074 cv
220.626 63.1074 220.764 63.1074 221.072 63.1836 cv
224.605 64.0615 li
224.697 64.085 224.713 64.085 224.729 64.085 cv
224.844 64.085 224.936 63.999 224.936 63.8691 cv
224.936 63.6309 224.713 63.5771 224.629 63.5537 cv
221.146 62.6758 li
cp
f
218.632 58.0264 mo
218.355 58.0264 218.27 58.0049 218.27 57.4014 cv
218.27 57.2031 li
218.034 57.2031 li
218.057 57.4717 218.057 58.0791 218.057 58.3711 cv
218.057 58.6709 218.057 59.2783 218.034 59.5479 cv
218.27 59.5479 li
218.27 59.3467 li
218.27 58.7363 218.355 58.7129 218.632 58.7129 cv
222.688 58.7129 li
222.965 58.7129 223.05 58.7363 223.05 59.3467 cv
223.05 59.5479 li
223.285 59.5479 li
223.262 59.2783 223.262 58.6709 223.262 58.3789 cv
223.262 58.0791 223.262 57.4717 223.285 57.2021 cv
223.05 57.2021 li
223.05 57.4014 li
223.05 58.0039 222.965 58.0264 222.688 58.0264 cv
218.632 58.0264 li
cp
f
220.633 56.1621 mo
222.702 56.1621 li
223.05 56.1621 223.05 56.2461 223.05 56.752 cv
223.285 56.752 li
223.277 56.4824 223.262 56.0908 223.262 55.8838 cv
223.262 55.6836 223.277 55.2832 223.285 55.0225 cv
223.05 55.0225 li
223.05 55.541 223.05 55.626 222.703 55.626 cv
221.283 55.626 li
220.481 55.626 220.049 55.0801 220.049 54.5879 cv
220.049 54.1035 220.467 54.0186 220.906 54.0186 cv
222.703 54.0186 li
223.05 54.0186 223.05 54.1025 223.05 54.6143 cv
223.285 54.6143 li
223.277 54.3457 223.262 53.9531 223.262 53.7461 cv
223.262 53.5459 223.277 53.1465 223.285 52.8848 cv
223.05 52.8848 li
223.05 53.3975 223.05 53.4824 222.703 53.4824 cv
221.283 53.4824 li
220.481 53.4824 220.049 52.9365 220.049 52.4443 cv
220.049 51.959 220.467 51.875 220.906 51.875 cv
222.703 51.875 li
223.05 51.875 223.05 51.96 223.05 52.4775 cv
223.285 52.4775 li
223.277 52.209 223.262 51.8164 223.262 51.6084 cv
223.262 51.4092 223.277 51.0088 223.285 50.7471 cv
223.05 50.7471 li
223.05 51.1416 223.05 51.3311 222.818 51.3389 cv
221.344 51.3389 li
220.681 51.3389 220.441 51.3389 220.164 51.5781 cv
220.033 51.6855 219.878 51.9395 219.878 52.3867 cv
219.878 53.0332 220.346 53.3711 220.641 53.502 cv
219.964 53.6104 219.878 54.1797 219.878 54.5264 cv
219.878 55.0889 220.212 55.4502 220.695 55.666 cv
219.878 55.666 li
219.962 56.752 li
220.199 56.752 li
220.199 56.2227 220.254 56.1621 220.632 56.1621 cv
220.633 56.1621 li
cp
f
220.711 48.0449 mo
220.349 47.9443 219.957 47.8438 219.586 47.7686 cv
219.071 47.6758 218.556 47.6221 218.463 47.6221 cv
218.034 47.6221 218.034 48.0449 218.034 48.1367 cv
218.034 48.7207 218.25 49.2432 218.496 49.6045 cv
218.919 50.2275 219.434 50.4277 219.473 50.4277 cv
219.526 50.4277 219.526 50.374 219.526 50.3506 cv
219.526 50.2891 219.435 49.9277 219.145 49.7656 cv
218.754 49.5586 218.463 49.3359 218.463 48.6436 cv
218.463 48.3291 218.679 48.2744 218.801 48.2744 cv
218.809 48.2744 219.17 48.2979 219.699 48.3906 cv
219.915 48.4287 220.053 48.4521 220.713 48.6133 cv
220.713 48.8896 li
220.721 49.1045 220.967 49.459 221.082 49.459 cv
221.128 49.459 221.136 49.4502 221.136 49.2822 cv
221.136 48.7285 li
221.674 48.8896 222.411 49.1045 223.348 49.459 cv
223.523 49.5283 223.54 49.5283 223.548 49.5283 cv
223.602 49.5283 223.602 49.4668 223.602 49.4502 cv
223.602 49.3428 223.502 49.1045 223.348 48.9512 cv
223.303 48.9131 223.287 48.8975 223.209 48.8672 cv
222.533 48.5977 221.843 48.3672 221.137 48.167 cv
221.137 46.4375 li
221.137 46.3525 221.137 46.207 221.06 46.083 cv
221.383 46.1689 222.634 46.4834 223.24 46.4834 cv
223.464 46.4834 223.663 46.3525 223.663 46.0215 cv
223.663 45 223.025 44.4307 222.779 44.4307 cv
222.733 44.4307 222.717 44.4688 222.717 44.5088 cv
222.717 44.5693 222.826 44.9766 223.129 45.0918 cv
223.191 45.123 223.199 45.1309 223.222 45.2773 cv
223.234 45.3613 223.24 45.5068 223.24 45.5146 cv
223.24 45.6533 223.148 45.8301 222.91 45.8301 cv
222.817 45.8301 222.395 45.7764 222.226 45.7529 cv
221.372 45.6221 219.928 45.2461 218.174 44.585 cv
218.12 44.5615 218.105 44.5615 218.09 44.5615 cv
218.035 44.5615 218.035 44.6074 218.035 44.6387 cv
218.035 44.7539 218.143 44.9766 218.273 45.123 cv
218.289 45.1309 218.326 45.1768 218.396 45.208 cv
219.15 45.5146 219.928 45.7529 220.711 45.9844 cv
220.711 48.0449 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (TCS_Im_2x2_nice.eps)%%CreationDate: 10/01/13 14:40%%Canvassize: 16383%AI9_DataStream%Gb!!kl]PSbE@(GaI#%RY#l1!1C#b5Uq5)9eUH+RhTpE__iT!a6PGN/WMO,`SP3&T+==Z1Y`)ft*QH!HogYJl5PoCY]QUG-[XM=S#%T=t3uk2iX&hu<!0^]3B[bZD''X)a/K6[eYeJ+MQ)rT<hPKueBD7tKH<n#6iVj8/!$*)DgbZh?R(qo.;++(*p>q=)r5gD@?fhuEWA%h:qi$5IpXdT5WRkrT`P"nX#`Gs7c6Tmd6XLIWfr,iXbI>Y<TaJGPCCrj`p7KO8%]!T3T&KV7aSAE:q\HDnij]h;.H?Dsu]SIeq6.%'s?TI0qS?Y01>TL?bRR7)IdiFV+8LRH$B#QrJ19>%r^pE\B!];]`2kK1gV8*rK4k/s6^)N1J6l+KEENZ_LD7RYO6<.rpB[MRh&T^%RTP`!rR:X@YL+-\=l<Z$H#`TKjm?-E-#R(qg@+Qep,i9Op$IMFU\rLL@D)Ots6qi%W'@gRps5$#of'A;^>d2GHMcj^rcUhm0:*K(%IJ`G%n57[`Ac2-E1s7OiIt.([mXs$MC.XC,5Q'm`^\$.H!5.J^FhB'jT0rX@ha3rcrUY46s1cJnre-p(<P$>#bu\9N!j@FNpNg*+%0ttXliPAI,r#_VqBYWH]^4(9MoAQ"q1EH/">c"db^[#Nt*1]EqLd-ho.NNQs4QZ$Igtr&#ea8uXEqS=.DdM;W999)Erkm?kraU%U%%<4KC"oZ]d]A*44HLpF>BI-!C[/-u_^:_-hTBW\3Is6N?oI[oZMSO.Km_?I6J3e\Z&T.N2X+'9)rpf%7k;Rn)]mm5^S\P'p]A#9Z%IJZ63_ff=$4lWD>^ea!37urT^$ccr+=J\GV;qBFjR?ieP:l6"F7W3Z3L>9!$?[_h:btk]em<ASLs6A\aL+Q_Sq%)e@h;,iDr@8U'%hu)HNm2N0PLqii_Y?!YNDuAndn](V&k2jqH^.,Gi@K/8N)rp_<(ufaX^QlRYTD=iDpr@SVHiF#VIsa>R?bJanci0&Vl+d,\mc4)k%5MX$Pq!OJeIfK,pO#U(AIX?S9@Ye=gqO@M-qdL!(+"=FCqYK6Q&%C.LYMT6F-OUibFan`aIiK!j=8UnDIsT>NTbl;?K)W5<6`n%M%kDGhOc't&$s*Snfme_n`.cek!r>"j*o(,q4*.PL:D7%GlfFKD&k/2C1:#E[1q0nVY^[C1ipAO*$r;qW2rp".j+5_Qlp"Qromq/j%%T4[<p'8?Aa)=R?X&%q`2)ekt#Dc2/02[s'^J)"7_o[@^qJ,DOAoUk$rh7`[YroW$\Y?j?bJk,f(h^!^K9*Wt>?[q\@ma_3dCHOW<%X./tsY?p#?If8I(+)YG8W\h*&mpEaGMouj#cDp9dfC**c?%)\-c+@2Gq;Js#VrZI9_",+2(qo53]>+6M:Ag"l39;eqo03*JDAXW`%rdWe;rR2_bEqPW/5PeHh*rbPFYC?D12m7/'rl_ViJ,O,`_m^t5>lFNPYRJSPV6NcXrIb%>0/qpBhi%eD_8:>"f/@He`#k!V,M&)(%e?&!!^\m`W1(=0Dcf:Al0n/n)"8^JH^A?C1^])u-ol?`*nsa8CrT1@-M['*_c`V^ZW]pEK+$!M9IH("0doSJPA+dE]L6mA^bn$uD%V/aLdpg=$\f`S#:Wu'*rqUqs)^$RK;Vrsg7h`24]OoeF/W"s#hcnB9#gcYJ'hu22V+5Mh3?G/UXDsmYLheO[?>lFGaj3PWG4KlaE%pu^tgrQD5X1b?Pp2g6@a5lNE(oXObfcc.eo>R4CaXjfSJH2HS3Da/]\qGnB7:Pc_'#1>3u7[^aX8OPP&+o[tcRldUcYAVB#s38fU%KD2SK6YtIf=ih='k1H</F<";k^&=Y1pU;eE1*'R^If8fS]CAmnY"<^]O.l(*rNO1Xhn8aUW55O$=7:p`q#bE;Re_;W`-pG8b0H%U%>E91+q>K^ZYTeOCqsPW0rnGUt+)\f<Fnb1=T.droaNia3lg=!5c'rW9%Q!_AX1.Q!].XE>O+2J*Ij72Wf<I<mhYm2<&#5Lhk3`+#%J+9+[eL)H*I/`iYboJX)Qh:Ep]bt;cDgaV%NiV&qiB"@;(m]BLhV;Fc(n^W.*?LCa'Dh)<DVoqIpr2'iGGC"g0`QPXn[EJD55iD]%C[ef_]Y/fM=fW)2.-0]f9nsqlqSPJ_gE6CQVn`0,O*>g!m/M,Dp[J/Ggrfe:p%S07H]HRiqr9Aj8'c[+1Q9El[uY`/ee5tF\\G*:%qfctdTpcFBQg\6d?aTCK=>;J%f/N0uT[Tjn/:)O3o&]5LTDnEHV]S.9Sb)*>;E:r;NCEGfbaR-*mr$\r$Vq7OrHh7+I@H2'gWsfp%r:/qJfCMEqqU]*1^3oVD[@>&5k$%_gU&OemEB.Ai>[^%S#E<YLnb2tDmE:8Z4;QJV+1=B=s-7NZY#002l4"!Hg\3NLITT&!eS*0&%<6c"@b5NC@p#eABJ)eSM+&*H7meQDQP[X2?5E%K`/^jZ<J+N4G)@Tr4...HH\LCO(kW.cC$qEEJ"a'Re&*^.pp=7bZZjfFuksfnG%qeO^d?[HYJgIfD5E+=b"?eS]SeFtoRpC+d\gp8p:nS#K1=5SE'E;TXT@kQTnZ@o@YpoRljrJ/#NQVnM&n#]@#a%M,nMS5FsIR<\_%bL_Q]]_TBDGk^e+b'`aLrJ/eZ-5a<OXquK[mf*%t@Wg:H\%ht4_^%IZeWm>Fp1_YG=5SJ)L%Za=>5"Gp+%CCN?@40t!j[<%qto9c%^]!YM@c(II4_W"<p%Fm&Pj_t-qr[%74``'nNr0*ac21;'8AVdMIs#u4"6=@VJ+MsCl^N*j()<87Ma@B1oS^?YlPFKs%-@<d$eZo-%$H]9#^HiS2'=.?cYM\2Hinf(/l\FEeLR.c(mJVOun9@9WqVIS3813E!UP<tOn#jG&JT?6f\o-uNIJnregG^gU4umI.-hCqmi[7,a%#CUji@J9D;/<>g2LlQ`gV>@)k00ajY4V`B(VSfInC4D;s^%9%R8!N_a2`LL"5LG]0*"@#eEm,Q%%=Wis<!Y]Reu=<E+RPF\I8^"9%c2Aa@n$W,q_R%fX5h=K^#>"_q5GlKqDuBD0G*lT#_lo]"ZbM"]iVMZl]DLL#IIjG;rU0VA/?5BshLBiR]Y>Na&I.ls+mRY9#Eo,d%meZo\rG[179_-p[U8Wg:lD`#aq1P:5,u9kPs760f5//1FCa`mj_u'1(^\Pk7C\(\8]`.N#[,VdHqr'Um#p*sQYptTBq8Bc[1:k3#%#!F&0-s-bA,3_*O-2$*])Rr!ML=":40<`+co@5M^?i:SEI9a1>#F?V)M7%TWAP]GH\(cRcfRaZDnDI7!(+\?EV+9,oQr)\L=PSE'%r<pc0dD[@N:J/;B:AV)Xot>C<=I_eCh;*uRIptZ@k/EhaT5)IkoAS6UN%@-&)SAQsm<`BBS\B#B\Mjuo=Hu<`D-c_2bkmIYfN14J%Ignic[.u(Lff-*BrdRi,c0_uMV>TAO^)O(nQu?n,/TV`$?uJ4kn6%BolZ^Fb\mW[U;S*-NO-r[/%;l3+Vc;c^]frE:hnFI-$'TrB%mm$@,'R9HD#Pk;7c[C-%MH9`Ok/F54!/5=I]WhI]-`"IPb7:)V7cf^1l2'`3X+.k^AiRgi+,4h6s*jV55QCS\s6jm0rYV8J(npPl%OoO(4*A[-_`kO,/`6]aG*^;NuX%.ee?f1eOp/b`5GVu#aT5)I1@^0+NqF*g>61j27BE!-JlF1h#rr/;1-Tmm1]C/\\Y]5HHs7R+9%)Ii18nEShK:u6S/$&7+2ck,s?Dc+4F:D[^;]@ks3l&(q&X6`cm5U>=N_sLqsr]f7gKB/HdDqC3$!uDu'4;jGfIIpkgp<-&<m>2Bj%8%@?)^qCE-K%h2rs0hMK`-rFo)8?lYcbFc!,Ka>H^V+smjr"9Q+"kF19>X,tL7!l;NdmZA=$P5Ofm/gL"7o5AVp)5G4KE#EEbsck%R+kKB-R5KE@Md@5I?6XNRQeXHrcFF`K)P!"?]XLgYMs]n="]u._Y"edBB:,9`s^nWl[e0`&m?,S]H0n[\f4b`%cIPV`XbQdG)d2r%8F4QOfQ\[\Qj/k[>>:)Z^-9U#%'3^#<X!9j-'gZtHC_X3=,uSX)mJk<2BDi6a#hR5ln"]M.HNUe"*Nl!7ptB'.0;T7F)QH7*nM\I%4"qJXQIN*ulDKf$SQ4NNbB6Ge=LbM.jna5B3U/@LOK-g,*V,W/V!B7j8h=874IQOXm9-Z>4h_e9^.q03CfE:D5jUTGbNn+JjbEVs%lWg:3*DLedG+S9<]j@$<:qq=IcS7;-S_'WR"?Ws>mgRgMACRegV\8c2m-cH)Y]`QAS`>j\:qqI-"KD!<Nd%.G#8V)C+-!G:%Q+MM%g-60:\&LsTPZrr$Bd-qP?KBDZ]N)2a3JM"!it:o:b%kh.(s7*D.9Pq:YYipdXF;-V0cnrGTmt+,eC#PGG^["O=:D*8*+G&tdZ29:%@NWLe#o8+TS&T8XB9K]AJaZ-D$q7VrprIpR44<>I*](&g^Gk,8ZLiDl#N%85cfh:DnP\mC^sXV8o4VN%%=FJZSc'Ks73g\EL@L+<%"W!$'1]Dbk)3\Pq$'qbbIgVLec?J2&:\J_2nIj#*rnO;u7k+AEMEd^g->SqDea_ZSL'cS1=6[1TRdsiJO3&tp5M#FPbg95%0mUdJ%n9\BPc3O2i4MZs]<ed'[4;sDMk=f]e]+4IO4)KGb5,Mi*4R*cqO`fnU0a5drEt!lS=m%u[-=lIMbsUl<m!_*^jEPS^?[#cLF%e*[%l-l#Z#L`7>LPA-ghK'$E9Fm)VTdB`(l>Pq&V>`q_oesge=+@!Eb/n(reDD)qE=BEQrGej[e=,Z@1hf,+/5,qM>)nqcl466eL;?c;%"hI$#SZ0BO*B@B'^S0PFf'B44.^Zk0:%^IA5#jN*;L]YsU;Ef(X&8`9X2"0i4J]Whr[Pq\\Z<IP4X3V=<.=uh6[`$cj(8%"EDq>h%)o\(:rREVu9&A+U^`#8hX1pCe6<+b4l>L(l&9U%ahn[6jDO^JA+*hD]bGkIF2WfDDe/oSrQAVO<#*qX4eK<jo>#+_qlk!/Pe_e0^%@+s-QlBaLhQMMP&mP6r&qA\'!37aDl)srfH@]'.OVMD0H;h"m28oC-p)gu7sF/m"&^YBLje__2_C"NNWqSTg@CoY6)kW!N>olo-b%F6X9/J>i@Arl0_/?'b=Ss,)\>l>NW%->gNI+$*D$do([jrL0[TV>`sGV9bM))g./mj\>]5mqq/[]DAR?qCM:u-:L\8bUiEGg0WNA%WkY7bE`?%OlL,]WSC5\UrJcA1CYmQJ337Tur>k*adEXW.F^nI4:[(i.@iEmrl>On<j6TDL%eYVE<<%9<pe\5("Dis6@'*``^+hFa%\!KhZ%4mQ$Cl3.=/Y0N5lXT=@1*NRT)d")7bGP%=<`6&hiYr_I[9%_X1Ri#,^<p+b^T$u42Fd@WpC/[m[OXOL?#6gGpsAkmfS<Dq%6*A<kVW%]$KX<0le>8^Q;g]U\K*,L15($QrG/ZDEN9/;7^4E9#=Gh#Z:f$nqWVFh1BAOB\kfXn@Y4tHibk@TbDd]FJVW&O>22S&7%MJoTV\b<BZ^@@=t(JMe,7_U='WVFh*8aMD8ptAgq@bhdVBO(BX?LbF#kL=^pf.[NbDYI0+"S"hK6#!XNS`1SuUT'DtMQ\"dMD*$n%fbE>2C-g^]lols5nnh%i%7QO7m690l8)"d9kc?%nIOW"Y#/^i('jn7$j:pKb%*\\Y].Y6P?.s_e>9;FFnIS.#m(Ukr8X876Ht,G&%j214'K/<3/]5Q?4a*D+f%A0<&EbY9-+]N[)LTr"4D:s?^I"JPorEgY%a8-=nIoh,G(<;Mt[?'SWW1-YDTtX!?O-/TZ4SB>/OsOX;%&77YR^0^9],Tiba+/oi&rD2(g3kbl[9\h2WYd,>F.,Tl`[e4I%*e/#Qaq&"[e*n@b[P.n>e2(SI6[shgM2]i&@f*9FS`P4^]Oad]%A!e+:'cVcpYVFoIBgheXPjFF;TakBkF''0<k./N?`o4uVO;#37+RL-`"]?8G%$369PHsK;>=-C*/-%hV&K35=#BGj6N9?&)1%=_#%_o?M'%E:)Q?2+P%a(//NUa4KjB0\oE'-CE*3%@;6Sf@\Kq8Qj3'rblm8"ri#PWEbK/tEIh@sGZ'*[3G@gJcMo)\h3:&a3)<Ak^]$%8:dWX8.)n08P-LNb"h5(:I38O"k>Ci6lrD.[9\Ze"d.BtqhI?O!61p!Q;6WJetC1+V;i78%NC\S)"mIT:g!SHKZ=%8*>hA_pDcWT%=@nm=L>D+h#u[mHX<0LoWfG`:?sGi7__7V[*g>o^\9IgW?9YDL55$Z0/7CA6',p[eb1o_+Kl,<-1JGThjIE>F6e";AltaSIEGDPl%-O%r[GPEunpT\>'N=CG]3F;^?,B\CNGU<h\.qP+S%7>7\1g,Zo"bPhElteGsa0L1mC6U,Ej(4KH3Le6Od2-)\Ron*a(9p8togrsN%76t_3kR"LtjEhc.A'LZbdUD0P!+RV4:ECR`:>(0&2io#[:/H&eL7D+1n\R=6PVq%1W0@:8,Qmo\CU[9:X3*MM5HP8Maj:ub;UpYJ%)8nhQ/g>+IJ35]<3]EJeeEJq$3(:]X"in\u'JTc5+s1=Y?a2=UN<Om,#%T\Xo!SXtZog:PZ,.h,*)U?G)p6m=Re+DaF=9VX=Zq\M%kQqo%"tWaFK-@>fDp4J$hM0Y5ZsE:FojqNDU1,.#J(Re'Qu9e^%7I/0*<NnoWG4R3!nJZ^K^]t'CQk(.efr#-)Eo476_l'n<6202%YaMLB9(Csr8S[H-nq)VRBWUKqL,j:-Y&f6!Ms<uDhMni:>XTDmYR89gWg&Z\2CuS(:Br!XTjts4d/rEkU5/^'Um9lf"&\GIg+n>]%O,^<-4r`@4I*.RO3K/[fP`P.1ab`QX*%c&+_ZZcrJWbmIjkb.Deo:9i4rfb\Wnt=1.RQ=7Gap9sJ`3R(g$SFQ=B^F[W"k`Qco^f'%C2cAWHcP?3R\Z_$JDlTRk<^]14;RWZ_Q]2s>))%&%r\-p7!^_FPeGSNObXYo,pBS6ISNdliA"OulQ#1&eKpB=+r*o-5820/N:rcL%E3G9K;RO[:)"l2N3qgl:0VbK:3Lt@_>XVUT<Z.XBFoAtPL4RG/SVP8<;":JFqY@kKmX&]^eE-*7s#Ea/Gioq'<-qnULY!T"jVDP;%%8VjVjPuUkqtuTImQURiru'^UOT\#*KjtPVcClmn=)@)*6-p!)%[`7tJVX'\fn(p>]<%##Ze7$o7X`k;IKn0[pRuE2+?G\(i$e^f%Yq?^KeB:4KN0QgDH-AQ+Etuoo]"(!2FW>Id=u'PS/<1q<kiSU>i.=+RGQ`H_4K;G(9\#q;-HL85B5N:[.dr1]b7b8=(m<3hCeV&[%:Gr?:J09@cmq^?S_tQ<r/4?.]j]&=YLQjV8iLjP1.:\/r([)W].;ETAA%l<DXj5c<M1LS'k!Ih1%d^t54kBgN9`URP"A7+?-Bo+!%e$5$1*E6e6jWJH(6$GACL-d6lO%GG-@lD38GVG#IdK'=>m/3+8]E2$WIpUc?F^5SA4"ji?_7]*6LiZjG6sNfK:"Rp(lFIV]>h:^<%`\P-;Y/#X5>lgbGFTkYq>h9Du><+P'Da"6%l\]EtS*LD,DQYLP$eH+qnuaJDn%(,Z\ulF0Y,d?A\e<Y#=*`?a\e=V;X45P/Y!BjX%lUku7?2=Ggl\\_(GLmR+hcs5,S*S5:h-JVA;V)ZPlauK*O`B?kb4tM0X!$8AI5ltJko:8(m8?)N3j/k_;cc*LT>4u!NZq"V`rL5&%W-[Ff^0q>F#"gq_g8)ruZ>=68$EK#Sh%?-91*Wr>!^ISC.3gTWM"K[#`RYjrJg"sak>(<(=>kqAi9QD3qF32c%cgLW*(#0EN;%^[%YlR8;e2FD^U[1NE13FAP&L=1`G<ej3Q:i@;7=i]D[#7+Liuu*:gEBqAAOuY0P8E+XW^ERbNZ<qCMFbNT6&8f1kWH2BnV;?'oaV%u%K>:AQL`&oO>*G#.DT_h3WU*/E9NgYS)!4EAkH_7^ok;dU&PKYo%4UL^62`pC&Fkn4E:a@Sl62djO0T>a<k*?KC+O8%MH!'l*=+HZ%[)mX'B%Aul,n/+S5>PSGC[hB_E9(oM@i.-b83pCubV5bdI9kAhM^YnoVt7'IGK>XP<N[f3lfX\A,pJu5>P1;p3O>f^?e]Ve].[YR%#@to%OmX*.VK9s@/G9PY*\!eQF+4h_Zd0^Bn+.LD!C=;i1\-?%`dQH\&-g-W0JK/2]@JNP-CjS07GSJ;,9p]W5?5.'fO>Q[nJ%c@%>*'lE_DrlJZsaP93")aa>&Zic!T<qn+@qU9;[%"@W$60#9(j_=>YFoqN+tZlOlqa$JsRBS,'U<CQqIG-@ZZ`[G+lQVUPME9!u9BR%B4a^e?*$t1,6C-M0MM=FAoJ#X@??8sg!jWQp)b%keZN/Bie3"7fL",o2#8)#h-a]s@2&`nWb!E^o3@*!E_Z'j8mL+JqC*>2W6@%&%2-CUcfSM("V`+(D3tV:VN(BlP@QsH.6]P[#7@(dnlV^O=>tkE."mI6P"@l>\+\7<-P-oq61L$YhQmKS\Of,]BDdq$qJKrcf@8_`T%8<3Ne8(C^2X7isK64'E`!i:YATZC7=)6:*VDbN7ii8KK_WnTnf3bU>P(/M*alS?p']6e)^4o\/AjD-u11\2FVH-Q7H$l$,(bfV<_%S<5HiECTq^W0+j!A`PMgN-lb(9e@SS@L[5<B&jJ=[(@n=0ED@jc[%W&5;lGGbKBRHRe.1(SedoLbfV%#16Z%'quLIFfo5i[7!m.:%r.o<^^/1nY+B?=Q@cf=Sg%c"[L;(^HdK`Z:E0`]F=6!oW"$8>5/Z(^I>,jC<q),u3nm"/uYW&O+Q0:p?d8Xc0kagE'&]*,;]FENi%B[EV"-*d,oN1&U@I1MaJ+0kW=5M;!DN0#9SS$C:ZF@9d.'.M5X^Dt>?e5(j%4l4ac#SXT-Cjj=VF*4qj6C+bB0sUD&*&OJ8f&o5P%Si0e;@:)]!bLT1Lim=cc=RgC0b#;SMZh5Pt7gNG$b9!9elc1WiBYCO/m2%oeBC!TU<jgWW*\glK@:niG/dD9[ock0VRKI0f7kCAQ%BG=Z8@[/b,McP3fFo.<-omJ#RUmMCebo-Bh\o1dLBZ$]'bH-+;KMH1GUV,B7Zh6Ij[f4.fecuhN1\FUa<nlA&I8h>&S6p)\jG^*n%87\.,B-1d?D#JVDP.[Tp5&.l=CjgDIMe06fJ]Sle>Fui^qD.a,n&s.'O;RgF,unUAo3EY\L-B>d<$dEqO':/rD>8?.I;=R$ZXt7g%-PqchFD]16hnG2KTAWl'h9u%b=nTk)*2PlVRAKqV]J![W-g3Ru24/$$c&I<FR8McB/_k18l;7%!O]YOea9t1u`RK*02;3+g$p#N"%@N!XD9FZDfXFGhA@hY!-(>N$hgQ%5EU-3/AM3ooXXKa=ZK7%%R"<6/_H*0c&jcjj&OO7h6*)1e3#3Ri:JXL_gUq#qb&:@j(hL,R7%RKMj?SWDmAM,;Tm'R+^58]?eFmCAW/)mbSm"HuRsb@-^Z-YpU!'RPVkE&RBmYT2pU-WPJ&_usckc<@_#n1lmI*PL`Z'?_t"#;2q?%XFa"8!=hC+p0?`d::Mq+8>mn7mEDl+eI<uq[#'j6^!p05Mb5-L!amQ4l@5b?4g8,?:FT;T@6C@%I4;"G6c8]OgaWirXH!_@hWMh=%&<V"kXJ05pa8#KX71J@Uea@-oQ+C&F+sAlC*Q]LS4_%6AaL?1Mhk[.,(5pH?9o0:*f-V@GLTj)Sg,:+K)RMY0bQ;gML#50FR*;7l%Pqi<8K2-0W^^V>C_6QOKcVoO$WB-&+Qf4%UjPhH96.=?+CYJO]e//1\7!tCli/l][)MY=Kg`d1Q`iMWOp+UF+&a[CLl4RuD5saOh%\L5o7>m"1@)&SnUlKTB-d096*VTqpF$gH.T(*XbNnMqsr_l4Mnj?,GUEm`,4E-cZ*[@iqoVP>Q;XL^1OOBoqQRd-8B9NlbfeY8s1%C,!gPIVH(McDh1ioH7q7%&l[X1\?Cb4DLka;FB8tRDOgPE5hU12K1gjM)-05D"mi9hJ'c;A6;b2a(#TqhqG<n?r>+%.]7H]_YEKh%8':]1$[0;iD/(g/G\M4%"LOmgB?+C$Lq'85YK\L5&)C$9:F]48/(h:0P"@R["(?F#,h[m]J1T/;Sh__Ei?n[t\>^+^=DFZLE>O4E%24)@*O"?;('WIn*9sNr-N+jE21R5#^$i)cnAmXaN9hU'V5b%C8I@Ea?AYo[aTO$hCRQ"-Ep+4N9KE_M[RBRb;0\X)%A(ZT*#\rli%+j$dXoV'"oi392UY7m(Y%*XtkH0J;4k&d'pc6QrriaVe<\_i$VJ.Up4Unu#?Sl07mEem\p[*s;oX_`:D<]55`\U1bXTSnJZTR:_'%Z#0Q.!BapiP!(?IV?\+ELr8aogfoJP'%SHj\5l&b8s_2n3%L$0^u[jH0d;\UmuMq_A$i6EH;:DM%Mm$Z##1p*U',Mf;\:lA;":8Q%.QlW+1nlsYmr6!k7'.ZZprYsEmK?Gld8m6^WJ`XC=?O?cAAIUS:;#a?+qUMq,XHWT]]P]*HU3`U)3L(NM@l-pdIl=*)%@O-;?J>S%C%8d7+&OTkKO!CXNQjg(5fS04\Q7?L;1^nDOlp9<UmL)$1geUs*9ZGLC=4`'Q"&B^e_:,rj#eY_&9Vp_C*pSg^Gj5_=^q6D_g.P/%jWLrpdM_as,9foT][]Y,_orJA]C(#na8ZP_*fDTh)-]%2\7!'QOJs,DXAQ2QduaGl4>;/_)$JD#hCCf%iCnLgR"^Mc3,HD?+uB/c%U5q#f_7i7sH8ko%5r#F5/I/"C$@g)pUE[[G=C`&7*:5ik1P!DKFD+.7W*"%])TJ<#k1j)gX&J4'8T62L4uTZpE-7$D+c(a!BMt"3%'%O)K'.9)[YnoD*"/OI7Pk2,M\pW;Taf,Q;_b'C*8`='@WneMt+FDGZfMTl(2ZV;2l:h'HW(B[;6c5N>L8l>uJPAS;dnsS+*ohnn%`H6b:YU8<k23FO^@*Xp564`diCD*2e#d(;r#e.bCZY@X;\T&CE,:EAS<0ArDXDUIqH$$^#Y;r+UT?Bs\o>$.t&>jJ^4k-h`5oe#N%717)0+LP2p1W.ge;r$t)L@;'[%[n`s6)nEJZ'O'*9LYaWC?TZ(P5TSEqaF\"n%,Dr^^M94g9/s3n8!kdEPo=qq_=th_e!tS2!dQ7%bL*=a;R'L_-04Rd->D+djEMa;`7s1(l%,bYBnF5o`.hiAK#9$krTDGm7koGcq'5!L!>D!c/MAk>YhasKXT1GfrXr/935?:UP0>JK%#ZAMmSh1A2<`!jJ+sf1QLPG&bM/^&TjQ7MJJ]tM:()^>NEi0ak/Y!e(&Clm.S0::\DH<N@&RkS"Zs8ZJLs?YN[u:\ARlGsB#6Q4r%BgJPOJQqKGS7FncG3US6Ca:-4:0>#;6b&+_Sl:SP$;R_?`"3;%^nc6:-/^>XK8U58MF.lT_%=k19@-kLc)#?_4.0H-*N'+_6]sl^%1(9BZLfLP7(kYfNKEj,j"boSCIeA*,F9R7-"8rI>;gcS6)V/D.Yt?o6pph5.rKm\A4%9[kdik0UB!eE<krNL?:OP3]?T_fF@K^)E%G`.m$SXfM5ILLW0Gl6@OZg:ll/nWI>a<*on"ta>#LREO!cscuoCe]Nt#gR<@UX'Kid!@,Z[([Y;B_U-'nMVmD[d'm&6g!Pl/-g+?%c;l]Iesb%?Ze,tAL3)%S!(ou_V\/ImXHsQHeeb];gm>6X'@-3j(G`Po>0Mks?c;FJQ<>7:!H9;eG=-4Y+gPFt!>@+TCJH(`C9#^,%78Lm-os(i=%=#7M-5*Ef,V"i$G/PU$$gTPL`<q:IN\_)t#'>S;.7cTJh@!8LHhjmR`[3TU_$)GZ,l=,D>tGEdkD"\3?:aV%=d"35%"@CV4AK*`dN(IF?&_-=3=`kiQNSK'B"HaDB@[G#8d[es@1bG[r/'5qORWAS.Pra7HWM],GX&PT6%bg0O*+..@JLtiH4!LR$!0\Wo%L(WCQWN:qn,#^L5lRb[X!+Q]XL_N"B%<6ki3^nY**dL@U!Pl"@bTc5pW45^9@];p6%Tu&TcG?Tu1O]`P%p:g%Q-[gY?r;o0T$#9G%N[B@AJeKlV]/o;h=Lgk%ZWsLe<lUFSBkZ?0^_+\P&jSkL@+mG?oVQPo,ud2>Ro).<N[W3oZ7',YT/LG"RGSZg+LPI^*HIDg_Eff'%:mQZd.nQh5%isEKZk:DpefF%t#V^)&Z^\:2:dY#/05I9^cE(m.buIRm8Rd%6Ud<Ue'[39:V^g%3AULq8oS#i"O*5<N'^m_"dZ_nM%f[X_o1"gq6Wig_Ci6i@BWf#>bE!T/Gom@5/l9`E'Pt"kq!F8NEQ4KIoWg9Z0".X42F_)(LogFg[+k-,O]@8[PRX+,/ZMpZ/o1;_*%-ZM/[Y@6)OCLfR1\Oe9Z99pimPeEl$(R!-Q@J=jPgEgVJ/`o2:_nLZ!;kkV7]r/c[\B=6i4GrC0cQ=V)96rX!\&ink#?WM5dfE?F%]g-Vp4e3LoD2Xj8C5^s!WF=J^ip$Nkh5&NM)43g<c.)hkZ?LGAi.S1UF`?(M%_-bmjp<R`=5mL+?o<:4#8M<?:=V-+hU016L#a6p%]8L8g\/olb#M6,P:S."l_J.3@_-LHJGXi!0DnDcCM]@qMNXgTnS>2j0GBB@63'%&Lm9ht9Q-lVfdD>^bF)3it]W\D`7gB<oJ_nd?%=egYpdD=(&8(en'_n;asO`k@*k]"aHn*&CPIa$2*s7`r`3p_@bf:[&'g4>^Qmc^<ZF7>2"7XQcDd/e9Rh9j%=i5h@INnsK:]E(C4%UZ837kkKbJdFhkca4m\[\1juC%[isP0PLW1FCm%kULR$_*$%;M[o4<<MA)[,m@Qkd4$$\?*$&D5hJlmXE0!#8dtU&*?ZG+/$S+tZ%H-N:GjPs"8UgLX)&CfL#^ccS9P<=X)mcD/HZ[a?@c]5!D"n'c;B?N)MDnl1brK=G$4V]C&Aq>:;$f*XMJbr:FDOX`Oq8sdAJEsY$%j`hK_EjrlBgS9TlY:a^RL($RX`f&&YNH/1W*qMO6(T>=?%InH8-"V(CPZ6Ae_gZqL[`=oS,nW=WO+r^;r%0,=n(')5MPP$15ojud%Vpp[[j$M"n'pH-jY3jZ>U,-\J>Kf]"?/3.0fiYZAp4i@PrK=Ir4\Ek32+lXFn#Kk$i'l=Z>33*%-p;;tcEfmjE'A5JUKfLX!r#\J%Kj0+TN0o']X"8gKC6oQ6i#ZC3WBZU/>2>W)MZiI]PQ^D7p(c7Bmsd!0?Vg40]Kp8aDG[bm*hnuXlp;>Vf!1^NL@(-dk*:-^__*4T%15l%^]K'c[(GKJ`2EG+HmVtHj\d6_KMWqIn+"?[%R'S0tM:4^AfjZ&%^Mt<p7^m47D;$iL0)uK/Bddjbg]PN)W5!>m=4ZHHfKQg6%X.F03T[;T0b5I,QDlLKkoFJEgEplb-^T0@arU"/5C>ec3iTRj!"o9/S0mE/i\RRoT^oM,K,c^"P>>RH/VfTO*4\!G3W5!W9/kJ?o%qYND;er$-2,@Ful#O^>^7!RYk^Q&*E&D`%.rB7!]hh:hF-$@o.ZM3,%hhU&8eoAl0kj"fTl>JM,$+a>q\f'Cr_s%c'1beqt+^E[L%jKV#TN`1XeekE8I4dXXB'*_>p<V)"4aT5:T&a)E&d2=.AR]4*9<1j:WGuLTml3A%`c9Cr:m4?h/5NPXF,''[I.4^`P`oe's>N@Nl%qnSBi28"$+`t]=KRdMTdN/32D&PtuVPTGGe5)]Qr`RMdleD6l$T2LdVkDBau7J>SBLAA[B2&d(XVhU*\"L.<2EP/7D*LJ3"*7jGA%L$3j7cSEd9D<V"FiuD1YZ4NsUgp.KGGiRRPd5^k(M/g8E:5j7$.5AG9`>p]ucXG6+At71J1?7/YdM_41FmQFG!0/W=@>Hkf]p'As%^7`1"^17u\/QFF/&88-.ZOgfKZ=P0fnQ?,N7GYsAhm*gWWHODX5c=?.$R)OKm7=8o=U6RH@EUuZ4^57u&30*I0<u.VpMJ)?5^2BC%$Xnk;6>TQD64iZi#QbfF#[UcKAKcTR/ITD6o-+PCm+elX3/S`b/-HJr?Xt=1V(E&U,]?fk+QXdTET6?$72B@Q,R\&5b!H*m4puAq%_X4Z@^nT"=S;/(j?!2ss2_J?G+jNFb^%s:uWFs1u('98Fqj)pqoksAdL#CqNM_#"9/IOjTb<d'*ZOhle/4;^6Q]o`^cj&..&6Kt!%/ITC1!%tPg=KT`3KtsDSY[nt;fIjH@I3tI8$R(k[qCDcNQ[FpL^`i"&ZOeh@MU+Us*R&jG!r&^<T7t'S5(+1Jb,&HU+Zf(Ho2u>I%_Q[Sp%.RI+0-sa,+DK"c!,36P#eVg-=U=;l/IR,U`euANlb6pRKXJ^1+b6(!=U6QTC!/gCWEU.T&>+[G;A'p[l!"q?PkACUKfHDD%X5G!G_fj)bK\ecaI"c#+[F%J[S&\)qlpC7W;N4EA1nouMYG.V+gNF>)kAf8#F=u>X=c7KLnG4JY9uWY(OCYPo!TXJ?'?ZsnHVN&P%.G+\SHVN&P.6J+qm6GF3JfWHuD-hh;"/HV?>dq.jG:q2g6^O]iQX4FMjh]]'mPS"2#>jAc;tFTtm=Ta[4^or2_Na1sqE/R=mPQko%VsqEInJTR6!S4d4e9i;[B@X[ioQ_eCI%DWq4qC;L]r%,ZpV?%0=%:q[W_O)>S9mu\SWOH/D+C&^24YRRic9>6H^2:AlLFp8D6KqM%4K+\gKJ]$Ne`SP_F*T+l>b4ZI/e:V7?;kojpqF!$KOV'nf@6<.+G"l6(Qs$2POj#!7IE#jNsDf*]+Cm\_fjMBVWRCK41NmA4W]Ws%Up[#=1D/g?/1L18AF,Y)os!bRn9FFj]f8U!Ejq585l,YeJB5]$!l!K_,iEl`-ODbd/l!%`MVC](,25\@M)^i7PCgua'h"DOicT?g%[S"r8=nQr'^GngCRQt."f1bK$bf3mO&+tfE8O-ZF8MCb>o5%=sH+&=uY5<eWM+tTt6GdG\8N&QqDLg4($VK/F!iOj3+gGa*9h782%XpKr]\KrEX[C[_1S;\d?Q?K`jK\,X\OBC5mEXb[RH_ar;,ZrdV1(m6l>=QJFGKWN.m;<dJVmeN.Z"\F,82r'C83$!cflI[%&t='r%Pf2#<RVd#th')1F,f/!uRZVRC>r*+_G1V\+e*`Ze=F/^W&mi1S7`%`27Ug(Ub=HmFDAe;-h(@6_[/31eG5"hg:(f,FD@$WQh(9eT%[(@Y1SDMhM`2;?J+gFW3$giDrFamCX_X;0m/B3N87rn`dZX2W<\M,[Nf=ZFOKfM`1oE6Yg7>S6'057d$??0I\Z:2<Age09D9,a"O%QX!YJXCX44D@jATPAjCXC01F`$VLc^W'(X!*I',AEa`8eqf.@g^UNXL]Hineb1:/7gE_[s7Gf@<[Rjr/B>#^7@U>5L,PJeEmDQZu%M<";D06:Ps1*1aoMslFTH-)_q#VW_B08]/uJgoHqRb/t?^n%]r\M,[ngQM,I0a9#68LD!'D3LKWQRnS0pQ>pUP*MA5lt%ecPAJ+R%[n0?=9=?;dD/=9)@[lF=<l9j+Z7mrbUYJYZc)QV;P%3$<qabmtPI1/['SR4AI3L=Eok4,lj?+_'OjpAC1=;YU>*A39e<9I%Un$L.%-06E..B+W(:.[$/InIjTc;RX,Mu5$'-+S1dXtorn81-EA6TRfJ)feNQh2k:XmtPqIF#TnYFLr]_jOt'R^<#btFHSF'^<6'SnKk^Y%i_.]I`1>s_Lc\1p&7:SN+hf4M6JP/XK_YBfT+G@m.os%"oW]Sf3FbKQd`%(ZES--`:!"tfj<SB>a@WsFdA(5_p-k=QUAl6gEKZ3C%;#HJJ4E:Ba!d_A[TlMn7n:^E(TSSg),U#o#pIJ=FYZR\oL'Y<Xc@H_@Z?9R5k%4`:([=F%.1TX(c!26+H,HK<JAAY86PbG^)?:39%*M,S?>7hr':FWcIK+FAtEX@Ab=[_&E<S9\FP]f`2%YLR4/srLfZ4LI8fnNGoZ:02c.9<9Vc*f"h.8h1_<^j.U\H7'K'Q,/BXXgMb%_HkD'+eW%X6G8r*%#N.CTa[B3F[AR3.^aTMcc*#_\?-"cl<.f>8#If^=0BCT#u(&'!pYV9Id([3^]:]ec=DRO#GQ%ef8uKk;ZS\G%Ouum_KjT]biOX07gt%1M"8OeIG.DLHLDip_8`b@3%<jU>h2;UK(*Hd@j$"sd"r'/ipjd\K\B#("imn?Bnen1PfuaSgO_bWIL:d>=%$"Ic5?%AhPKbntBN+:q1.PoNX%,O@9Wl1*sN8+ZaX.&T.2q%lH_$[!CTS,Cn.Wjst9=3%s_Ka8Lir3,CeTVL.[&u)q!0\Je-QUpb%4d&>Kgl?DF/Dj;..sfT)lc5iWSENJlk*%*OUpeo%>nDlD!_(dl5jiXN>3'S1^n(!m,)<su(7mYP7:+^Y3R<G(*SPlMq*+6%3om@H%YTgd"c$dGl:3oafV)I?q"l6+^/^qM%h?8J1O@^<-1MQ7hl&W@LPdIAX`Jc1+RSW"aNu<g!T3Z88?s$&'6L1D.(-_nLpelK2Y>t7Q%O1.R"1nBLWST6`^=+!,]WS5N0+%MK-.T:^T9l2[$?cLVR4`6-1@kO`I1W>+MQe:e#nR4I+d7R@-EGgTPR#5h3M:lF;pr<)C[F\.C%JZuV)NF.Q]<1S"HYP>mtY=`LY^&h);W]V#'WCEDk'Hb>dlMddX5T23oVG$H1M_uQFi[\:eN:i&=I&Zp4S)PrE+eDb_(uAQ<e5UhR%\JBYbV>.hf/@p<[^3U(@O&p^eUO=RT?m0EF&!+_62T8`.UWm,&%l:mKAr<d^EoEKhI-$S%4'qHN$)2*bWVD?k=EqeTg2's_9C\9=%A%iX!.D33m/]CfF<)cfdJZ_),EDq5eA&-/95)b(ler?[(^foLXY4st[@b_Y>#.7EA.6_"`fImp\I)L3%plm/M/&!a+L2@cO`L#Z*%^J45u9Tm%;^37T2'q=4#"oqfX9_!\Q5aRh6pmPG'^F?l@2rm$=2s/G&jf/#oT1^bM._bocip`f8C6[Jd]ZNU;6eo,Hnuu^#'U*%,%4>d&jlDF,e29e9ahH2GR=kfhEC6rbK=*aJ'5d4=8i.aGeY4@>HMD;J4jagM0j<Cm/*nI.YN*bV*/g$^mgNj=69@51ejc)JSFnJXX%N<aKI>H]3%/)#3I4H,(CRWb^D<oiC:YO\,?X]Ked6M;l>O2_Q3YE<#!DCVh)M.1gsf<>A;BUd.[g!%R7nj%gK`(lgPDmURhT(XXp%m+npa.M&oOVp*hnned4n:jHR#-dfY$j^D&c?"YXj<[2Ef.Z\4pA8Y2.2b&GQM,WM99GC>o;rs"$`#I5bQ%uF&9A*;d2Y`0gjAfMe%Hd/V(XD2mW]OCupWBArK<%_/,R*hh1g84A'gr&JY?BR_CVXfnS5AVe[!Ao4HWk:(r-ZA=M9=@e@<Y927V=L?7/o7s;e=`hNWUbXG%e`Ud4AJa3&?BV\4Krq9&m*=0DjastdeiV+e\tBIeFRQl=DoS7ZcM;P%N/on\7%NE$;*RHUYP2jr&(0!ieAtLAK+D7U2J+6Tp/q\>%L2$q'a2Y_<=E;&iK'7'lgmtku6HS/i8]fmEV.9SCM)m('JAd)LQqg6X@Re=kjV.\4L*n2JOErD8Yqe(NR*[Ko"]`!l7j2GS+=TGg%P>O(8iI+XgOo\+^kEM-\=BC(u;DJ67h+U;[i/gOPi35epY[O7<:L9-cf2HbPi;97r+lm*T0GY?V1.XjA=(tY(@tJ^/a__^,\.rtH%$E(2"Ocb49TfamKa8kQ4eZl<_6'GTn$Ut=C]dWW90J[I+1,<fnfG?%_"#2F*MiiRXZ,2Wc5mCA/oP4tmnm?M/m*b*8(,"r01P]Jr%WCJG\6U9dQ_6iT`PE^l0"&A:R*KaV2%\*CT)^\Y]!m+`GMVJ;V9'4PVM"A?SW9eG5&=;.+Z:L*D**t46/]T!J@EKA2.oTuC4H:kC%3%n1o8mOslECSGNeX@M)nVB?*%-"q-+t1Ve)8q@GV0HVHD29s'4)?[.D]!U2J>=_1A.Y*ZV2[cGmR'i`&insfMCS4BW;7sR00l*A%42f81C/"cbOc(PX3lR@MS@<?G,t9/43#f1BB`K$T&\%+!Ml7'D)l=&''$F8"4(SsNAgA><+AU.jc,h(\""W*@eN67oTtL(Q0sZr7%nnhqL#KH8\A.T!_UK3REg`_kII)CW2&1*lIW(G&Q%RaN315H#Gqo0Jk)3$dJdIW5_!6Sq001'1d=',I#'WdMPY9nl]&@)$IK/dI0%DlffkL]_'^?rDeBA9*Jf9M*0*Ot9-n)$\YqdDV5:4Hhd,<@(5T1C7O`EduMij83:^.S_9%#K?b-P=fVMk<Z?X]k<g4nF3[57851e%3&'H[f,N[NTFh)NM7>o"M>2f["\Id:iK3."TP2g[P=&S9d?knu#Q6o0?n"/sqt3pS)!)=T,[Ao7Uf-\(P\,WS!VWn-Z;QJ\d7L,J%i^A[0-I9ci7$L$n@=!N\LenDW="J8g<Z._FQT@"#3QV\]#EUaBk%n>;:@@pa']Nq]Ub&uR8koF+L%rR2q_J't=C&rhV%&\VggQC!%*.HGcbN$qp&:[g9k<CYXJ>mKr/HTq.Jmh*bWeip4&Vt@]&;VuQ&VrNmAc`M^TLp>%i63srPX6@WR"NO(cGY687`lk!88g]OeRB*I%+JB0UY,!**.7b>pRGB;m4;AQn'>b<]%-$o3UG7f;K/bS\B4DJXU?#@t+MK"23_sQHLi4+J`!&/S.R_?ekPH$I33ep+k<eWY4S9qX%)k:8693m?9-U**JicR2D6(CKMZ@tT7@J;PCE([6'R:QfdP!Dr487<(e+Cu*SJ+5"!`un,N3AHdb>Tfl^'`WIu[+OjCE#AV?%,rd,%jkT*SI9',ZEO9-uQ=^'1<m3P=i"-3hX!9d\*>))u@FLE_R!Q&'lCjHJoONfK<?4KtA:`-0S??\f.H@/j-Y?`N>u-5/=*DL"=ABk[%E])huJ^frZ4RHX=1#+c3?+`CEAVo&\lH1Fp<E-ge]!A:!1o]`^3b5h-%\'WfL=)5X9%$Hf2VG'#kJ\&Ye\&Gt;FtpniLgf<RW!=Y%J[LZe>tXOL0K0c'>)(Lc-$Jp02;Qp'oCL+26T:=U>EfIegt3'62jRsk^/j&l@Ti(1F^p7CA#+hu/#,^rA\,,Wa71pWLRir(VREL$%$N_hj"*/`&&-eAY=`=D*=O9Fr2I\E#FXsY'3i@6bGm/a&d,l7M@)>K+SeX-&^dR$Y)l1>$Lj4*$Vo'-]GKl^F2@N+frpIlYLcHR\%?:l^R5[?aR(#0@s'm,hk$3H?/ZI'!\;<r>P$76f><V)<ZJr(b_`B"cupRGc7P?&5s/NRoP.P,=-%`O3/B=;m@3RK6^WO.86-UZEQ%+L*%$U$PWc_%"fH@N;8`Jja?-U=kihoJ;l`^pA[[`i<9Q$nhW1(?FF/Edi<(>_Cb8Vp6HJlFJKX1(+/G3:UGnAG=7m;J&3=Ja-76%"W];-"ZMD$Jl5F0L8#>5Y>_ko,o;e<WUE;s_.4?=9\Ma\?MAPodO_[^HR\g.7P=J?pV)UVN+J:KR5o<(%9"H:UkfNHO2iq#(OT?A%k;T#qX3t-+BuGQoOAK)u!D'rld.ko5\WWNC-OG\jY[h/WdVAkl&r,`K_3,401u]Io":.XU6?)LO"(Bc/nVFLYf^CnI`.>u1BHuP,%`@"s"nq[CK8^5"!,nULE&I4J^1>:t]`5$K(XR_/\@C""2`.<T;'iuT![]l.78g@*1@-0'7%Bq+LdG=(%Q2+0h`7ZdV$<8!aAf?qU%L]$)s.H\_fM`BIoGSrYf4ZUH3e.C&nit)IHWcFYo6QAYCegoCU[NT\[is(W8>RFAPC"6\KB[%l`3%G_$*$UBsjkAV6,L.WESoO:V%Z`%PBQ,4ckYGo[c7SKhTIOTQ\=j<o#R*$XKXD>V64Q8VN-hHC2+7@"5--DOSb_F'I`^Z1_S7Ri$B^pnjWA]%?+&9ScLdui0%rfPf%_EP0.T8IFoou92#m*\pd'UQ8^&N07u[Z(0=RB[9u.BBNeql(u4i3N#SOY$^beAlj$OBpEeEVikjZ;qpAG'sF=>#%jZB'Lb63mp-Y%R//8$V.6D%5e9*kVLHZsj=O:PLukn[e6g9PobY&1I?05a&#=B8[?C9\/SddK-_d"*XCuWW.t3F3I@IbX/>g!O<Eg!Pg`OW0qomj9%mU%dF`8!k8Ssh_QF!!qLnmjWP4_3](.[K[1k!$dT0[j@QI:1GnWG1dA>fGpNr<FS#RJXL^]4l*;b^J:Eh3C0%bl)W9U.2E^(U=Hu%O,:gd,c[%Y(-a`BBQ2BNIV`N$1_D<g-7:XV,IT]P2/TFp`K)%%Vl!Bm$:M8d5E!Jk107%$/;rEL4I4*MH`4pM1m?fAB(@V!9`?m)%68SF_A[knHB(GQiJ$goIj@@HHlR'V6WCLH(#bFs0m%dB6!2dm<T_kV.c\tZP/H2Fqc*I+i"b5sciqJ73r!P<=T.),qNmlu`\g,X-%r9Qo7(`&#OfqY^67b11ZG]\kA[$Rl<95#.H;86!;I^188CtoGJ?pWC?1&/;Q6<>6Ir!QU2^W4:N7mXfVGoHTGc<*#XT9X05)>pEm%GBuq]5#!hR)>q^OKl`U/jG=fQQ[SU^m!YBT-tTm^4_D,cE[>.kiZDWAmlr5h$eY?e/<X-^'*lO&2p'"KS^;b,dY%_]V)jW14QS'e%UcGE39:ti:OGO'2_G<;9`.@$O!G.FN""@hJJP4c#8gWmK?AQL.b.6(h^.T-7as51==ZCu!Ks9!\)O`MMjn"*l?:^:4HFBW.7@?9t%7"Q=48gM^E[H&lq`/1k$;V:5*V!+?"9Hu8b,V,"eF@''BL`=$YSBV*:Y]oRoWqRm'358Us`@Et$/lBl?hK64Mas4W/4Nb`sVUG\i%EP@G_Idr6#6*p-,M`O0^U\[mt's@)6Gf89_0n`higT?H**.W\j(6:F/hD]:6iWPK(4A-j?+$"&RJT2p?UCjD/cqe).Z_46/Ie&<d%rD[Qj7pLADWY6__DapYGU_,i+3+d/E,J!;k#urum0T!_.SBjPPUfV40X6(jo8Xp(TAMYh+%8ebJ%3pc^&cE?*k&NKhgTY[SZNeqs%kYDpc\ml&$M[V0TOieqE&IT/ZV?Mamp*Z@cC1cO.\\s'$BG\1sJb0r+@YHu3&`F@HOE-2aTVNVO\\pp6'N%lQ--hDBW.#NU;6uV!%1X(*\AIb;[+k#+UoA-3AUF;Tk7hRJY>&<1<EFMuuS%+DCXZ>(QG=:*%2iN*qM+D_lfu1A*PtbLQF&Lm4qNaZ,Um@kkj]m=2VDIQo%gt"Qt`#gTKJ'jRba*2a!O6cuI$m$n%HXVeUEf"_%nqJOK,aY*SPY(d]BjY8UN_PPi/gbR'9P#*(G`#ddH6X%-U)R/]OZ5$hc74s$%MRZ]dSl_+Ig`_kRI)F#OcB>[p_RRO8aQBJ@--eP"lRSsQ!D#o:#e>KlkJO#,a4G%FGY6q"=1anpiW+"3hb5A:@$8Yd-?10u'Hn$E%o68t#j+tXMFcEe/R)FOZ)?[u)cE`@@4D0q4dWRC&ZWi;BV3=K@T;P$2ot_DO+CYq>Zg!jR?W,Z<-Ej30!Q)(>,8(6YNJlO2nS@5L%LINN&+j)%t0I7>:P0Y8GJjeUG)3[XM8=W\SmA`S6r">kdN(BI5E[lpH&rGX'$)oI&EF;C,YF&:_b504WbAX/$^R2rBobmsc#98#0%<>J^mM$)]gKoSbFQtuk.<8oIBmp+lL1_VM3#?1*%M[:B9_:MP@!tr5l33nB?rDI8$G=36lO+EHu$L2),OL8<M[W-WrPDpd+!"ME+%9INIlOAdL]U_6JFc3>i!+On30,ifd7oB,phZ(Qi:[8t,f0WV\ck1=lPg;"H!m1f1^mD\Kf/1=FXY>17<(IbP7FSe13':21EBpWR+%M1`43MpD4t=+DHCF`::@+qk2N9?Oc_)<?tNX(:3/U5X(%;`\n67(oa>iW+R(Q,tAE;UQD\Z&&Q[/ZMM'.7IKAm.eQi>SNBBPN(`V%aX<+OR@N<[-Ou)W'9c64LoPqN'R.VD']1SWMR+Q4pl/)iM!U++K]9ca@[Mi.W+Tk#.U*$BJXg8H>(kmK"ke%5Ulq>*1.(Md]sg=!%Bt4:;-k;1m=[jgb!bn8FTt!H:U%j@"koSNs@YE`/BY[D-EVA?oj;YW?)G!hXqd\<Yik`iE[(msBl(o5pQuq?SAqhWJSN&<@pbOgJ%!o+N+CuQBXCuPq^(6D$H<LQJL1ONDf=,p"FFZO)]o!Vq,40)`-];F8VTeA["AB`E[Kp(6#0Zh6TG2$AF"dh)^k;>74^1/h-CN>a%%\gD&]qJ1,AjLch[8\/\XQK5V(B1_r8Eh)4'->+4ST:JZ'=j;juggQC+HlCe$6'Fq=@;0)c#4K.<@SqsiFrI5Y1%2WB<8ot`<8n9A%.e*sV"GfTDJoIU9iat#m;2L3*VBh\9G%b`4>ED^=e$9;b**o0l84g^5\]+/f&lTuo)Rqs)X%=RsC+2T[&;c=aX,e]l33]?R7ilXO%=c"rV,JG>D,OVeX,JIU=P!hQ+f9Jj2hPLNgKLT4Z%&MW(NOVro091"#859Oh5=Fom0psB"`b<<0%gu8SV%Es`E:r"^&JsoTUi:01%&?qQ^(3'j6M)Y_W^NGZp'C/8HXsE#lH7]VH!SY(D`#k#s(Cr+N73TAr=XD*p-E>L,Dh)kED\u9V/jn4B\sFSP35(Y%CWt\ZO>V(J%Aa(cRnR]co.5PL98S6'?pOtKUZrUe6Y*qF_I\4Mun:p:G-F71uX7ro0NVe(UZ,R<gI@[["00@`XM&j3#]'-^Y@E7YZm7>1+.N<^d%8]60N2So1)J]M!e`?L=2pu(t9-'^mu9H%n'h*H>NPt%:%pK=;[\NQ".Omm0;NVJ615_!37,;-E3(5+O(1mYWpD:+0g!p4JXUCjE/%@Q`CNP2AQ8.uQle<j@a\4"5'C<#0KQ*eOL<*2Xbe.@VmJ[!(R'S$Ih`BhDR3/E4Sb'f$PE6'O9u/E0RUQ/`Dl6jr;!7&gTb<@]ZE%e"dOfP;$[Skeb`7SS=Z94*d,^+Tf())B!)+_f=o)/#<e)QG[/C-SX5iOYNMePEh#13Q-cFBCm2'Hm*\p/Ilc0fpKObEWY2.1_+MS%9fMK[i=On\;"h[*iDC4t#8cPH["XmTXnRu-LH'-T-<:n;32[31\Af];iQ0ZXEJS\a6tI+**at3CY#1!rL4l3i0=`EKm%61FCRLf9%kX!6o[2HKrcR?`No20[MV%@8q#9DDiZ4W3\gQY(\+d5<A_oO%IpN9JigmGs)(0,]RFiIQ&Q0Xo%io8CVW^>YW;(pljMrPD9=dnV.%,mX+%8">4d(s/%5**AbH*'Ort:`dS7*q9\:*q9^"Aa)TV;b;?OAS8-Cnq[qm]qddMS:j<g44TI<fV'q9Hb<!$0'fQpB7?h`s&'&^%jZKW61RFTiDpEHfoB&^ol#+dOP3_8S-0]?nFHZ7X9IK(Bc<QOuk02rJI!-S$jd%G=EJI96nEJ=_##,m'LS]Dj-YK]?0.4eB`0[f>%/E/`8/E.-q(@_iCG[u([`Zi.0SAc\d]GtJp?XAbtLej@LObe?Tq8/Igo)tp1ilfM"%e8ZBO@+Ek3/^.OqD^qf^-!.*&Dn%q&9ld&%&Ds]jRp=XtPsTlp3/^(Mq)HA:^3gos#@B[?U_$lscBM0J`u)a]O0]\AQ]GVbilf@s#4^s)/-9f%.=_-`E>F'!no5Fpq"/Qb5(*/c%7N_VKpcd]t/GASpj!ZSSEaP%kHNTMAC;WTZ]mLeEl<Z["U@V\TNfecD+3/WBQPZmY_j?FjUs-k^-(0hSh\XjGdor16Z>/fhq0`a:%7W8Om/QTUl]pFdi[,9'I0l$4Fl]aY^q)D\QI%43b7Fut0=T.4iT<W^;%pr1Yit$@T,S8ie15O7Y]b-((=T'ET?a4o%&7;\g,6qS\%qF)RA@eF&"@eE26^1-bn6@?c;NC/(^iKZdc!L#n+@EKb-6M8>A^-_LN6[Tb(`Z`&_ou7KU6M67(I"gjPP_JCf6i:BM4cIlD%e1:5%2\,?mKJsB\LF@rQL6+cML$FXbI"po&L%l#*)hn%qeJgIB$Ipd6nJ/(u;A,ug#4WG.?OYpM<,Vp!.gg1tiZ"TpiXSlgnJ/)`!q@#+%?Nf@E<c@op.opT<i%nEKpqp17IL0/YhY=u1G23+(XF=HA^'mS_?2B^hf;1,lIpKXLSCaT!8U"J:P$HV801gY!\s&Z9V(XXuZh&r*%_fP@'4)Aqk:Rh#3BX3CX/F?)tZ):o8Ze30,X$F1`jPamPJ?akkAC?6O)#$1u+D>\g%pte=(4E^FT#PU%2#_f!HQ+h%GO/.Q0*6.I%?I[h)$Kc&eP"6]J4&M7-<scfVRf]Xi%-!,Q\<G*9(rRFK)8mPm%,rg/#U#BuS6KU(]bc;\2r@GYT/5E\KQ;BZK6)7XTiBsm+AQub%XuDhJf]B$DXjAF+qeg.eDMccq=d;9X*.`>QD6Ii@Tk61eEJGB`\:^#3S-;c<)hU,4./X51D5.W@^5YCJ(8h4E#%si3I4tS=)VnBM%9<.6J?K2Q/2cG,XrpXVQ)gs[H.V>FdGK?Qjh_<aM^k/Sn&oT"\f6%tM8fu>N.IT+*;OiFbK986dAFEE'J8SYM`l`*aA9F=,i=C9Q%kL,h(hBEJ;[^jgq0=+l>ZSu9`M/X;aB$3(kT'g0Z0/i91RiCPbZH\@EHs*Y24FGiE9?M)B<Kc%trdABVY?I@E]kZtsq0`a:7W8N&%1RW*opq2r1DQMa=2E,5epN;ZaI+dXg8o4*!dRDc9ao'&N%q#,;UCU`-#@dsFq1lp2^@De-b46'4+MRCWMa2[O+,iI4AJU4iHp_)N%a?LMmprYf<Jb[AP/->@,IkUroQ%(K&n<JK*"QCs3i2)fj;#]sLIouX-/,s#Ti@Fq9r8B1+YkZ+;rk\BI=8p&2__(nmfY_A$_8sMq%rkZ[n=8lWjLTgWn+pq])q&NuE_4['C0^eFqIotdj1]Lk<i@Fq9m,9JpYh6ipraE'eYPc:I%q#,;@h2rB#@e9Oq1lp1^3q.<IOkG+%]\k=?Yh6ipraE'eYPc:I%q#,;@h2rB#@e9Oq1lp154]:S*kq1U7NT;7%uWPtjWF=m2-KppaMV*Y@?H>Kr.C,eYKVU'LMr!sLHA3*%_cQiR#fKgD@53SAr.?_[YPa#mK<P3j@LuoB#;7D!#@e<Pq1lp3^@DfS+MKT=`ZVu=arnE.IEOhlKD<SR/-bX0IkV)sQ%(K*n<JK*%%-#Hi?W*2>0F%'&qYIDA5:fj6jZ7Zf-mq#XTq%ogKj(rV035##\ZnI]aiOnO,TSDb@lI=^a6iISLelLQEQjm+1FZq66Sg`7*AU2u%2iK;ok4VK3g$/2iP1f*n9Tn)np.PP@l1R**g$/2i.<Ttac0TP!*6mhlHR@)*oOoStm"X.J]J/H8SUSoGR@Sefj-cHecfCLbIa;Pd%SUQX[R@SefP>]/.o#s;a]a'RYj-cHuO7CFhQY,g4DM[l-3fH2-e*WPcZf^s@Rb?s!9U]+*HR=7/FF,"Nlu[TEPe'#AATkXJNb-es%Sk1\!*L]PTlOY;/h&qm):9S;nbYG@^Oj'9G1HB'Ff/)Z$c0K?hZd\6nKTsYX3G'@VgZ)V$,7pJRcXb%e*mJ6AhN<`f"%L3lh4Da=%4l%1"kWRanann6WSk0AT*<SeS52@8-V/D>E8_p!*IHmrE>,alq.dhh9EIP^2_(99.;_WOoaltteT#pmnrLV+@mQN9T>=SR_9o=C\%/*Wf"^0j^QX*;f[/G3o6L8E`CZIHM,P!;18e@Xff]R%&W`)?&iP?<^sEY;]l>>AXk$G1VnS:ju4QBPG9h9la*]mHP\S0(kuh3&CD%]j"COX*:m^Q?p$9`)>BVPjmtoOqLM^P7gO%5Nocc=UD:g/LrR+]-SG_HM9tB3'Ug9h3&CD]k^N_X*73//G6/;M5@^6.H/gh,pbIK%\>sgH8pL$38Vs;#/`!Y\qa.0+pJBYj%kRBk3=2nG2(,ZY]B(<(k16&U=7;H=E'g"W=R,iN\,B;e$+m(VRu@_r1tlJ%3oY$^0$HuB%4g/14@8;uU4_Z8tGF4^RrWOsc0JD+!c/H3sXt7di)RIRUcSDaQ.E"eNAY[tnDde\&3)ue6n<+1NOq$^>ga*d!,tY2E;kuKkPKXY3%hBXJW8N&S_^I_2E9Ccu=]uM,T,^E3JmNgX!o9,f8n[9\Zjs=Lm44]CXM0V[&IJ&a2gE`gNZCBpn2G*$(g*A'.-$cP?hac87]O]R)%S%[n"2G)\9=nXTejs?L'I,Q@fjs@X2iSWe?`&>^iNr::b0e\CL@hGWmB%=gXaa>\KSeEsE#m0Y;#b=6TnrQbk8^<Ms+:>4fWS>On%-+Qc?/P1FIb"9mB;,5Q1N*;D1ACQe7-_m3m4;kQ@aIeDpP%u#t.ar<gFHU\aUm#oT+ID0C#.Z#X2Fo2U[m<&H[gd@LY&09dMu5J(%-TO!BX%],t?]loa^*J+rge#eM\<D"PnKk_$i_.^4`1>u5Lp&K&)=]#`6:IqK+"D;o1K<E\?)VGaLojM$Ph\So:3))HS>6N-4\e`&%*[*98:EU2ZA)[^F[^`L^K]ZfUGs/A_-X2BQdWPhggfCKk_/O,\n.UBChN`ZR-oZcH#/<aU(G]lRaM<Ds6NG"Z2MrYhH6hla-u`sj%?o_hb#:`q/9u,[i!@l`(&.%eG(GKC+,Hti$Fo`;]#S7)RUU%hRN`f2DAGm1GAI)T^YbkF"fXu0t.TpF?#6p4,*.Sd!^('"**3,Tt%dZb::p,ZTfCP:(Ze<Ro](K-?NqdoH6*V>^ADoW$Wg8(P!4+WrCB-T+c2hue!&`bu"@&I7hQAu5c5ISb72!4&D_?'fjbOlq`2u"-Q%b@(oeTC=KIm\i.ea;@[RQZ2_=G>DlKNLgkd0@<=&qo(qkn44CSi;3Z.jP%ckWa*aQ$qK)\Z\MI-C'GGiP>D[.B/_Mh=h).$iW(om%=q&[L7TAoi"r<U<f6H><ptckLX:"pI9PW*dCt[omUL<0YJDmrA-5YD/_Vl<i\aqT8I)t]h^_4_(J40c>!X%CRb^.s+HlGgGFP`53%F@\mJ$?<*qM9eu6P2s+c(n.:J,HaE!\F^'nO=.Xq6LQ.-2($L[!\2#gJoErlIT=D/0j05[Me4T4='>XA%=@<pU=WoUZNDDE/3^&`%inP`8NI<R6,5-X0fFbuKjGN1Z-t$b[Ei5#,,Wm3\0=Ig9?Pq%=/*:f/oR'0ZHWYhJs$G`=AAO#F*s6P='`eFMAB#[%M&n:7>eCHG%8Ba&QQ(B?#!u=J.%ckB6YLgWd'6(2bDHek%%m9o`*'"5-CNC/Zkj.o):%BJ(qI+LdK4IBQ.9'XX#PBPFT-+#%knt@-1bo0bY8%ut%0sNHt'PIVoB?cGnmK?ZplZ2gFo,T&G,S<kp!XZnEM=AY'+G]<@#DO3C+lia#Z&<)<ck;2jbqd"sM!PK(YhjZEDX:b#*TlH^(`Cs0%@q:2Dad*0=q&r`aALS4:Y1rr$@*$:WH`5Ns?qJ3_,7`[`XA,N^f=f;P2i&8M'BiOJHOqQ0hLl':#Iu]o91#HUiT_Sc@QalTfo&Rb%&5>P6X17S:PL?o_W>DDbaQsQg]F-CH4u$N&`"Bh;b$)Yb@,$:_LIgB(@2m4M*\oPb5<-e$3?9].1JtD=*C3e.JUnn8OD7.korEk#%pb03jChdrKq\J7*he/=+La;$G-F=22GcfV4fWYR9FSQrdS,2"u[f@=u6&7eIo7^Rq?kQ]=SaujU2+NRH'8bKK7LT]@^gsAk*-sV6%$FaM6k(]@!'U!dc@hW?eAlJc`5Rrc$YZA-"#O#'ATLj]&n7*-J;%4YiSmo324ud\5j,"/qJ`KpUE[KAe+]6Mb0+89WEi8nkEJ$-2%OCVJRKXSOr2k@60WY>3]jfsbmd8Ej,GWc)GO,;O5nm"FXAWo/MSW:A=PR-%m,(XrIU%-F,'3Qf;k/9^p+u&).Zs)O=H@t=6nSWXn%*Dn0r6_'$nft"=K*K*d07LF*#RZ:,SM*;os.qKH8gNR>bZnQK,'0?m"C?L&k/'PF(X!@[cW@t&ubtD$,a7@&9b$kAQi>jgAUd81N%]?FUNFTi#U3DpF%Nm(BX!b5d$YpB&16se6sj5).2($1;Z%SRj!MMu.[?-I&FC.?<#!@&0f&=I..*9HYibr9p*&6]&qFU4LMP=>Ud%9&r_Z<PFS79E<TU6ts-ShFVa\6Mdp1q6j$]Y)"n@ko?3meq)G*>eBs=k:H:V^JI"5>'3i4=a43(n5,W'&>qGIX%V4[^"%L=Ykqha%Z68YF"6!i-,/Z&Z_>u%1nO@D!A<M$X:B1G>D$N9Fae">[Vt/8K-P^3"(JDnR&<9AqY#mLG"?L(?'+q$6=DtXe7%,mSl#VSJc>s\!%ASh!BU:q'/BO0t6Gtd@*j1.7#8W5O*;MO_ZSV3km>KQ_Yo[fU4"sm3uO^DY[mp5[!DSM2k2LVOHdnn8CO[.hbSYqEn;4k`#m.3`i%qu#UZ,&(/Y1)%+`iY)I[$6eUu"J*p4gt%3VahN)_YX8KScZ^pLa!m*>jaO/q$pZWNGB$/>4Tu^Y]\X7ARB&H(]l"FPWLSG<!j?Rr%0JWsnrJ8nOV_Oe%P^7?lT4$j(=7S73,$=&[OPGSH>]NE;e>-"I_\3=+-s?ZFa+gOl]V$Z7?(UL%0;Tr2+V/+.g@@-Z$(7%.U=-"X%FtcHM%k21:0jVPJ$:thT/f^SQ;TpX`8H95\<'_Yt\-'!<'pJVY_!rj['/-7/'!bWU[BumY9ru22d_V&@*EN!'!sUrP6$GAEkQN6:%!sL,3B\V'i;>aKn7BTJ:nsUBe3F,YgbK^K^<A<UA.c=R_*>+W\@EW6<0MX\RS')^XDd9fR^k-c5!MmtO"]?sXedYRP1ec[$#u"XU%cucJ@FBJ_3ls3X9(G75BjBYdfhIZ@FSkYJnQdnHF=UAmsX1W.j=c%Ej<N>7g<ZpA<AL4dqXSi"@AIWJ-c".(.2j]fNk-D:003m';%;jS4Pm(:H`Z#Sa.ap@PjX!$81I5m%LboEZ&Ujf,^H;/)&<,-K)A/^Yk1gX"Dgo@t0N2+.4[]jq44cGQ6j%O9P@AgDInZKmpO];ie%WG9Z]g]\36+=JbS@`N!2*7OaN?8-!9%G";>OR'5`>-pnTG;=3aSQVt<aG$e4kje`d$PfuRLRT*3+&WLCgr)eqnilKb@7.jB%UJ=O%`ODS]"'2s;dpkZS5s08:nRPSYpQb"TBpU'"ih[iCq2$maVV-UI1TNN41DTQj!qV\m8=RDla#kNncE,pZl]*Y3/G0R5NL<P(b.;Wa%W[GLk6jU0WAZ$&c0rqq5RrfkKUXKeT@h:jd+(ZVLXZZkAF\%OT-+,?2I2Q4!kA4b$6\k#bB>^@>0(@NJYn2:h[E^L[1egkCQ;N%"%^$=?OgZgd\eqqkY.>8?!I:a?tFE@5"U2@M&6YqBU]b'lCSQSI4QdNSBh3Tjc"4NZ,3XjMaYBPdRpWo6/auT2DZ,DQ"*gHBoD<B3U%$!'a;K\Jau'4^TgUB6&Yl)KuZ<\-'nL1B%=8'><"AWGc\iE/,@L'G/\+'QrX(e9\.-<@\`a^Pp;q)7`dMTu7!@-@E^]$^.1=\$h2%dYuM/5\,1>!I<r9oFjrr9CdbT^rljIp+8jNka-G`ihPiZ$TrL1euX7%QYXru0[qA/AI/T1EnNPk#Zm:tFNd4?*GJ1og17:JbgRhA%D5AM;G2hBP1&6Hmlm5!sJ'.b;"6=7.l,q2*0ACKJVb,?t%M!67nkt0,)VRQYc"I\#q[S?\4@&(9Shc+K1KdDs:/CCkXk3nNh0L/Z%nm[*U81FI2Zm)R^1e7ueK&DnXo%85`['8_p!Qb`s-<4`:i+Na=GuP5ZaR/T;/9ns9a$;U#L`d]DKK![FH`(Q'jVjufo+5[>AP)Y`%fhS1.;iKAb,Lc'6@YS,js(0q<kd0":aQ]_&AYqVa[Oce$]f=2a6e&E6R'Z-B-C-fVHCW9da,,hXnJJV!60jVK)51b?Jr"_6diQO6%W3De+mkHWYA!)+rT#/^YO(=]"Q@5hQ1nL"]X=MY2Q@6]B]=BrN*_9#]g%HK/ZaBpVf"K,B]E_>$E99;j=6!oL"$8=d/bV=X>,npa%q(]]/nm"/uRPu[Pj%oQ$[+(L$=D%j;^q/3C@c4"ERg+hi^lR9=>rMlC@qOZ>.Q?+,$Qim>#j5gYF!PJT5V.:,`>SH;,MCcE3!E-#%Bf6&8V['5J2e(]$Wh-7In3(4brkt[b&*-RY8IU"7Al':?%K*#gBJ'B/8Voh+0OhU$\OPB`I%3r_SaE5gV0"%si8`aR7-0bdcV)8u%FTt#?b_4sar/!B8hd^-Ra"H/.bJ;.I,$ElkJKM.IWkTe`^)\Y,VE9f57?&1QJ\TVc-H3o!D9g"Jd!aB]:Wb9X9me4::1rL[]\J,q%n3(4brkt[b%jWE5hkT,2#.N:[W'H0p)>M8a<=Oo.1)WY0QSnr<Cb*(DX&PDplc['kgIs/fJIbH:O;[iK,LN'1Dnn3u*?`p]e0F>'%\rXG_a]nM<:sd:<=SJb9:#9iMAi2X8SgcFUZ&_NgcFeYRDdUSua'jX+2tPlnB$)>iK%i2T_UQ65/F<h4pUGY%m#7*Ah1HEMbRe[.%5])hT6rGlL&o3@4H,8[Lf_8.@7XGX-.?Ks?WA4NR'/DT%;@&$jl,dNEm'MHL3W,Ss)5^TCab?-=]?8_?c*NU^;4ag^WH:9j(<DfA%1PHUXCP"6WHsl*`/1K91",*ZTB:o&&?:Y1mUF9/CW18TML$*$u`=SFh`%2kYGbG-7U$4lmlUfRL5%]5j[``;^Q`>4EWClI].M3WX%fIi\uE'3.5G(^Y4aE&$Ti@1('NYX:H"u:f?A*2NeR<pgMZ*YqJe#[j._Fcb_'[[[[EqWBj3Nc9(BE2a<h$C?nEPHA8o$+hQ!/PN(%6+S[M6,K=HHeqg:8?ea:P7-i#@cbt"d-/;Z$D[l'CX@si]_BrZl<7U<4[1U",K99dRm>t,MT?$djEZrX:0Tc$9K/)i_N5.=$o2r2%O`1`Ae3%E6Uq-S$%T7SNZ:giaFV,ee,g-pV"Q*EW3_lZO[Q>KM:+=GEE*odW0/^:lHBsY-:".Rn9'O4reHhD@LM^p[M;crFNc(0i%V;8$'5/^i_RI61_[i]E'M4[mJd'+^T*fIVV\<SgbZf^Q=nVF_tP%MmH/jZD4.Q&EugCffn6GmuT*-d\c4UT]p!3t3e]HX!#cleRq%.BCJ4+n#]=#(:Au3\.K^#g!4S'jW+Q85(qX*F``h;TY"m]isN4O,<(:i_o'<>)uCC[S26hdJ/VXCH]+1PG`.KG'/6<h_aP&LTtKs%NF$t5Lj(_`5X5SGq]<ZIg#nE\pB;?!Ln(8YpH,%qi*[ek)5R(Q1(OZ".guD<_tAA=SMW!kH&/=299F(DfaPkCQQH=O7h[7GYKDFi%Bs\\]F5'Y7(8Kh=8Wm;-*tO'(-J0Z_C\3/l>ga7:P/II]OXWC?r[lu&#6@'sS9pZaO95hBBZ^+8@TAR//4VUt<-:MoQda3AQTO`c%,[`b,_k!$bH:0>pjf/?0QLrqWhA7A11+M[f,0'5JHSQ3+He<2ajbS\/IEZ_;c"gcNf?Xu*,nget=-F.Z:QH3`J!ZTPVN*T.l;`!s%k,`]h_]N16Qop[\Q-,4@&r:?nkXp$?%i6P=ls)NSb]=k4M?`n3<Q^?I764r2!nP_oVN,[YNc^%'g^l?rJ0NT.l!oHfn45kCQE1Z]%^96d`_&3QY-BEadA<BoQ'i-a_phMh[Uf`tH*nhk`UMqu=l',Isg4%(0i9ck7,4@s`=fOOlOrR(A;DbmeO)fe.+Yhk.#mj*JIjH;V%,7:OZ-]^`MYSttmbd-%,aNu;<Bga%n,h],XB07A-gGnGnA4)e9W)T>YlYSND*gp0-g,((WeTT%33/;2]7,-?VRjlKkPI!"*\Y@uN%>!JjH62EQPWjDM<MTA^7I<AH2:pYcIY5A,u4<TfPK7%\M4LbWP#A;Zt\>1ZDm#9F@-7(7*>`Q6(Ht(Zd%8/1mXl%R"aFjsI9C?`2%YDN".;]&)KI?ZF&Zq\bIN\ia!lXFP]Ul&/D<21_1oDufj14[GP3S_$m,`*)=R(Uoh;*II1"Z/pa`?JBG:./Q?4JY;LRsAd30Jp'L%Kp*e1G[6GR8E8s+f-Wn$;?^C;aaN`iVZI.K-`SiP]kh.LFZ$_`:9,G1PXXC4,ZIoaGlW]7OJjbs$EGKsq>lnt1-jnKZ3,l[^"?C4%Mi'TM9Uo#?SlXOo$Uido.[P)DF_=U7o<a(a5%<JN5:,RR^qF%O>[%>faCF"?]7dtQC"n<&m(m'Eh,hVJVIJ@*S!8eloIr8Z3=\>2%l$q$"\m>KKL6906j]!+<6,U[r`)s'POo#\eI$2sjXEm"JP\Uo\c.IRs#^9=Tmp^Hr2"5d*=Xo\UH;'8Bm]6D_HE'XH)jkGM`4ZuX%=IGE]Z0VaOMEFpUdGi/((0"751Y';KS5#9X78f=S$RtAIbG_b<@<;q)_e3WrcnV,%gLSCH9neLlZ71uPN*`iEjMudMSPL>k_n]Da%lhB'P'-YP\9Yr"-,)@;Mm'OOilAXghi$^!3*PRgV+ZJs2[\!rF=knW7NLaUh_i4S&fTCjg`(<^?QNVq[/`(h/kd0+;2B@el&7@^\%#6l#`UN+T%;])-Tr^_<Ad"0$4;f5-H%SS&UF^>Od!!ZEbmmt9<n%\p\B6OgocF>Y*3uo.\]NW970^0G:^)Fq3?iXa*'G(L]rpCbn%9h'BC#"!fb3\YdrpQdE:##L$`2gl@Jpi->a1MmU1^E+bhVZXg@66'W!0Kd!pp<A-h<jA#f#6m^`]5q@,iZ+=3AI],AOt>[*[ln\<%n<*>gSHHca&'6gco&9E"&ambb%ZF)X_`9D9kho/?#"W\+!H_^G\`r5&JH<V,gSP'/&a-rG;RB8&;Td:98]!@"3A@NKeFW<,=RfKV%YX1)dA#*p%0PDgTg6`?YLJ2QS",!kuTVje(*.5.F&&nV4_Ftj=@:\;_X+q_iKG/tC$4`(V-\eI0n$2q%Ck"f5U6s5_i?uS3S/>"f%OIQtOUaPWLY_lm5W=qW%(ElRAIj30pfq_/;iX;IoZbK5UgO,9rm(7!oA:C&dZjG6=EQt:Sb\YMb`"6BK<1Ok@RG,:Q[Vi2.dtubR%keq9@m9TH4S/<)dV5P/de[u_SQl>\RA(Zj+:W8\TGn_42;.JH(I15C]qWBkS,+!U?MQKBgEp'B^6<9/Z8&"<be9i-kMgsZiK\&'/%%bT+^LR?^pk4[k7]6f!g+d><Wo<d@f0l/dP?ro\@GtGns8`X!7^)KCn>tA")U\'k6@:-ea_F5#IO6$Ef"d(`jT"m\GA%<9MP,8f>%WI$049rMs6g,\6IDXR6S2p"(9(Eb>/#Y-MBO6,@f69V6P9Hd`Vm:*W=0(;uJh"eQ@KtPX*7&=b*9HcFX\!]QBbh7@pQRs9E%Tq;)%@9$QeAI=RafuJ-dN,ap?-HfIB;[Aepk[V.:nYXZtR\gWgW]l_1]Bu:@`+q7)==tOVq,jeI\<#_Qi>)l@$?7]o=Df=ZW/p$e-D%\K%/h/gI,r(,?HB_tJ)<+@60.!J,8h*#jbLa-bQHMm#+3S67b6AZ;7!V]Z'tMY>R6o">gsZtsq;4?$bBl+)Mri+>F-_pcmL:>)R!'#I%!NmJeg/DSpSj2pN0!Vi&4h,%(PRE.,!8\,nomJBX;^M6A0'dRpZ!9W?a)ZI%C[eUaM0Lht9*ngl.nImWm;:!Sl`)37cDpS+grDEK%S&!7@eP'QZ=^sKKLj,)p=K\lFpfQrP]G]e,`!l2?m9TH4bb/Y!/kMus`@>PA4*!e)7O!TBZpGcu=)B'Kkbj>LT/:k8SuV+g9$t;e%grfN_p!?grK!9`%m$B!_OZ,&EqS6E$+:3BmjJ`bOO.0Bo04E.2<0LFOYoe*3&s[3EfVEI#^M-998pj9uQ"C9K,tcB!e4^0X5=JUa%<e<`U(tJha7"E^u9d#r+I4dEZSbbQDZn;^5V5mQ2<WZT3TbYmB5),SPr&eZp4dF&73-`ED,19<Kg"W=JU+=/"%gdE"UCIi)UgIf"%=rWO7.tPdODfT@.!\--Wa?t]HW$:"Y!/.gMnQj$$;PlO7FL9a(7Aajd4cgM2VaN[eWPBr]3n+l9D7g1t+>L'FamI$B#,WEZ[49fX%-j]S!C;nHQi(7:4k,WsR8!KH$]crlVFlY8<<Q),t7]MPe<`dtrn)kOm]1;#>-Z/-Eg=(<qUiu+uZsgT6S%EWLCm'\CP,66F?8$$F%/dX_[Tb981g9An9:J[_iI$jjV/;O,ARLdSm,PH(b\U)o)fH-3orj5,[@J\#\d6^32[m^\[E?CJs>qRQ_>L\,r[]#N)>80#+`[r`s%Mpm\L/;NsA>?DAZ^m5@Yo^puU-)'T>Q9tb>/M'Caf8HjQDIVp9=:Wptjt/,sLpogNe?hYAd^b(nXP4fMU:<9;?A.G0iH5OOn\_i?%>fG[)Mm+2Ai>.`[[Ms8@U,D5@oOWs?._'O-bCO-0D.,Fl]IiEF`"kd5I1+6K/cI3-BXQ+6e'%rME:[KuHsODkbLJu*:+TVV>-N&$%U1h)V&XFrFN::P>@do*O^V.,B[4OD!`81sqJ%.-71kpch+'%XEINn/6+@$#Jo&s5LO4k;!F4imd2<4N,hAHq$[J.6&OE8"*7"@Op%\@$,&WiB'aQ'i@ah/WRs2<nbi*6#k"DE/fKDqUoW+p!"t8*<;akd3263ENO`nXq8=gf+NV4Z[Me+f@J<+4/m#En81*\`G0LT\?0$%<-u!<Jj!9fU-75%7XML#M3_a3]--WaJOLBb4dt3fp8E1IYt&Y.RFNm%^tRRaN`:A4QD-NG/*]Lr$fr/:/F9e]pOun"E@gJUG?NQ3%d_\1nWM_<6^?aC)I8]to(Nqmt[=oXVTP\,HR!2oic!KWB4,ghMKcNWJ?._)L=I4`T!ktldjpSfOdhd26:7i>GZYTHTDFS2EfJag#%gVRib#CU$Q%!RqirH[&PMV%BI=kKX*6$$J,Pg_#gHU2+L%kJK>UET(6]4G20/aS+cf4AALLLscCmDY\6FphaQKcP1+[]nLO5;2A8%^%[6:OLDA@O:-ES\?Ma&[]j\m5HG7)26&=rf'p8Tj'_A`YZiBc/aS,65.Rm^&);Y9pj55#o"S4`d]m[eSia,PeWPqUnY4`J3P(L@%fXD\sdn6_NW^!hTMT!XbO/\u9eEg7PcV^uTG@\a9O/\ss[-Uj][[-m',J3]l@qo.E2>_O*jGB&u)Lkg=[?dMOlKNq8V-5?Bc[Ib8%C>#fA`k?!!im"(#?h*hAq\:.$Z<qf0KKaZTm='#tIPkYOfros+.lBqQPmR`NjtZO;HaQaG+QFpJ'eeFL?hr^+@qor]Pl8aMfK?#B%6#7T@,;ef@Y6J8aqpf"\D:u+D<%GABU6U%]TI-ejX1>*AV-9Wtp+%&q1gn=W_MZU(rG'F-Z<u"#:YDq+m5=d+PHPh&r4C[].M4#-%c2*V%)M@`8$PiK2:EEGFOZ%R9P.b&m/&/57O"$OT4JnMdm1u^M4?`QV9l/Ld5[*ks+Orf\V-p"JMJ/]lVpRi59qq$Cbq@*2Pl4ds%^b+(&-FZgb1Q-sEr6=L]25"Nq##[&&>)F)1Xf)cd0Bk4!BAQE*;bN:cS&b/a$S4H<QL?c)4JnG;\6"`jjdP**n&SgWkQCogH;(#q%hE7Z1Z<TPifBH.^pR#D9Bc^2CWlHqh\]5D3e]hT=/\%E8VO!`u2NOi>/kbf'?K+C%*`JDRXWCEBs35%W)b#hPjYd_,V7,)`c!>&l%s4,o$N`:4:/Oal_eT<]nl#i/#X1Cs+:U]O@[5O*2/qjRXF-f4E^:?m.VGl<I\/NiPV9&@HmSYhFp?"!8O+-Ka;MV9ae?O+^)R;;G%W?KlW]@9lL]t$cf_fAe%WNGRbPIo>KV7TCf@p5M[V2i6=nBq3fmSYDHBr59GUX8EN(F,<TA7DsB'+i`XM3X58N.AQ_+m;_'Q4/V*%;DPL\o%Zce>>$;D900P3/Xb7)AoNkdK.;`^^[(bCAi\`r`K=2bIPCVM=u*?dnuto6J*Pk*C.ZK-bgpD1CF(?H9=C"7[?;?:D-G&s%C<9*THu3[%X!R5(GE?U^`(J-g&^N]_LW!q!P@$G5?8Ach&pa%lT*:(ZOr!M3RTYKtP"+[jQDZ_[==\)g'l0FEM:Ic1-"g(,R92%T%8)gAk\q7>Q-g@C0ahVZ5e#o57q,sq&ntlekPmja["J=2-4@`k_j>;RYrq.X>8lcP1&+i7`DaG'IH1Nl9AVRb;*T;\%1<`D5a=o7n%987^!MI_HeP\_6"=Y_bVUQm^S]Te?HYH5"+Iq?_qs2pK^r@:NQqH&ual!L8tUjlr3C\h+ubck:%=i5!NA;&K*aV%XtOr7<DOu9>,%,r;WgmAsa(;DK4B=_DlYABAqpABF+=.5E[;=NQ`VZ1=UH9XOE5Z18dL@%fLTYh6GfQicMISh.ce4hlJZ_FWj=kSf-1i\KkpBU3(G%H9JKH`+QMHRQ?_),n/OXc(s5_V1s1$Fq,e^n$M`r]-p$T)!n[9Aq%F%-J/D&H\Gn?*,*O@Z^>0Vr-&Y[;@J:_NisIg%@\2A'D8^p%=?ra0CXDRHrnTe<.'$fcZDNuogG!>9g1r7$`7g49^ojBiAT,Y<iM9p!Y0^$-)J>?sHn*>#\^7RMReKeJ)SfUSeZ`h]kdu3$g6RS?%JSX-cAY:4@G_(t0=NgfR12.Zn7YZbKhNePRP8\&59nOnck7,6`P6FBuSr%k)hHq@J_8:rB`4h=8CRFNZ5%Xr$$5kb$?aalrFlXZW%S5#li^<qH$JDaHaK@ik4UDA7WNm`s=a."BW/1c"l6OQ&"9KWU/1,EZf.C&u>P3#U4+iL43jWWCu'5)2-1O4b;-r,bfUp333bS3G=%)\QJ8:PrR[lZVk-b7NdH6JZf,K1RGFl$W/kOe-JF`m$6BNre[K#<"NH!8>II(9"j)3I*:K@7B1k@F-G0j;F-iihO\V`="Wc%GH%@%K1HioW5mc?(!F</0SC9TL?G5AqRH&u4MH7#3jA'Dg2;s)LJ"N-=l38-.]-!f_.5H^d6uXr1KmCdbOOfLJaI&Sd[i0%R8eq.8=P?Q%fR^cC97s+3@'r:tm2]r<i#+nHBRr5!JH"GSU7^##6Zs!Gi_b\1b@8p&$h;0j^QJ)./UQ6e?bfRB/Z#Z7f6g+>q20WLD,/I\$U*Nd%6@jS\!_-+P"R/Zi?mN0.\N0c]mt64s,>?cb/1DDT#"BLuf(CTTl@r.'+=S.Y3T%D&0H,Jf0GkW93Gtf6.:Ud\Yq8/*DfL,Q!ttd3%FZ=KZK7_J^nFHbdUEP9)$OT@2QY;1@_.X+WU'Cj36\]p1Tql(4(ap5P/?W#_CH`iL2266]:3pX`N,5E%Xh_&pG?LK(SMu`A6S`L/%or,/MX9/Jt?nsDS[Xe52)&Ubn]+aX8Eg@m#'ZI6m(`Oe+7SJn\BcQHSVH@]S^^,nSmp]\ce637#qWhDcZ^>?6.5)cO69hY)Qu+cQ%a:(Y:YJNbk"X>5R0*m2QKNs=iV)VSn,S(*tK#o/HAdI%FM`dA8f<uE>0LMc?-$c^LN2_"Il`&s])C?me'1p1Y\Sko<#;bG6Gb4!4%+Kc-P/!gJsjRuqP*mC'AL)?6^!s1M%QNq;^jM;J@66<4:O9YlnMfR7o9_c-2ab-9if2^nJfMJQ)_:liNN2n*!h0JI50*QPX)(t@e%#W,G1:`dibl%4=;(X\e/P6>'])7!VYo3_%ZXdJ1c.$20S5SW:qJ<<bdjM?AWE#CJf34$%;&,&&N1YuX<fAKdT%3OZI%)WG2nmD[[%DEu9q-'Ih,%>-b[._:Zb%qZ)/,iuiNK3]/]@&EaKhH]h!r+1E291'cEN'EE!Pu;4[*(:pm&D6eI*m?eOOCj/.Qm(X9OU2bc5n/rA%=CSEEL71#Wpja=1Sehbh'uC0.EK6b)2BVuUMY7iDm^K&)AsdZ`UX\^9]G/4h#LDG9p?RKjhA!g8,DV!f_GDE>I9e"t+]8S=bSA!F%/E.hZGU[ASfjP/>E=ADMEUGBSBdN!s%-oL!1C8_oiOWE"8u.rTBac1piMA`*!W%Ci(E(;a73=(Ce-BcVjV%UoCU!,WnQB)F#@i\;%e-A@9Vf]Z2]YonL>5k<.L(;kFXd:5GQKs1:%br_TKPDIl\VVNaV:mFH/MK7Y/Q2?<!0TCqCMc<9D7hS>VnI7r0LBPP#9tEV%=[RW%OZHU\663.9\9\6F1oI^V%Ch1(\>TpMf[*NR1UR7I2A,&e%%nA:b(DQF;IFZU*N)*,O"e\.)$[],jM;7u"H:NViUFIiX;L'8J6a?4%KKPVF,dMT=Y_L58:+52>)?tI@,"p(2Q)B<u(pIKaGqc[J(3qUHb;#JK(pNBeHE#qp.1ZVjor9GOAlrlSa>QG1hE#:84TL:rjQbH1%_^#b)",>=V+qFlO]I]3N,BOWFYbtWN4p-;>4BVBSarrg>TCW3/)#J8%G+;rs3S!kEAfs94YT;[/2R,B\2@SL!IS%OA:9_>d8X0r?%!mshZp*2-+e^G&"#WZ2M:s:/#_fT-@0*3T'^4GMSM]Ana8)d`='\nS,,:np\VZRrJG@rdl,:mlM<_633WEbMsh'H+A35RRi0^n/J%djq&dK;),EbdP*@5T&8>LX,d+fI/ShFF6O0IZD%,3\K+?bV]UDV:aRGHtD$]Fli-.iI39Nl1g.mSP'V-BUFg`bY['>H@,nYP,p^Y%!h1f$[7sF+fo(HtlU4L[q-bO&0;qDI(cL4H@u0&LIskuZL4VYo7+`<;lNa($S@2]f@)'U`Fo;;mi->_/JGie&V\@2Q4607dQ;Tr_%gt.UXWF.f0Fki?=mWCmqV4%/\p(^j'Zf'&?JBik3%nIu-!u_C+:.*r&%f$)l6I/d)!S.B-kCe5u%^DM&JOL:OG1-/M%kp]TE`$RG%%1A[1?\cq/B)AtGf-)5D(p4[0J,g-7o=BH;6^7&+Qr="fJU"[T#iKtO.*Ua`%-&MjE9'V1U1koj!5/-/RK=D[qmoBKP>I]o:Ug`?%JS2J@#[mGj;A97a5k!>O";5\`JVLtn`d5(]+p*.\8H"f9`AV!lM?k&NIggT&]\QS!"kY?\R;484>(qdJlfe:&VR(-?Lb5K[5_C=!%?ict?LZ9V<+p'F*rVVtf`MMRI-]KgtkS]UQQiW#ETj?T!\M$kNE08.NH9f)h;o!ijaDg*,S-0`S(:f1EMhNGQ+d"HG[R4DQ7)I<&%EB&=Di9q40E<.b/G"?(>,g;okf;ZR/a@db?0LPP>Seb1+(oC77M1bo'aKALZ$s@d3>:O(F?!9,8#Xb:c7P1,<W!MDAdKi3upn<F3%(e01]:MGJ*Sg[06jIFp8OU0>\_U*))Pdi+J&HZBq*32'c,nO\@H-"eLIuto+nDUn(_Lb<&XC4Y"Akg^6daE7uAU.sBTiIS?NER_3%_`3EEX-a'"4[RHL&.(^0>GtESm+fe'"GF#hdsV=RhI_uJKg`e.q<8-i&r&s)<[(uLrE.`2C#MUq!8&T1Ld]*Vf.K`@@I5"t8D*6P%pLf>970Z#^n.YY$/UY0s^3_t7(-\sb0e*72`2G^@$U:k)iE(sR^*0C)`k]IK`ACa,I%r'We\8MCniBC!$FfFHoN1DVMRb<WHlG&%%IKOZghDerpHS+si5%NN'I;aK]r*A%NG)bB1S[@j*Z/;rFR=nKMg%PL^qn?OWR7M;[09(?ADJp[J?u$>\@lsDtU;FOPN0i;oL2Hh8%9-(_Ud)NQ<s+b,;h8VD)!&sI^j'.#iMNlK-#Kt6&2]KM@DW;[1dcL&6ZLOJ,WnR6&D6>i%)]pkOo8.gO@\HNX@cQo9jWLR_^RMp3%G>h\qSK\J!ngi^#IUHUH)mUJQ#C&arK2."Ro,l?%TTGZ=]B`OQ!=uFDT<'g>6!U,9WCi_?5bsfdH7db!FFZY_Z)gA!(sF7a_Rc9[%8?qb:7QZ)QLI'Yi`XBXX54*`Ui%IUJ!Ck6K5BO_nLTJSJFFXf^aSR!SDVt9Gc@6_GYk&IbBgTT>iK@<3q1]m,"d#p_,AuWK(1oa>%9^W=ER;Xf,(W^YR+2]KA+e&3B/%T=i!lg.:Ab0G^`R_+W-fkHYb(h%$Nok6@K.0:E-`qdW:<XmbS4HcX'qpn2oh[<pXaEK$"CA0W%[-?A(Q#H%Z8k7P&]3C?8b"&sX]mD3J9#A`#*kPe#a<(e"UrCEYO;mg-)Hf5krW+>js1,RF^rRTReRPNlB$bNMde>N'&BTOU;)H&s%_0d\(@?s?i:nB+.*K34:;OAUhQ%rTnbb-]O4GHb$+k(9U]@W-0k_)rlX/&`O999mL;?TrC@;(_6%qs2sOfu[j>`k+/\a]jo`ZFZ`%/5,AWd0'QWc7KY-/u#S+"9LRo04d5X+`m61r(mgnLp9pr3!P_87,(HX^gla(btn#elJ??VK]/2->AY]"L2P\/NkoP6MF]"o@1W`4%7=NU88/NE2mKSN$Tg.d?P=QOZ\P5)eX`\25Kh*&,Dd1h"C@LmA&nZr)&g7m"(g\^\_LP/h$t<->XM-&Y,Kuh"]mS666a9X0K0De"%>`0m@L)*VA+@O(+IVL79ORR]OH%Y,?K3;a&fMST@'J_/VWH0#]s4ERMV.;0G0Vg2$.Kp0'+K*/jON#QX$&(5F\Z5pJpV]Gg7;Y+F%)@;+k"c$m;iNRs<b0t\qcCSlFR80YQ.s$IKoV&j%V[_B8&9mnA.*SpfEH1?(/TZ'(FcMJQ.'-iJs$0:28;OI(lc%q:-)!"LrRuA?%Redk``>^"/r"QQ;8LY(si2Cs2Qmu?C,Sc'uF@]h6;IPr9Q\6#tIgm&g-6YAY.O(jrNp5;#k`_<3=K>W<e==o=Q9FmmK$bf2_"b=m%$0[Saf3W&C84TAXQTaBT9&KJ!NUqTnp\YoSVmlngV)F"D$5T@D]3Xig'#k:n11@Aor;sSgKN,2_KM7bA<*,DYQiSm@>pcWQTbH!2%\B@aq:";$<N"=i+<p=jj.D`6nL6Bs/`,:ns7#&#kWCTgfK\`e,*W',8SNQ@p;OAW$-75QC_j3ZA)%`aNjDsb.\5ZQ267T'EOpXQF%oEe)=bRbc\MH#sO<(M230LN&^KF!sYhH2'!-)iT9Y$7&I.V3fdD@+c/=i0LO`Nd=fS%40)<1%)b'aUcmeArq17&gCsWN^tG.L\0X%k35cP5W5K8;CN$,GYbaW8n!IE!_=bKUDh!5M]O4F`)>lB,=Oq-)!<?9)[V392D;M$G+o"Y;-NY@JC"U<(hkm)cbWAN;\)ZfFJ!Zl%cmDiEK(fl2e_6%]7T=iol,/@i;l'JsoLUCrFhg%8_@G]B<[a4eK4G9\rX&q_E(ORt6pb&dUJi!e?'7@gbi%N]DO3X]'Tonl+\J.>%:91qdQPAinh$5@)/5sS8CKT%XhfF49N:>8mea9YUG<t6U$Dp!826!3Kf:EB//mt^aKND:&n6%$Pb3OaX(ct$hY>OT?IJI>H:P8E5%1F7R#(G;<o$6utH,o*(aO=51oUI]nQZ:oK@;^h#&3WAj\]99!K2k)*-[R6-[++T$]X90ar-D<+\PZB9-Y_%O)=MZ6sB#o+/nV'Mc%4`<$B+G@VYG"F,(S!*ma0"hZ*)9"!*f;TDfN5:h,#t+/5KB83N_7huW@(7lV4093j'4tA1Ma8`7OH&L=dKr8k:FV($mcrS@Y_Go?%+aT`5_Cu<aCM\5r2sr+<'S_(qAh'K.N"o9^67<8=DJel&X.o;V)a'A%d"5h-RJZ]GE1N.&`K`6+)*Nu2T'UlR$^=I)H>4FD06PYb%Uf&&_U(9jqMJFI3?pcB%Ib]hc`cftK6Rf*F+=n^focUQ_C#$I_o[XnNf>6iM>%)+C/pXadY2.,[E^u9"(rhWYhOt\(*^)tG-#]3Y%_@4h$'j>%]OJ=A/0E]m>e>fJZLpY#+-ESt$1o83JZNZ)33@*qSmaTL0"k3ms\6m\g/NNLU7=pBG$H"uugMCF8P*&c^\e=Gle-a)`%FND,V6.7.^SV:s?<@#/O?r.9lk;[$fE^=pk]"`nR/IrJ>T:=\8Z[_7gmSYh.F-i'O5'L<RbPU'lZJF]hP&[*UN\Nc1@T]-`MIK]*%U^lP-Q>]%:$[]#C(HfeR]eD[mKNqV!;HtlV!$N310QJr6,SPc<EKVc&@<%HM_6>o@KG[g]A;Xo"S7G5@SRb&B/5@rh1+Z0UTc"W$%'\<b/J2G.N-I&bSab48.S7ILh=I`ng1Fu9VT`u8[RA(Q7-^dk)-^i<iHQB\aP>'@4Mj$hJL;b#V1rC4Uc*2dk1Fu9VTc)u?R?S,<%P>"N%q+2p?^u?V<'Z8oU;bH:"'8g4<Osu8sIZb#RYW/Gg?s!HX0iKh%bi0l]JmiY^.=tuWOpSh+36AZIQlfm;0.bC([0ZS"U_i_c%BHNjYMHj8RAjQ_Qc7,HPeIX0E2%7'#ELI2NXuO\%J6/7Q6KK^m1Ecl:k'iF#Mpk?KV:/,;8Z/!Q3"IHKRrhCSm4LrB?,>"q;,d+N%:,>>T.o%moo+e0kciP`$(Q)X@RVAU;ROL*W%GiaXRLs$s&IbEh0omtVCo^s;WJ,Eob@phc$U(]kksnR+K>I7C,j+lZj\IJr]SmAp%'_cp%YJ2ZT.'=X-`A!g[(8uJC2i2RWf)FF=6o1n],=*63AkOG0ac]46P9h_n9U8B#Qn2B3@nOicNCd@<B@dPbo-H93)CBm:Y^AWh%U_rf/gFm7LV.*OD6S94AG)d9S$4rA/%7?Fu(dfnnQGu`nL8?UMafmUV>Ri<ETbIr/@jk!\1$#';BaghO=;jQ0)O>Q,<5TX4@G&Mo%)OAC)X+mH*PcA/+%(U+T)FLY4QGub$L8?VhV;)o.eZdZ!HSpOU2(X_1<t.eYa&U"q,1WoL8Mr&Y+]f*\@jja_dMR#PYV:f:%4mL4%e-nu[-qh**jI0Lk%.2;d%V*R+_pZhmA68k!19=nhRDTlq_pe"m:eHIr1$"4#BadiM/8QJ2$qjMI$d]N\@bC!sIDZUg_6>bL>R;oT%**:<uLbuLH-KV?dKNt&u%AAmQ8jg[B^=!R5.Bp/n;D9X2Te,;[:tF]^:jJS#0A.[2EO+DOPd`01qB0O1IW@e(28%?KEi#rrKNntf%]O#9+V'/f2d1FHhSd+YM0SJe[Z=pr]q'WUXo@&k3(qat^i.;DU0">le%U`-BKC,pW'u)AdJtL=7_\sZBY_Lts?Gio,&.O9j5t[sb%%7:LK]VXG5o1kYA(>[2Yd0Gl1EfiIbPbR><P$uofg/^NqN;hh#V76Sqm<!,\R;bHpmNr=\0_VY['."N.R$(Jr)2?:HeM]da>ZUFf%G&)krA/O/57:IRuQnhn\_pEIpb#)p*lKF+6SF/>n=,LG`c5tDo1jmG=/Z^'I(Y57iBj)b10_E6O,[?-2]eD8J"B)B=L=bp:AE558%2`tAIH=?S\^pB>Y@Jl:r@'.q1h6S^SY09af'9QZ>Mp'b'K:$QTS]_q]Dm1Wa[g&cJL49?n>UkK%ri8\H[;S_Q?E`8BT?DeT#&SB"%VWh<q%84h$2Cp-^[pbRrDSn#.\IGlUEZ:l9rNf.OV+$Tj11?-QYY<c=;O/as8BWh`0n("8/hN:,BM-ID0e-n*1e(b/-B6CeQUt[D%9=ZeBi\G5,VRT;<UTQ55G,Ec#)Ba0jJk95pNDWcD8RjU-A^VE<FdY'U>rO*id8ZH(@l-ih1$\$ZY=&&!N2F0[)PaGfP@g\mb;;WP%1'NlQ9H'\//ec6<Ls)SKlJaR-N4Nat)Pa8`PK%:%Eb!V,A^VDYRKF8DW(Y=0SLJ9@!edpS_aIbn`on#[8iK4<=sf2*=-cEf<3e5e%NJ=`4R\Q\bm85=U]FNXS%+8)`97t`jYgV$C\ZCC9W)gfHQaoEInm#mjL5&bJUb;;)#,uBhV8\aX@;1g8.5sf(-9"K=j4oU;2S#fT%m4LrB?!u%b;,d+N)l+qBPm43\IAK6pEa\#%68U5&dTVM4C"Do5Ge[(H_=Pg0mC9=cYoES_Sj9IF'q6i<]X="fG5eeQS'B;\G-a^9%b)WFne&lQ_ARF-8D!<H3%)&R(*JQg`g!-_P<qZmqb+>!(lrHtjg!(^h?J3T5m45eOQ@3='$g`.M7j:9(g#:.k/,RN:eM-cG?J3R?%l79KsfN7d(pr]1qYO#:g?eKFnC+K06mbM.$iRFqZq_"4L?.gfsh,ebff\=Pdj8?Qq>P:ZnfaVUFHNLa`=,\Xkl=hb1T(]Os>FX?h%DU!&L43e%IAOde5?.l?8g<0CMB`D?=n3Uu_-=s$^cB:b9SL#eoFl?()C?mERWNABo=\U^FB@dPb>:2;G_G#*oYd?Zl):j?".2=a?%_no)idBGH+;`$&M</H@+RHfB3Br7bD=IQ3lb0<m]-VQ<RA])qiFks:/5c#E#JC"a@f[3T*6T6R@eC4q#1Y$WcdS+dPYV]9W2_<5'%/ELKDl\<(_h5cs4\m]<M\o(UgTWT57OO+GPfPIOkTc4bZC<2.+RHh(d@A^UW=IQ4g)O=uMQ?"e3<Q!6Y]p`^TAu^cDV$/?rYQBJk%=Mn`DKalG61fI=0/Bh)F$qiCAP$h^p\n5%_WEDLO(=3J:*O'ILW$rUM-E:iiV=Eer=Uj&U;IMq>.o"MaOq&-_7(gr9Feu8u;-aS]%D7Gf=9+s0U\VZb4\VXK2kD!QVac4V_G<r[8<7oV(V5C)c_A3li1f7QE.ns!p""UPkWaTV9el">%Z_jY:q^$Zf.2isc;qDFNT;cU\%V9^tU_pW2_RUPFjQ"X8%,*O`8b(cb=e7HPGB:?,7iA5W,Yk4?poN(f^;`-+SVR7+cVCidQ51:2T9:r2AL5!t'28djTR[R[L1JQ9$%oU3:(=Sb]qRj]iP2NbEqM2$`%eCD@_@@EWnkqL@[mP&e.Y]Q80Af)Mb/f0hf:tH(jaLZMLW@N_"_pfF=dU=&O@HfIg`NXHO\mec&%9N*Ys*Mt8'Q4?j6dUDF(@HfI?afmlc\R\f'9O0D):LC(=Q4DBn$ql@iMMCd7Cjg>krhZ>tWB*pn_8M4M(6gdt]ItQEX!L+rUQeHR%P_>jNhBg>P<_J/S6n+O+/STEi8TL(B'<<Eb!2+$3"SPR;0M&(N2<+(k=:mXK&%hVj-+4.]9:i2#b1aIYeWP)UEpKH5"`#ChDbda(%J[LZ=.lWcWB<!t(8T8tJ&M$s4BjrF!KNid^Z!)02h(6a4M:Ib96[nL;A7DqlDHImlA7D\%_9DLO19ag-F_>I2^hUubm.*&="03^Y%nVl%^M7&L*:DBpA@(#'pMqbXM@^Y9nbGX`3$*9E!1pelM=0Pm!/e!g2<<^rG%d!uIJe!2r1@,+b&JHI8Oo<@AR:8?2?ejdX9//(G%,K7<[/1K_\3KbiR;6m$cB?<\!O&jgGo273H^TtkJrKSZbq^Y=jm&qt.fj@mfAq-)/Oo:QiXP$r`1;dj0B+:o,OqC_F,th>l94h9X%9@g=NQHZR:[^1_=9$-S'A=_8SOsSS\OsR/9V'sTA?R8?G^WOTc2!;&LeSF)EJ_C"`pYcoC*KWY!ZB)",5;kA0gqs\4ItNZr'!gn0%&V-](1:sDME9OqRK[cJ$JNXl8ZqEF\fV=BNXTG62:?\D]>CkVSc$7ZG,[Tt_At&t;2[Gc>4+n7g?<t\!8D2;F\NGXo>o(&5]-m:^%Ch(o)0LML"kZ(\L]Dr[E,7U+)H+[O+DY_-Y6(\kP`cqFU?%[)P0bNmSI%1^FBiU0tKeVEgnju]iJCCCf'7mWZ\Rq7m^\W`#rlpKg%rGR11qrnVUr:+tqrmrh'o)niie\:GB55sB)^](usqXG)Gr;DtsqX&3NoChl2?iTPLT71EAs4s%Aku$r"H2R\(Yl%'.&\%_QEf`18%JfUn1+fGICW=.8N4FMmWJ++0R3GqUXgXmQ?YHF,-CC"bI3Z>N0ZLd=\8Z/EU[*A&PAs3AjpOMU*"`O^R]fhH9l_NQ'[tGgOs---Z%6UhLka0t(F>?YYC:3*$R[*pI8[4D[d\1<MZF$0p#<ej%EI18IWfY!";h;N']"!XfUai<@3l0OtMiu/!&:`C#fm7L)?ZJkVl_1QeL%&jcJ%?kkS-h<1-U"$l.5#c^69.(ahfgT^ff<i\UY3-6'WI1F@Es(Dn!J2S[il>$[*!,A\*%dp/O,f88s9HFd<B2;j/D$\Yhg5nu@%I?g62*d#Ts%Q\FkO9g/N&;1AU]--ZW^q/uNU_`^Z",7<!)[)k9J8B-]=%`:XP/OD,AOQS:/>F"s7d@Jq_2_51WD?7(n3#D3+g^'N%=YDirXEO6u0[ce9'DC9?p5D/;3u-2LQCWDf$#GZn#XgQc63,8:!=SM1;EDj)HG-[h=Bk'O"MOEcS):@nJEp;Z!$Yg)OP<KV'[E8X%GT6/G\t4E.5!c+(HF`PLlIuP_5<>)n5&^hrB%!-+P8UTE"Z#&Fe%Dam#kUh<RWb5Q@o3u)9Y5<ENIS\X9.3ErDmc>AfZrf$/gN58%rdK7^"6TDjRuBLr3f,45XjOM\Rg3jpG`VAYGk9\j7%XqHrA+Hk<`8!IR0je1;?O(3IJV?&A<-J]P9)o/BUEGV%b(U<[Y`G'P=6&-%ac8Eu/!>Bh:*3CX3&dt&"kO2:qJ@D;LPm^M4)tA\-=2u=590`Far,9k\ar>&5%q;"4BVkd,?RnuQ2tCpB$Val32p\f"pA_,X2Vk3%Ss(/@[e-0X#i)Jn6-jd%J8-E?`ha)^#6MDr#(T(.59b2h*^61oR)K/K7*TuWk;\K<N%K=qDR[UVl%WJOMme2AjTPp;"qB7G1D0TR%4J)reY_[f+HbYW>h]SQK!$lo=eATP`hQZ)<f76;LRt(^rls0V\0H"iiB6Gsi1s@Y(+2G=TS5'@ee5!Zt4W_tY+J/;`&W;->i*:2&%4M9pd;<Wu9LmP>B`I7'@%/"Mbg>,:r2]'7q:Q/e#Aa#9Kk;EH78Gnm[PumL\c[cRDgF26CXo:Mm7'upQg/9H/gTnGJc`JGhl5"AI%?s^W,C6CtuJK6c\)&j9?_u'X\),m\HK;QVta!!]h@BSh%eL?-$D&7[[_iTD@HSa[$rH^fUYXohOBa]t@#:itoCiEe8Q7W^JNa%0H%p'L-52dXT5p])Y>'FYhfV@7/%n1a0k)pG:_R3+9<,rd.heV<M5*S>V\1&tM+(#]&Tc-L",/!MdqfETlVja-b4;IZ_6n7_]Di>?t*%d.$hCNuT)8qcl*]hue]dkeUDGO?(`i=[X2c$FLPo;-5DoIO/C1I='e45AR1+J1KJi:kIc/62":r!\->1D%$$6q`kJSbh7=>Y!N]F%I5g@DB)Z^6TS)J?S7r2sMUP>`,le^JbYpiXU&T9PTtZ-e9[M%TntWt=lt`I_YBgT)R6o09S2i`T?mell"V*,T"emI)PutEhic"U^%5oBq*L5cf9r`s4ZfV%R-33XW`m/["\nQuGd27s[2*Al7?:7E8p[Y"[Pm5^9%dJgk?ft->(eH._P</C^ekB4:FT'9u@p^dR:BZV23%5Dl`F!:\5o-B]M$_`QN*_:-`tPW#[q?3,mA,W'(<6nOT-oR,)/4b[^5TK5:JVY&BI,#I,9!;_b=7Yfi-^U)8_ILk.;ju=D$>i$4L%VToqbq;)nl_0iiIhjP4VEmg'a=Ji%"f=tAi2Q-M5ebu4_qi/gf4TWjT'E)m\])+X4GrpHj*W,qWSNO=cFGGo47^#0q&997@$=$7S%W.;6H'0:3'Y[2<qG@:,Y,3Z^+PQ(FdEFCQ,0;[@Zjq5q=,iGf+@tJqZ]XPNNbQm-d"ipY7V"H?r[kGJZ=(mrCkkj[VqP6^Z5Q2%2%d-O</0"QI'eXOV"Zeeo;mZ@ooOB+q\'.7*1.rmn]%WPV6F+Vm[_D/HS-'aHAl\N=9.=hnHa@$Kod-$a@H[WY)l97l8Jh(DD9(&hQ%GQ;^<@>?h0"*N6Jp,eFY"JG)KE>HW]V,casaS2Y6%O)5GUo)Bt#!%/(3<HQT+(m#9XkbE,q=HjhcS,&r1[jeIK?am-b?*tPHnE]7%O&Z?s**t[83'\R]?2gp:!q9@rkXjl+];F&(JL&]M!BQSGi=<M3MbBH<]G:NodbF)WJ)6d7i.Nh%>C(.CKK0_I,6M`aW;m4`9B^(0%:@fDOG_6jO10SNs`s%!%R=MhsAda;1TsEdr-89+okEB^b?<Sc$U%\a77CPT^B4VU-JQI7_1DJt:%>?fC6Xc"/j412*5`[Q.gh^Nt%H(QecL])o7U=@bK+JZCAQ+_A\JcR:GdjWaY`P>IZ3WC,:X=/LiM,S^maP6$6qs8:S3#R[Ri@r;eX3[]2K`N7$E+%"R$2`qNi']Wi%a2rb<FR;Yr_Le0Tk3N,R@:F/q=^:nm8]9_13ZlorM'HMaL7MNfYfL+GpJ3TjUG!k:301e4@f7IU@Lof)1'+@[QKX6`$nEC7k_k94%)u3E#?Q?#l(WYfV#c^-#.biEDK35]U=;qm:/&'_RQfLgaF7B?1_s@Z$'q(/j\Pi$=F6+^81*R3n=..L,XMF>oQ6"mS)%hYHLc?*^%4Vs^<'3M75<^pW&]N5gmnc3Wq,"BM%3[0Tt[l4Cg!Rt?T#enn&ENG2A>j65\ID%dE"q>GmgH'[DC_e[pC6F6VH/@t9A2\5t%6C2B%I\mH;egTQe5h<9]_]1/r0S_b3<rQ\nbhdu?%M94u5`blD`5AZhQPu^+@6DjO&"<qiRh61#$ct(H*bM`g]imPBVXQW>`DA30*>m!;%:?[SQ#if>(?m7;cnM"1KNq*#l5U@HeX(0)_5"$7/nVER9__:?MgZt%%fb(JLktm7nfJFu72Bj>'[?j?NliC?rJg)E4J=q!$&[=oN%p5%_ln)BPT')Gi"BY_3dLtE\,bX=j8%]VZ\6u3>C<f)XWSK_b[Vj]\g2'O7,5RD<sR0p_c;h2-UldLn[^K@+]Uj.rVc(0,),pG74%_jqf*+I\IC:\(TQLtDe2Vf"o@VX??27*L2p&M%E0&Y$oMNel>X&V]n6fMj>I7)TL!UsR"df"?8M2'Op`NRe^SS)RoJLtE\@@Z-&0%"!o-latVmc!;p(*^nJJ1DD4AB((p0#6q#6<PMrBdH:Ghh?p$0"&[@'5,3DFQDRDe42T7f<Dl1u_-o+d>&c8eh2%R^AL==$oN/6Fu%90hk6\+HL@+D(_11PQ.QCe,Xp6?_=`,uo<b`3kBpL-T=K!YA4bGh=jMoF_Y'\p`SsYc/Rq)%Uea#/k7*`k))i%7-^WNJPi;8sU>,%Zg5!q;BoY2e;.3WKij\tbOrfJ6l71_(lh9-&XsS<YDe:^YWjof2XQ.D+b:fAW@]D`@e4&FTn^MJQ,a>'];G"&4s=nK,,BRR)%rDd%3Nb+_k"#r<3>Nbm"6NWN@Kr?tKuE=degD%=Z58pfp+mt+]lrcp,\ET_`_M3*.Y*VJ"*Ihh1''WmYlXanDifkn+Yb(C#`8B0A5(4f%-=UEg=C+_?`9\6-XbObN$J>aNW!J75oMt&=o9T=-0(i^a8G[+SVB#I#;`=t$VOXg0-F\O*/ZOGFb8MP@GugR6TaQJ?;oddBnYnTH%I-M1VT6gFZ?-f^),o9Ptp*!_ri_b2WGl+-'0_^kT$h>(uhk!tL+NU!?[<D0!m[5q?FcS.Zj3W.*0':s>\(XLc4<3XA`59BbIOrI0%VF015i_Y].jXBotNPGG>3HCsEmQLRM16)MGb.k\dV4Yl'I[jY4MaQ<on<P.$D^HhS%Be\f56f`bXMkH%cC*O,#L]Fi7GM;mPm!0Z%$Kt;Q\l[mnI=@s#f9cCq]^"@li`CWB`aQ-jn7=gje;\YJ],`;KodJj,F/oJBK)fYi#6Ye9XQ>QB(Jd)^S24C0A]cO]R.9`BDm-A?%H/A5,ZoGhuQcHQ0jZbs&6.;L2075dJoCfS"a2t9O?*j<Z-MZ\]eWS-b&M,o-I4`NKlj/BP%JCMN*j6-)p\n(>qfdPfSEZp*,R^ta%8PXisNqL])Wt/iPL7Da/?tW\`!NsX?.bOCJ#,YKLcDuh^?2P&R<Y"2$1qXteBH)],\HOuYkZo6R\?og]QE^+DiBCSc:6P:ZITYi\%.D5o'l@7I)]7Qio3,%%jQ3[C%QSLte^tKH!)rA;ER(%52o0C@92=>k^"DeBK[Z8E`dkLK:,!He<\BDYXd]=G-M@I,KlUt]Ue:,b<%6>n1>p;%I@V"NYS%n[/`GXsGTGk$0BeB<"bbnekBP@A848/g@Ma9^893)POSl'<C)'sFPA<n]SiG2j'8mp;+[^THPU@3B>NGWm).%fR(YXe\32bAZTDi3+AY%;&LgeGBDb3anPSl.?P$cids6CJQV'jj<mg/aW1;Dl3RahXuJ&gFfP%(jK/iNA*n^BQPGqF=+NW%\.4O/%AT/^;^<AY:6&onI+f&0kd)Hd,XCicu5^D#%%CQ_+YkO/DpV%e$P&I*+#dg9Ke4.H-(0thC/UKj.OsIDcfdVqc#"IAPARL1uJJ$Ji%`ID#&em8qB+LH\3<X35l\$^<<orf9a1m9gMK=BU@)O^Qc=b@U,D-Vb-GDn8YMQ?jpBC_(ZhpRX`B')bd;DL,:Bc&MMEHK,&\tj8(%O]fX?#1b.h[Sru2MU*$Umg99+0pBG8F-Yr/0$e#F]FU.+/Vd,TSM\)#[H:(U/)@K?_.gAAcbBF5dqj=gf>^XNE=JIBbNAZl4(.Ml%_g6"lgnle%Uq_IHf?b(lI:L+U/1rIOXs`q^s3l.Vb7ugm([^.`E]X0Zai"q,gi,l%$[:;_QR)N5U_`!>!kJ?Q$lEf8A>;/amq>bC%%E:h,hMPH99*KoJ2+3U^"d<IAXI]m^H56TIofRT8;5;?6XaD\+4"pfI%(R_5A*fX$L?*n>a$p>aG>$U4$3bCoXTQ&FJ-dCYgn$C^%rj'&QjJ.aW[9t_-qGadKk%/Y(ZkFB&f"]eH$NluUZa,LE%<W1YTJ(bL_LrE;D]Yar0!\,%d\_O#a:Dj%@9.o>bFhS%h2p((]kI4i%I%rW)3L&?+0P(/tSN/tKF3kq:aCA9rG<@L1));bWFbFm74J<N7A%mfO_jq[$<0d,4a"UHFK_mllCmOH%O&Ke1Pc__kI3)JJEt8WL%P:"F4Xs\bdQ.+27%=>1O>;$]sZUu,k\$c8(TU#Un?e=gV1Co?SBqsB=IU!JiSXf$Lf[SPn\=jthiGY:FXS+^!gn;OD+C?$tp#\gj%XnD2F[n8a%>`V.oftGdpg2H?&2nra;9K/jAmF1ZMnpU-!?JHL?!KL/'I-#t_;+b+!-C)%_O]saZ&fM.7bHQCiA25_6f!'XAf#*Nh%XLJgcohpP&oc=BZLH73a_ggj:"T_KrM(G2d7mdqV"Ei,p!C)DLL)"E2$fbPY[]p4fe3J!+hMs.ZJ0ns"DVPk6c[d>+B&7r+Zpn+*%k<$'8S?*"L]S>@%73MN!p(oAn?e']Ae!p!(L<O4;),*baq$$*IAu@2_nSPJH:Ycd[^$asp"(:CS7BNH"KFKr^QAFuTgJ]7#Cj0ZF%%SR$mp_==s`[p/);tunNU]WaSD.8Un@(rSeLu&1nYU;QieWM,`\R+PZD3C_cAE-qJg"Y/g=Dd@.s,#pda2`EL#nH-QY8pQu1CP>'%p_^I-CaP!Na)Kp(+:h]G*.EPS[Qsua]gGoR$sAj"3m?96f0rfa&U*t6mPQ`q8(PkNeaf&j(]?Ne`&1f(S\)VdAQaOqqE8>)QnB'_%0&_QOb\J`Mat1YdM*A+B^@G1t','.O2/<[$7E#g,H,Auo8LQ,.Z7h`/<#KmJp?,^(%`WhK[Z`q7iJG\bJgRjE/PWqR$%7aM8%3).%T5gLhn[D;QCQ;9bm..A_1se5X*4,'_*,1cD!u&0eBc7.3Z1+'*-Ff;`_[*K1EJl0$>bXfL8cm'="a!'q.k?JM5/5Y&#B0HqIXc1m%UNFQ.%On3$qBl+'R!nP,J1JrsE*?1.0hXYVs1L-m'g_bPAFBmeh.%*5?#F#hj0%I5M+1di$6:%$SOfC0md9\$5;**-pYXdm<b`ma%@%RseUj]MsFlBb`+='HKr>nM8,W/9N3ekn%*\SB!-&\]L&L[0aLo?ID-6e"q+?#M29=CYEqHt=YQsu!`PFcN2KSY\pZ[spR64Qgg%08rKrT@>O:+'qh\bK:3eaCiDbWK0jF)&VNolWY/n4VNW--8e>blpqThSs=Chfq:BT"VY<BBm@j`kQ7AEd8/&ToK;e1BnGes?A6@g%PY$*\#Z?k0UV)DeL*4U;^$Oun<&d.iM>,qE7d=4B<`(2$7$L7P6^gKDaU)SPW/Zu5D)d23]`kS72Zu'8g=tq>b&/`[Z6"k9UZXn9%>(109*%4P"Ra_nr-5B5@7]:#?+t3S?/3F&>6/Ln*"ERITIJgAnRs.m)K,@k!Zc(bLq@a01V9d,Ne.=>^22n?@=d,5:r*_m\<*C!K%8ZggEdqm+:cS)C*`10dr-E*-NaM]a,cUFGT&@!St9I*,>AAj+"7OAD*9"T[?WO+j<=V0+iqEYAKm&W!-4S>TXPY.R+5cGnN:hggQ%PY+Xo;"BAFHW"QTcmL[ZOeh[tPYT&P$\"6&&L`SHB]L1\#I]`P7+feKf@:IMH,65.OhiVkVbo3[UB\(U/L1rs8dtldOs-__b.sg+%"n5j:rC&34*Tm+<:\<Sn();["W?B$Se1g0Mi9\Y;'dmVc!6/CU*RjqOY]mJT`14)U:9n,RKSWN?a6?Y*pp/Z>c>;@h(&uakP/AZ`%7:k)SGhBR\ZJ`YnI'](X8FW1c;T&P<[?=tX:#bmHf_\^s0d1'%@;M#L4fFX'oos"jW&Y;!]2HP*?3uqB[ZHp>if:Ar<g<e\etO0Y%"O=4Sr`+uGk`a*/MRaKB97%WuCT0_#04#7=/2`B+\pU**QI'?DUqB.(ACq7(ST?BJY#EbM!l;=p0^9`_7FjGr;DMW!UQ@"rBc+$W%LpF$U\7ELl5f4`_QS9_q#)I:+h`G1HS4fAW(D/VthnEln=I4Q#W(T)+Z!uTliE7ph)F_br"O%*29-"j5Ynf2b,S^KhjA12kVJNo8%fe2#&TJ9SQFbr,l[_\,'`R70M.7;+`4X'Di@:+U,bMFa\!eK?/"%^5W0W[=6g,(*>C1K"P!V6gk/)`q-0+fmHT@l'>,%*a?d3X5f%):Xt\U5l#>7dWff0I7J[9HA]l9goVD22#[Si*eZahiF]Wkb.u<CL.s*BW*]PYm^m4^)X^f8FejiJ:`T;WF2d42Jq1O*PW7>@G<%J%6I7I'Qp;'*9:_;U!;R7LF;dJq6GpT%K\DJ167DCo?QL=AVX<JCN2tM3.ChG"%tGhc,I&u.UK7A/L/g!#I0;=&#+S3]8F/ljLdQNL%RljIh=i*aDW6M&G9&h*gST6eR(R$#LD3Bha"+KY8SU+g=`7jICCnWp=M&C\7fFkDV3O]W_CO6*ms-Xu/Hm`X)!eEU/6^I'6B*_Y7%9riS/j(>3+]cDBd!6qhZPM%V1!a;G5[d6!X`Qc=qU/5C.5%3Xtp@4qkHJR=?c"PamI7XQ9L@+mk7F;8!,j>jdgB._=V@&1KaInA!%iZ"7URMs1RN?K*=!mrh*JQc7j20%Y;N\?*c$!S2\U4g?4K20REM!1:8#Z$S^7pGp7j,?]#e1O-[)fk^g>HjT48CSp=VXhCXD(=o[%k,-^1CjPIX"*mSAo1NM1ZMlm.Un.-PYQb]]1ub2!Na.ciq7X.o$r.hQNnM$;A4o1LkunZ;T?6,(blY/"+`]nJ0Bo4qQ^]nI%hWeA%jbsR"-U>/>V/R%lE[ZR)rhb:'cDb4#pYMi_\m=N\$UUc>WaKp`/Yu'DID8%A(Ndh-QJ&+A:pE'pI\!,)firLlb!\Mb3]1`CI`,Ai%$$K2&,c7>X4-^*jlqR]lI]%q:c3:L,Np';0-)2`26LS@.#!7?$L\0Bo]3%<^6BlCbYWEki5,]L]nolhC^<DV\*D6PJf2KN215@,D%N;McI\E;H`(">ea'AZU)FQ.T<_?tlQ0fPAS(5u%#[0Xo&FSpH&op7Bm;0tUIqp_i`CFfT1@*/B>3o`C_EeOVD5"H?_aH^VXlT2Mn%XG=75Q>Pf7.Yq"Z'o;3NV&o.gQ)=cjPeFI;NM;[!XIQ+.s#V=a#[*fm*RWm0pNl_p>sC&eKiS"NFt@-)%?`Abl<8fr4i'WB8)]54%7uDC;8o:`(,snPbAH*#M-WI'9KMU]L_$X0\'r@Y`ie;](]=6B.rk-mKR;Eb!]-N.]R!>/?,!5JETdTZ0%&7uS/JUh+,U=e4&ke7`%Jr/?`+`^Y1)]X,RD6Kc;M40)#;q,SII,[<oCFZ<X1(Z@\T^cEXdfMDFon"\@MP3-P4CR`?3aY`O()j6)"D(QM(p?]Q]M##GaGait%]R!,qZ1j982l^7A"-`#,WEYS6>r1PN,LkgW%12/-h;t/l#85fh%?%+#a5$bW`q-;7M4Q0;kqNPhdDlF<3:Kd2)HGKiL9G!ZNG=h-%8Fum>#"pn/khu'fqt,tXdRIf(,C)dOX3]sj%>^eAkf=egU\Q3M:bjT\Zr*Z472o6gTT*^=mVuaejP$qd<cCNnp&o)/_f.K7,;eTC%rJP+JTr1a=6U,4CC/Q7SjNLI)$0nID.1#@8-RXJfcr75?Q$*=X<,$dYZ62pdp*>ajc3j9Dd[t!0.Xc2kQM4^IA<1KXIb''ip*`'S%WM?abaW4A8O[h83/5Y"#aW?]LPOq^40_nB1E[Qqu82*Rlm%Rk1#KF<IEaY%uWjF9IUtRoqQNaq&p$.?XUp@<p,$"J<,Z:J^73^7n%O[q>\4HQR7,Z=WG4nm68d@U5Z@,d8_#Y:c>D3lMG)&#[ZWJh-EQ8-45Lfe32r""hp3gEYKd[Wt1+hG!^0X42<9Fu#<[+Z@Z8iEXW%#s+VVf&M-U%2#:5_6,oc+=-00;@sO87]H)3;+bCjYUl=d!W3d4pe!ig>c"(EpDObDA6u6W*%%piqIRGo2/5t7fqgGRR.O:6$9G^s%7KpaOPu4TTQV)n-PS#V*)-;rClVTrF9P%2M3MnP]Qm>TJ'm,b@N7'_?<(7%TB.B['[8\@%H$2ST;]XnT^H@PabRkR`\uCVq3o<p$%3YG1&+;h!p#0Np$$;Qr:Ni8Tq,q<")0e2C_;]-<Deu=T83pfm9"i3:.f;N'i:DGFJV_Tac<(\#CFLJ*+$7>dO7Km!FKNXhUW?EIY%C7#j:1+MMTb,A^VaocOh%3?7+19$3>2Iq7c$re,$X(;@c'^/-(PEQ=h=[.iPIb;`j%u4580W.F5VKu0J["efN6Zr.-T^tuk=:dl"%HOU?0'ii)?MlK(Q$/6#q;.WkVl)6?ck_)nQ'QgX[#RVn'<<`VB+i[^VnHBLL<PcUEPsI_!R`_:21/_[[0M?]$cP`]Ci\?RI?2%WW%Jkg9L6,?\t>7V'monYimqL"Q=0E_QCO",d6c:8T]5L:HWf+YC.O#SE:+WHV26)U-nTO<p[($d&9Gu2l@W%ocgFAs+l"<Z0"K7Zih%PsN5sUro@'ZV*_`YQ9N.(+6oM889SD^e3.>rT.ZaGk@Y:Ngg7W2+BGOR)@uN60G,fTO<j[AP>pq;S(r]YPH9-St7J1]X<68E$-$u%)E&f@PJI9tW(R)oP>i8BBW;CT6ra[Xl.kjfJ<NZ<E$3i6+uk[#<=p4lhmqqJ"%7N:%1t[%3:!1Z/5ArCPtlgK<])#*PmR`HWi4ZT%WuA3s)jG23%]G+fT'BG7DtE^5AABXm1,=s@<>cZFm])3Sj=e]tKGd$#$*5$\D=o<m7p(pV]hZ&/.l*2C<pA"U/=lc8A6"_!3\&e/%'qVKu6ri>o6"ZC2r@B8@IobVqH(%)*mn8p\U=mjGp\)E2s"*,[6`+=P%lgOg]&K9c.NS4SCR&f9/EO$a-akKq0hi%QUt)F.E%<B/%(Z\Vn<Dfd/%?<HPn+ZOl49)Ab=-a^"Yj^d\_<ZM$fZus)Ku=TD%`E9#5]U"9p4J%p,L#DRSne+4IOiSek,C04XdK$X#h"Hq1Ig)m%!X-,8_o.+:fYc(h?SL80G"/<[Lio[?DBi3k$r-sLa]!IiYZmB)"Zo]$k(J+RHUlj6/\M-^P1EPU3'l[PLhDq+$>G+H=at\p)JAH=%f`=88mCN]o.keHuT!/Bt>Q2bG7'@<CI7+fK%gN`B&<F0&)J<iNT_AZT>%N,s9<+65!Lc6LQUGT]3q#8Ug01C)]TML?.n<0&$*pt5%a[Fk?bM)s8-&&fh*5T9S%*F'/ZRYo'2QMT-?%Tk^bpmK1S^gkt,O);(<QSiQU",uI*<7<a]R3U[=jf01W0>@2f.%7aDo<0a(]p5M%WZXT=eM%2oXX5"gSWF0p1mm>:<*%\R@'[qPa6sY.hFe?732cDtlGP]Z1W<j(3a=dJ%3^d4JW.WaN]JX6Z7:nC,-,N[n5r\HVrn+(%#:s3=8Z^(-3/LWQ'E;'S[RdJ,&gUKe",fG_&lDMk+UJd^Cf>:TA[CE@$)m+l6ss$k-jZnH:QiPoFS8H5jG&K-WaMR*.MXsdD*Dja%pod%/ke08-*\+rT"lRG#DuW]@X=u%=W1$2Yn!R[[p&3:M]CI3K&ID#?=CG1eF"dYGUnXq[gM5K.'3I,&eP[!@#cr!+BYQC7^fQLA%:OHq%Yi7eijl(a*Wmi9qX+lGGWaI$TiZ4l:@lr<E])Hjb:-AJm;<hJpTe;b^SDG=gTWZ/(1UmY`0/)YegZoLPR9R]8`g:)96>mCu%mYSI]Dfpm(#TKl4A['OE\B5pg8eG.`L))mF:.^0*I.1)]EE/G][8\8^<'s&Y<A5"d_4[4YNra7N:%O1D^ne-M7C#RV8-l9TY20Ig%QDp@iFodSJ5XP7Xb:0X#<$2m<YD?)8.u),(T/ZR.>SacN]@ff]=5iQnpro8AWq;k7WuBtX.(+gJ7PqG]MEZt8\?'S0ZTFoESJo0i%27K-O8+JRn?_$IiANneki'JR[.X^l9?-u_nNa5%@?e$it]38e6K=k]9NBGddD7_b9]R9H=*ppMQ'^dAW50-la;KJR[.S0&12,*pJ%]F:Yd`(U6EP=#tdBU)"kQ`[aUHApXq6,#[5T%ct,mdj'pYi;c79sc;`aLtsP#pFk"_*h[bg6p@_g<LhF!p1Sa<l@WS)(2Z*4Xb3F%6"#Bs7]X&5A5:lAnWCSn_=%'7M'`G-Jd$d,`t6Qj6k!*]TOA'0/)CJ5%u*B@^^@\4^J[p-U$8AC$N_h`5eAPk'fll.XDC-E2m!m=%0eb:`*ScJ&$gAkpVSWNumd3YUYQD7h;(5+CGWf]Dl3J9/)?q&uX,+k:9-/15BIkN`'lQ6m<XSpb+:*'N3>.E@YBR0fg[>DWMSZ<7%h6"jJ%IqEK?sp3*Rh1<qDCS"A6Pg/3Zo#e$V+q6BS\PSV1MPtSJJEnZqGSTB_KpjMR1i]].Qb"8P/%DAP8IS/`=VD"'cC+jP//WW%PZB8qEBbZnZ"b-?G3jM7]'@r8=q?e9$J5NE\ellS;K!I8`*3Z?W@8`9/Bu@ekK(#Z#tmds?-l]eme38b7Kcddcr`0L;n1(E$k2Z5%Zc\uBiA=R=#o]jr3K7$ka@]qJI+HS+7D![qS5nqI%@_e:=Q)k3>\!S&bESuB<t,b&<Pa9n$CAlnT74dt5*L9jL5:J?Ib=dY`[W.:%=I#o*@eGE@HZ,.QpPt*LWaXVmG:A8sN,#-4Z/I\)LaE_`YT2\2/3"g604T5pA(?\*2H@SfXgZ30O!0Wf^!=)_G5+;ekIQj&<qrJQ%oACJ<2l;g!alAg\>"A[VJ#_!cL8seu-aA70cDg/A9`8eQ;G.#cUk$Nq<GI@+5JPh)#OhMW^4*EHppE,A<J-AN7=L/aH-IJ1_?.48%gQt6:"W!:F2DCDBHqc+)C)Qh#5k[C(e,:^mbN3>64=`Cm8rKi]MR(d1DZik>p@e?k57`P"G-3s*%L_FO](M>U)5%('2ilPkE]s,S%JLK?L2%:.?7DUNPk4.OO@X#9i5e>][m5De]1Qf`(NlQTb1"%Uq.#YnQF*AI?DL1#"i%[/!A>00Z]oQSUA6XbdU6?(Gp:/.lA`dVU%[6.2dD"mU)Nje!+o`7Fg$V,<V:>9C-#4ni3!\;*Kbp:ClZGQ4i0TZqc!n47pV[44D_V`29gIb`j]#@2B+.k]XlXERMdOt#E[T*_i%%Gr+2&%OIuG:9U5#e'RppcI4R8g+a)md/hH=Z`o1lHR-2LnW\Dd;.YI-D,c*)*#6b;^DZWZ\0N,p^LH2E<)Jh_Y>F?kmZ7JlZbbi%h-1rQ@_I<G:NYD"[V#](k3E"sL&?m5jui9\.))G7k&\DW`piEHb<3#hd/07TKNBm'GP'"mI+mtt]W%MS7rDEOn?L0pI<@G'Cbl)j%6]c"uaM[5SLn#<JiR_BE,Ojou%7R/Mmm?b$r!a8m!1`>LMtmaJ.$+<KT@g,'G[G^Fc+GIMq6BanM*A3Y*f;*%0.4m%HeohdA=H0R%6AgCr$MG^E^)s9PJkVd&q7FH#l>HsF!N>lXomNsOg1Z8_@=iSK:>TZm"^DI_o_/6[,NajHa:`E,cu+Gkjr#k+D"f8o\")dc3$JL0%fpL;e`qj47YPGL50h2T)BXpcS+"Y(5_#OAR9>%4.eh;OOGMiGgrQARHk&9Z@J+N?*J,&Q30>IJE?iKh]J,8_[J,&t,rPW8r1W_;V%P.k)oDnl=%<;*N^h<f^lIs]4$q"-9BhlQH7rUA,a\mN@8.EAoUrq;,>Ier#='qp!1O1+Z@Xgt_Z)2;tufP(aSm']PSDT"F?oU,R2%IE-N<SMuPWfT$"^gJO:-mDpcoaY3?46R:D-qiP<see%^UWCctaH_-P?<XS^9)F!UApEN&4%V[jW`2pQ&B$a,XLbqM4kD!i>Wt_%#%6a.F3;Dt:N$C_Wh41?F2Hg]WhpEFAudc=mk1'FSuYnmS,HVl5f?)I:3+RiNu]a1BBd@AjI0Inb4>O+5ZBmgnM_.siu0/<rrQe5jX%)4!;=&a!I[$k$&$7>?=M-T7_bb&5^$@66eM[QqfTK]hk.>$f5Z0AFS8a:K4XfSm7;M:9!QD5[1tf<]?aL5f]XF#,QSXA?)=)00Mg%CbN*.6p)[e,#5[G2C%kg>dh3]@B'b9_ROcP2(1@-:AEp'Rh<@AP=CMu.-HG*7s-T_G19,m>=%B6qLgE^!@lh90OMhRS0mg=`HK2O%^!<o(D5ZntN`ih9_pI9]iSYJ^4eo$m*h1H;qiS!ka@2't.?Lh[ALZN"np.qqTq*I1HX2!uD+f1k8`NuFZ:;1t[KF0NnEn,b>0Zn!%`3*Y1Lc"M#;A!FP^3s':qom9k\L]JacUd2FHL,U3NF]X7H2PtMY&VXL;A\e-j,@NXpkGnjVk1q5^4VmuX.#(SUQD=UQ[0-J"DLY1%Y'_aR`,rB`Sd,hrCXAqG$G\VKNiHcC\TJ=rbtlu--J6\-%0;uRXd6PKMRILf+[`-bas77.!a%3MWIsVd+Ii>M.D6H)e:C?@YhcH%%i#FO3^)m(=@'Vs[D0CgtT)rG>@f/kJ>MO@CKd3H<U2qb#?:(LTFu2ludf;3-G@&p#S1HZ/Rk^>apBZ]_BFAJa^,)p*)R;SniJp0=%9CM6"@mAWAcB_Ij"44DBnepUg+oEAKb*Q"h[-)GpA1rH`#1$e@\\+!bW8;j`mGc7PEEjSRGVIr*:?[-!fZuGsPifC5SPS,#1i,*Z%"sCt.F-=Ys)5)W]E8F>tQ4f7Rd_'L_Jldhn:G6bu9ohfRqCqLd4;jd,VriG^A\mEdb_=/gq^8sh%O&6s5%JjoBY*!C4fFS0nbp@+%a\pa-3%2N-`TCAK;_aUCiSm*iOPb_k[s6_SGUlQt`hA#A'js+(M1q:m3au/B40iI(8:Io:'$`H!70.To$<_NX\cD8B8*jltaJru(%H%=mo[e3@cl6_,TYNt\mD,5;$U*2_h\immpJg\f%*h8VAj4P"!)_B_WCb1Jj`qEr@PBAV#LMot>PjPH7de8>MP6LemH\.5I5A][^%Yj3mDj82cS8Gc>4S/0+F$MtJTNm6&I-Q7:-;>)A>FRYCec@^RtK;]rPJi%;]d])W5!CN13G40Qpath\??n<3XGO/&2KBHP7-Cel0%1%N!ap8^W2@W)ULlqO=@G+I3nJO#g1lqKUaNng)M8]u;?f#1<eO$3Vt*1(5P_O8M$X('Pol,4)"*T?\4L1-L-XU1mK@s![3.?Lhm%Pu?>)Gl$._gm[^p'#g12)<C:GXU/Ve0&:MB24p_h'Q$Q(2XPS8XU3#p39mk.iRDBCa4Qi"C-%]fDG<)Nm:l^2-HqMI)S%`!gQ1"8%GVD>'\K4rgL<kkhYr-OXO/$SeF=>dRTrk<<(2Zcg:ANJ*V0n=ijgKn&A>/%[@p%"i3D$jpHP=0#D6J:"c6Q*:N]dRoQQ>B_76&?l%=d`:D0KQ/?2rRSTT/65=5g%s59$&(fO42s=B(!!C9sFp&gXc#LR\2ihgLi`pXFV(]6;#kFjn;\@UrVN&$H,]`O;3@]l\O'!/?>J/%3gdZra>/df,2;.9\QrH<fZG^%d$ZW!4@>pmA_shK#\Ya`]5cKn`\?G10/Y>;"#aOBorVYrAN=rk>U"3%!4F:C(75&P^u-n=(:Nep%oijf/@m,[9Qs:c`a"a2Y/*+LR9@Pg!n&g<fmrOktM*kJ,(aWZL!FjpggPFUVf'JY?b6L7;]^0XaNm)LuhNNs?VaO(r@J7&?^g%N;%4AG9"&G6@TY$&o5pK\'$&$;1Ql9;/eBY#c$,P_n`"2di'[/Ji0EAoGn'$*$\*R=8<,HM9^Lg-j"g\Eq$di,NaMmji`c*<`I6qaLq%CR6@>c?KVE2t$(WpS#+W_Hob!+0q8Wh96GccBj49co^.*m;cUXC$)^@kcC!.HnX^XeMU!:D^)DhUKmBt%:+CL:L;QV_?!%[00]s=%[BrGD:p^aFObi>2nB2d2C_M;Pm'8fjbAG,Zl#VK`A`HM)L5[k]5,TH78a)fleq>*sQm.Ia1UJ&#d@>e/P,6B?_TN[)Cf>Il/t,,O%AA`=1$T1Xk>aSn@^rZf!BI,][XYZ(ur,03/X-_Nk5le=Ii"a14TV^CF0Vkh:kAB8]68L3BNNQI`@rG$0Vhkim/du5ng>Y#p[LX>.%R@#.:3Z)i&G6'=/XKTur9ZiD,hJn"]`bP$!,:5+Ib^p['"-b>EJiq;emi$qUH9i&+H'IJ4WDVm(3`;\+Tn=%po`_g1D]F20bpbY0%mjTCWc567-*9.sFYP8gkQT'sJV=m1("K`Q%78(mo]=/SmSS*B<5b`$$19]G4<!0a!0U,*:76Jm#lo9='KY;R<j52P[,_ISKd1_s=%V8%PnI4tafD/*8fZFM^W7_,()^N.-JC36O7>Za@THJ&i4RGR5e#kJ($=`.?#TlfiW3T<;a,m4P_ZuM0!MMqSoR^7s4&KHmf.\#PP%HcNAI2[%MFG/LR2U(,#W0nI$5$S;t#r6Q8H#D+X<5uqS.f4Fn_WV_I.<nk-FQ..fJ(M?2/3O)_f'C:t'a"IgPLepIUd#@Br4b-Hl%Fo=2"Zfq/.pXXq4gNN;<fbd=3'q%aWf>P_si,<Fa6`@]B`qXC<@`#&WKX@ur<lZP9(qmYqk&Wh#WiZXJN)#_EZ.ije<Q@R")]N5Q%FlJ`&U#^+UKlO;#*ueX*D!]%/IFY#.bQr(,IOq6)cJUS>;A17Pj_=9$\$;>B3c/`K2D']8*4nB\BX7cnmb8!05-Mo#W+rD[J\a1O%g\qYMX-p-a2YZ4:pA:[mI[kSjE]UHHh:_nl+BM9#Xun&K]hbW#hA9f5[SSN1[ol`i@?/7M2CJVD#0sALe&ldQL(%Fq"1,eB^PlG6%2$CQ_kQ7-)[Wj@Xq><<^mqMsUs0@S)]`.UVll:c`=;USckJDZB?6\ItK5KOFFdampb!Pb:^])Bn'bUM/__B`:qmm=n]6ZntSOG7a%HG=.PS+NEU]-U4b@*W)kV[;<d]DWA`>HtAH.3WG)6S9fh(MFa=F27`h.3mTC"a4$@X<F;k>`jbQ-\FdcU6+0=@#H1L:^n0@FU.[l%b`GjP!"4]DjB/VQq.I2\`J7T$jrguS3Xq"s@o=nj5O:*U!uRu>e87.+A)FGHS.m02Wj#up;R2aqL'"o^MZ0!?=!Dr3:4oqgDTDi=%(Od7Fgf`*::'/-3]64<nBVDl5W;XCNqK`Wijd^c(#Y[17J`1]aGrmVY]\C9ION@\*A.j,03_s#HGUd:(2*h'I%ck-[3/8'/Ip"-u%]35m815%ZTfd]Xp>L2.1=@=&Z(Tb[=X+h`M+qXbASo]<0jbVXs$';$d@7I8MVbQj-F"?XTjQSljk2a%iFp'Rd6gq']HtrH-ANb."%J(R72pAJ7L.8[Xle6(;c@""MD==Mmtc@+M+aFP@OQ?OV18sTWtaE:4$/"JbjIT+Dm:593E,mPlfIUf8gU4M:3i2'-2f&gPPTH`=4%jmee,A_8!VrV+d25Ng2Q#9=tDeI.LVJM:ml[?t_18H3c+W!'Dq&!U;)Fbr9ZhIIC.LkROrLHh8o[L6b^0Y+;&ZHGG(aLlsEa1Ze[%i!):t>@H0&a:p&*TgX;$.i<Fi\r.,H?61,,Ym&meDi)R2AZJ<MAb;(c8=m$.dcFOQU&q26BQ=*[+lMK1J#B'ci'fWtS=CJ?n5/jO%'bqj7]<3Ag]+a_*`)=$ZWBbY'@4JS+Y?!?q4])%C;hq,,Qk/O.V6g*PeiHjLi^rLKoB*5OG4'W,/p324EA9#H:ZU;jXo)e^SZfJE%HiGA'iEP8oBa3R,'E2nW-Q%oA;&jsu3+7N-lM>E*-_.Ur5Pk=3#q+ZNh`OOg!>i\:C@0CO>[F5p5]Hk\1q0::&l$/)*MZ=[V$;&u%,FVGjLaEg0d0.sP%s8(.K\b$?>;UnY#4%i-KMiJY#n<9`,/%JP07\E%&P^'+.m"MW1]]2DDWoINEgg5ZRK19$h'JN*rk3Y%#FO^P%!Un0aUe*Vhq\dcaN!\:Y),1*LJHneJda]1?ni\asck&VZ)MVoll!)+5;"n/R$gNrIk_29V)Sq)7)^rN*aJg(j>mVhp"sT*6-K)Hi%ZMH[W!9B@h?blldD6E3]9>O)W?p[3p9PBfjfLbqc#U\JT*`>ih!SFokHlq.Ma)9tS":3*.r^I)*E:[mK[i.r5g9\HJb:9@MlYqLk%&sFB7&krY?Q&$c+i[G/<EW@I-g*N1!/0Q'/_"`2K1!V]I4ds0ubjs4iRN%\IMC(/Jd=d7FVq<s=A57DLJD\l,U'[2RLtZDh,O[nY%Z619S.+&/qdN(36!(#]-/5ZEj3"RoW=.I'_BMCCQ!NK$)GL7V':lpJ[1lN[sq)h(Zd*,e3P-O/iSh'<.?2<@@_(EJ+_oug7O9)kG%(;YZU6o:TG$69tl,B<&Vj!lW&G!Y3PDMZ.9%>3!>+S)S"k8ehJ4PFr=<UkYiT[;O.56'=K#Re#r;Et7f,BntbBULnsg]:$o8/9@[%",V7h_kO!*dd`p5e&*?<=;QWYh\8KKKSEbuhf(%JUp5a=76I9N/)gjE;`pbe-/o65-T%0q]+e"bSV*QVB/'&=>9]p#Z>M7a:tdM&%+_5VlLr'IpYJTHk6B(N]E'igLgW<kDM/Ye6aD2J)GrQrhQf3U6<e_8+-3<=^OF\G.Ya<];QP^W?),@u%IW+n7^1)FKTcaqBBGeSm%A4nsV:k89!dD?3d=V4CWNK7E^KTaUq#tm(c/&DUh;]/=YrP&*q=qHB$)E(-l&/?Xa:`efYK[M=\-PU68*kHsAKMa*b32):*KG/BB%iePqI]+aZJ7,`fN.@a5S7R;S\2A&\4c&-I,Bmfia,0SMu#Ud");E1@lWPSt<gD*IsLr'H-RkmTL:-.hADa#bi$)LW6:2"K732%L)%6T`ER<Pf%r[9s>P3.]j#CC)A]Qff$41r0f!^u10B*KOl#SjY]0:_8[7'M-USfMQa0.@Pc&iH11/"L+gJZcJmJV'\VE)DZ]^%SY7Q%nr.ER-5juJ()]f_N$bph.@S%1+FU)fU4Y)=DdeGK!5WqFfBqO$8OO4uGC`P#h-7=q72+>@M?5?i"WSdpnRr!6h2DKN6kd@K@J:j,%RK,qsguS/g!>nAQ]gWU_go7-'W(d`36m,I%D6OG56mA(MkMt,l7MA$3""FS;-@jVPpH0-=+O/;?UBu2$rO?(""E<V;,)R^h%")i8%fZ\"1pmTu"XDe6^Ds.7C'q+DIKbFe+iIlq/S,fV.h<#DA14CC:+u>`Sls>%<E@m[q#FTG:cB`DNAd-t=$n'uF5P>^bi9^#817Z^q%+=NdA+1b+8m$4Kc!aOY226;]d*s[]%R_9EbZGH_$&;:c)(?'pSUl'>`RE&MtfrC7!A$$1u,tk$6^g)n4jD*'Fd#bBag.MV/-:.bH%IAtlX>dd1nqk0&`:#M.@6\B%RpCg!U(>m'nH?7FJ:;?n&9=_nGj@S&u3.[X"3/e6R-PkZoL)k`1%j_*GkL.3RfU;/u@0)#p@"457%_?joQ>co_+S,f9KmL,j*oCK9l"]76&0b5X>#Mj#!'[RS8[r;DQYs4RqTD.]%%Nh!%&5L$lN0F]o8CKYBcOs!ggWKCeJM$rsPoaZ_%#UF"=!LV8;6o6(!m4>uF7""YX)!1$`>m'aR!R=6KM\X&2=rCs'F\r&dU'[LfjTUBp-I<@3Q"U47RN4upMk=P(>XUh'U'\VYZp@Oi%+RAP#i8/;T'=a1KVk4,Z!mubhnuEK6_$&8**,fET2A2Zn0EI8\;9D^Pb-Fku!UI8l;UGWQm4TcSd/$/Uh:TjpRddo%s'%>=1SP2*%qqLRgop`^as6q-0plBq%]Dqa+O8o4:J+p!NrL^k%rV-?Va5?jSrVI\Oqu*.9pRf5#o".-cd2McX5<o//bO9rYr_GcWnDj7Mrq&uN%r"h^A5OmaJq8XTVn*g;8Dr0COj\J,>pq'%qIsBKBjfa11rl;3lpuA-$0>IPdV_?s-^Ycg)%kROSJ,7tc55O27lM=RSrNAGus7#(+%I!n-B;=O?^$GKZ,rfqt_s8G64s1Wof9u$PTJ+u8-p[A)GALF+7~>%AI9_PrivateDataEnd