%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: TCS_Re_2x2_nice.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 10/01/13
%%BoundingBox: 0 0 402 245
%%HiResBoundingBox: 0 0 401.2827 244.4502
%%CropBox: 0 0 401.2827 244.4502
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreateDate>2013-01-10T14:37:27+01:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FWO2fnvRbq8a0VJ&#xA;1kS2W6YhFl+F5RCECwtK5bmw6LT364qm0er2kkayIs5RwGU/V5xUEVHVMVcdVtQGPC4+Hr/o1x4V&#xA;2/d7/RirT6xZp9pbgCqiv1a4pV24r/uvxxVx1i0Ff3dztX/j1ue1f+K/8n/OoxVuPV7SSNZEWco4&#xA;DKfq84qCKjqmKuOq2oDHhcfD1/0a48K7fu9/oxVqTWLONXd1uAsa82P1a4pQV/4r9sVcdYtBX93c&#xA;7V/49bntX/iv/J/zqMVbj1e0kjWRFnKOAyn6vOKgio6pirjqtqAx4XHw9f8ARrjwrt+73+jFWpNY&#xA;s41d3W4CxrzY/VrilBX/AIr9sVU28waesoiKXRdq/Zs7pgOIJNSIiBsNq9e3UYppX0/UrS/ieW2L&#xA;lEYI3qRSQmpVXFFlVCRxcbjbFCKxV2KoLVtYs9Kginu6iKWaODkKUVpTxDNUj4R3xVAaR5x0fVbK&#xA;1urdbhVvFZokaCRzRXdPiaISIKmJiPi3G+Kpi2qWwBJS4oBXa2nJ+4Jirv0pbVA4XFSK/wC809Nv&#xA;fhiqw6zZBkUrccnHJV+q3FaAgH/de32hirX6bsuSKUuQZDRK2tyKnjy7x+GKqjapbAElLigFdrac&#xA;n7gmKuOqWwIHC43NB/o0/wA/5MVWHWbIOqFbjk1SB9VuOisFJ/u/FhirX6bsuSKUuQZDRK2tyKnj&#xA;y7x+GKqjapbAElLigFdracn7gmKuOqWwIHC43NB/o0/z/kxVYdZsg6oVuOTVIH1W46KwUn+78WGK&#xA;qMnmXSo4PXY3HokMQ62tyw+BeTdIz0AOKkJpirsVQOtECxBJAHr2+5YoP79P2h0xVHYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FUJqd6bW3X06fWJ29K35AlOZUtyenRVVSzbjYeOEMoi0m0jQ47sDUpmdHlcTW7R&#xA;1jZz19aQEty9Sp4o1VRaACuUgme9kDoP1+9MpJtppButToQaXQrRi1P9Hh6g/Z+WWsEdirsVdiqB&#xA;jI/TlwKiv1aDbka/3kv7HT6cVR2KuxV2KuxV2KuxV2KuxV2KuZgoLMaAbknoBirHrq9nv7iD6uQ8&#xA;Ejc7CJWkQu0L/FcTn4P3KkDioqHqDXcUE58Ow+otlV71k+k3un2Gps90stm9jKChLxcZFQ7j4nCr&#xA;StW+14k4Bxdd/sYmVhkmSYuJoCetOwxViFr5wOtRRxxWE9vyWC4JYpzV1vVj9Mqdl5KA6l6BlPw1&#xA;o3FVl+KuxV2KuxV2KuxV2KuxV2KrZJEjRnc0VRUnr+rFWOtG+qXY9QELeg0CuHUacjAgiiJxNy3G&#xA;qsSeNaHamQzb1D5/j7Pc2cgyTJtaB04ubnUuQYf6SOIbj09CL7PHt898VR2KuxVLNe12PR0snkt5&#xA;J47u6jtXeOlIRIGYzSE9I14bnFUHomtG/m+vyW8tutxbxj0xSVVKzTruyA1qFqGHwEdCaipAtU7i&#xA;ubeU0jkViOqgioJUNQjqPhcH6cSCFVMCuxV2KuxV2KuxV2KuxVJtSuY7wz27P6el2ysdSuFcxurR&#xA;lX9L4TyAZPtbbqdj0rIkRFlnEVuidJglb1NQuVKXV5Q+m3WKJa+nF8wDVv8AKJyjGD9R5liV+uFh&#xA;o1/xDFvq8tAnHl9g9OXw/flqFXUb1bGylu3jkmSIAtHEAXIqAaAla06/q3xVC+X/ADBp+v6cmpac&#xA;JzZS0MEtxBNbGRGRXWREnWNyjB9mpQ4qqa1xNiORUL69vUuKr/fp1FRiqv8AXYePLjLQ/wDFMtfs&#xA;lunGvRfv26kZLhVv67bcuLPwNQvxgpuWCgfEB1ZgB44OEq4XtmeNJ4zzoVo671UsKb/yqT8gceEq&#xA;rA13HTArsVdirsVdirsVSe5kj1M0f4dKiCTyvLGjRTIAxKkuTt0JqlVoehoRMnhDMbbojR0aRJNQ&#xA;kUrLekMikUKQLtClO3wnkR2ZjmPjF+o9fu6MSmGWoQOmhPrWp8ShP1ocuAoQfq8P2tzVsVR2KpVr&#xA;3mXT9CWB76O4aK4b00e2gkuT6hZVRDHCHlq7PQUWniRtiqZW8yzwRzKrKsqq4WRWRwGFaMjAMp8Q&#xA;dxiqAeIyaxcKk/oSfV4DyQIZKCSXu4ccT/q4pBV5La6ZvieGVPUrxki3EdQeIYN1BFQaf1wgpsKK&#xA;x3UfpgwyxM3Lm1vKssaAK3GomCncvX4U6gV2w2tDvcNS4GssiInH1P36vblU5hWLMwKkqKnt26A1&#xA;xoLwFEC/QRCSWN41K8gwHqKRxDE1j57Dpv17Y8LFWjnhlr6civQkHiQaFWKsNvBlIPvgIVfgV2Kr&#xA;JZ4Yqeo4WvQE7mpA2+lhhAtUtkurjUHeC1+CAMY55gRzRgFYV5AioNVaMqa9yvRpbBmI1uVP6rDJ&#xA;PBpFuKWViI5Lw0HxMoHoxmlNyV5v7AdmzHmeOVfE/qUnqnOWsEFrnH9CahyKhfq03IuKqB6Z+0Kj&#xA;bxxVB+cW0VfLV6dai9fTuKepCEaRnf1F9FVRCGZjLx40PXFUk/KQwr5ORLcRmKKVlj9CBbRGXghV&#xA;ltwQYuSkHiyIfFf2mVXWXmvWNWVYbnQbvTAFgnMkgYH1BeKgiX1YokJZBz3ao7qMVZUlhAhQhpjw&#xA;LMKzTNuwoa1c19genbDbLiLS2IQKI7iZeKsqkvzPxV3Pqc+RWu3KuNrxOazmZSpvJaGP0z8MJ3ru&#xA;+8fU9PD2xteIdyg2mSDm0TQCQ8DHI0HxBgVLFijx8uRQGm304eIrY7nNaX6chC3VgqsZpOSx8SvK&#xA;kizKXXYgUoT1x4l2XCbUQwHovxMhDFhG4C1DVqHjNCtVHwk13NR1dlod6xdSujGv+jkyMjMAyToO&#xA;SKSQf3T8fiFBuajcV6FoLwlcdTlrtA5HH1B+7nqU50pvEoDcd+JPX23xoLwlT+p312w+sngimJxX&#xA;iQxAV3UQ/Ei/GooWZ2G/Gmxw8Vcl2Hmp3dtA7QaHaxrHa09a9VRRRDyJ4H3metfEBu+Y+T1Hh+fu&#xA;/b+tNnmU3y1g7FUDpxc3Opcgw/0kcQ3Hp6EX2ePb574qjsVedfnHL5eSz00X0MU2rGQtpwmtTdr6&#xA;SywmdSCCkfqN6SB2BoxX3IVZRf61d6Zpeky22nS363UsEFwsAZmgieMs0xWIXFQnGlA1Kn7XfFWv&#xA;Lep32pyfXbuwm06Wa2jL2kpBKcZ51XlyVJKuo5CqjbrviqfYq7FXYqhpNNsn5n0vTdwqvLCWhkKr&#xA;9kc4yrUHzw2yEysl05ncv65asiuFlSN1UCtUHwhqHl/NUdsQVsdyyOwuUKqZFZORqEM0fGPiqqqj&#xA;1HFRw67fLc1PEuzQtL5+LHjCx5lgJp5QGJZlI3iqKtuNttuwx4l9LcekR0YTyGQSxhLiNAESRgFH&#xA;Nm+KYkrGqnlIajY4mS8VclTUb0WVsvpIJLiQiK0txtzkI2XbooAqx7KCcqyT4R5oAtvTbL6nbCNn&#xA;9WdyZLmalC8rfab5dgOwoMYQ4R5qSismhBa4WGjX/EMW+ry0CceX2D05fD9+KquoWlvd2UtvcW8d&#xA;3Ewr9XmVXRmU8kqrfDswBGKpL5Hh1ePSB+k9KttHmkIkNpaxxw0cij80iluY+wAYSEkdQvTFU01o&#xA;A2IBAI9e32Klx/fp+yOuKo7FXYq7FXYq7FXYq7FXYqh7++js7YyspkckJDCv25JG2VF9z+HU7ZGc&#xA;+EWkBT0yyktoXe4YPeXDerdSL05kABVr+yigKvy8cjjjQ35lSUZliHYqgdNAF1qdABW6FaKVr/o8&#xA;PUn7XzxVHYqxzzxYTT6bHcWei22s6jE4jhS4gguDHFKy+sVE8tsN+C1HqjoDvTFU704XQsIBdxxx&#xA;XAQCSKH+7UjsvsMVUYwP05cGgr9Wg34mv95L+30+jFUdirsVdirsVdirsVdiqjeXlvZ27XFw3GNa&#xA;diSSTQKoG7Mx2AHXIykIiyoCEsLWeWc6jerxuGUpbwGh9CIkHjsSC7UBcj5dt4QiSeI8/uST0THL&#xA;UOxVBa4AdE1AEAg201QVLj+7PVRu3yxVG4qpXE8sXp+nbvPzYK3pmMcAf2m5snwj/JqfbFWJ2+t+&#xA;Zb6GNdS0tbCLhBJKWaSPjP8AXVVEMhFOLxcW+HkQahuO3JVmOKuxV2KuxV2KuxV2Koa+1C2skUyk&#xA;mSQ0hhQcpJGH7KKNz+od9shOYjzSAoWVncyXP6Qv6C4AK21uDVIEPXf9qRv2m+gbVJjGJJ4pc/u/&#xA;apKYZah2KuxVAaYa3Wp9Ki6AIDl/+PeHrUDiafs4qj8VdiqS61q+tWkluLHSZbqI3UUV3MWSi2zK&#xA;zSTRqjNIxTiBxKitdq4qhtH1W9Z/req2xt7qS2j9W3hWaRhSacIViVWfiyivJgCOhAOwjKVJpNP0&#xA;7po+27xf8ZYpYv8AiarkfGj+LXhLa69obEKuoWxY9F9ZK/dWuPjQ7x814Si4p4ZV5RSLIvipDDf5&#xA;ZMEHkhfhV2KuJABJNANyTiqXPrdvI3p6eh1Cbp+5IMSkbHnN9hadxUt4A5UcoP0+r8d6abttNkad&#xA;bzUHWe7X+5RRSKGvURg9W8XO57UG2MYb3Lc/cpKYZah2KuxVA68aaJqB22tpalmKADgankKkfPFU&#xA;dirsVQWr8vqa8eVfXt6ceNf79OnLbFUbirsVWyzQxLzldY1/mYhR95wEgc1QR1/RASov4GYdUSRX&#xA;b/gVJOQ8aHeE8Jd+m7M/YjuZK9CttcEH/ZcOP44PFHn8itNfpK9f+50yc16PK0Ma/T8bOP8AgMeM&#xA;9In7Fpoxa7OaPNDZR9xCDPJ81kkCIPpjONTPcPt/HyXZWs9LtLR2lQGS4cUkuZWLysPAs3Qf5I29&#xA;slHGBv1UlF5NDsVdirsVQWn8vrWpcuX+9I48uPT6vF049vnviqNxV2KuxVBR8v0zcfa4/VoP5eNf&#xA;Ul/2VfwxVG4q0yqylWAZT1B3GKoSXRdHlblLYW8jeLRIx/EZWcUDzATZWfoHSR9i3EQ8ImaIf8IV&#xA;x8GPcvEXfoSz/wB+XX/SXdf9VMfCHn8z+tbcNB0gmslss5HQ3BM5r1rWUvvj4Me6/fuvEUcqqqhV&#xA;AVRsANgMsQ3irsVdirsVQetcv0Nf8a8vq8tONOVeB6ctq/PFUZiqlO10pj9CNJAXAmMjlOKd2WiP&#xA;yb2NPnirENQ1/XrZj+nobbTdM9OJoriWT0/UvEnVxHziknKqyL/JWvc9MVRkV3rE2oJp0t+r3jQG&#xA;4K2zKkRRHEbfE1vKQeZ6c65XwSP8X3JtHfoe4I/ew+t4iS/uWU/NOHD8MHhDrfzK8S+LSY4m5x6R&#xA;YI/84b4vv9CuEYoDoFstanrg0e3SbUBa2luzBEd53C8j0UUh65YhbBrszahFpf8Aost+9u1zxSd6&#xA;GON1jdhSI0+NgKVxVMPU1X/lng/5Hv8A9UcVd6mq/wDLPB/yPf8A6o4qgdV19dJijm1N7Ozilb04&#xA;3muWUM/EtxBMXWinFW7XWJ5pY7ZDaT3LRu5MU7lT6LKku4iYDizjatd8VRvqar/yzwf8j3/6o4q7&#xA;1NV/5Z4P+R7/APVHFXepqv8Ayzwf8j3/AOqOKoXy7LJcWcl8zxSLfOs8UkDvIjL6SR8hzVCtShPG&#xA;m2KppirsVSrVbvzDAvOxsI7pRNEAiyj1GhJ/enjJ6CIwH2fjb5YqkWg+YtRuL1YtQexh15IuGqae&#xA;J2T0vTkcx0UCdKuk8bV5nwFeyqf6dqt3qFqLq2ghaFnkQFpZFNYnaNtjCD9pDiqJ9TVf+WeD/ke/&#xA;/VHFXepqv/LPB/yPf/qjiqWf4lR9UfTEmshfW5rc2zXDhwpUEDeIUJ9RCPHFURpmr3Op2Yu7OKCS&#xA;BnkjDes4+KGRon6w9nQjFUX6mq/8s8H/ACPf/qjirvU1X/lng/5Hv/1RxVLZvMkaX5sWuLCK6hIM&#xA;9u90Q4DAcRvEKVLrTxxVGWmoXt3D61vDA8fN4+XrSD4onMbihhB2ZSMVVvU1X/lng/5Hv/1RxV3q&#xA;ar/yzwf8j3/6o4qgdZk1R7JrYx20Ru+VupaeUVMiMAAyw1U13riqcYq7FUFq2iaVq8CQanbJdQI4&#xA;kWKSpTmNgxWtCRXauKo3FXYq7FUFq2iaXq8KQalbrcwxv6ixuTx5gEBqAgEiu1cVRoAAoOmKuxV2&#xA;KpfrPl/R9ahhh1S2FzFbyetCjMwAkCsgb4SKkK5pXFUeqqqhVACgUAGwAGKt4qkvm/y+2uaObWNl&#xA;W4hkS6tRJURNNAecaS0DVjZqBxxNVrtiqYaVYLp2l2eno7SrZwRwLK5JdhEgQMxNSSab4qq2lpbW&#xA;dtHbWyCKCIcY4xWgHhviqrirsVdiqBh0LSIdUn1WK1RdRuQBPdb82AVVFSfBUAxVHYq7FXYqgYdD&#xA;0iHU5tVjtUXUbj++uaVdvhVOp/yUAxVHYq7FXYql8OgaRDq0+rx29NRuQFmuCzsSAoUABiVFAu1B&#xA;4+JqqmGKuxVjP+EHXz2vmRJ/3UkLrcREsG9RUSKFVG6lCpkaTcfEI9jxqFWQz20E/p+qvL0nEse5&#xA;FHXodiK9cVVcVdiqTtr9ymo39q+mzmKzNusM60Hrm44iqep6aUVnofjr8J26VVRkd/cOiv8Ao+4X&#xA;kAeLGAEV7Eer1xVv69c0J/R9xUV25W9TT/nriq19QuV3/R1yRVRsYD9o0/3726nFW/r91X/jm3HW&#xA;leVv9/8AfYq6O/uHRX/R9wvIA8WMAIr2I9Xrirf165oT+j7iortyt6mn/PXFVr6hcrv+jrkiqjYw&#xA;H7Rp/v3t1OKt/X7qv/HNuOtK8rf7/wC+xVyahcNGr/o+4UMA1GMAIqK7j1cVShvPWmF3S3tbu+kj&#xA;ZkdbGNbsKymnFmgaREP+sR75b4Muu3v2+9VT/FN+wrF5b1WVajelnH1NOktzGfwweH5hVSLzBqzy&#xA;IjeWtSjVmCmRpNNKqCacjxvGag67AnAYjvH2/qVMdPvzeRO7W8tq8bcHhn4cwSquP7tpB0cd8gqK&#xA;xV2KoLWtQl07S7i9htnu5IVBW3jDFmqQP2FkagrU0UmnbFVK31mad+C6bdAqqlyfRAVmRJChrIDy&#xA;X1ADt44qrm9udv8AQJzX/Kg2/wCSuKuN9civ+4+4NBUfFb7+397iq39IXJLAadc/CadYBX4eVRWX&#xA;pvT54q4ahc8wh065FQSGrBT4adxL3rtiq43tzt/oE5r/AJUG3/JXFXG+uRX/AHH3BoKj4rff2/vc&#xA;VW/pC5JYDTrn4TTrAK/DyqKy9N6fPFXDULnmEOnXIqCQ1YKfDTuJe9dsVXG9uR/x4Tn/AGUH/VXF&#xA;VG81pbKB7i7tpLe3jFWmlkto0H+yaYAfThjEk0FSuPz1azsVs9L1K9ANFkgtw0TbA1WYusJG9Pt5&#xA;Z4MhzofFUdb69dP6f1jRr6zWSRYw8xtCAGZVVm9KeUgEuNvte2QkK6qm5IAqTQbDfxOwyKuxVA60&#xA;payQBeRFzakDbqLmM/tV/r4b4qhvr/mcbNpMBYdSl4Sv0FoUP4Zbww7/ALP2q79J+YF2fRS3gYrm&#xA;Jh9PP0zjwR/nfYrX6e1Bd5NA1BF7sGs3p9Edyzfhj4Y/nD7f1K0fN2iRml282nju97BNbR/8jpUS&#xA;I/Q2PgS6b+42qbQXEFxCk1vIs0LiqSRsGVh4hhscrII5qvwK7FXYqx6aE+YNSuLaYn9A2DejNCDQ&#xA;Xdzszq5HWGL7LL0ZqhtlobweAA/xH7B+tU/jijijWOJBHGgCoigBQBsAAOmUE2q7FXYqgdNXjcaj&#xA;sRW5rvxFawRb/D/HfFUdirqioFdzuB3oMVdiqCsB/peo7EVuF3JqD/o8XQVNMVRuKuxV2KuxV2Ku&#xA;xV2KuxVKNV1e5W7TStKRJtUlT1HaSvo20JNBNMFIY1IIRBu5B3ADMLYQFcUvp+9XWHlmxgnS9vGb&#xA;UtVXf6/dUd1P/FKU4Qr7Rge9TvjLMSKG0e78c1TfKlQWrCtvFsx/0m2+yaU/fpudxUYqwzyRd28O&#xA;n3mjcJEu7bUhJNHxnkijL3ELtH9YkihjdwZKkqBzrzPJmZiqzu5W6ZFFtIkb8gWMiGQFe4AV46H3&#xA;r9GKsbSz82xyXr6tdQXNnJe27adAiqxij+uIV5/u4CWVab8j94qyrKcVdirsVdiqTXPle0WRrrSX&#xA;/RN+x5Ga3UCKRv8Ai+DaOUHuTRv5WXLhmPKXqH45FVXRtYmunmsb+IW2r2gU3MKkmN0aoSeFj9qN&#xA;+J91NVO4yOSFbj6SqaZWqF1a/TTtLvL9xyS0hknKjqfTUtQfOmShHikB3qpaBpzado9raSHlOicr&#xA;qQftzyEyTP8A7OVmb6cOSXFIlUfkFdirsVQGlq6z6jzABN1X4V4ggwxUP2m+/FUo/Mexe+8n39ui&#xA;CQlQ9GZwo4HkC6RpK0i1G6Ban9kq1GCqL0PVrbVk02/tufozWsxUyJJGTR4RyAlCuVPUE9RiqI13&#xA;U76wsrmW0sZbuWKB5YygDqXUHjHwQmZmbtxQ/MYqhItYisprqW6tpwLiVGLW1vcXBDfVoqiRYo2Z&#xA;fAV/DJxgZcq+dKjrLzFoV7N6FrfwSXI+1bcwsw/1omo4+kYZYpDchUwytXYq7FXYq7FXYqg9Y1OP&#xA;TNNmvWRpmjAEUCfbllchIol/ypHYKPnk8cOI0qjoOlSWFmzXTibUrtvX1G4HR5mAFF/yEUBEHZQO&#xA;+HJPiO3IclTLK1diqC1dSbeGiK4FzbE8jTiPWTddjvirzXy7fWtv5k8z3Npod3ZWgljnjRrH0ZLl&#xA;4rtTK1vJ6Y+srKzck5SVUkqBx4nFXo+gaxHrOj22pRxPAtwpPpSU5KVYqRt7rt+odMVdqssMlogR&#xA;lfjc2tQBzoRdIOg6bjr2+jFUwxV2KuxV2KuxVJPM8MkMEWt2ylrvSS0rKoJaS1NPrMIA3PJF5KP5&#xA;1XLsJs8J5S+/p+O5U5ikjljSWNg8cgDI6moKkVBBHjlJFKlHmgeraWdiN2vb22jIHdI5BcSqfYxQ&#xA;uD7Zbh2JPcD+pU5ypXYq7FXYqgdNAFxqNAB/pPZSv+6IvHr88VQvnF7RPLGom7sZdSgMRVrGBPUl&#xA;lLEKqooDGvIjsadcVYZ5Q10aF5S8uzXmnXEQmNxZtClmLR4uV0kayXFsqQrBXiOQA48jszA8iq9L&#xA;xVBWC0u9RPECtwvxDqf9Hi67Yqq32m6dqEPo39rDdw9fSnjWRa/6rgjJRmY8jSpafLclr8WjahPY&#xA;EdLeQm6tT4AxSnkijwidMs8W/qF/Yfx77VpfMM1jKkGv24suZCx6hGxezdiaAFyFaFj4SCldlZjj&#xA;4V7x38uv7VTvKVdirsVdiqR3FdR80QW3W10eP63N4Nczho4F8D6cfqOR4shy4emF9ZbfD8fpVPMp&#xA;V2KuxVBastbeL4ValzbH4u379Nxsd8VSG5uLLzBoOo3On3Zv7G/aGCGJWeHieSqQrMKp6nIMrBeh&#xA;DCoIxVLPyqjuLnyzPaXshH1G/niWC3mYGJ0kLOkk0fotK/NiZCVClq0+GmKpla+StH0Jbu4tWkmk&#xA;1G9t5bj1gjrV7uNiFWNI6DoB2WlfGqrLMVdirsVdirsVcRXY9MVSbypWHTpdLPXSJ3slHhCgElsP&#xA;+keSOvvl2bc8X87f9f2q3qVZvMujW5+zCl3eg/5USpbj8LtsENoSPuH6f0KnGVK7FXYq7FUBpaIk&#xA;+ohFCj61WipwFTDESff598VX6vrGm6PYPf6jN6FrGVDPxZzVjxACoGY7nsMVYD+Z1jcReU9PdpBd&#xA;yaZavJPezTmKE+nHGDLP8MrSo78aoNzWvIUrirK/0n5gPlmC6060GpahLYJNE0jpAslw0QKhlrRe&#xA;TbmjU98VR2kGcy3rzxLFK8sbSBTU8/q0XIGlRsdh8RxVMcVdiq2WKOWN4pUEkcgKujAFWUihBB6g&#xA;4g0rHX9byuwdS0vlk7SKxq1h4MCdzbeIP931+x9jI/vP6/3/ALfv96skVgwDKag7gjoRmOrsVWyy&#xA;RxRvLIwSNAWdjsAAKknEC1SnypHI2lnUJ1K3GrSNfyqwoyrKAIUYHoY4FjQ+4y3MfVQ/h2/HxVOM&#xA;qV2KuxVBaupNvDRFcC5tieRpxHrJuux3xVgHka9up/Kdzo15f/VvNP1oyXNtJJazXFq0lwgEjQ2w&#xA;jiT42DlAoHInc15FVkflHy4vlCxuYb/WDerd3AeO4u2cOGKBBH6k80zP9jb4vxqcVXL5s0rWPrVp&#xA;aiZLjTry2juUkjYHkt1GDx4GpFKGvSh77jFWT4q7FXYq7FXYq7FUmg/0bzbdRdI9RtI7iMdjLbOY&#xA;pm/4CWEfRlx3xjyP3/gq3B+983XbHcWljboh/wAq4lmaQfdDGcB2xjzJ/QqcZUrsVdirsVQGlms+&#xA;ompP+lftKyn+5i7P/DbFUj/NEaofJV8umxvJOxjV1jaBG9NnAdudwsiIEX4i3HkKfDvTFUJq9jD5&#xA;y0nTodG19orcpJ6uoWchkMvotGrxmWCWM/3lCxD9vA4qyzSbH6hpdnYl/UNpBHB6lCOXpoF5UJYi&#xA;tPE/PFVPT+P1zU6BQfrCcip+I/6PF9rbFUdirsVdirmUMCrCoOxB6EYqx/Ta6FqCaNISdLuq/oaR&#xA;t/SYAs9mT4KoLQ/5NV/YFb5+scX8Q5/r/WrIMoVJPNR+s2tvoy7tq8wt5R1/0ZR6l1X2aFWjr/Mw&#xA;y7DsTL+b9/RU7ApsOmUq7FXYq7FUDrHH6vDyCn/SbanM039dPs7HfFXn3lK/0mTzZ5ht9JkY2bXc&#xA;UzK8slfrH1tEnb0pJm/aA4yLHQrRagqaqvT8VS3UbW2t7RPQgSPlc2gIjHCv+lId+A8WJ8PHviqZ&#xA;Yq7FXYq7FXYq7FUm13/R9R0bUBsI7k2k7f8AFV2hQD6bhYcux7iQ8r+X7LV3l8iW91u7G6zXxjjb&#xA;/Jt4IoWH0So+DLsIjy+9U5ypXYq7FXYqgdN/3o1HYj/Se5Y/7oi/mA/DbFUL5xm02HyzqEupFxZr&#xA;F+8EVeZJICKtGSpZ6ChYDxNMVY9+Vcry+VdCdnEtLW6jWRZJJEZYp44wUMss8ir8GyM1U+yQCKYq&#xA;yfW5PMCWk40eC3kuPRYwPNIwIl/ZHphQrD5yL/HFXaO1w0l79YKiUSRepGp5FHNtEWBYUDb9PhGK&#xA;plirsVdirsVQmq6ZbanYyWdxyCvRkkQ0eORCGSRG7OjAMp8clCZibCpZY+ZIbXlYeYJ4rLUrcbyy&#xA;lYYbmMf7vgLGlD+2laodjtQm2WK947j7vJV2iF9T1CbXXVltihtdJVwQTb8g0k9DQj13Vaf5CIe5&#xA;wZPSOH5/jyVPMpV2KuxV2KoLV2It4aOqA3NsDyFeQ9ZNl3G+Kov049vhG3TYbb1/WMVWXMk8aKYY&#xA;fWYsAy8gtFPVqnwxVjFrqfmu7W7GtaXHp0Ed5brYkTA+oovFCMzoz7stPh4j6eVFVZZirsVdirsV&#xA;dirsVQmq6bDqWnT2UxKLMtFkTZ43UhkkQ9mRwGU+IyUJ8JtWtG01NM0y3sVcytCv72cijSysS0sr&#xA;AftSOxY+5w5J8UiVRmQV2KuxV2KoDSyTPqNaV+tbhXLj+5i7kCny7YqjyARQio2O/iNxirQRAahQ&#xA;DvvTxNT95xVvFUFYNW71EcgaXC/COo/0eLrviqNxV2KuxV2KuxVZLBDMAssayBTyUOAwBHffCDSr&#xA;8CuxV2KuxV2KoLVmpbxfEq1ubYfF3/fpsNxviqNxV2KpH5p1vTNPhhhvJmgeZlnhdY3kH+jSxO3I&#xA;IVNNwTv0r8sVX2F9qtxObYMeKQRyi7ms5YUkLs6FaNIpDr6dWHEbMMVR/p6r/wAtEH/Ih/8Aqtir&#xA;vT1X/log/wCRD/8AVbFUq1vzB+hfTN/dxoJUeRStrK/wxFA5PGU/ZEgb5A4qq2N9qk9x9VDMQkEc&#xA;xvJrKWGNyzOhT45EPqD0+TLx2BHjiqYenqv/AC0Qf8iH/wCq2Ku9PVf+WiD/AJEP/wBVsVSnXfMk&#xA;WhGL9J30UImWR0YWkzjjDx9QkpI1OIevyqexxVGWs+pyTG29dC8UUcjTSWroH5s6bAyg8gY6nbuP&#xA;HFUV6eq/8tEH/Ih/+q2KqF5c3FlF615qFnbQ1C+pNGY15HoKtMBXFVRDqMkSyx3VvJG6h0ZIWYMp&#xA;FQVIm3riqj5ddLjS4tQSc3Kakkd2sxQx1WSJOJ4Fm41UA0xVM8VdiqV6/F5jmsLmLRJ7e2u3hZba&#xA;4nBb05j9hitGUqO4pviqQaV5rF4byewne4lSBbmWySymdmcwCnGUMi/Ebd1QHjvt4YqyaH9KSwpK&#xA;Jok5qG4PburCorRgZtj44qv9PVf+WiD/AJEP/wBVsVd6eq/8tEH/ACIf/qtirHrfzeLt70WU7XM+&#xA;nxs0tpHYTlnJQyIA3qceTemyqCwq23hiqewfpWWGOX1oo/UUN6b27h1qK0YetsR3xVU9PVf+WiD/&#xA;AJEP/wBVsVd6eq/8tEH/ACIf/qtiqSWfmdL+S6+p3qzNYR8rmAWUyn41Lpu8i70jYAV67HfFU4h/&#xA;SksKSieFRIoYK0DgiorQ/vsVX+nqv/LRB/yIf/qtiqGF87XzWA1OyN8q8mtAn74LQGpj9blShHbF&#xA;Vlyt9JqFrZyXcY5A3LRLbsOaW8sRPxmU8TyZfHYnbFU2xV2KoW9/RfOH676HOo9D1uFeXNacOXfn&#xA;w6d6e2KorFXYq7FUJfforlF9f9DlUej6/Ctea048/wDL4dO9MVReKuxV2KoHUv0Hzg/Sf1bny/0b&#xA;6z6deXJf7vn35cenemKo7FXYqxf8x/qf+Gm9b/ez1ov0P0/46XL/AEL3/v8Aj0xVOPL/AOjP8P6b&#xA;+jP+OX9Ug+pVp/vP6a+n/wAJTFUZb/V/q8X1bh9X4L6Pp04cKfDx47cadKYqqYq7FXYqg9O/Q9Z/&#xA;0d9XryX6z9X4fa4Djz4d+HGle1MVRmKuxV2KoTT/ANEfvf0d9X+0PX+r8PtcRx58O/GlK9sVReKu&#xA;xV2KoDS/0DzuP0V9V58l+tfVfTryp8Pqen3p0riqPxV2KsEk/Q3/ACtqD06/Xfq031zl/wAtHpRf&#xA;UqU7fV/rdK9+WKs3b6t9YTlw+s8W9OtOfCo5ce9K0rir/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2013-01-10T14:37:28+01:00</xmp:MetadataDate>
         <xmp:ModifyDate>2013-01-10T14:37:28+01:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F117407206811960DA7D0E48CDD34</stEvt:instanceID>
                  <stEvt:when>2013-01-10T14:37:28+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:F77F117407206811960DA7D0E48CDD34</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F117407206811960DA7D0E48CDD34</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F117407206811960DA7D0E48CDD34</xmpMM:OriginalDocumentID>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -244.45 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 244.45 li
401.283 244.45 li
401.283 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.6 lw
2 lc
0 lj
3.25 ml
[.72 2.88 ] 0 dsh
true sadj
38.522 47.499 mo
41.0342 47.6299 li
43.5469 47.7666 li
46.0591 47.9106 li
48.5723 48.062 li
51.084 48.2217 li
53.5972 48.3906 li
56.1089 48.5698 li
58.6221 48.7607 li
61.1343 48.9609 li
63.647 49.1748 li
66.1592 49.4019 li
68.6719 49.644 li
71.1841 49.8989 li
73.6973 50.1709 li
76.209 50.459 li
78.7222 50.7627 li
81.2339 51.084 li
83.7471 51.4219 li
86.2593 51.7769 li
88.772 52.1489 li
91.2842 52.5356 li
93.7969 52.938 li
96.3091 53.353 li
98.8223 53.7778 li
101.334 54.21 li
103.847 54.646 li
106.359 55.0801 li
108.872 55.5059 li
111.384 55.917 li
113.897 56.3037 li
116.409 56.6567 li
118.921 56.9639 li
121.434 57.2109 li
123.946 57.3818 li
126.459 57.459 li
128.971 57.4238 li
131.484 57.2549 li
133.996 56.9277 li
136.509 56.4199 li
139.021 55.7061 li
141.534 54.7607 li
144.046 53.563 li
146.559 52.0898 li
149.071 50.3247 li
151.584 48.2559 li
154.096 45.8789 li
156.609 43.1997 li
159.121 40.2358 li
161.634 37.021 li
164.146 33.603 li
166.659 30.0518 li
169.171 26.459 li
171.684 22.939 li
174.196 19.6387 li
176.709 16.7378 li
179.221 14.4639 li
181.734 13.1089 li
184.246 13.103 li
186.759 15.2026 li
false sop
/0 
[/DeviceRGB] /CSA add_res
.247059 .239216 .6 rgb
@
[2.88 2.88 ] 0 dsh
38.522 52.6147 mo
41.0342 52.686 li
43.5469 52.7646 li
46.0591 52.8496 li
48.5723 52.9429 li
51.084 53.0449 li
53.5972 53.1548 li
56.1089 53.2749 li
58.6221 53.4067 li
61.1343 53.5488 li
63.647 53.7041 li
66.1592 53.8696 li
68.6719 54.0518 li
71.1841 54.2471 li
73.6973 54.458 li
76.209 54.6836 li
78.7222 54.9268 li
81.2339 55.186 li
83.7471 55.4619 li
86.2593 55.7549 li
88.772 56.0649 li
91.2842 56.3906 li
93.7969 56.7319 li
96.3091 57.0869 li
98.8223 57.4541 li
101.334 57.8311 li
103.847 58.2129 li
106.359 58.5967 li
108.872 58.9771 li
111.384 59.3467 li
113.897 59.6968 li
116.409 60.02 li
118.921 60.3027 li
121.434 60.5327 li
123.946 60.6948 li
126.459 60.772 li
128.971 60.7417 li
131.484 60.585 li
133.996 60.2749 li
136.509 59.7856 li
139.021 59.0928 li
141.534 58.165 li
144.046 56.9746 li
146.559 55.4961 li
149.071 53.7017 li
151.584 51.5767 li
154.096 49.1021 li
156.609 46.2769 li
159.121 43.1099 li
161.634 39.6221 li
164.146 35.8511 li
166.659 31.8628 li
169.171 27.7446 li
171.684 23.6108 li
174.196 19.6177 li
176.709 15.9678 li
179.221 12.9238 li
181.734 10.853 li
184.246 10.3257 li
186.759 12.4497 li
.6 .239216 .443137 rgb
@
1 lw
[] 0 dsh
38.522 105.399 mo
41.0342 104.977 li
43.5469 104.564 li
46.0591 104.159 li
48.5723 103.763 li
51.084 103.375 li
53.5972 102.996 li
56.1089 102.626 li
58.6221 102.266 li
61.1343 101.914 li
63.647 101.573 li
66.1592 101.239 li
68.6719 100.915 li
71.1841 100.601 li
73.6973 100.294 li
76.209 99.9961 li
78.7222 99.7051 li
81.2339 99.4199 li
83.7471 99.1387 li
86.2593 98.8618 li
88.772 98.5859 li
91.2842 98.3076 li
93.7969 98.0259 li
96.3091 97.7358 li
98.8223 97.4326 li
101.334 97.1118 li
103.847 96.7681 li
106.359 96.3931 li
108.872 95.978 li
111.384 95.5137 li
113.897 94.9897 li
116.409 94.395 li
118.921 93.7129 li
121.434 92.9297 li
123.946 92.0278 li
126.459 90.9907 li
128.971 89.7959 li
131.484 88.4258 li
133.996 86.856 li
136.509 85.0659 li
139.021 83.0347 li
141.534 80.7417 li
144.046 78.1699 li
146.559 75.3018 li
149.071 72.127 li
151.584 68.6406 li
154.096 64.8428 li
156.609 60.7417 li
159.121 56.3579 li
161.634 51.7217 li
164.146 46.876 li
166.659 41.8857 li
169.171 36.833 li
171.684 31.8237 li
174.196 27.0059 li
176.709 22.5649 li
179.221 18.7578 li
181.734 15.9448 li
184.246 14.7017 li
186.759 16.1528 li
.6 .545098 .239216 rgb
@
.4 lw
192.412 9.79004 mo
192.412 106.84 li
35.3809 9.79004 mo
192.412 9.79004 li
35.3809 106.84 mo
35.3809 9.79004 li
192.412 106.84 mo
35.3809 106.84 li
0 0 0 rgb
@
0 lc
189.271 106.84 mo
189.271 104.84 li
@
189.704 110.676 mo
189.705 110.682 189.706 110.694 189.706 110.713 cv
189.706 114.522 li
189.706 114.685 189.749 114.788 189.836 114.833 cv
189.923 114.876 190.085 114.903 190.323 114.912 cv
190.323 115 li
188.535 115 li
188.535 114.905 li
188.79 114.893 188.957 114.857 189.035 114.801 cv
189.113 114.744 189.152 114.62 189.152 114.431 cv
189.152 111.5 li
189.152 111.399 189.139 111.322 189.114 111.27 cv
189.089 111.217 189.034 111.19 188.95 111.19 cv
188.895 111.19 188.823 111.206 188.736 111.236 cv
188.648 111.267 188.566 111.299 188.491 111.333 cv
188.491 111.244 li
189.652 110.652 li
189.69 110.652 li
189.698 110.663 189.703 110.671 189.704 110.676 cv
cp
.137255 .121569 .12549 rgb
f
139.021 106.84 mo
139.021 104.84 li
0 0 0 rgb
@
134.024 110.902 mo
134.025 110.907 134.026 110.919 134.026 110.938 cv
134.026 114.748 li
134.026 114.91 134.069 115.014 134.156 115.058 cv
134.243 115.102 134.405 115.128 134.643 115.137 cv
134.643 115.226 li
132.855 115.226 li
132.855 115.131 li
133.11 115.118 133.277 115.083 133.355 115.026 cv
133.433 114.969 133.472 114.846 133.472 114.656 cv
133.472 111.726 li
133.472 111.625 133.459 111.548 133.435 111.495 cv
133.409 111.442 133.354 111.416 133.27 111.416 cv
133.215 111.416 133.144 111.431 133.056 111.462 cv
132.969 111.493 132.887 111.525 132.811 111.559 cv
132.811 111.47 li
133.972 110.878 li
134.01 110.878 li
134.019 110.889 134.023 110.896 134.024 110.902 cv
cp
.137255 .121569 .12549 rgb
f
137.282 114.596 mo
137.398 114.257 137.457 113.766 137.457 113.123 cv
137.457 112.611 137.421 112.202 137.352 111.896 cv
137.221 111.327 136.977 111.042 136.618 111.042 cv
136.259 111.042 136.014 111.335 135.881 111.921 cv
135.811 112.233 135.776 112.645 135.776 113.155 cv
135.776 113.633 135.812 114.016 135.884 114.302 cv
136.019 114.838 136.272 115.105 136.643 115.105 cv
136.953 115.105 137.167 114.936 137.282 114.596 cv
cp
137.763 111.634 mo
137.976 112.046 138.083 112.518 138.083 113.052 cv
138.083 113.472 138.018 113.867 137.887 114.238 cv
137.64 114.937 137.213 115.286 136.605 115.286 cv
136.189 115.286 135.848 115.097 135.58 114.719 cv
135.293 114.316 135.15 113.769 135.15 113.077 cv
135.15 112.533 135.246 112.064 135.438 111.672 cv
135.697 111.139 136.096 110.872 136.634 110.872 cv
137.119 110.872 137.495 111.126 137.763 111.634 cv
cp
f
139.155 111.78 mo
139.155 111.521 li
141.514 111.521 li
141.514 111.78 li
139.155 111.78 li
cp
f
144.722 109.765 mo
144.723 109.769 144.723 109.777 144.723 109.791 cv
144.723 112.496 li
144.723 112.611 144.754 112.685 144.816 112.716 cv
144.877 112.748 144.993 112.766 145.161 112.772 cv
145.161 112.835 li
143.892 112.835 li
143.892 112.768 li
144.073 112.759 144.191 112.734 144.247 112.693 cv
144.302 112.653 144.33 112.565 144.33 112.431 cv
144.33 110.35 li
144.33 110.278 144.321 110.224 144.303 110.186 cv
144.285 110.149 144.246 110.13 144.187 110.13 cv
144.147 110.13 144.097 110.141 144.035 110.163 cv
143.973 110.185 143.915 110.207 143.86 110.231 cv
143.86 110.168 li
144.685 109.748 li
144.712 109.748 li
144.718 109.756 144.721 109.761 144.722 109.765 cv
cp
f
88.772 106.84 mo
88.772 104.84 li
0 0 0 rgb
@
83.7744 110.676 mo
83.7754 110.682 83.7759 110.694 83.7759 110.713 cv
83.7759 114.522 li
83.7759 114.685 83.8193 114.788 83.9063 114.833 cv
83.9932 114.876 84.1553 114.903 84.3931 114.912 cv
84.3931 115 li
82.6055 115 li
82.6055 114.905 li
82.8604 114.893 83.0273 114.857 83.1055 114.801 cv
83.1831 114.744 83.2222 114.62 83.2222 114.431 cv
83.2222 111.5 li
83.2222 111.399 83.2095 111.322 83.1846 111.27 cv
83.1592 111.217 83.104 111.19 83.02 111.19 cv
82.9648 111.19 82.8936 111.206 82.8062 111.236 cv
82.7188 111.267 82.6367 111.299 82.561 111.333 cv
82.561 111.244 li
83.7222 110.652 li
83.7603 110.652 li
83.7686 110.663 83.7734 110.671 83.7744 110.676 cv
cp
.137255 .121569 .12549 rgb
f
87.0322 114.371 mo
87.1484 114.031 87.2065 113.541 87.2065 112.897 cv
87.2065 112.385 87.1714 111.977 87.1021 111.671 cv
86.9712 111.102 86.7266 110.817 86.3677 110.817 cv
86.0093 110.817 85.7637 111.11 85.6309 111.696 cv
85.561 112.008 85.5264 112.419 85.5264 112.929 cv
85.5264 113.408 85.562 113.79 85.6338 114.077 cv
85.7686 114.612 86.022 114.88 86.3931 114.88 cv
86.7031 114.88 86.9165 114.71 87.0322 114.371 cv
cp
87.5132 111.409 mo
87.7261 111.82 87.833 112.292 87.833 112.826 cv
87.833 113.246 87.7676 113.642 87.6367 114.013 cv
87.3896 114.711 86.9629 115.06 86.355 115.06 cv
85.9395 115.06 85.5977 114.872 85.3301 114.494 cv
85.043 114.091 84.8999 113.543 84.8999 112.852 cv
84.8999 112.308 84.9956 111.839 85.1875 111.447 cv
85.4473 110.913 85.8457 110.646 86.3838 110.646 cv
86.8687 110.646 87.2451 110.9 87.5132 111.409 cv
cp
f
88.9048 111.554 mo
88.9048 111.296 li
91.2642 111.296 li
91.2642 111.554 li
88.9048 111.554 li
cp
f
93.23 112.558 mo
93.7778 111.989 94.1499 111.571 94.3462 111.305 cv
94.5425 111.039 94.6406 110.779 94.6406 110.526 cv
94.6406 110.305 94.5806 110.136 94.4609 110.02 cv
94.3413 109.904 94.1982 109.846 94.0317 109.846 cv
93.8267 109.846 93.6602 109.921 93.5332 110.07 cv
93.4629 110.153 93.3955 110.279 93.3311 110.45 cv
93.2344 110.43 li
93.3091 110.085 93.436 109.846 93.6152 109.712 cv
93.7939 109.578 93.9863 109.511 94.1914 109.511 cv
94.4443 109.511 94.6494 109.591 94.8057 109.75 cv
94.9624 109.91 95.0405 110.104 95.0405 110.335 cv
95.0405 110.581 94.9561 110.817 94.7866 111.044 cv
94.6172 111.272 94.2495 111.677 93.6831 112.259 cv
94.7148 112.259 li
94.8584 112.259 94.9595 112.242 95.0181 112.208 cv
95.0767 112.173 95.1426 112.089 95.2158 111.956 cv
95.2744 111.983 li
95.0249 112.609 li
93.23 112.609 li
93.23 112.558 li
cp
f
38.522 106.84 mo
38.522 104.84 li
0 0 0 rgb
@
33.5244 110.676 mo
33.5254 110.682 33.5259 110.694 33.5259 110.713 cv
33.5259 114.522 li
33.5259 114.685 33.5693 114.788 33.6563 114.833 cv
33.7432 114.876 33.9053 114.903 34.1431 114.912 cv
34.1431 115 li
32.3555 115 li
32.3555 114.905 li
32.6104 114.893 32.7773 114.857 32.8555 114.801 cv
32.9331 114.744 32.9722 114.62 32.9722 114.431 cv
32.9722 111.5 li
32.9722 111.399 32.9595 111.322 32.9346 111.27 cv
32.9092 111.217 32.854 111.19 32.77 111.19 cv
32.7148 111.19 32.6436 111.206 32.5562 111.236 cv
32.4688 111.267 32.3867 111.299 32.311 111.333 cv
32.311 111.244 li
33.4722 110.652 li
33.5103 110.652 li
33.5186 110.663 33.5234 110.671 33.5244 110.676 cv
cp
.137255 .121569 .12549 rgb
f
36.7822 114.371 mo
36.8984 114.031 36.9565 113.541 36.9565 112.897 cv
36.9565 112.385 36.9214 111.977 36.8521 111.671 cv
36.7212 111.102 36.4766 110.817 36.1177 110.817 cv
35.7593 110.817 35.5137 111.11 35.3809 111.696 cv
35.311 112.008 35.2764 112.419 35.2764 112.929 cv
35.2764 113.408 35.312 113.79 35.3838 114.077 cv
35.5186 114.612 35.772 114.88 36.1431 114.88 cv
36.4531 114.88 36.6665 114.71 36.7822 114.371 cv
cp
37.2632 111.409 mo
37.4761 111.82 37.583 112.292 37.583 112.826 cv
37.583 113.246 37.5176 113.642 37.3867 114.013 cv
37.1396 114.711 36.7129 115.06 36.105 115.06 cv
35.6895 115.06 35.3477 114.872 35.0801 114.494 cv
34.793 114.091 34.6499 113.543 34.6499 112.852 cv
34.6499 112.308 34.7456 111.839 34.9375 111.447 cv
35.1973 110.913 35.5957 110.646 36.1338 110.646 cv
36.6187 110.646 36.9951 110.9 37.2632 111.409 cv
cp
f
38.6548 111.554 mo
38.6548 111.296 li
41.0142 111.296 li
41.0142 111.554 li
38.6548 111.554 li
cp
f
43.5347 112.348 mo
43.6704 112.434 43.7852 112.477 43.8794 112.477 cv
44.0894 112.477 44.2451 112.406 44.3467 112.264 cv
44.4487 112.123 44.4995 111.968 44.4995 111.802 cv
44.4995 111.641 44.4585 111.5 44.376 111.379 cv
44.2368 111.173 44.0015 111.07 43.6704 111.07 cv
43.6509 111.07 43.6323 111.071 43.6143 111.072 cv
43.5967 111.072 43.5757 111.074 43.5518 111.077 cv
43.5469 111.019 li
43.7866 110.932 43.9756 110.833 44.1133 110.72 cv
44.251 110.608 44.3198 110.459 44.3198 110.275 cv
44.3198 110.112 44.2656 109.988 44.1567 109.902 cv
44.0483 109.817 43.9243 109.774 43.7852 109.774 cv
43.6206 109.774 43.4751 109.835 43.3491 109.956 cv
43.2803 110.022 43.2061 110.124 43.127 110.262 cv
43.0571 110.246 li
43.1172 110.019 43.2285 109.836 43.3921 109.7 cv
43.5552 109.564 43.7441 109.496 43.958 109.496 cv
44.1875 109.496 44.3643 109.559 44.4893 109.684 cv
44.6147 109.81 44.6772 109.956 44.6772 110.12 cv
44.6772 110.266 44.6255 110.399 44.522 110.52 cv
44.4639 110.589 44.373 110.666 44.25 110.751 cv
44.394 110.813 44.5093 110.885 44.5962 110.967 cv
44.7593 111.125 44.8408 111.324 44.8408 111.565 cv
44.8408 111.849 44.729 112.1 44.5054 112.317 cv
44.2813 112.535 43.9624 112.643 43.5493 112.643 cv
43.3652 112.643 43.2358 112.616 43.1616 112.561 cv
43.0874 112.506 43.0503 112.448 43.0503 112.385 cv
43.0503 112.346 43.063 112.308 43.0874 112.272 cv
43.1123 112.236 43.1523 112.218 43.208 112.218 cv
43.29 112.218 43.3989 112.262 43.5347 112.348 cv
cp
f
35.3809 106.84 mo
37.3809 106.84 li
0 0 0 rgb
@
20.146 107.976 mo
20.146 107.613 li
23.4663 107.613 li
23.4663 107.976 li
20.146 107.976 li
cp
.137255 .121569 .12549 rgb
f
26.8994 105.137 mo
26.9004 105.143 26.9009 105.155 26.9009 105.174 cv
26.9009 108.983 li
26.9009 109.146 26.9443 109.249 27.0313 109.293 cv
27.1182 109.337 27.2803 109.364 27.5181 109.373 cv
27.5181 109.461 li
25.7305 109.461 li
25.7305 109.366 li
25.9854 109.354 26.1523 109.318 26.2305 109.262 cv
26.3081 109.205 26.3472 109.081 26.3472 108.892 cv
26.3472 105.961 li
26.3472 105.86 26.3345 105.783 26.3096 105.73 cv
26.2842 105.678 26.229 105.651 26.145 105.651 cv
26.0898 105.651 26.0186 105.667 25.9312 105.697 cv
25.8438 105.728 25.7617 105.76 25.686 105.794 cv
25.686 105.705 li
26.8472 105.113 li
26.8853 105.113 li
26.8936 105.124 26.8984 105.132 26.8994 105.137 cv
cp
f
28.7681 109.431 mo
28.6987 109.36 28.6641 109.275 28.6641 109.176 cv
28.6641 109.077 28.6992 108.993 28.77 108.923 cv
28.8403 108.854 28.9253 108.819 29.0244 108.819 cv
29.1235 108.819 29.208 108.854 29.2778 108.923 cv
29.3472 108.993 29.3823 109.077 29.3823 109.176 cv
29.3823 109.275 29.3477 109.36 29.2793 109.431 cv
29.2109 109.501 29.126 109.537 29.0244 109.537 cv
28.9233 109.537 28.8379 109.501 28.7681 109.431 cv
cp
f
31.6572 108.832 mo
31.7734 108.492 31.8315 108.001 31.8315 107.358 cv
31.8315 106.846 31.7964 106.438 31.7271 106.132 cv
31.5962 105.563 31.3516 105.278 30.9927 105.278 cv
30.6343 105.278 30.3887 105.571 30.2559 106.157 cv
30.186 106.469 30.1514 106.88 30.1514 107.39 cv
30.1514 107.869 30.187 108.251 30.2588 108.538 cv
30.3936 109.073 30.647 109.341 31.0181 109.341 cv
31.3281 109.341 31.5415 109.171 31.6572 108.832 cv
cp
32.1382 105.87 mo
32.3511 106.281 32.458 106.753 32.458 107.287 cv
32.458 107.707 32.3926 108.103 32.2617 108.474 cv
32.0146 109.172 31.5879 109.521 30.98 109.521 cv
30.5645 109.521 30.2227 109.333 29.9551 108.955 cv
29.668 108.552 29.5249 108.004 29.5249 107.313 cv
29.5249 106.769 29.6206 106.3 29.8125 105.908 cv
30.0723 105.374 30.4707 105.107 31.0088 105.107 cv
31.4937 105.107 31.8701 105.361 32.1382 105.87 cv
cp
f
35.3809 82.5776 mo
37.3809 82.5776 li
35.3809 87.4297 mo
36.5811 87.4297 li
35.3809 92.2827 mo
36.5811 92.2827 li
35.3809 97.1348 mo
36.5811 97.1348 li
35.3809 101.988 mo
36.5811 101.988 li
0 0 0 rgb
@
20.146 83.7183 mo
20.146 83.355 li
23.4663 83.355 li
23.4663 83.7183 li
20.146 83.7183 li
cp
.137255 .121569 .12549 rgb
f
27.1572 84.5737 mo
27.2734 84.2344 27.3315 83.7437 27.3315 83.1006 cv
27.3315 82.5884 27.2964 82.1797 27.2271 81.874 cv
27.0962 81.3047 26.8516 81.02 26.4927 81.02 cv
26.1343 81.02 25.8887 81.313 25.7559 81.8989 cv
25.686 82.2109 25.6514 82.6221 25.6514 83.1323 cv
25.6514 83.6108 25.687 83.9932 25.7588 84.2798 cv
25.8936 84.8154 26.147 85.083 26.5181 85.083 cv
26.8281 85.083 27.0415 84.9131 27.1572 84.5737 cv
cp
27.6382 81.6118 mo
27.8511 82.0234 27.958 82.4956 27.958 83.0293 cv
27.958 83.4492 27.8926 83.8447 27.7617 84.2158 cv
27.5146 84.9141 27.0879 85.2632 26.48 85.2632 cv
26.0645 85.2632 25.7227 85.0747 25.4551 84.6968 cv
25.168 84.2939 25.0249 83.7466 25.0249 83.0547 cv
25.0249 82.5107 25.1206 82.042 25.3125 81.6499 cv
25.5723 81.1162 25.9707 80.8496 26.5088 80.8496 cv
26.9937 80.8496 27.3701 81.1035 27.6382 81.6118 cv
cp
f
28.7681 85.1729 mo
28.6987 85.1025 28.6641 85.0176 28.6641 84.9185 cv
28.6641 84.8193 28.6992 84.7349 28.77 84.665 cv
28.8403 84.5957 28.9253 84.561 29.0244 84.561 cv
29.1235 84.561 29.208 84.5957 29.2778 84.665 cv
29.3472 84.7349 29.3823 84.8193 29.3823 84.9185 cv
29.3823 85.0176 29.3477 85.1025 29.2793 85.1729 cv
29.2109 85.2437 29.126 85.2793 29.0244 85.2793 cv
28.9233 85.2793 28.8379 85.2437 28.7681 85.1729 cv
cp
f
30.4263 84.8281 mo
30.6216 84.9644 30.772 85.0322 30.8774 85.0322 cv
31.1206 85.0322 31.333 84.9253 31.5146 84.7109 cv
31.6963 84.4971 31.7871 84.2339 31.7871 83.9219 cv
31.7871 83.3755 31.4956 82.9819 30.9126 82.7417 cv
30.5894 82.6084 30.2886 82.542 30.0093 82.542 cv
29.9629 82.542 29.9341 82.5405 29.9224 82.5376 cv
29.9106 82.5342 29.8965 82.5234 29.8799 82.5044 cv
29.8838 82.4873 29.8877 82.4731 29.8906 82.4614 cv
29.894 82.4502 29.8975 82.439 29.9019 82.4282 cv
30.5918 80.916 li
31.9487 80.916 li
32.0161 80.916 32.0684 80.9043 32.105 80.8809 cv
32.1421 80.8579 32.1899 80.8145 32.249 80.7515 cv
32.2998 80.7954 li
32.0557 81.3809 li
32.0474 81.3999 32.0244 81.4121 31.9863 81.4175 cv
31.9482 81.4229 31.9072 81.4253 31.8628 81.4253 cv
30.6367 81.4253 li
30.3672 81.979 li
30.7139 82.0381 30.9673 82.0938 31.1274 82.1465 cv
31.3916 82.2354 31.6123 82.3662 31.7896 82.5391 cv
31.9419 82.689 32.0566 82.8569 32.1348 83.0435 cv
32.2129 83.2305 32.252 83.4282 32.252 83.6367 cv
32.252 84.103 32.0859 84.4922 31.7529 84.8047 cv
31.4204 85.1167 30.9995 85.2729 30.4907 85.2729 cv
30.2837 85.2729 30.1172 85.2524 29.9902 85.2124 cv
29.7788 85.1475 29.6733 85.0303 29.6733 84.8613 cv
29.6733 84.7983 29.6963 84.7427 29.7417 84.6953 cv
29.7871 84.6479 29.8574 84.624 29.9521 84.624 cv
30.0728 84.624 30.2305 84.6919 30.4263 84.8281 cv
cp
f
35.3809 58.3149 mo
37.3809 58.3149 li
35.3809 63.168 mo
36.5811 63.168 li
35.3809 68.02 mo
36.5811 68.02 li
35.3809 72.873 mo
36.5811 72.873 li
35.3809 77.7246 mo
36.5811 77.7246 li
0 0 0 rgb
@
27.1572 60.3003 mo
27.2734 59.9609 27.3315 59.4702 27.3315 58.8271 cv
27.3315 58.3149 27.2964 57.9063 27.2271 57.6006 cv
27.0962 57.0313 26.8516 56.7466 26.4927 56.7466 cv
26.1343 56.7466 25.8887 57.0396 25.7559 57.6255 cv
25.686 57.9375 25.6514 58.3486 25.6514 58.8589 cv
25.6514 59.3374 25.687 59.7197 25.7588 60.0063 cv
25.8936 60.542 26.147 60.8096 26.5181 60.8096 cv
26.8281 60.8096 27.0415 60.6396 27.1572 60.3003 cv
cp
27.6382 57.3384 mo
27.8511 57.75 27.958 58.2222 27.958 58.7559 cv
27.958 59.1758 27.8926 59.5713 27.7617 59.9424 cv
27.5146 60.6406 27.0879 60.9897 26.48 60.9897 cv
26.0645 60.9897 25.7227 60.8013 25.4551 60.4233 cv
25.168 60.0205 25.0249 59.4731 25.0249 58.7813 cv
25.0249 58.2373 25.1206 57.7686 25.3125 57.3765 cv
25.5723 56.8428 25.9707 56.5762 26.5088 56.5762 cv
26.9937 56.5762 27.3701 56.8301 27.6382 57.3384 cv
cp
.137255 .121569 .12549 rgb
f
28.7681 60.8994 mo
28.6987 60.8291 28.6641 60.7441 28.6641 60.645 cv
28.6641 60.5459 28.6992 60.4614 28.77 60.3916 cv
28.8403 60.3223 28.9253 60.2876 29.0244 60.2876 cv
29.1235 60.2876 29.208 60.3223 29.2778 60.3916 cv
29.3472 60.4614 29.3823 60.5459 29.3823 60.645 cv
29.3823 60.7441 29.3477 60.8291 29.2793 60.8994 cv
29.2109 60.9702 29.126 61.0059 29.0244 61.0059 cv
28.9233 61.0059 28.8379 60.9702 28.7681 60.8994 cv
cp
f
31.6572 60.3003 mo
31.7734 59.9609 31.8315 59.4702 31.8315 58.8271 cv
31.8315 58.3149 31.7964 57.9063 31.7271 57.6006 cv
31.5962 57.0313 31.3516 56.7466 30.9927 56.7466 cv
30.6343 56.7466 30.3887 57.0396 30.2559 57.6255 cv
30.186 57.9375 30.1514 58.3486 30.1514 58.8589 cv
30.1514 59.3374 30.187 59.7197 30.2588 60.0063 cv
30.3936 60.542 30.647 60.8096 31.0181 60.8096 cv
31.3281 60.8096 31.5415 60.6396 31.6572 60.3003 cv
cp
32.1382 57.3384 mo
32.3511 57.75 32.458 58.2222 32.458 58.7559 cv
32.458 59.1758 32.3926 59.5713 32.2617 59.9424 cv
32.0146 60.6406 31.5879 60.9897 30.98 60.9897 cv
30.5645 60.9897 30.2227 60.8013 29.9551 60.4233 cv
29.668 60.0205 29.5249 59.4731 29.5249 58.7813 cv
29.5249 58.2373 29.6206 57.7686 29.8125 57.3765 cv
30.0723 56.8428 30.4707 56.5762 31.0088 56.5762 cv
31.4937 56.5762 31.8701 56.8301 32.1382 57.3384 cv
cp
f
35.3809 34.0527 mo
37.3809 34.0527 li
35.3809 38.9048 mo
36.5811 38.9048 li
35.3809 43.7578 mo
36.5811 43.7578 li
35.3809 48.6099 mo
36.5811 48.6099 li
35.3809 53.4629 mo
36.5811 53.4629 li
0 0 0 rgb
@
27.1572 36.0425 mo
27.2734 35.7031 27.3315 35.2124 27.3315 34.5693 cv
27.3315 34.0571 27.2964 33.6484 27.2271 33.3428 cv
27.0962 32.7734 26.8516 32.4888 26.4927 32.4888 cv
26.1343 32.4888 25.8887 32.7817 25.7559 33.3677 cv
25.686 33.6797 25.6514 34.0908 25.6514 34.6011 cv
25.6514 35.0796 25.687 35.4619 25.7588 35.7485 cv
25.8936 36.2842 26.147 36.5518 26.5181 36.5518 cv
26.8281 36.5518 27.0415 36.3818 27.1572 36.0425 cv
cp
27.6382 33.0806 mo
27.8511 33.4922 27.958 33.9644 27.958 34.498 cv
27.958 34.918 27.8926 35.3135 27.7617 35.6846 cv
27.5146 36.3828 27.0879 36.7319 26.48 36.7319 cv
26.0645 36.7319 25.7227 36.5435 25.4551 36.1655 cv
25.168 35.7627 25.0249 35.2153 25.0249 34.5234 cv
25.0249 33.9795 25.1206 33.5107 25.3125 33.1187 cv
25.5723 32.585 25.9707 32.3184 26.5088 32.3184 cv
26.9937 32.3184 27.3701 32.5723 27.6382 33.0806 cv
cp
.137255 .121569 .12549 rgb
f
28.7681 36.6416 mo
28.6987 36.5713 28.6641 36.4863 28.6641 36.3872 cv
28.6641 36.2881 28.6992 36.2036 28.77 36.1338 cv
28.8403 36.0645 28.9253 36.0298 29.0244 36.0298 cv
29.1235 36.0298 29.208 36.0645 29.2778 36.1338 cv
29.3472 36.2036 29.3823 36.2881 29.3823 36.3872 cv
29.3823 36.4863 29.3477 36.5713 29.2793 36.6416 cv
29.2109 36.7124 29.126 36.748 29.0244 36.748 cv
28.9233 36.748 28.8379 36.7124 28.7681 36.6416 cv
cp
f
30.4263 36.2969 mo
30.6216 36.4331 30.772 36.501 30.8774 36.501 cv
31.1206 36.501 31.333 36.394 31.5146 36.1797 cv
31.6963 35.9658 31.7871 35.7026 31.7871 35.3906 cv
31.7871 34.8442 31.4956 34.4507 30.9126 34.2104 cv
30.5894 34.0771 30.2886 34.0107 30.0093 34.0107 cv
29.9629 34.0107 29.9341 34.0093 29.9224 34.0063 cv
29.9106 34.0029 29.8965 33.9922 29.8799 33.9731 cv
29.8838 33.9561 29.8877 33.9419 29.8906 33.9302 cv
29.894 33.9189 29.8975 33.9077 29.9019 33.897 cv
30.5918 32.3848 li
31.9487 32.3848 li
32.0161 32.3848 32.0684 32.373 32.105 32.3496 cv
32.1421 32.3267 32.1899 32.2832 32.249 32.2202 cv
32.2998 32.2642 li
32.0557 32.8496 li
32.0474 32.8687 32.0244 32.8809 31.9863 32.8862 cv
31.9482 32.8916 31.9072 32.894 31.8628 32.894 cv
30.6367 32.894 li
30.3672 33.4478 li
30.7139 33.5068 30.9673 33.5625 31.1274 33.6152 cv
31.3916 33.7041 31.6123 33.835 31.7896 34.0078 cv
31.9419 34.1577 32.0566 34.3257 32.1348 34.5122 cv
32.2129 34.6992 32.252 34.897 32.252 35.1055 cv
32.252 35.5718 32.0859 35.9609 31.7529 36.2734 cv
31.4204 36.5854 30.9995 36.7417 30.4907 36.7417 cv
30.2837 36.7417 30.1172 36.7212 29.9902 36.6812 cv
29.7788 36.6162 29.6733 36.499 29.6733 36.3301 cv
29.6733 36.2671 29.6963 36.2114 29.7417 36.1641 cv
29.7871 36.1167 29.8574 36.0928 29.9521 36.0928 cv
30.0728 36.0928 30.2305 36.1606 30.4263 36.2969 cv
cp
f
35.3809 9.79004 mo
37.3809 9.79004 li
35.3809 14.6431 mo
36.5811 14.6431 li
35.3809 19.4946 mo
36.5811 19.4946 li
35.3809 24.3477 mo
36.5811 24.3477 li
35.3809 29.1997 mo
36.5811 29.1997 li
0 0 0 rgb
@
26.8994 8.08252 mo
26.9004 8.08789 26.9009 8.1001 26.9009 8.11914 cv
26.9009 11.9287 li
26.9009 12.0908 26.9443 12.1943 27.0313 12.2388 cv
27.1182 12.2827 27.2803 12.3091 27.5181 12.3179 cv
27.5181 12.4063 li
25.7305 12.4063 li
25.7305 12.3115 li
25.9854 12.2988 26.1523 12.2637 26.2305 12.207 cv
26.3081 12.1499 26.3472 12.0264 26.3472 11.8369 cv
26.3472 8.90674 li
26.3472 8.80566 26.3345 8.72852 26.3096 8.67578 cv
26.2842 8.62305 26.229 8.59668 26.145 8.59668 cv
26.0898 8.59668 26.0186 8.61182 25.9312 8.64258 cv
25.8438 8.67334 25.7617 8.70557 25.686 8.73926 cv
25.686 8.65039 li
26.8472 8.05859 li
26.8853 8.05859 li
26.8936 8.06934 26.8984 8.07715 26.8994 8.08252 cv
cp
.137255 .121569 .12549 rgb
f
28.7681 12.376 mo
28.6987 12.3057 28.6641 12.2207 28.6641 12.1216 cv
28.6641 12.0225 28.6992 11.938 28.77 11.8682 cv
28.8403 11.7988 28.9253 11.7642 29.0244 11.7642 cv
29.1235 11.7642 29.208 11.7988 29.2778 11.8682 cv
29.3472 11.938 29.3823 12.0225 29.3823 12.1216 cv
29.3823 12.2207 29.3477 12.3057 29.2793 12.376 cv
29.2109 12.4468 29.126 12.4824 29.0244 12.4824 cv
28.9233 12.4824 28.8379 12.4468 28.7681 12.376 cv
cp
f
31.6572 11.7769 mo
31.7734 11.4375 31.8315 10.9468 31.8315 10.3037 cv
31.8315 9.7915 31.7964 9.38281 31.7271 9.07715 cv
31.5962 8.50781 31.3516 8.22314 30.9927 8.22314 cv
30.6343 8.22314 30.3887 8.51611 30.2559 9.10205 cv
30.186 9.41406 30.1514 9.8252 30.1514 10.3354 cv
30.1514 10.814 30.187 11.1963 30.2588 11.4829 cv
30.3936 12.0186 30.647 12.2861 31.0181 12.2861 cv
31.3281 12.2861 31.5415 12.1162 31.6572 11.7769 cv
cp
32.1382 8.81494 mo
32.3511 9.22656 32.458 9.69873 32.458 10.2324 cv
32.458 10.6523 32.3926 11.0479 32.2617 11.4189 cv
32.0146 12.1172 31.5879 12.4663 30.98 12.4663 cv
30.5645 12.4663 30.2227 12.2778 29.9551 11.8999 cv
29.668 11.4971 29.5249 10.9497 29.5249 10.2578 cv
29.5249 9.71387 29.6206 9.24512 29.8125 8.85303 cv
30.0723 8.31934 30.4707 8.05273 31.0088 8.05273 cv
31.4937 8.05273 31.8701 8.30664 32.1382 8.81494 cv
cp
f
189.271 9.79004 mo
189.271 11.79 li
174.144 9.79004 mo
174.144 11.79 li
139.021 9.79004 mo
139.021 11.79 li
123.895 9.79004 mo
123.895 11.79 li
88.772 9.79004 mo
88.772 11.79 li
73.645 9.79004 mo
73.645 11.79 li
38.522 9.79004 mo
38.522 11.79 li
0 0 0 rgb
@
.157 lw
186.972 9.79004 mo
186.972 10.3789 li
184.401 9.79004 mo
184.401 10.3789 li
181.487 9.79004 mo
181.487 10.3789 li
178.123 9.79004 mo
178.123 10.3789 li
169.275 9.79004 mo
169.275 10.3789 li
162.997 9.79004 mo
162.997 10.3789 li
154.148 9.79004 mo
154.148 10.3789 li
136.722 9.79004 mo
136.722 10.3789 li
134.152 9.79004 mo
134.152 10.3789 li
131.238 9.79004 mo
131.238 10.3789 li
127.874 9.79004 mo
127.874 10.3789 li
119.025 9.79004 mo
119.025 10.3789 li
112.747 9.79004 mo
112.747 10.3789 li
103.898 9.79004 mo
103.898 10.3789 li
86.4722 9.79004 mo
86.4722 10.3789 li
83.9019 9.79004 mo
83.9019 10.3789 li
80.9883 9.79004 mo
80.9883 10.3789 li
77.624 9.79004 mo
77.624 10.3789 li
68.7749 9.79004 mo
68.7749 10.3789 li
62.4971 9.79004 mo
62.4971 10.3789 li
53.6489 9.79004 mo
53.6489 10.3789 li
@
.4 lw
192.412 9.79004 mo
190.412 9.79004 li
192.412 14.6431 mo
191.212 14.6431 li
192.412 19.4946 mo
191.212 19.4946 li
192.412 24.3477 mo
191.212 24.3477 li
192.412 29.1997 mo
191.212 29.1997 li
192.412 34.0527 mo
190.412 34.0527 li
192.412 38.9048 mo
191.212 38.9048 li
192.412 43.7578 mo
191.212 43.7578 li
192.412 48.6099 mo
191.212 48.6099 li
192.412 53.4629 mo
191.212 53.4629 li
192.412 58.3149 mo
190.412 58.3149 li
192.412 63.168 mo
191.212 63.168 li
192.412 68.02 mo
191.212 68.02 li
192.412 72.873 mo
191.212 72.873 li
192.412 77.7246 mo
191.212 77.7246 li
192.412 82.5776 mo
190.412 82.5776 li
192.412 87.4297 mo
191.212 87.4297 li
192.412 92.2827 mo
191.212 92.2827 li
192.412 97.1348 mo
191.212 97.1348 li
192.412 101.988 mo
191.212 101.988 li
192.412 106.84 mo
190.412 106.84 li
@
.6 lw
2 lc
[.72 2.88 ] 0 dsh
247.194 35.0527 mo
249.706 35.6196 li
252.217 36.1958 li
254.731 36.7798 li
257.243 37.374 li
259.754 37.978 li
262.268 38.5898 li
264.78 39.2109 li
267.293 39.8408 li
269.805 40.479 li
272.319 41.126 li
274.831 41.7798 li
277.342 42.4409 li
279.856 43.1069 li
282.368 43.7778 li
284.879 44.4517 li
287.393 45.127 li
289.905 45.7998 li
292.418 46.4707 li
294.93 47.1357 li
297.444 47.791 li
299.956 48.4336 li
302.467 49.0576 li
304.981 49.6606 li
307.493 50.2378 li
310.004 50.7808 li
312.518 51.2837 li
315.03 51.7407 li
317.543 52.144 li
320.055 52.4849 li
322.567 52.7539 li
325.081 52.9419 li
327.592 53.042 li
330.106 53.043 li
332.618 52.9297 li
335.129 52.7041 li
337.641 52.3467 li
340.155 51.8486 li
342.667 51.21 li
345.18 50.4028 li
347.692 49.438 li
350.206 48.2808 li
352.717 46.9419 li
355.231 45.3906 li
357.743 43.6211 li
360.254 41.627 li
362.766 39.3989 li
365.28 36.9468 li
367.792 34.2881 li
370.305 31.458 li
372.817 28.521 li
375.331 25.5566 li
377.842 22.6709 li
380.356 19.9868 li
382.868 17.6509 li
385.379 15.8257 li
387.891 14.7017 li
390.405 14.5039 li
392.917 15.5317 li
395.43 18.314 li
.247059 .239216 .6 rgb
@
[2.88 2.88 ] 0 dsh
247.194 41.1499 mo
249.706 41.606 li
252.217 42.0737 li
254.731 42.5508 li
257.243 43.041 li
259.754 43.543 li
262.268 44.0547 li
264.78 44.5776 li
267.293 45.1128 li
269.805 45.6548 li
272.319 46.2139 li
274.831 46.7759 li
277.342 47.3477 li
279.856 47.9277 li
282.368 48.5181 li
284.879 49.105 li
287.393 49.7041 li
289.905 50.2979 li
292.418 50.894 li
294.93 51.4839 li
297.444 52.0679 li
299.956 52.6416 li
302.467 53.1997 li
304.981 53.7368 li
307.493 54.2549 li
310.004 54.7397 li
312.518 55.189 li
315.03 55.5938 li
317.543 55.9478 li
320.055 56.2437 li
322.567 56.4697 li
325.081 56.6201 li
327.592 56.6851 li
330.106 56.6587 li
332.618 56.5 li
335.129 56.2578 li
337.641 55.8711 li
340.155 55.3369 li
342.667 54.689 li
345.18 53.8291 li
347.692 52.8647 li
350.206 51.6387 li
352.717 50.2817 li
355.231 48.6567 li
357.743 46.8066 li
360.254 44.707 li
362.766 42.3359 li
365.28 39.6978 li
367.792 36.7998 li
370.305 33.6558 li
372.817 30.3447 li
375.331 26.9326 li
377.842 23.5156 li
380.356 20.252 li
382.868 17.2837 li
385.379 14.8076 li
387.891 13.0601 li
390.405 12.3291 li
392.917 13.0498 li
395.43 16.0278 li
.6 .239216 .443137 rgb
@
1 lw
[] 0 dsh
247.194 85.2627 mo
249.706 85.4541 li
252.217 85.646 li
254.731 85.8369 li
257.243 86.0327 li
259.754 86.2319 li
262.268 86.436 li
264.78 86.644 li
267.293 86.8589 li
269.805 87.0757 li
272.319 87.3027 li
274.831 87.5298 li
277.342 87.7617 li
279.856 87.9971 li
282.368 88.2378 li
284.879 88.4688 li
287.393 88.707 li
289.905 88.9336 li
292.418 89.1538 li
294.93 89.3589 li
297.444 89.5459 li
299.956 89.71 li
302.467 89.8418 li
304.981 89.9326 li
307.493 89.9839 li
310.004 89.9756 li
312.518 89.9019 li
315.03 89.749 li
317.543 89.5078 li
320.055 89.166 li
322.567 88.7061 li
325.081 88.1201 li
327.592 87.395 li
330.106 86.5259 li
332.618 85.4648 li
335.129 84.2666 li
337.641 82.8687 li
340.155 81.2739 li
342.667 79.521 li
345.18 77.5166 li
347.692 75.3789 li
350.206 72.957 li
352.717 70.3926 li
355.231 67.5566 li
357.743 64.502 li
360.254 61.2109 li
362.766 57.6709 li
365.28 53.8906 li
367.792 49.8818 li
370.305 45.6641 li
372.817 41.3159 li
375.331 36.9077 li
377.842 32.5347 li
380.356 28.3569 li
382.868 24.5166 li
385.379 21.2119 li
387.891 18.6777 li
390.405 17.207 li
392.917 17.2378 li
395.43 19.582 li
.6 .545098 .239216 rgb
@
.4 lw
401.083 9.79004 mo
401.083 106.84 li
244.051 9.79004 mo
401.083 9.79004 li
244.051 106.84 mo
244.051 9.79004 li
401.083 106.84 mo
244.051 106.84 li
0 0 0 rgb
@
0 lc
397.942 106.84 mo
397.942 104.84 li
@
398.368 110.676 mo
398.37 110.682 398.37 110.694 398.37 110.713 cv
398.37 114.522 li
398.37 114.685 398.413 114.788 398.5 114.833 cv
398.586 114.876 398.749 114.903 398.987 114.912 cv
398.987 115 li
397.2 115 li
397.2 114.905 li
397.454 114.893 397.622 114.857 397.7 114.801 cv
397.778 114.744 397.817 114.62 397.817 114.431 cv
397.817 111.5 li
397.817 111.399 397.803 111.322 397.778 111.27 cv
397.752 111.217 397.698 111.19 397.614 111.19 cv
397.559 111.19 397.487 111.206 397.401 111.236 cv
397.313 111.267 397.231 111.299 397.155 111.333 cv
397.155 111.244 li
398.317 110.652 li
398.354 110.652 li
398.362 110.663 398.368 110.671 398.368 110.676 cv
cp
.137255 .121569 .12549 rgb
f
347.692 106.84 mo
347.692 104.84 li
0 0 0 rgb
@
342.696 110.902 mo
342.698 110.907 342.698 110.919 342.698 110.938 cv
342.698 114.748 li
342.698 114.91 342.741 115.014 342.829 115.058 cv
342.915 115.102 343.077 115.128 343.315 115.137 cv
343.315 115.226 li
341.528 115.226 li
341.528 115.131 li
341.782 115.118 341.95 115.083 342.028 115.026 cv
342.106 114.969 342.145 114.846 342.145 114.656 cv
342.145 111.726 li
342.145 111.625 342.131 111.548 342.106 111.495 cv
342.081 111.442 342.026 111.416 341.942 111.416 cv
341.887 111.416 341.815 111.431 341.729 111.462 cv
341.641 111.493 341.559 111.525 341.483 111.559 cv
341.483 111.47 li
342.645 110.878 li
342.682 110.878 li
342.69 110.889 342.696 110.896 342.696 110.902 cv
cp
.137255 .121569 .12549 rgb
f
345.954 114.596 mo
346.071 114.257 346.127 113.766 346.127 113.123 cv
346.127 112.611 346.094 112.202 346.024 111.896 cv
345.893 111.327 345.649 111.042 345.29 111.042 cv
344.93 111.042 344.686 111.335 344.553 111.921 cv
344.483 112.233 344.448 112.645 344.448 113.155 cv
344.448 113.633 344.485 114.016 344.555 114.302 cv
344.69 114.838 344.944 115.105 345.315 115.105 cv
345.625 115.105 345.838 114.936 345.954 114.596 cv
cp
346.436 111.634 mo
346.649 112.046 346.754 112.518 346.754 113.052 cv
346.754 113.472 346.69 113.867 346.559 114.238 cv
346.311 114.937 345.885 115.286 345.278 115.286 cv
344.862 115.286 344.52 115.097 344.252 114.719 cv
343.965 114.316 343.821 113.769 343.821 113.077 cv
343.821 112.533 343.918 112.064 344.11 111.672 cv
344.37 111.139 344.768 110.872 345.305 110.872 cv
345.792 110.872 346.167 111.126 346.436 111.634 cv
cp
f
347.819 111.78 mo
347.819 111.521 li
350.178 111.521 li
350.178 111.78 li
347.819 111.78 li
cp
f
353.393 109.765 mo
353.395 109.769 353.395 109.777 353.395 109.791 cv
353.395 112.496 li
353.395 112.611 353.426 112.685 353.487 112.716 cv
353.549 112.748 353.665 112.766 353.833 112.772 cv
353.833 112.835 li
352.563 112.835 li
352.563 112.768 li
352.745 112.759 352.864 112.734 352.918 112.693 cv
352.975 112.653 353.002 112.565 353.002 112.431 cv
353.002 110.35 li
353.002 110.278 352.993 110.224 352.975 110.186 cv
352.958 110.149 352.918 110.13 352.858 110.13 cv
352.819 110.13 352.768 110.141 352.708 110.163 cv
352.645 110.185 352.586 110.207 352.532 110.231 cv
352.532 110.168 li
353.356 109.748 li
353.383 109.748 li
353.389 109.756 353.393 109.761 353.393 109.765 cv
cp
f
297.444 106.84 mo
297.444 104.84 li
0 0 0 rgb
@
292.438 110.676 mo
292.44 110.682 292.44 110.694 292.44 110.713 cv
292.44 114.522 li
292.44 114.685 292.483 114.788 292.571 114.833 cv
292.657 114.876 292.819 114.903 293.057 114.912 cv
293.057 115 li
291.27 115 li
291.27 114.905 li
291.524 114.893 291.692 114.857 291.77 114.801 cv
291.848 114.744 291.887 114.62 291.887 114.431 cv
291.887 111.5 li
291.887 111.399 291.874 111.322 291.848 111.27 cv
291.823 111.217 291.768 111.19 291.684 111.19 cv
291.629 111.19 291.557 111.206 291.471 111.236 cv
291.383 111.267 291.301 111.299 291.225 111.333 cv
291.225 111.244 li
292.387 110.652 li
292.424 110.652 li
292.432 110.663 292.438 110.671 292.438 110.676 cv
cp
.137255 .121569 .12549 rgb
f
295.696 114.371 mo
295.813 114.031 295.87 113.541 295.87 112.897 cv
295.87 112.385 295.836 111.977 295.766 111.671 cv
295.635 111.102 295.391 110.817 295.032 110.817 cv
294.672 110.817 294.428 111.11 294.295 111.696 cv
294.225 112.008 294.19 112.419 294.19 112.929 cv
294.19 113.408 294.227 113.79 294.297 114.077 cv
294.432 114.612 294.686 114.88 295.057 114.88 cv
295.368 114.88 295.581 114.71 295.696 114.371 cv
cp
296.178 111.409 mo
296.391 111.82 296.497 112.292 296.497 112.826 cv
296.497 113.246 296.432 113.642 296.301 114.013 cv
296.053 114.711 295.627 115.06 295.02 115.06 cv
294.604 115.06 294.262 114.872 293.995 114.494 cv
293.708 114.091 293.563 113.543 293.563 112.852 cv
293.563 112.308 293.661 111.839 293.852 111.447 cv
294.112 110.913 294.51 110.646 295.047 110.646 cv
295.534 110.646 295.909 110.9 296.178 111.409 cv
cp
f
297.569 111.554 mo
297.569 111.296 li
299.928 111.296 li
299.928 111.554 li
297.569 111.554 li
cp
f
301.901 112.558 mo
302.45 111.989 302.823 111.571 303.018 111.305 cv
303.215 111.039 303.313 110.779 303.313 110.526 cv
303.313 110.305 303.252 110.136 303.133 110.02 cv
303.012 109.904 302.87 109.846 302.704 109.846 cv
302.499 109.846 302.333 109.921 302.206 110.07 cv
302.135 110.153 302.067 110.279 302.002 110.45 cv
301.907 110.43 li
301.981 110.085 302.108 109.846 302.288 109.712 cv
302.465 109.578 302.659 109.511 302.864 109.511 cv
303.116 109.511 303.321 109.591 303.477 109.75 cv
303.633 109.91 303.713 110.104 303.713 110.335 cv
303.713 110.581 303.627 110.817 303.458 111.044 cv
303.29 111.272 302.92 111.677 302.356 112.259 cv
303.387 112.259 li
303.53 112.259 303.631 112.242 303.69 112.208 cv
303.749 112.173 303.815 112.089 303.887 111.956 cv
303.946 111.983 li
303.696 112.609 li
301.901 112.609 li
301.901 112.558 li
cp
f
247.194 106.84 mo
247.194 104.84 li
0 0 0 rgb
@
242.196 110.676 mo
242.198 110.682 242.198 110.694 242.198 110.713 cv
242.198 114.522 li
242.198 114.685 242.241 114.788 242.329 114.833 cv
242.415 114.876 242.577 114.903 242.815 114.912 cv
242.815 115 li
241.028 115 li
241.028 114.905 li
241.282 114.893 241.45 114.857 241.528 114.801 cv
241.606 114.744 241.645 114.62 241.645 114.431 cv
241.645 111.5 li
241.645 111.399 241.631 111.322 241.606 111.27 cv
241.581 111.217 241.526 111.19 241.442 111.19 cv
241.387 111.19 241.315 111.206 241.229 111.236 cv
241.141 111.267 241.059 111.299 240.983 111.333 cv
240.983 111.244 li
242.145 110.652 li
242.182 110.652 li
242.19 110.663 242.196 110.671 242.196 110.676 cv
cp
.137255 .121569 .12549 rgb
f
245.454 114.371 mo
245.571 114.031 245.627 113.541 245.627 112.897 cv
245.627 112.385 245.594 111.977 245.524 111.671 cv
245.393 111.102 245.149 110.817 244.79 110.817 cv
244.43 110.817 244.186 111.11 244.053 111.696 cv
243.983 112.008 243.948 112.419 243.948 112.929 cv
243.948 113.408 243.985 113.79 244.055 114.077 cv
244.19 114.612 244.444 114.88 244.815 114.88 cv
245.125 114.88 245.338 114.71 245.454 114.371 cv
cp
245.936 111.409 mo
246.149 111.82 246.254 112.292 246.254 112.826 cv
246.254 113.246 246.19 113.642 246.059 114.013 cv
245.811 114.711 245.385 115.06 244.778 115.06 cv
244.362 115.06 244.02 114.872 243.752 114.494 cv
243.465 114.091 243.321 113.543 243.321 112.852 cv
243.321 112.308 243.418 111.839 243.61 111.447 cv
243.87 110.913 244.268 110.646 244.805 110.646 cv
245.292 110.646 245.667 110.9 245.936 111.409 cv
cp
f
247.319 111.554 mo
247.319 111.296 li
249.678 111.296 li
249.678 111.554 li
247.319 111.554 li
cp
f
252.215 112.348 mo
252.35 112.434 252.465 112.477 252.559 112.477 cv
252.768 112.477 252.924 112.406 253.026 112.264 cv
253.127 112.123 253.18 111.968 253.18 111.802 cv
253.18 111.641 253.137 111.5 253.055 111.379 cv
252.917 111.173 252.682 111.07 252.35 111.07 cv
252.331 111.07 252.313 111.071 252.293 111.072 cv
252.276 111.072 252.254 111.074 252.231 111.077 cv
252.227 111.019 li
252.467 110.932 252.655 110.833 252.793 110.72 cv
252.93 110.608 253 110.459 253 110.275 cv
253 110.112 252.946 109.988 252.836 109.902 cv
252.729 109.817 252.604 109.774 252.465 109.774 cv
252.299 109.774 252.155 109.835 252.03 109.956 cv
251.959 110.022 251.885 110.124 251.807 110.262 cv
251.737 110.246 li
251.797 110.019 251.909 109.836 252.071 109.7 cv
252.235 109.564 252.424 109.496 252.637 109.496 cv
252.868 109.496 253.043 109.559 253.168 109.684 cv
253.293 109.81 253.356 109.956 253.356 110.12 cv
253.356 110.266 253.305 110.399 253.202 110.52 cv
253.143 110.589 253.053 110.666 252.93 110.751 cv
253.073 110.813 253.19 110.885 253.276 110.967 cv
253.44 111.125 253.52 111.324 253.52 111.565 cv
253.52 111.849 253.409 112.1 253.184 112.317 cv
252.961 112.535 252.643 112.643 252.229 112.643 cv
252.045 112.643 251.917 112.616 251.842 112.561 cv
251.768 112.506 251.731 112.448 251.731 112.385 cv
251.731 112.346 251.743 112.308 251.768 112.272 cv
251.792 112.236 251.833 112.218 251.887 112.218 cv
251.969 112.218 252.079 112.262 252.215 112.348 cv
cp
f
244.051 106.84 mo
246.051 106.84 li
0 0 0 rgb
@
228.825 107.976 mo
228.825 107.613 li
232.145 107.613 li
232.145 107.976 li
228.825 107.976 li
cp
.137255 .121569 .12549 rgb
f
235.571 105.137 mo
235.573 105.143 235.573 105.155 235.573 105.174 cv
235.573 108.983 li
235.573 109.146 235.616 109.249 235.704 109.293 cv
235.79 109.337 235.952 109.364 236.19 109.373 cv
236.19 109.461 li
234.403 109.461 li
234.403 109.366 li
234.657 109.354 234.825 109.318 234.903 109.262 cv
234.981 109.205 235.02 109.081 235.02 108.892 cv
235.02 105.961 li
235.02 105.86 235.006 105.783 234.981 105.73 cv
234.956 105.678 234.901 105.651 234.817 105.651 cv
234.762 105.651 234.69 105.667 234.604 105.697 cv
234.516 105.728 234.434 105.76 234.358 105.794 cv
234.358 105.705 li
235.52 105.113 li
235.557 105.113 li
235.565 105.124 235.571 105.132 235.571 105.137 cv
cp
f
237.44 109.431 mo
237.37 109.36 237.336 109.275 237.336 109.176 cv
237.336 109.077 237.372 108.993 237.442 108.923 cv
237.512 108.854 237.598 108.819 237.696 108.819 cv
237.795 108.819 237.879 108.854 237.95 108.923 cv
238.02 108.993 238.053 109.077 238.053 109.176 cv
238.053 109.275 238.02 109.36 237.952 109.431 cv
237.883 109.501 237.797 109.537 237.696 109.537 cv
237.594 109.537 237.51 109.501 237.44 109.431 cv
cp
f
240.329 108.832 mo
240.446 108.492 240.502 108.001 240.502 107.358 cv
240.502 106.846 240.469 106.438 240.399 106.132 cv
240.268 105.563 240.024 105.278 239.665 105.278 cv
239.305 105.278 239.061 105.571 238.928 106.157 cv
238.858 106.469 238.823 106.88 238.823 107.39 cv
238.823 107.869 238.86 108.251 238.93 108.538 cv
239.065 109.073 239.319 109.341 239.69 109.341 cv
240 109.341 240.213 109.171 240.329 108.832 cv
cp
240.811 105.87 mo
241.024 106.281 241.129 106.753 241.129 107.287 cv
241.129 107.707 241.065 108.103 240.934 108.474 cv
240.686 109.172 240.26 109.521 239.653 109.521 cv
239.237 109.521 238.895 109.333 238.627 108.955 cv
238.34 108.552 238.196 108.004 238.196 107.313 cv
238.196 106.769 238.293 106.3 238.485 105.908 cv
238.745 105.374 239.143 105.107 239.68 105.107 cv
240.167 105.107 240.542 105.361 240.811 105.87 cv
cp
f
244.051 82.5776 mo
246.051 82.5776 li
244.051 87.4297 mo
245.252 87.4297 li
244.051 92.2827 mo
245.252 92.2827 li
244.051 97.1348 mo
245.252 97.1348 li
244.051 101.988 mo
245.252 101.988 li
0 0 0 rgb
@
228.825 83.7183 mo
228.825 83.355 li
232.145 83.355 li
232.145 83.7183 li
228.825 83.7183 li
cp
.137255 .121569 .12549 rgb
f
235.829 84.5737 mo
235.946 84.2344 236.002 83.7437 236.002 83.1006 cv
236.002 82.5884 235.969 82.1797 235.899 81.874 cv
235.768 81.3047 235.524 81.02 235.165 81.02 cv
234.805 81.02 234.561 81.313 234.428 81.8989 cv
234.358 82.2109 234.323 82.6221 234.323 83.1323 cv
234.323 83.6108 234.36 83.9932 234.43 84.2798 cv
234.565 84.8154 234.819 85.083 235.19 85.083 cv
235.5 85.083 235.713 84.9131 235.829 84.5737 cv
cp
236.311 81.6118 mo
236.524 82.0234 236.629 82.4956 236.629 83.0293 cv
236.629 83.4492 236.565 83.8447 236.434 84.2158 cv
236.186 84.9141 235.76 85.2632 235.153 85.2632 cv
234.737 85.2632 234.395 85.0747 234.127 84.6968 cv
233.84 84.2939 233.696 83.7466 233.696 83.0547 cv
233.696 82.5107 233.793 82.042 233.985 81.6499 cv
234.245 81.1162 234.643 80.8496 235.18 80.8496 cv
235.667 80.8496 236.042 81.1035 236.311 81.6118 cv
cp
f
237.44 85.1729 mo
237.37 85.1025 237.336 85.0176 237.336 84.9185 cv
237.336 84.8193 237.372 84.7349 237.442 84.665 cv
237.512 84.5957 237.598 84.561 237.696 84.561 cv
237.795 84.561 237.879 84.5957 237.95 84.665 cv
238.02 84.7349 238.053 84.8193 238.053 84.9185 cv
238.053 85.0176 238.02 85.1025 237.952 85.1729 cv
237.883 85.2437 237.797 85.2793 237.696 85.2793 cv
237.594 85.2793 237.51 85.2437 237.44 85.1729 cv
cp
f
239.098 84.8281 mo
239.293 84.9644 239.444 85.0322 239.549 85.0322 cv
239.792 85.0322 240.004 84.9253 240.186 84.7109 cv
240.368 84.4971 240.459 84.2339 240.459 83.9219 cv
240.459 83.3755 240.167 82.9819 239.584 82.7417 cv
239.26 82.6084 238.959 82.542 238.682 82.542 cv
238.635 82.542 238.606 82.5405 238.594 82.5376 cv
238.583 82.5342 238.569 82.5234 238.551 82.5044 cv
238.555 82.4873 238.559 82.4731 238.563 82.4614 cv
238.565 82.4502 238.569 82.439 238.573 82.4282 cv
239.264 80.916 li
240.62 80.916 li
240.688 80.916 240.741 80.9043 240.778 80.8809 cv
240.813 80.8579 240.862 80.8145 240.92 80.7515 cv
240.971 80.7954 li
240.727 81.3809 li
240.719 81.3999 240.696 81.4121 240.659 81.4175 cv
240.62 81.4229 240.579 81.4253 240.534 81.4253 cv
239.309 81.4253 li
239.04 81.979 li
239.385 82.0381 239.639 82.0938 239.799 82.1465 cv
240.063 82.2354 240.284 82.3662 240.461 82.5391 cv
240.614 82.689 240.729 82.8569 240.807 83.0435 cv
240.885 83.2305 240.924 83.4282 240.924 83.6367 cv
240.924 84.103 240.758 84.4922 240.424 84.8047 cv
240.092 85.1167 239.672 85.2729 239.163 85.2729 cv
238.956 85.2729 238.79 85.2524 238.663 85.2124 cv
238.452 85.1475 238.346 85.0303 238.346 84.8613 cv
238.346 84.7983 238.368 84.7427 238.413 84.6953 cv
238.459 84.6479 238.53 84.624 238.624 84.624 cv
238.745 84.624 238.903 84.6919 239.098 84.8281 cv
cp
f
244.051 58.3149 mo
246.051 58.3149 li
244.051 63.168 mo
245.252 63.168 li
244.051 68.02 mo
245.252 68.02 li
244.051 72.873 mo
245.252 72.873 li
244.051 77.7246 mo
245.252 77.7246 li
0 0 0 rgb
@
235.829 60.3003 mo
235.946 59.9609 236.002 59.4702 236.002 58.8271 cv
236.002 58.3149 235.969 57.9063 235.899 57.6006 cv
235.768 57.0313 235.524 56.7466 235.165 56.7466 cv
234.805 56.7466 234.561 57.0396 234.428 57.6255 cv
234.358 57.9375 234.323 58.3486 234.323 58.8589 cv
234.323 59.3374 234.36 59.7197 234.43 60.0063 cv
234.565 60.542 234.819 60.8096 235.19 60.8096 cv
235.5 60.8096 235.713 60.6396 235.829 60.3003 cv
cp
236.311 57.3384 mo
236.524 57.75 236.629 58.2222 236.629 58.7559 cv
236.629 59.1758 236.565 59.5713 236.434 59.9424 cv
236.186 60.6406 235.76 60.9897 235.153 60.9897 cv
234.737 60.9897 234.395 60.8013 234.127 60.4233 cv
233.84 60.0205 233.696 59.4731 233.696 58.7813 cv
233.696 58.2373 233.793 57.7686 233.985 57.3765 cv
234.245 56.8428 234.643 56.5762 235.18 56.5762 cv
235.667 56.5762 236.042 56.8301 236.311 57.3384 cv
cp
.137255 .121569 .12549 rgb
f
237.44 60.8994 mo
237.37 60.8291 237.336 60.7441 237.336 60.645 cv
237.336 60.5459 237.372 60.4614 237.442 60.3916 cv
237.512 60.3223 237.598 60.2876 237.696 60.2876 cv
237.795 60.2876 237.879 60.3223 237.95 60.3916 cv
238.02 60.4614 238.053 60.5459 238.053 60.645 cv
238.053 60.7441 238.02 60.8291 237.952 60.8994 cv
237.883 60.9702 237.797 61.0059 237.696 61.0059 cv
237.594 61.0059 237.51 60.9702 237.44 60.8994 cv
cp
f
240.329 60.3003 mo
240.446 59.9609 240.502 59.4702 240.502 58.8271 cv
240.502 58.3149 240.469 57.9063 240.399 57.6006 cv
240.268 57.0313 240.024 56.7466 239.665 56.7466 cv
239.305 56.7466 239.061 57.0396 238.928 57.6255 cv
238.858 57.9375 238.823 58.3486 238.823 58.8589 cv
238.823 59.3374 238.86 59.7197 238.93 60.0063 cv
239.065 60.542 239.319 60.8096 239.69 60.8096 cv
240 60.8096 240.213 60.6396 240.329 60.3003 cv
cp
240.811 57.3384 mo
241.024 57.75 241.129 58.2222 241.129 58.7559 cv
241.129 59.1758 241.065 59.5713 240.934 59.9424 cv
240.686 60.6406 240.26 60.9897 239.653 60.9897 cv
239.237 60.9897 238.895 60.8013 238.627 60.4233 cv
238.34 60.0205 238.196 59.4731 238.196 58.7813 cv
238.196 58.2373 238.293 57.7686 238.485 57.3765 cv
238.745 56.8428 239.143 56.5762 239.68 56.5762 cv
240.167 56.5762 240.542 56.8301 240.811 57.3384 cv
cp
f
244.051 34.0527 mo
246.051 34.0527 li
244.051 38.9048 mo
245.252 38.9048 li
244.051 43.7578 mo
245.252 43.7578 li
244.051 48.6099 mo
245.252 48.6099 li
244.051 53.4629 mo
245.252 53.4629 li
0 0 0 rgb
@
235.829 36.0425 mo
235.946 35.7031 236.002 35.2124 236.002 34.5693 cv
236.002 34.0571 235.969 33.6484 235.899 33.3428 cv
235.768 32.7734 235.524 32.4888 235.165 32.4888 cv
234.805 32.4888 234.561 32.7817 234.428 33.3677 cv
234.358 33.6797 234.323 34.0908 234.323 34.6011 cv
234.323 35.0796 234.36 35.4619 234.43 35.7485 cv
234.565 36.2842 234.819 36.5518 235.19 36.5518 cv
235.5 36.5518 235.713 36.3818 235.829 36.0425 cv
cp
236.311 33.0806 mo
236.524 33.4922 236.629 33.9644 236.629 34.498 cv
236.629 34.918 236.565 35.3135 236.434 35.6846 cv
236.186 36.3828 235.76 36.7319 235.153 36.7319 cv
234.737 36.7319 234.395 36.5435 234.127 36.1655 cv
233.84 35.7627 233.696 35.2153 233.696 34.5234 cv
233.696 33.9795 233.793 33.5107 233.985 33.1187 cv
234.245 32.585 234.643 32.3184 235.18 32.3184 cv
235.667 32.3184 236.042 32.5723 236.311 33.0806 cv
cp
.137255 .121569 .12549 rgb
f
237.44 36.6416 mo
237.37 36.5713 237.336 36.4863 237.336 36.3872 cv
237.336 36.2881 237.372 36.2036 237.442 36.1338 cv
237.512 36.0645 237.598 36.0298 237.696 36.0298 cv
237.795 36.0298 237.879 36.0645 237.95 36.1338 cv
238.02 36.2036 238.053 36.2881 238.053 36.3872 cv
238.053 36.4863 238.02 36.5713 237.952 36.6416 cv
237.883 36.7124 237.797 36.748 237.696 36.748 cv
237.594 36.748 237.51 36.7124 237.44 36.6416 cv
cp
f
239.098 36.2969 mo
239.293 36.4331 239.444 36.501 239.549 36.501 cv
239.792 36.501 240.004 36.394 240.186 36.1797 cv
240.368 35.9658 240.459 35.7026 240.459 35.3906 cv
240.459 34.8442 240.167 34.4507 239.584 34.2104 cv
239.26 34.0771 238.959 34.0107 238.682 34.0107 cv
238.635 34.0107 238.606 34.0093 238.594 34.0063 cv
238.583 34.0029 238.569 33.9922 238.551 33.9731 cv
238.555 33.9561 238.559 33.9419 238.563 33.9302 cv
238.565 33.9189 238.569 33.9077 238.573 33.897 cv
239.264 32.3848 li
240.62 32.3848 li
240.688 32.3848 240.741 32.373 240.778 32.3496 cv
240.813 32.3267 240.862 32.2832 240.92 32.2202 cv
240.971 32.2642 li
240.727 32.8496 li
240.719 32.8687 240.696 32.8809 240.659 32.8862 cv
240.62 32.8916 240.579 32.894 240.534 32.894 cv
239.309 32.894 li
239.04 33.4478 li
239.385 33.5068 239.639 33.5625 239.799 33.6152 cv
240.063 33.7041 240.284 33.835 240.461 34.0078 cv
240.614 34.1577 240.729 34.3257 240.807 34.5122 cv
240.885 34.6992 240.924 34.897 240.924 35.1055 cv
240.924 35.5718 240.758 35.9609 240.424 36.2734 cv
240.092 36.5854 239.672 36.7417 239.163 36.7417 cv
238.956 36.7417 238.79 36.7212 238.663 36.6812 cv
238.452 36.6162 238.346 36.499 238.346 36.3301 cv
238.346 36.2671 238.368 36.2114 238.413 36.1641 cv
238.459 36.1167 238.53 36.0928 238.624 36.0928 cv
238.745 36.0928 238.903 36.1606 239.098 36.2969 cv
cp
f
244.051 9.79004 mo
246.051 9.79004 li
244.051 14.6431 mo
245.252 14.6431 li
244.051 19.4946 mo
245.252 19.4946 li
244.051 24.3477 mo
245.252 24.3477 li
244.051 29.1997 mo
245.252 29.1997 li
0 0 0 rgb
@
235.571 8.08252 mo
235.573 8.08789 235.573 8.1001 235.573 8.11914 cv
235.573 11.9287 li
235.573 12.0908 235.616 12.1943 235.704 12.2388 cv
235.79 12.2827 235.952 12.3091 236.19 12.3179 cv
236.19 12.4063 li
234.403 12.4063 li
234.403 12.3115 li
234.657 12.2988 234.825 12.2637 234.903 12.207 cv
234.981 12.1499 235.02 12.0264 235.02 11.8369 cv
235.02 8.90674 li
235.02 8.80566 235.006 8.72852 234.981 8.67578 cv
234.956 8.62305 234.901 8.59668 234.817 8.59668 cv
234.762 8.59668 234.69 8.61182 234.604 8.64258 cv
234.516 8.67334 234.434 8.70557 234.358 8.73926 cv
234.358 8.65039 li
235.52 8.05859 li
235.557 8.05859 li
235.565 8.06934 235.571 8.07715 235.571 8.08252 cv
cp
.137255 .121569 .12549 rgb
f
237.44 12.376 mo
237.37 12.3057 237.336 12.2207 237.336 12.1216 cv
237.336 12.0225 237.372 11.938 237.442 11.8682 cv
237.512 11.7988 237.598 11.7642 237.696 11.7642 cv
237.795 11.7642 237.879 11.7988 237.95 11.8682 cv
238.02 11.938 238.053 12.0225 238.053 12.1216 cv
238.053 12.2207 238.02 12.3057 237.952 12.376 cv
237.883 12.4468 237.797 12.4824 237.696 12.4824 cv
237.594 12.4824 237.51 12.4468 237.44 12.376 cv
cp
f
240.329 11.7769 mo
240.446 11.4375 240.502 10.9468 240.502 10.3037 cv
240.502 9.7915 240.469 9.38281 240.399 9.07715 cv
240.268 8.50781 240.024 8.22314 239.665 8.22314 cv
239.305 8.22314 239.061 8.51611 238.928 9.10205 cv
238.858 9.41406 238.823 9.8252 238.823 10.3354 cv
238.823 10.814 238.86 11.1963 238.93 11.4829 cv
239.065 12.0186 239.319 12.2861 239.69 12.2861 cv
240 12.2861 240.213 12.1162 240.329 11.7769 cv
cp
240.811 8.81494 mo
241.024 9.22656 241.129 9.69873 241.129 10.2324 cv
241.129 10.6523 241.065 11.0479 240.934 11.4189 cv
240.686 12.1172 240.26 12.4663 239.653 12.4663 cv
239.237 12.4663 238.895 12.2778 238.627 11.8999 cv
238.34 11.4971 238.196 10.9497 238.196 10.2578 cv
238.196 9.71387 238.293 9.24512 238.485 8.85303 cv
238.745 8.31934 239.143 8.05273 239.68 8.05273 cv
240.167 8.05273 240.542 8.30664 240.811 8.81494 cv
cp
f
397.942 9.79004 mo
397.942 11.79 li
382.815 9.79004 mo
382.815 11.79 li
347.692 9.79004 mo
347.692 11.79 li
332.567 9.79004 mo
332.567 11.79 li
297.444 9.79004 mo
297.444 11.79 li
282.317 9.79004 mo
282.317 11.79 li
247.194 9.79004 mo
247.194 11.79 li
0 0 0 rgb
@
.157 lw
395.643 9.79004 mo
395.643 10.3789 li
393.073 9.79004 mo
393.073 10.3789 li
390.159 9.79004 mo
390.159 10.3789 li
386.793 9.79004 mo
386.793 10.3789 li
377.946 9.79004 mo
377.946 10.3789 li
371.668 9.79004 mo
371.668 10.3789 li
362.819 9.79004 mo
362.819 10.3789 li
345.393 9.79004 mo
345.393 10.3789 li
342.823 9.79004 mo
342.823 10.3789 li
339.909 9.79004 mo
339.909 10.3789 li
336.545 9.79004 mo
336.545 10.3789 li
327.696 9.79004 mo
327.696 10.3789 li
321.418 9.79004 mo
321.418 10.3789 li
312.569 9.79004 mo
312.569 10.3789 li
295.143 9.79004 mo
295.143 10.3789 li
292.573 9.79004 mo
292.573 10.3789 li
289.659 9.79004 mo
289.659 10.3789 li
286.295 9.79004 mo
286.295 10.3789 li
277.446 9.79004 mo
277.446 10.3789 li
271.168 9.79004 mo
271.168 10.3789 li
262.321 9.79004 mo
262.321 10.3789 li
@
.4 lw
401.083 9.79004 mo
399.083 9.79004 li
401.083 14.6431 mo
399.883 14.6431 li
401.083 19.4946 mo
399.883 19.4946 li
401.083 24.3477 mo
399.883 24.3477 li
401.083 29.1997 mo
399.883 29.1997 li
401.083 34.0527 mo
399.083 34.0527 li
401.083 38.9048 mo
399.883 38.9048 li
401.083 43.7578 mo
399.883 43.7578 li
401.083 48.6099 mo
399.883 48.6099 li
401.083 53.4629 mo
399.883 53.4629 li
401.083 58.3149 mo
399.083 58.3149 li
401.083 63.168 mo
399.883 63.168 li
401.083 68.02 mo
399.883 68.02 li
401.083 72.873 mo
399.883 72.873 li
401.083 77.7246 mo
399.883 77.7246 li
401.083 82.5776 mo
399.083 82.5776 li
401.083 87.4297 mo
399.883 87.4297 li
401.083 92.2827 mo
399.883 92.2827 li
401.083 97.1348 mo
399.883 97.1348 li
401.083 101.988 mo
399.883 101.988 li
401.083 106.84 mo
399.083 106.84 li
@
1 lw
2 lc
37.772 145.356 mo
40.2842 145.386 li
42.7969 145.424 li
45.3091 145.471 li
47.8223 145.527 li
50.334 145.597 li
52.8472 145.678 li
55.3589 145.774 li
57.8721 145.889 li
60.3843 146.021 li
62.897 146.175 li
65.4092 146.354 li
67.9219 146.563 li
70.4341 146.805 li
72.9473 147.085 li
75.459 147.41 li
77.9722 147.788 li
80.4839 148.228 li
82.9971 148.742 li
85.5093 149.344 li
88.022 150.053 li
90.5342 150.894 li
93.0469 151.896 li
95.5591 153.102 li
98.0723 154.563 li
100.584 156.353 li
103.097 158.57 li
105.609 161.351 li
108.122 164.884 li
110.634 169.424 li
113.147 175.304 li
115.659 182.907 li
118.171 192.476 li
120.684 203.576 li
123.196 213.876 li
125.709 218.332 li
128.221 212.172 li
130.734 197.2 li
133.246 180.338 li
135.759 166.406 li
138.271 156.399 li
140.784 149.579 li
143.296 144.979 li
145.809 141.854 li
148.321 139.696 li
150.834 138.182 li
153.346 137.1 li
155.859 136.313 li
158.371 135.734 li
160.884 135.3 li
163.396 134.97 li
165.909 134.714 li
168.421 134.514 li
170.934 134.353 li
173.446 134.222 li
175.959 134.114 li
178.471 134.022 li
180.984 133.947 li
183.496 133.888 li
186.009 133.858 li
.247059 .239216 .6 rgb
@
.4 lw
191.662 133.811 mo
191.662 230.862 li
34.6309 133.811 mo
191.662 133.811 li
34.6309 230.862 mo
34.6309 133.811 li
191.662 230.862 mo
34.6309 230.862 li
0 0 0 rgb
@
0 lc
188.521 230.862 mo
188.521 228.862 li
@
188.954 234.7 mo
188.955 234.705 188.956 234.717 188.956 234.736 cv
188.956 238.546 li
188.956 238.708 188.999 238.812 189.086 238.855 cv
189.173 238.9 189.335 238.927 189.573 238.935 cv
189.573 239.023 li
187.785 239.023 li
187.785 238.929 li
188.04 238.916 188.207 238.881 188.285 238.824 cv
188.363 238.768 188.402 238.644 188.402 238.454 cv
188.402 235.524 li
188.402 235.423 188.389 235.346 188.364 235.293 cv
188.339 235.24 188.284 235.214 188.2 235.214 cv
188.145 235.214 188.073 235.229 187.986 235.26 cv
187.898 235.29 187.816 235.322 187.741 235.356 cv
187.741 235.268 li
188.902 234.676 li
188.94 234.676 li
188.948 234.687 188.953 234.694 188.954 234.7 cv
cp
.137255 .121569 .12549 rgb
f
138.271 230.862 mo
138.271 228.862 li
0 0 0 rgb
@
133.267 234.918 mo
133.268 234.923 133.268 234.935 133.268 234.954 cv
133.268 238.764 li
133.268 238.926 133.312 239.029 133.398 239.073 cv
133.485 239.118 133.647 239.145 133.885 239.152 cv
133.885 239.241 li
132.098 239.241 li
132.098 239.146 li
132.353 239.134 132.52 239.099 132.598 239.042 cv
132.675 238.985 132.714 238.861 132.714 238.672 cv
132.714 235.742 li
132.714 235.641 132.702 235.563 132.677 235.511 cv
132.651 235.458 132.596 235.432 132.512 235.432 cv
132.457 235.432 132.386 235.447 132.298 235.478 cv
132.211 235.508 132.129 235.54 132.053 235.574 cv
132.053 235.485 li
133.214 234.894 li
133.252 234.894 li
133.261 234.904 133.266 234.912 133.267 234.918 cv
cp
.137255 .121569 .12549 rgb
f
136.524 238.612 mo
136.641 238.272 136.699 237.781 136.699 237.139 cv
136.699 236.626 136.664 236.218 136.594 235.912 cv
136.463 235.343 136.219 235.059 135.86 235.059 cv
135.501 235.059 135.256 235.352 135.123 235.938 cv
135.053 236.249 135.019 236.66 135.019 237.17 cv
135.019 237.648 135.054 238.031 135.126 238.318 cv
135.261 238.854 135.514 239.121 135.885 239.121 cv
136.195 239.121 136.409 238.951 136.524 238.612 cv
cp
137.005 235.65 mo
137.218 236.062 137.325 236.534 137.325 237.067 cv
137.325 237.487 137.26 237.883 137.129 238.254 cv
136.882 238.952 136.455 239.302 135.847 239.302 cv
135.432 239.302 135.09 239.112 134.822 238.735 cv
134.535 238.332 134.392 237.785 134.392 237.093 cv
134.392 236.549 134.488 236.08 134.68 235.688 cv
134.939 235.154 135.338 234.888 135.876 234.888 cv
136.361 234.888 136.737 235.142 137.005 235.65 cv
cp
f
138.397 235.803 mo
138.397 235.545 li
140.756 235.545 li
140.756 235.803 li
138.397 235.803 li
cp
f
143.964 233.788 mo
143.965 233.792 143.965 233.801 143.965 233.814 cv
143.965 236.52 li
143.965 236.635 143.996 236.708 144.058 236.739 cv
144.12 236.771 144.235 236.789 144.403 236.796 cv
144.403 236.858 li
143.134 236.858 li
143.134 236.791 li
143.315 236.782 143.434 236.757 143.489 236.717 cv
143.544 236.677 143.572 236.589 143.572 236.454 cv
143.572 234.374 li
143.572 234.302 143.563 234.247 143.545 234.21 cv
143.527 234.172 143.488 234.153 143.429 234.153 cv
143.39 234.153 143.339 234.164 143.277 234.187 cv
143.215 234.208 143.157 234.23 143.103 234.255 cv
143.103 234.191 li
143.927 233.771 li
143.954 233.771 li
143.96 233.779 143.963 233.785 143.964 233.788 cv
cp
f
88.022 230.862 mo
88.022 228.862 li
0 0 0 rgb
@
83.0244 234.7 mo
83.0254 234.705 83.0259 234.717 83.0259 234.736 cv
83.0259 238.546 li
83.0259 238.708 83.0693 238.812 83.1563 238.855 cv
83.2432 238.9 83.4053 238.927 83.6431 238.935 cv
83.6431 239.023 li
81.8555 239.023 li
81.8555 238.929 li
82.1104 238.916 82.2773 238.881 82.3555 238.824 cv
82.4331 238.768 82.4722 238.644 82.4722 238.454 cv
82.4722 235.524 li
82.4722 235.423 82.4595 235.346 82.4346 235.293 cv
82.4092 235.24 82.354 235.214 82.27 235.214 cv
82.2148 235.214 82.1436 235.229 82.0562 235.26 cv
81.9688 235.29 81.8867 235.322 81.811 235.356 cv
81.811 235.268 li
82.9722 234.676 li
83.0103 234.676 li
83.0186 234.687 83.0234 234.694 83.0244 234.7 cv
cp
.137255 .121569 .12549 rgb
f
86.2822 238.395 mo
86.3984 238.055 86.4565 237.563 86.4565 236.921 cv
86.4565 236.408 86.4214 236 86.3521 235.694 cv
86.2212 235.125 85.9766 234.841 85.6177 234.841 cv
85.2593 234.841 85.0137 235.134 84.8809 235.72 cv
84.811 236.031 84.7764 236.442 84.7764 236.952 cv
84.7764 237.431 84.812 237.813 84.8838 238.101 cv
85.0186 238.636 85.272 238.903 85.6431 238.903 cv
85.9531 238.903 86.1665 238.733 86.2822 238.395 cv
cp
86.7632 235.433 mo
86.9761 235.844 87.083 236.316 87.083 236.85 cv
87.083 237.27 87.0176 237.665 86.8867 238.036 cv
86.6396 238.734 86.2129 239.084 85.605 239.084 cv
85.1895 239.084 84.8477 238.895 84.5801 238.518 cv
84.293 238.114 84.1499 237.567 84.1499 236.875 cv
84.1499 236.331 84.2456 235.862 84.4375 235.47 cv
84.6973 234.937 85.0957 234.67 85.6338 234.67 cv
86.1187 234.67 86.4951 234.924 86.7632 235.433 cv
cp
f
88.1548 235.577 mo
88.1548 235.319 li
90.5142 235.319 li
90.5142 235.577 li
88.1548 235.577 li
cp
f
92.48 236.581 mo
93.0278 236.013 93.3999 235.595 93.5962 235.328 cv
93.7925 235.063 93.8906 234.803 93.8906 234.55 cv
93.8906 234.328 93.8306 234.159 93.7109 234.044 cv
93.5913 233.928 93.4482 233.869 93.2817 233.869 cv
93.0767 233.869 92.9102 233.944 92.7832 234.094 cv
92.7129 234.177 92.6455 234.303 92.5811 234.474 cv
92.4844 234.453 li
92.5591 234.108 92.686 233.87 92.8652 233.735 cv
93.0439 233.602 93.2363 233.535 93.4414 233.535 cv
93.6943 233.535 93.8994 233.614 94.0557 233.773 cv
94.2124 233.934 94.2905 234.128 94.2905 234.358 cv
94.2905 234.604 94.2061 234.841 94.0366 235.068 cv
93.8672 235.295 93.4995 235.7 92.9331 236.282 cv
93.9648 236.282 li
94.1084 236.282 94.2095 236.266 94.2681 236.23 cv
94.3267 236.196 94.3926 236.112 94.4658 235.979 cv
94.5244 236.006 li
94.2749 236.633 li
92.48 236.633 li
92.48 236.581 li
cp
f
37.772 230.862 mo
37.772 228.862 li
0 0 0 rgb
@
32.7744 234.7 mo
32.7754 234.705 32.7759 234.717 32.7759 234.736 cv
32.7759 238.546 li
32.7759 238.708 32.8193 238.812 32.9063 238.855 cv
32.9932 238.9 33.1553 238.927 33.3931 238.935 cv
33.3931 239.023 li
31.6055 239.023 li
31.6055 238.929 li
31.8604 238.916 32.0273 238.881 32.1055 238.824 cv
32.1831 238.768 32.2222 238.644 32.2222 238.454 cv
32.2222 235.524 li
32.2222 235.423 32.2095 235.346 32.1846 235.293 cv
32.1592 235.24 32.104 235.214 32.02 235.214 cv
31.9648 235.214 31.8936 235.229 31.8062 235.26 cv
31.7188 235.29 31.6367 235.322 31.561 235.356 cv
31.561 235.268 li
32.7222 234.676 li
32.7603 234.676 li
32.7686 234.687 32.7734 234.694 32.7744 234.7 cv
cp
.137255 .121569 .12549 rgb
f
36.0322 238.395 mo
36.1484 238.055 36.2065 237.563 36.2065 236.921 cv
36.2065 236.408 36.1714 236 36.1021 235.694 cv
35.9712 235.125 35.7266 234.841 35.3677 234.841 cv
35.0093 234.841 34.7637 235.134 34.6309 235.72 cv
34.561 236.031 34.5264 236.442 34.5264 236.952 cv
34.5264 237.431 34.562 237.813 34.6338 238.101 cv
34.7686 238.636 35.022 238.903 35.3931 238.903 cv
35.7031 238.903 35.9165 238.733 36.0322 238.395 cv
cp
36.5132 235.433 mo
36.7261 235.844 36.833 236.316 36.833 236.85 cv
36.833 237.27 36.7676 237.665 36.6367 238.036 cv
36.3896 238.734 35.9629 239.084 35.355 239.084 cv
34.9395 239.084 34.5977 238.895 34.3301 238.518 cv
34.043 238.114 33.8999 237.567 33.8999 236.875 cv
33.8999 236.331 33.9956 235.862 34.1875 235.47 cv
34.4473 234.937 34.8457 234.67 35.3838 234.67 cv
35.8687 234.67 36.2451 234.924 36.5132 235.433 cv
cp
f
37.9048 235.577 mo
37.9048 235.319 li
40.2642 235.319 li
40.2642 235.577 li
37.9048 235.577 li
cp
f
42.7925 236.371 mo
42.9282 236.457 43.043 236.5 43.1372 236.5 cv
43.3472 236.5 43.5029 236.43 43.6045 236.288 cv
43.7065 236.146 43.7573 235.992 43.7573 235.825 cv
43.7573 235.665 43.7163 235.523 43.6338 235.402 cv
43.4946 235.196 43.2593 235.094 42.9282 235.094 cv
42.9087 235.094 42.8901 235.095 42.8721 235.095 cv
42.8545 235.096 42.8335 235.098 42.8096 235.101 cv
42.8047 235.042 li
43.0444 234.955 43.2334 234.855 43.3711 234.743 cv
43.5088 234.631 43.5776 234.482 43.5776 234.299 cv
43.5776 234.136 43.5234 234.011 43.4146 233.926 cv
43.3062 233.84 43.1821 233.798 43.043 233.798 cv
42.8784 233.798 42.7329 233.858 42.6069 233.979 cv
42.5381 234.046 42.4639 234.147 42.3848 234.285 cv
42.3149 234.27 li
42.375 234.042 42.4863 233.859 42.6499 233.724 cv
42.813 233.587 43.002 233.52 43.2158 233.52 cv
43.4453 233.52 43.6221 233.582 43.7471 233.708 cv
43.8726 233.834 43.9351 233.979 43.9351 234.144 cv
43.9351 234.289 43.8833 234.422 43.7798 234.544 cv
43.7217 234.612 43.6309 234.689 43.5078 234.774 cv
43.6519 234.836 43.7671 234.908 43.854 234.99 cv
44.0171 235.147 44.0986 235.347 44.0986 235.588 cv
44.0986 235.873 43.9868 236.124 43.7632 236.341 cv
43.5391 236.558 43.2202 236.667 42.8071 236.667 cv
42.623 236.667 42.4937 236.64 42.4194 236.585 cv
42.3452 236.53 42.3081 236.471 42.3081 236.408 cv
42.3081 236.369 42.3208 236.332 42.3452 236.296 cv
42.3701 236.26 42.4102 236.242 42.4658 236.242 cv
42.5479 236.242 42.6567 236.285 42.7925 236.371 cv
cp
f
34.6309 220.078 mo
36.6309 220.078 li
34.6309 224.392 mo
35.8311 224.392 li
34.6309 228.705 mo
35.8311 228.705 li
0 0 0 rgb
@
20.896 221.218 mo
20.896 220.854 li
24.2163 220.854 li
24.2163 221.218 li
20.896 221.218 li
cp
.137255 .121569 .12549 rgb
f
27.6147 219.009 mo
26.0615 221.203 li
27.6147 221.203 li
27.6147 219.009 li
cp
27.8232 218.355 mo
28.124 218.355 li
28.124 221.203 li
28.7852 221.203 li
28.7852 221.624 li
28.124 221.624 li
28.124 222.703 li
27.6211 222.703 li
27.6211 221.624 li
25.7983 221.624 li
25.7983 221.203 li
27.8232 218.355 li
cp
f
30.915 222.074 mo
31.0313 221.734 31.0894 221.243 31.0894 220.601 cv
31.0894 220.088 31.0542 219.68 30.9849 219.374 cv
30.854 218.805 30.6094 218.521 30.2505 218.521 cv
29.8921 218.521 29.6465 218.813 29.5137 219.399 cv
29.4438 219.711 29.4092 220.122 29.4092 220.632 cv
29.4092 221.11 29.4448 221.493 29.5166 221.78 cv
29.6514 222.315 29.9048 222.583 30.2759 222.583 cv
30.5859 222.583 30.7993 222.413 30.915 222.074 cv
cp
31.396 219.112 mo
31.6089 219.523 31.7158 219.996 31.7158 220.529 cv
31.7158 220.949 31.6504 221.345 31.5195 221.716 cv
31.2725 222.414 30.8457 222.764 30.2378 222.764 cv
29.8223 222.764 29.4805 222.574 29.2129 222.197 cv
28.9258 221.794 28.7827 221.247 28.7827 220.555 cv
28.7827 220.011 28.8784 219.542 29.0703 219.149 cv
29.3301 218.616 29.7285 218.35 30.2666 218.35 cv
30.7515 218.35 31.1279 218.604 31.396 219.112 cv
cp
f
34.6309 198.512 mo
36.6309 198.512 li
34.6309 202.825 mo
35.8311 202.825 li
34.6309 207.138 mo
35.8311 207.138 li
34.6309 211.452 mo
35.8311 211.452 li
34.6309 215.765 mo
35.8311 215.765 li
0 0 0 rgb
@
20.896 199.647 mo
20.896 199.284 li
24.2163 199.284 li
24.2163 199.647 li
20.896 199.647 li
cp
.137255 .121569 .12549 rgb
f
26.689 200.765 mo
26.8799 200.886 27.042 200.946 27.1748 200.946 cv
27.4702 200.946 27.6895 200.847 27.833 200.646 cv
27.9761 200.447 28.0479 200.229 28.0479 199.995 cv
28.0479 199.77 27.9897 199.57 27.874 199.399 cv
27.6777 199.11 27.3467 198.966 26.8804 198.966 cv
26.853 198.966 26.8267 198.966 26.8013 198.967 cv
26.7759 198.968 26.7466 198.971 26.7129 198.975 cv
26.7065 198.893 li
27.0439 198.771 27.3096 198.63 27.5039 198.472 cv
27.6978 198.313 27.7949 198.104 27.7949 197.846 cv
27.7949 197.615 27.7183 197.44 27.5654 197.32 cv
27.4126 197.2 27.2378 197.14 27.042 197.14 cv
26.8096 197.14 26.605 197.226 26.4282 197.396 cv
26.3311 197.489 26.2266 197.632 26.1147 197.826 cv
26.0166 197.805 li
26.1011 197.483 26.2583 197.228 26.4883 197.035 cv
26.7178 196.844 26.9839 196.747 27.2856 196.747 cv
27.6084 196.747 27.8574 196.836 28.0337 197.014 cv
28.21 197.19 28.2979 197.395 28.2979 197.627 cv
28.2979 197.832 28.2251 198.02 28.0796 198.19 cv
27.9976 198.287 27.8696 198.396 27.6968 198.517 cv
27.8994 198.603 28.0615 198.704 28.1841 198.82 cv
28.4141 199.041 28.5288 199.322 28.5288 199.661 cv
28.5288 200.063 28.3711 200.416 28.0562 200.722 cv
27.7407 201.027 27.292 201.181 26.7095 201.181 cv
26.4502 201.181 26.2681 201.142 26.1636 201.064 cv
26.0596 200.988 26.0073 200.905 26.0073 200.816 cv
26.0073 200.762 26.0244 200.709 26.0596 200.658 cv
26.0942 200.607 26.1504 200.582 26.2285 200.582 cv
26.3447 200.582 26.498 200.643 26.689 200.765 cv
cp
f
30.915 200.504 mo
31.0313 200.164 31.0894 199.673 31.0894 199.03 cv
31.0894 198.518 31.0542 198.109 30.9849 197.804 cv
30.854 197.234 30.6094 196.95 30.2505 196.95 cv
29.8921 196.95 29.6465 197.243 29.5137 197.829 cv
29.4438 198.141 29.4092 198.552 29.4092 199.062 cv
29.4092 199.54 29.4448 199.923 29.5166 200.21 cv
29.6514 200.745 29.9048 201.013 30.2759 201.013 cv
30.5859 201.013 30.7993 200.843 30.915 200.504 cv
cp
31.396 197.542 mo
31.6089 197.953 31.7158 198.426 31.7158 198.959 cv
31.7158 199.379 31.6504 199.774 31.5195 200.146 cv
31.2725 200.844 30.8457 201.193 30.2378 201.193 cv
29.8223 201.193 29.4805 201.004 29.2129 200.627 cv
28.9258 200.224 28.7827 199.677 28.7827 198.984 cv
28.7827 198.44 28.8784 197.972 29.0703 197.579 cv
29.3301 197.046 29.7285 196.779 30.2666 196.779 cv
30.7515 196.779 31.1279 197.033 31.396 197.542 cv
cp
f
34.6309 176.945 mo
36.6309 176.945 li
34.6309 181.258 mo
35.8311 181.258 li
34.6309 185.572 mo
35.8311 185.572 li
34.6309 189.885 mo
35.8311 189.885 li
34.6309 194.198 mo
35.8311 194.198 li
0 0 0 rgb
@
20.896 178.085 mo
20.896 177.722 li
24.2163 177.722 li
24.2163 178.085 li
20.896 178.085 li
cp
.137255 .121569 .12549 rgb
f
25.9185 179.497 mo
26.6904 178.696 27.2148 178.108 27.4912 177.733 cv
27.7676 177.358 27.9058 176.992 27.9058 176.637 cv
27.9058 176.324 27.8213 176.087 27.6523 175.924 cv
27.4839 175.76 27.2822 175.679 27.0483 175.679 cv
26.7593 175.679 26.5249 175.784 26.3457 175.994 cv
26.2466 176.11 26.1519 176.289 26.061 176.529 cv
25.9248 176.5 li
26.0303 176.016 26.209 175.679 26.4614 175.49 cv
26.7134 175.302 26.9839 175.207 27.2729 175.207 cv
27.6294 175.207 27.918 175.319 28.1382 175.544 cv
28.3584 175.769 28.4688 176.043 28.4688 176.367 cv
28.4688 176.713 28.3496 177.046 28.1113 177.366 cv
27.8726 177.687 27.3545 178.257 26.5571 179.077 cv
28.0098 179.077 li
28.2124 179.077 28.355 179.053 28.437 179.004 cv
28.5195 178.956 28.6123 178.838 28.7158 178.65 cv
28.7979 178.688 li
28.4468 179.57 li
25.9185 179.57 li
25.9185 179.497 li
cp
f
30.915 178.941 mo
31.0313 178.602 31.0894 178.11 31.0894 177.468 cv
31.0894 176.955 31.0542 176.547 30.9849 176.241 cv
30.854 175.672 30.6094 175.388 30.2505 175.388 cv
29.8921 175.388 29.6465 175.681 29.5137 176.267 cv
29.4438 176.578 29.4092 176.989 29.4092 177.499 cv
29.4092 177.978 29.4448 178.36 29.5166 178.647 cv
29.6514 179.183 29.9048 179.45 30.2759 179.45 cv
30.5859 179.45 30.7993 179.28 30.915 178.941 cv
cp
31.396 175.979 mo
31.6089 176.391 31.7158 176.863 31.7158 177.396 cv
31.7158 177.816 31.6504 178.212 31.5195 178.583 cv
31.2725 179.281 30.8457 179.631 30.2378 179.631 cv
29.8223 179.631 29.4805 179.441 29.2129 179.064 cv
28.9258 178.661 28.7827 178.114 28.7827 177.422 cv
28.7827 176.878 28.8784 176.409 29.0703 176.017 cv
29.3301 175.483 29.7285 175.217 30.2666 175.217 cv
30.7515 175.217 31.1279 175.471 31.396 175.979 cv
cp
f
34.6309 155.378 mo
36.6309 155.378 li
34.6309 159.691 mo
35.8311 159.691 li
34.6309 164.005 mo
35.8311 164.005 li
34.6309 168.317 mo
35.8311 168.317 li
34.6309 172.632 mo
35.8311 172.632 li
0 0 0 rgb
@
20.896 156.515 mo
20.896 156.151 li
24.2163 156.151 li
24.2163 156.515 li
20.896 156.515 li
cp
.137255 .121569 .12549 rgb
f
27.6572 153.677 mo
27.6582 153.682 27.6587 153.693 27.6587 153.713 cv
27.6587 157.522 li
27.6587 157.685 27.7021 157.788 27.7891 157.832 cv
27.876 157.877 28.0381 157.903 28.2759 157.911 cv
28.2759 158 li
26.4883 158 li
26.4883 157.905 li
26.7432 157.893 26.9102 157.857 26.9883 157.801 cv
27.0659 157.744 27.105 157.62 27.105 157.431 cv
27.105 154.501 li
27.105 154.399 27.0923 154.322 27.0674 154.27 cv
27.042 154.217 26.9868 154.19 26.9028 154.19 cv
26.8477 154.19 26.7764 154.206 26.689 154.236 cv
26.6016 154.267 26.5195 154.299 26.4438 154.333 cv
26.4438 154.244 li
27.605 153.652 li
27.6431 153.652 li
27.6514 153.663 27.6563 153.671 27.6572 153.677 cv
cp
f
30.915 157.371 mo
31.0313 157.031 31.0894 156.54 31.0894 155.897 cv
31.0894 155.385 31.0542 154.977 30.9849 154.671 cv
30.854 154.102 30.6094 153.817 30.2505 153.817 cv
29.8921 153.817 29.6465 154.11 29.5137 154.696 cv
29.4438 155.008 29.4092 155.419 29.4092 155.929 cv
29.4092 156.407 29.4448 156.79 29.5166 157.077 cv
29.6514 157.612 29.9048 157.88 30.2759 157.88 cv
30.5859 157.88 30.7993 157.71 30.915 157.371 cv
cp
31.396 154.409 mo
31.6089 154.82 31.7158 155.293 31.7158 155.826 cv
31.7158 156.246 31.6504 156.642 31.5195 157.013 cv
31.2725 157.711 30.8457 158.061 30.2378 158.061 cv
29.8223 158.061 29.4805 157.871 29.2129 157.494 cv
28.9258 157.091 28.7827 156.544 28.7827 155.852 cv
28.7827 155.308 28.8784 154.839 29.0703 154.446 cv
29.3301 153.913 29.7285 153.646 30.2666 153.646 cv
30.7515 153.646 31.1279 153.9 31.396 154.409 cv
cp
f
34.6309 133.811 mo
36.6309 133.811 li
34.6309 138.125 mo
35.8311 138.125 li
34.6309 142.438 mo
35.8311 142.438 li
34.6309 146.751 mo
35.8311 146.751 li
34.6309 151.064 mo
35.8311 151.064 li
0 0 0 rgb
@
30.9072 135.801 mo
31.0234 135.461 31.0815 134.97 31.0815 134.327 cv
31.0815 133.814 31.0464 133.406 30.9771 133.101 cv
30.8462 132.531 30.6016 132.247 30.2427 132.247 cv
29.8843 132.247 29.6387 132.54 29.5059 133.126 cv
29.436 133.438 29.4014 133.849 29.4014 134.358 cv
29.4014 134.837 29.437 135.22 29.5088 135.507 cv
29.6436 136.042 29.897 136.31 30.2681 136.31 cv
30.5781 136.31 30.7915 136.14 30.9072 135.801 cv
cp
31.3882 132.839 mo
31.6011 133.25 31.708 133.723 31.708 134.256 cv
31.708 134.676 31.6426 135.071 31.5117 135.442 cv
31.2646 136.141 30.8379 136.49 30.23 136.49 cv
29.8145 136.49 29.4727 136.301 29.2051 135.924 cv
28.918 135.521 28.7749 134.974 28.7749 134.281 cv
28.7749 133.737 28.8706 133.269 29.0625 132.876 cv
29.3223 132.343 29.7207 132.076 30.2588 132.076 cv
30.7437 132.076 31.1201 132.33 31.3882 132.839 cv
cp
.137255 .121569 .12549 rgb
f
188.521 133.811 mo
188.521 135.811 li
173.394 133.811 mo
173.394 135.811 li
138.271 133.811 mo
138.271 135.811 li
123.145 133.811 mo
123.145 135.811 li
88.022 133.811 mo
88.022 135.811 li
72.895 133.811 mo
72.895 135.811 li
37.772 133.811 mo
37.772 135.811 li
0 0 0 rgb
@
.157 lw
186.222 133.811 mo
186.222 134.399 li
183.651 133.811 mo
183.651 134.399 li
180.737 133.811 mo
180.737 134.399 li
177.373 133.811 mo
177.373 134.399 li
168.525 133.811 mo
168.525 134.399 li
162.247 133.811 mo
162.247 134.399 li
153.398 133.811 mo
153.398 134.399 li
135.972 133.811 mo
135.972 134.399 li
133.402 133.811 mo
133.402 134.399 li
130.488 133.811 mo
130.488 134.399 li
127.124 133.811 mo
127.124 134.399 li
118.275 133.811 mo
118.275 134.399 li
111.997 133.811 mo
111.997 134.399 li
103.148 133.811 mo
103.148 134.399 li
85.7222 133.811 mo
85.7222 134.399 li
83.1519 133.811 mo
83.1519 134.399 li
80.2383 133.811 mo
80.2383 134.399 li
76.874 133.811 mo
76.874 134.399 li
68.0249 133.811 mo
68.0249 134.399 li
61.7471 133.811 mo
61.7471 134.399 li
52.8989 133.811 mo
52.8989 134.399 li
@
.4 lw
191.662 133.811 mo
189.662 133.811 li
191.662 138.125 mo
190.462 138.125 li
191.662 142.438 mo
190.462 142.438 li
191.662 146.751 mo
190.462 146.751 li
191.662 151.064 mo
190.462 151.064 li
191.662 155.378 mo
189.662 155.378 li
191.662 159.691 mo
190.462 159.691 li
191.662 164.005 mo
190.462 164.005 li
191.662 168.317 mo
190.462 168.317 li
191.662 172.632 mo
190.462 172.632 li
191.662 176.945 mo
189.662 176.945 li
191.662 181.258 mo
190.462 181.258 li
191.662 185.572 mo
190.462 185.572 li
191.662 189.885 mo
190.462 189.885 li
191.662 194.198 mo
190.462 194.198 li
191.662 198.512 mo
189.662 198.512 li
191.662 202.825 mo
190.462 202.825 li
191.662 207.138 mo
190.462 207.138 li
191.662 211.452 mo
190.462 211.452 li
191.662 215.765 mo
190.462 215.765 li
191.662 220.078 mo
189.662 220.078 li
191.662 224.392 mo
190.462 224.392 li
191.662 228.705 mo
190.462 228.705 li
@
1 lw
2 lc
244.944 159.996 mo
247.456 160.449 li
249.967 160.932 li
252.481 161.447 li
254.993 162 li
257.504 162.595 li
260.018 163.238 li
262.53 163.932 li
265.043 164.687 li
267.555 165.505 li
270.069 166.4 li
272.581 167.377 li
275.092 168.446 li
277.606 169.62 li
280.118 170.914 li
282.629 172.33 li
285.143 173.898 li
287.655 175.624 li
290.168 177.53 li
292.68 179.63 li
295.194 181.941 li
297.706 184.484 li
300.217 187.259 li
302.731 190.265 li
305.243 193.507 li
307.754 196.92 li
310.268 200.441 li
312.78 203.951 li
315.293 207.261 li
317.805 210.138 li
320.317 212.242 li
322.831 213.238 li
325.342 212.841 li
327.856 210.862 li
330.368 207.1 li
332.879 202.055 li
335.391 195.856 li
337.905 189.016 li
340.417 182.149 li
342.93 175.383 li
345.442 169.263 li
347.956 163.646 li
350.467 158.825 li
352.981 154.618 li
355.493 151.051 li
358.004 148.048 li
360.516 145.53 li
363.03 143.431 li
365.542 141.685 li
368.055 140.228 li
370.567 139.021 li
373.081 138.015 li
375.592 137.169 li
378.106 136.461 li
380.618 135.859 li
383.129 135.349 li
385.641 134.917 li
388.155 134.56 li
390.667 134.295 li
393.18 134.196 li
.247059 .239216 .6 rgb
@
.4 lw
398.833 133.811 mo
398.833 230.862 li
241.801 133.811 mo
398.833 133.811 li
241.801 230.862 mo
241.801 133.811 li
398.833 230.862 mo
241.801 230.862 li
0 0 0 rgb
@
0 lc
395.692 230.862 mo
395.692 228.862 li
@
396.118 234.7 mo
396.12 234.705 396.12 234.717 396.12 234.736 cv
396.12 238.546 li
396.12 238.708 396.163 238.812 396.25 238.855 cv
396.336 238.9 396.499 238.927 396.737 238.935 cv
396.737 239.023 li
394.95 239.023 li
394.95 238.929 li
395.204 238.916 395.372 238.881 395.45 238.824 cv
395.528 238.768 395.567 238.644 395.567 238.454 cv
395.567 235.524 li
395.567 235.423 395.553 235.346 395.528 235.293 cv
395.502 235.24 395.448 235.214 395.364 235.214 cv
395.309 235.214 395.237 235.229 395.151 235.26 cv
395.063 235.29 394.981 235.322 394.905 235.356 cv
394.905 235.268 li
396.067 234.676 li
396.104 234.676 li
396.112 234.687 396.118 234.694 396.118 234.7 cv
cp
.137255 .121569 .12549 rgb
f
345.442 230.862 mo
345.442 228.862 li
0 0 0 rgb
@
340.446 234.918 mo
340.448 234.923 340.448 234.935 340.448 234.954 cv
340.448 238.764 li
340.448 238.926 340.491 239.029 340.579 239.073 cv
340.665 239.118 340.827 239.145 341.065 239.152 cv
341.065 239.241 li
339.278 239.241 li
339.278 239.146 li
339.532 239.134 339.7 239.099 339.778 239.042 cv
339.856 238.985 339.895 238.861 339.895 238.672 cv
339.895 235.742 li
339.895 235.641 339.881 235.563 339.856 235.511 cv
339.831 235.458 339.776 235.432 339.692 235.432 cv
339.637 235.432 339.565 235.447 339.479 235.478 cv
339.391 235.508 339.309 235.54 339.233 235.574 cv
339.233 235.485 li
340.395 234.894 li
340.432 234.894 li
340.44 234.904 340.446 234.912 340.446 234.918 cv
cp
.137255 .121569 .12549 rgb
f
343.704 238.612 mo
343.821 238.272 343.877 237.781 343.877 237.139 cv
343.877 236.626 343.844 236.218 343.774 235.912 cv
343.643 235.343 343.399 235.059 343.04 235.059 cv
342.68 235.059 342.436 235.352 342.303 235.938 cv
342.233 236.249 342.198 236.66 342.198 237.17 cv
342.198 237.648 342.235 238.031 342.305 238.318 cv
342.44 238.854 342.694 239.121 343.065 239.121 cv
343.375 239.121 343.588 238.951 343.704 238.612 cv
cp
344.186 235.65 mo
344.399 236.062 344.504 236.534 344.504 237.067 cv
344.504 237.487 344.44 237.883 344.309 238.254 cv
344.061 238.952 343.635 239.302 343.028 239.302 cv
342.612 239.302 342.27 239.112 342.002 238.735 cv
341.715 238.332 341.571 237.785 341.571 237.093 cv
341.571 236.549 341.668 236.08 341.86 235.688 cv
342.12 235.154 342.518 234.888 343.055 234.888 cv
343.542 234.888 343.917 235.142 344.186 235.65 cv
cp
f
345.569 235.803 mo
345.569 235.545 li
347.928 235.545 li
347.928 235.803 li
345.569 235.803 li
cp
f
351.135 233.788 mo
351.137 233.792 351.137 233.801 351.137 233.814 cv
351.137 236.52 li
351.137 236.635 351.168 236.708 351.229 236.739 cv
351.292 236.771 351.407 236.789 351.575 236.796 cv
351.575 236.858 li
350.305 236.858 li
350.305 236.791 li
350.487 236.782 350.606 236.757 350.661 236.717 cv
350.717 236.677 350.745 236.589 350.745 236.454 cv
350.745 234.374 li
350.745 234.302 350.735 234.247 350.717 234.21 cv
350.7 234.172 350.661 234.153 350.6 234.153 cv
350.561 234.153 350.51 234.164 350.45 234.187 cv
350.387 234.208 350.329 234.23 350.274 234.255 cv
350.274 234.191 li
351.098 233.771 li
351.125 233.771 li
351.131 233.779 351.135 233.785 351.135 233.788 cv
cp
f
295.194 230.862 mo
295.194 228.862 li
0 0 0 rgb
@
290.196 234.7 mo
290.198 234.705 290.198 234.717 290.198 234.736 cv
290.198 238.546 li
290.198 238.708 290.241 238.812 290.329 238.855 cv
290.415 238.9 290.577 238.927 290.815 238.935 cv
290.815 239.023 li
289.028 239.023 li
289.028 238.929 li
289.282 238.916 289.45 238.881 289.528 238.824 cv
289.606 238.768 289.645 238.644 289.645 238.454 cv
289.645 235.524 li
289.645 235.423 289.631 235.346 289.606 235.293 cv
289.581 235.24 289.526 235.214 289.442 235.214 cv
289.387 235.214 289.315 235.229 289.229 235.26 cv
289.141 235.29 289.059 235.322 288.983 235.356 cv
288.983 235.268 li
290.145 234.676 li
290.182 234.676 li
290.19 234.687 290.196 234.694 290.196 234.7 cv
cp
.137255 .121569 .12549 rgb
f
293.454 238.395 mo
293.571 238.055 293.627 237.563 293.627 236.921 cv
293.627 236.408 293.594 236 293.524 235.694 cv
293.393 235.125 293.149 234.841 292.79 234.841 cv
292.43 234.841 292.186 235.134 292.053 235.72 cv
291.983 236.031 291.948 236.442 291.948 236.952 cv
291.948 237.431 291.985 237.813 292.055 238.101 cv
292.19 238.636 292.444 238.903 292.815 238.903 cv
293.125 238.903 293.338 238.733 293.454 238.395 cv
cp
293.936 235.433 mo
294.149 235.844 294.254 236.316 294.254 236.85 cv
294.254 237.27 294.19 237.665 294.059 238.036 cv
293.811 238.734 293.385 239.084 292.778 239.084 cv
292.362 239.084 292.02 238.895 291.752 238.518 cv
291.465 238.114 291.321 237.567 291.321 236.875 cv
291.321 236.331 291.418 235.862 291.61 235.47 cv
291.87 234.937 292.268 234.67 292.805 234.67 cv
293.292 234.67 293.667 234.924 293.936 235.433 cv
cp
f
295.327 235.577 mo
295.327 235.319 li
297.686 235.319 li
297.686 235.577 li
295.327 235.577 li
cp
f
299.659 236.581 mo
300.208 236.013 300.581 235.595 300.776 235.328 cv
300.973 235.063 301.071 234.803 301.071 234.55 cv
301.071 234.328 301.01 234.159 300.891 234.044 cv
300.77 233.928 300.627 233.869 300.461 233.869 cv
300.256 233.869 300.09 233.944 299.963 234.094 cv
299.893 234.177 299.825 234.303 299.76 234.474 cv
299.665 234.453 li
299.739 234.108 299.866 233.87 300.045 233.735 cv
300.223 233.602 300.417 233.535 300.622 233.535 cv
300.874 233.535 301.079 233.614 301.235 233.773 cv
301.391 233.934 301.471 234.128 301.471 234.358 cv
301.471 234.604 301.385 234.841 301.215 235.068 cv
301.047 235.295 300.678 235.7 300.114 236.282 cv
301.145 236.282 li
301.288 236.282 301.389 236.266 301.448 236.23 cv
301.506 236.196 301.573 236.112 301.645 235.979 cv
301.704 236.006 li
301.454 236.633 li
299.659 236.633 li
299.659 236.581 li
cp
f
244.944 230.862 mo
244.944 228.862 li
0 0 0 rgb
@
239.946 234.7 mo
239.948 234.705 239.948 234.717 239.948 234.736 cv
239.948 238.546 li
239.948 238.708 239.991 238.812 240.079 238.855 cv
240.165 238.9 240.327 238.927 240.565 238.935 cv
240.565 239.023 li
238.778 239.023 li
238.778 238.929 li
239.032 238.916 239.2 238.881 239.278 238.824 cv
239.356 238.768 239.395 238.644 239.395 238.454 cv
239.395 235.524 li
239.395 235.423 239.381 235.346 239.356 235.293 cv
239.331 235.24 239.276 235.214 239.192 235.214 cv
239.137 235.214 239.065 235.229 238.979 235.26 cv
238.891 235.29 238.809 235.322 238.733 235.356 cv
238.733 235.268 li
239.895 234.676 li
239.932 234.676 li
239.94 234.687 239.946 234.694 239.946 234.7 cv
cp
.137255 .121569 .12549 rgb
f
243.204 238.395 mo
243.321 238.055 243.377 237.563 243.377 236.921 cv
243.377 236.408 243.344 236 243.274 235.694 cv
243.143 235.125 242.899 234.841 242.54 234.841 cv
242.18 234.841 241.936 235.134 241.803 235.72 cv
241.733 236.031 241.698 236.442 241.698 236.952 cv
241.698 237.431 241.735 237.813 241.805 238.101 cv
241.94 238.636 242.194 238.903 242.565 238.903 cv
242.875 238.903 243.088 238.733 243.204 238.395 cv
cp
243.686 235.433 mo
243.899 235.844 244.004 236.316 244.004 236.85 cv
244.004 237.27 243.94 237.665 243.809 238.036 cv
243.561 238.734 243.135 239.084 242.528 239.084 cv
242.112 239.084 241.77 238.895 241.502 238.518 cv
241.215 238.114 241.071 237.567 241.071 236.875 cv
241.071 236.331 241.168 235.862 241.36 235.47 cv
241.62 234.937 242.018 234.67 242.555 234.67 cv
243.042 234.67 243.417 234.924 243.686 235.433 cv
cp
f
245.069 235.577 mo
245.069 235.319 li
247.428 235.319 li
247.428 235.577 li
245.069 235.577 li
cp
f
249.95 236.371 mo
250.084 236.457 250.2 236.5 250.293 236.5 cv
250.502 236.5 250.659 236.43 250.76 236.288 cv
250.862 236.146 250.915 235.992 250.915 235.825 cv
250.915 235.665 250.872 235.523 250.79 235.402 cv
250.651 235.196 250.417 235.094 250.084 235.094 cv
250.065 235.094 250.047 235.095 250.028 235.095 cv
250.01 235.096 249.989 235.098 249.965 235.101 cv
249.961 235.042 li
250.202 234.955 250.389 234.855 250.528 234.743 cv
250.665 234.631 250.735 234.482 250.735 234.299 cv
250.735 234.136 250.68 234.011 250.571 233.926 cv
250.463 233.84 250.338 233.798 250.2 233.798 cv
250.034 233.798 249.889 233.858 249.764 233.979 cv
249.694 234.046 249.62 234.147 249.542 234.285 cv
249.471 234.27 li
249.532 234.042 249.643 233.859 249.805 233.724 cv
249.969 233.587 250.159 233.52 250.372 233.52 cv
250.602 233.52 250.778 233.582 250.903 233.708 cv
251.028 233.834 251.09 233.979 251.09 234.144 cv
251.09 234.289 251.04 234.422 250.936 234.544 cv
250.877 234.612 250.788 234.689 250.665 234.774 cv
250.807 234.836 250.924 234.908 251.01 234.99 cv
251.174 235.147 251.254 235.347 251.254 235.588 cv
251.254 235.873 251.143 236.124 250.918 236.341 cv
250.696 236.558 250.377 236.667 249.963 236.667 cv
249.78 236.667 249.651 236.64 249.577 236.585 cv
249.502 236.53 249.465 236.471 249.465 236.408 cv
249.465 236.369 249.477 236.332 249.502 236.296 cv
249.526 236.26 249.567 236.242 249.622 236.242 cv
249.704 236.242 249.813 236.285 249.95 236.371 cv
cp
f
241.801 230.862 mo
243.801 230.862 li
0 0 0 rgb
@
231.067 231.999 mo
231.067 231.636 li
234.387 231.636 li
234.387 231.999 li
231.067 231.999 li
cp
.137255 .121569 .12549 rgb
f
237.971 230.609 mo
238.102 230.447 238.168 230.251 238.168 230.021 cv
238.168 229.821 238.106 229.651 237.983 229.512 cv
237.86 229.371 237.672 229.302 237.42 229.302 cv
237.227 229.302 237.067 229.362 236.94 229.484 cv
236.813 229.606 236.75 229.756 236.75 229.93 cv
236.75 230.128 236.825 230.312 236.973 230.481 cv
237.122 230.651 237.317 230.811 237.561 230.96 cv
237.758 230.821 237.895 230.704 237.971 230.609 cv
cp
238.069 233.172 mo
238.194 233.037 238.256 232.868 238.256 232.666 cv
238.256 232.437 238.19 232.251 238.059 232.108 cv
237.926 231.966 237.657 231.751 237.247 231.462 cv
237.065 231.576 236.934 231.724 236.852 231.904 cv
236.77 232.086 236.729 232.261 236.729 232.429 cv
236.729 232.718 236.803 232.947 236.952 233.118 cv
237.1 233.288 237.29 233.374 237.52 233.374 cv
237.762 233.374 237.946 233.307 238.069 233.172 cv
cp
236.504 230.792 mo
236.348 230.589 236.27 230.365 236.27 230.121 cv
236.27 229.843 236.385 229.606 236.616 229.412 cv
236.846 229.218 237.147 229.121 237.516 229.121 cv
237.856 229.121 238.125 229.213 238.327 229.396 cv
238.526 229.58 238.627 229.793 238.627 230.036 cv
238.627 230.282 238.524 230.504 238.319 230.7 cv
238.202 230.813 238.01 230.94 237.747 231.086 cv
238.106 231.353 238.362 231.584 238.518 231.781 cv
238.672 231.979 238.75 232.211 238.75 232.479 cv
238.75 232.782 238.635 233.037 238.407 233.244 cv
238.178 233.45 237.872 233.554 237.487 233.554 cv
237.143 233.554 236.848 233.459 236.604 233.268 cv
236.358 233.077 236.235 232.825 236.235 232.513 cv
236.235 232.245 236.321 232.009 236.491 231.805 cv
236.602 231.671 236.797 231.512 237.073 231.326 cv
236.795 231.103 236.604 230.925 236.504 230.792 cv
cp
f
241.801 206.599 mo
243.801 206.599 li
241.801 212.665 mo
243.002 212.665 li
241.801 218.729 mo
243.002 218.729 li
241.801 224.796 mo
243.002 224.796 li
0 0 0 rgb
@
231.067 207.733 mo
231.067 207.37 li
234.387 207.37 li
234.387 207.733 li
231.067 207.733 li
cp
.137255 .121569 .12549 rgb
f
238.209 207.276 mo
238.061 206.913 237.811 206.731 237.456 206.731 cv
237.129 206.731 236.913 206.829 236.803 207.022 cv
236.741 207.137 236.709 207.326 236.709 207.593 cv
236.709 207.937 236.782 208.272 236.928 208.602 cv
237.075 208.931 237.307 209.096 237.624 209.096 cv
237.875 209.096 238.057 208.988 238.17 208.774 cv
238.286 208.561 238.342 208.31 238.342 208.022 cv
238.342 207.742 238.297 207.493 238.209 207.276 cv
cp
238.549 208.823 mo
238.301 209.134 237.979 209.288 237.583 209.288 cv
237.211 209.288 236.874 209.114 236.569 208.767 cv
236.264 208.418 236.112 207.955 236.112 207.377 cv
236.112 206.633 236.407 205.993 236.997 205.46 cv
237.524 205.013 238.118 204.789 238.776 204.789 cv
238.792 204.894 li
238.528 204.942 238.299 205.008 238.11 205.091 cv
237.918 205.175 237.749 205.291 237.598 205.44 cv
237.444 205.593 237.299 205.786 237.165 206.02 cv
237.03 206.254 236.936 206.486 236.887 206.716 cv
237.018 206.636 237.129 206.577 237.225 206.539 cv
237.393 206.472 237.563 206.438 237.735 206.438 cv
238.069 206.438 238.352 206.554 238.579 206.785 cv
238.807 207.018 238.92 207.349 238.92 207.779 cv
238.92 208.165 238.797 208.513 238.549 208.823 cv
cp
f
241.801 182.337 mo
243.801 182.337 li
241.801 188.402 mo
243.002 188.402 li
241.801 194.468 mo
243.002 194.468 li
241.801 200.533 mo
243.002 200.533 li
0 0 0 rgb
@
231.067 183.468 mo
231.067 183.104 li
234.387 183.104 li
234.387 183.468 li
231.067 183.468 li
cp
.137255 .121569 .12549 rgb
f
237.778 181.259 mo
236.225 183.453 li
237.778 183.453 li
237.778 181.259 li
cp
237.987 180.605 mo
238.288 180.605 li
238.288 183.453 li
238.95 183.453 li
238.95 183.874 li
238.288 183.874 li
238.288 184.953 li
237.786 184.953 li
237.786 183.874 li
235.963 183.874 li
235.963 183.453 li
237.987 180.605 li
cp
f
241.801 158.074 mo
243.801 158.074 li
241.801 164.14 mo
243.002 164.14 li
241.801 170.205 mo
243.002 170.205 li
241.801 176.271 mo
243.002 176.271 li
0 0 0 rgb
@
231.067 159.21 mo
231.067 158.847 li
234.387 158.847 li
234.387 159.21 li
231.067 159.21 li
cp
.137255 .121569 .12549 rgb
f
236.083 160.622 mo
236.854 159.821 237.379 159.233 237.655 158.858 cv
237.932 158.483 238.069 158.117 238.069 157.762 cv
238.069 157.449 237.985 157.212 237.817 157.049 cv
237.647 156.885 237.446 156.804 237.211 156.804 cv
236.922 156.804 236.69 156.909 236.51 157.119 cv
236.411 157.235 236.315 157.414 236.225 157.654 cv
236.088 157.625 li
236.194 157.141 236.374 156.804 236.625 156.615 cv
236.877 156.427 237.147 156.332 237.436 156.332 cv
237.793 156.332 238.083 156.444 238.301 156.669 cv
238.522 156.894 238.633 157.168 238.633 157.492 cv
238.633 157.838 238.514 158.171 238.276 158.491 cv
238.038 158.812 237.518 159.382 236.721 160.202 cv
238.174 160.202 li
238.375 160.202 238.518 160.178 238.602 160.129 cv
238.684 160.081 238.776 159.963 238.879 159.775 cv
238.961 159.813 li
238.61 160.695 li
236.083 160.695 li
236.083 160.622 li
cp
f
241.801 133.811 mo
243.801 133.811 li
241.801 139.877 mo
243.002 139.877 li
241.801 145.942 mo
243.002 145.942 li
241.801 152.008 mo
243.002 152.008 li
0 0 0 rgb
@
238.079 135.801 mo
238.196 135.461 238.252 134.97 238.252 134.327 cv
238.252 133.814 238.219 133.406 238.149 133.101 cv
238.018 132.531 237.774 132.247 237.415 132.247 cv
237.055 132.247 236.811 132.54 236.678 133.126 cv
236.608 133.438 236.573 133.849 236.573 134.358 cv
236.573 134.837 236.61 135.22 236.68 135.507 cv
236.815 136.042 237.069 136.31 237.44 136.31 cv
237.75 136.31 237.963 136.14 238.079 135.801 cv
cp
238.561 132.839 mo
238.774 133.25 238.879 133.723 238.879 134.256 cv
238.879 134.676 238.815 135.071 238.684 135.442 cv
238.436 136.141 238.01 136.49 237.403 136.49 cv
236.987 136.49 236.645 136.301 236.377 135.924 cv
236.09 135.521 235.946 134.974 235.946 134.281 cv
235.946 133.737 236.043 133.269 236.235 132.876 cv
236.495 132.343 236.893 132.076 237.43 132.076 cv
237.917 132.076 238.292 132.33 238.561 132.839 cv
cp
.137255 .121569 .12549 rgb
f
395.692 133.811 mo
395.692 135.811 li
380.565 133.811 mo
380.565 135.811 li
345.442 133.811 mo
345.442 135.811 li
330.317 133.811 mo
330.317 135.811 li
295.194 133.811 mo
295.194 135.811 li
280.067 133.811 mo
280.067 135.811 li
244.944 133.811 mo
244.944 135.811 li
0 0 0 rgb
@
.157 lw
393.393 133.811 mo
393.393 134.399 li
390.823 133.811 mo
390.823 134.399 li
387.909 133.811 mo
387.909 134.399 li
384.543 133.811 mo
384.543 134.399 li
375.696 133.811 mo
375.696 134.399 li
369.418 133.811 mo
369.418 134.399 li
360.569 133.811 mo
360.569 134.399 li
343.143 133.811 mo
343.143 134.399 li
340.573 133.811 mo
340.573 134.399 li
337.659 133.811 mo
337.659 134.399 li
334.295 133.811 mo
334.295 134.399 li
325.446 133.811 mo
325.446 134.399 li
319.168 133.811 mo
319.168 134.399 li
310.319 133.811 mo
310.319 134.399 li
292.893 133.811 mo
292.893 134.399 li
290.323 133.811 mo
290.323 134.399 li
287.409 133.811 mo
287.409 134.399 li
284.045 133.811 mo
284.045 134.399 li
275.196 133.811 mo
275.196 134.399 li
268.918 133.811 mo
268.918 134.399 li
260.071 133.811 mo
260.071 134.399 li
@
.4 lw
398.833 133.811 mo
396.833 133.811 li
398.833 139.877 mo
397.633 139.877 li
398.833 145.942 mo
397.633 145.942 li
398.833 152.008 mo
397.633 152.008 li
398.833 158.074 mo
396.833 158.074 li
398.833 164.14 mo
397.633 164.14 li
398.833 170.205 mo
397.633 170.205 li
398.833 176.271 mo
397.633 176.271 li
398.833 182.337 mo
396.833 182.337 li
398.833 188.402 mo
397.633 188.402 li
398.833 194.468 mo
397.633 194.468 li
398.833 200.533 mo
397.633 200.533 li
398.833 206.599 mo
396.833 206.599 li
398.833 212.665 mo
397.633 212.665 li
398.833 218.729 mo
397.633 218.729 li
398.833 224.796 mo
397.633 224.796 li
398.833 230.862 mo
396.833 230.862 li
@
4.0376 210.439 mo
3.85156 209.682 3.37695 209.072 2.76904 209.072 cv
2.02197 209.072 1.36768 209.961 1.36768 211.107 cv
1.36768 213.555 li
1.60596 213.555 li
1.60596 213.369 li
1.60596 212.777 1.69189 212.764 1.97314 212.764 cv
6.07959 212.764 li
6.35986 212.764 6.4458 212.777 6.4458 213.369 cv
6.4458 213.555 li
6.68408 213.555 li
6.66113 213.273 6.66113 212.721 6.66113 212.416 cv
6.66113 212.113 6.66113 211.561 6.68408 211.281 cv
6.4458 211.281 li
6.4458 211.469 li
6.4458 212.074 6.35986 212.09 6.07813 212.09 cv
4.10156 212.09 li
4.10156 211.188 li
4.10156 211.063 4.10156 210.732 4.36719 210.457 cv
4.64844 210.158 4.89063 210.158 5.41357 210.158 cv
5.9209 210.158 6.23389 210.158 6.53027 209.842 cv
6.81104 209.527 6.8584 209.104 6.8584 208.873 cv
6.8584 208.271 6.21826 208.141 5.99951 208.141 cv
5.95264 208.141 5.8667 208.141 5.8667 208.242 cv
5.8667 208.328 5.93652 208.328 5.99121 208.336 cv
6.54395 208.383 6.68408 208.654 6.68408 208.848 cv
6.68408 209.227 6.28711 209.289 5.56348 209.396 cv
4.94043 209.496 li
4.44287 209.637 4.18555 210.016 4.0376 210.441 cv
4.0376 210.439 li
cp
3.92773 212.09 mo
1.91699 212.09 li
1.73828 212.09 1.64551 212.09 1.62207 211.918 cv
1.60596 211.84 1.60596 211.613 1.60596 211.457 cv
1.60596 210.752 1.6377 209.875 2.76367 209.875 cv
3.29932 209.875 3.92871 210.064 3.92871 211.223 cv
3.92773 212.09 li
cp
f
4.8833 207.229 mo
4.8833 205.059 li
4.8833 204.887 4.8833 204.863 4.70947 204.863 cv
3.94287 204.863 3.19043 205.285 3.19043 206.258 cv
3.19043 207.162 3.99512 207.879 4.96924 207.879 cv
6.01465 207.879 6.771 207.061 6.771 206.166 cv
6.771 205.215 5.90674 204.863 5.75879 204.863 cv
5.68066 204.863 5.66455 204.922 5.66455 204.961 cv
5.66455 205.027 5.71191 205.043 5.77393 205.059 cv
6.5752 205.332 6.5752 206.033 6.5752 206.113 cv
6.5752 206.502 6.3418 206.814 6.05322 206.994 cv
5.67871 207.229 5.16406 207.229 4.8833 207.229 cv
4.8833 207.229 li
cp
4.70947 207.229 mo
3.55762 207.182 3.36426 206.529 3.36426 206.264 cv
3.36426 205.463 4.4082 205.383 4.70947 205.383 cv
4.70947 207.229 li
cp
f
4.07715 202.07 mo
3.71143 201.969 3.31299 201.867 2.93945 201.789 cv
2.41748 201.695 1.89551 201.641 1.80176 201.641 cv
1.36768 201.641 1.36768 202.07 1.36768 202.162 cv
1.36768 202.754 1.58594 203.283 1.83447 203.65 cv
2.26318 204.279 2.78516 204.482 2.82373 204.482 cv
2.87842 204.482 2.87842 204.428 2.87842 204.404 cv
2.87842 204.342 2.78564 203.977 2.49121 203.813 cv
2.09619 203.604 1.80176 203.377 1.80176 202.676 cv
1.80176 202.357 2.02002 202.303 2.14404 202.303 cv
2.15234 202.303 2.51758 202.326 3.05322 202.42 cv
3.27148 202.459 3.41162 202.482 4.08057 202.645 cv
4.08057 202.926 li
4.08789 203.143 4.3374 203.502 4.45361 203.502 cv
4.50049 203.502 4.5083 203.494 4.5083 203.322 cv
4.5083 202.762 li
5.05225 202.926 5.79883 203.143 6.74756 203.502 cv
6.92627 203.572 6.94189 203.572 6.9502 203.572 cv
7.00391 203.572 7.00391 203.51 7.00391 203.494 cv
7.00391 203.385 6.90283 203.143 6.74756 202.988 cv
6.70166 202.949 6.68555 202.934 6.60791 202.902 cv
5.92334 202.629 5.22314 202.396 4.5083 202.193 cv
4.5083 200.441 li
4.5083 200.357 4.5083 200.209 4.43066 200.084 cv
4.75732 200.17 6.02393 200.49 6.63916 200.49 cv
6.86475 200.49 7.06689 200.357 7.06689 200.021 cv
7.06689 198.986 6.42041 198.41 6.17188 198.41 cv
6.125 198.41 6.10938 198.451 6.10938 198.488 cv
6.10938 198.551 6.21973 198.965 6.52539 199.08 cv
6.58838 199.111 6.59668 199.119 6.61963 199.268 cv
6.63232 199.354 6.63867 199.5 6.63867 199.508 cv
6.63867 199.648 6.54492 199.828 6.30322 199.828 cv
6.21045 199.828 5.78223 199.773 5.61133 199.75 cv
4.74707 199.617 3.28369 199.236 1.50928 198.566 cv
1.45459 198.543 1.43896 198.543 1.42334 198.543 cv
1.36816 198.543 1.36816 198.59 1.36816 198.621 cv
1.36816 198.738 1.47754 198.965 1.60986 199.111 cv
1.625 199.119 1.66406 199.166 1.73438 199.197 cv
2.49707 199.508 3.28369 199.75 4.07764 199.982 cv
4.07715 202.07 li
cp
f
.233887 196.582 mo
.158203 196.643 .151855 196.648 .151855 196.756 cv
.151855 197.701 li
.347168 197.701 li
.347168 197.535 li
.347168 197.301 .375 197.164 .380859 197.137 cv
3.27686 197.137 li
3.42334 197.137 3.66797 197.137 3.66797 197.701 cv
3.86328 197.701 li
3.84717 197.477 3.8418 197.258 3.8418 197.035 cv
3.8418 196.813 3.84717 196.594 3.86328 196.371 cv
3.66797 196.371 li
3.66797 196.92 3.42285 196.92 3.27539 196.92 cv
.523926 196.92 li
3.78174 194.502 li
3.8584 194.447 3.86328 194.441 3.86328 194.377 cv
3.86328 194.273 3.81445 194.273 3.71143 194.273 cv
.739258 194.273 li
.592285 194.273 .347656 194.273 .347656 193.723 cv
.151855 193.723 li
.168457 193.947 .174316 194.164 .174316 194.387 cv
.174316 194.611 .168457 194.828 .151855 195.053 cv
.347656 195.053 li
.347656 194.49 .592285 194.49 .739258 194.49 cv
3.04102 194.49 li
.233887 196.582 li
cp
f
2.43018 189.857 mo
2.43018 190.041 li
2.96484 190.102 3.66797 190.184 3.66797 191.211 cv
3.66797 191.754 li
3.66797 192.01 3.62402 192.016 3.45605 192.016 cv
.597656 192.016 li
.418457 192.016 .347168 192.016 .347168 191.506 cv
.347168 191.316 li
.151855 191.316 li
.157715 191.432 .174316 192.129 .174316 192.27 cv
.174316 192.479 .151855 193.094 .151855 193.1 cv
.347168 193.1 li
.347168 192.967 li
.347168 192.547 .401855 192.535 .592285 192.535 cv
3.42334 192.535 li
3.6084 192.535 3.66797 192.547 3.66797 192.967 cv
3.66797 193.1 li
3.86328 193.1 li
3.86328 190.021 li
2.43018 189.857 li
cp
f
3.79834 187.154 mo
3.79834 187.785 3.28125 188.564 1.94238 188.564 cv
.679688 188.564 .216797 187.77 .216797 187.154 cv
.216797 186.537 .679688 185.742 1.94238 185.742 cv
3.28125 185.742 3.79834 186.521 3.79834 187.154 cv
3.79834 187.154 li
cp
2.02686 185.156 mo
.940918 185.156 .043457 186.049 .043457 187.154 cv
.043457 188.266 .940918 189.15 2.02686 189.15 cv
3.0918 189.15 3.97168 188.266 3.97168 187.154 cv
3.97168 186.043 3.0918 185.156 2.02686 185.156 cv
2.02686 185.156 li
cp
f
4.8833 177.531 mo
4.8833 177.398 4.8833 177.258 4.73096 177.258 cv
4.5791 177.258 4.5791 177.398 4.5791 177.531 cv
4.5791 181.74 li
4.5791 181.871 4.5791 182.012 4.73096 182.012 cv
4.8833 182.012 4.8833 181.871 4.8833 181.74 cv
4.8833 177.531 li
cp
f
4.0376 171.484 mo
3.85156 170.727 3.37695 170.117 2.76904 170.117 cv
2.02197 170.117 1.36768 171.006 1.36768 172.152 cv
1.36768 174.598 li
1.60596 174.598 li
1.60596 174.414 li
1.60596 173.822 1.69189 173.807 1.97314 173.807 cv
6.07959 173.807 li
6.35986 173.807 6.4458 173.822 6.4458 174.414 cv
6.4458 174.598 li
6.68408 174.598 li
6.66113 174.318 6.66113 173.766 6.66113 173.463 cv
6.66113 173.158 6.66113 172.605 6.68408 172.326 cv
6.4458 172.326 li
6.4458 172.514 li
6.4458 173.119 6.35986 173.135 6.07813 173.135 cv
4.10156 173.135 li
4.10156 172.232 li
4.10156 172.105 4.10156 171.777 4.36719 171.502 cv
4.64844 171.203 4.89063 171.203 5.41357 171.203 cv
5.9209 171.203 6.23389 171.203 6.53027 170.889 cv
6.81104 170.572 6.8584 170.148 6.8584 169.916 cv
6.8584 169.316 6.21826 169.186 5.99951 169.186 cv
5.95264 169.186 5.8667 169.186 5.8667 169.287 cv
5.8667 169.373 5.93652 169.373 5.99121 169.381 cv
6.54395 169.428 6.68408 169.697 6.68408 169.891 cv
6.68408 170.27 6.28711 170.332 5.56348 170.441 cv
4.94043 170.541 li
4.44287 170.68 4.18555 171.059 4.0376 171.484 cv
4.0376 171.484 li
cp
3.92773 173.135 mo
1.91699 173.135 li
1.73828 173.135 1.64551 173.135 1.62207 172.963 cv
1.60596 172.883 1.60596 172.656 1.60596 172.5 cv
1.60596 171.797 1.6377 170.92 2.76367 170.92 cv
3.29932 170.92 3.92871 171.109 3.92871 172.266 cv
3.92773 173.135 li
cp
f
4.8833 168.273 mo
4.8833 166.102 li
4.8833 165.93 4.8833 165.908 4.70947 165.908 cv
3.94287 165.908 3.19043 166.328 3.19043 167.303 cv
3.19043 168.207 3.99512 168.924 4.96924 168.924 cv
6.01465 168.924 6.771 168.105 6.771 167.209 cv
6.771 166.258 5.90674 165.908 5.75879 165.908 cv
5.68066 165.908 5.66455 165.967 5.66455 166.006 cv
5.66455 166.072 5.71191 166.088 5.77393 166.102 cv
6.5752 166.375 6.5752 167.078 6.5752 167.156 cv
6.5752 167.547 6.3418 167.859 6.05322 168.039 cv
5.67871 168.273 5.16406 168.273 4.8833 168.273 cv
4.8833 168.273 li
cp
4.70947 168.273 mo
3.55762 168.227 3.36426 167.572 3.36426 167.307 cv
3.36426 166.506 4.4082 166.428 4.70947 166.428 cv
4.70947 168.273 li
cp
f
4.07715 163.115 mo
3.71143 163.014 3.31299 162.912 2.93945 162.834 cv
2.41748 162.74 1.89551 162.686 1.80176 162.686 cv
1.36768 162.686 1.36768 163.115 1.36768 163.207 cv
1.36768 163.799 1.58594 164.328 1.83447 164.693 cv
2.26318 165.324 2.78516 165.527 2.82373 165.527 cv
2.87842 165.527 2.87842 165.473 2.87842 165.449 cv
2.87842 165.387 2.78564 165.02 2.49121 164.857 cv
2.09619 164.646 1.80176 164.422 1.80176 163.721 cv
1.80176 163.402 2.02002 163.348 2.14404 163.348 cv
2.15234 163.348 2.51758 163.371 3.05322 163.465 cv
3.27148 163.504 3.41162 163.527 4.08057 163.689 cv
4.08057 163.971 li
4.08789 164.188 4.3374 164.545 4.45361 164.545 cv
4.50049 164.545 4.5083 164.539 4.5083 164.367 cv
4.5083 163.807 li
5.05225 163.971 5.79883 164.188 6.74756 164.545 cv
6.92627 164.617 6.94189 164.617 6.9502 164.617 cv
7.00391 164.617 7.00391 164.555 7.00391 164.539 cv
7.00391 164.43 6.90283 164.188 6.74756 164.031 cv
6.70166 163.994 6.68555 163.979 6.60791 163.945 cv
5.92334 163.676 5.22314 163.441 4.5083 163.238 cv
4.5083 161.486 li
4.5083 161.4 4.5083 161.254 4.43066 161.129 cv
4.75732 161.215 6.02393 161.533 6.63916 161.533 cv
6.86475 161.533 7.06689 161.4 7.06689 161.066 cv
7.06689 160.031 6.42041 159.455 6.17188 159.455 cv
6.125 159.455 6.10938 159.494 6.10938 159.533 cv
6.10938 159.596 6.21973 160.008 6.52539 160.125 cv
6.58838 160.156 6.59668 160.164 6.61963 160.313 cv
6.63232 160.396 6.63867 160.545 6.63867 160.553 cv
6.63867 160.693 6.54492 160.871 6.30322 160.871 cv
6.21045 160.871 5.78223 160.818 5.61133 160.793 cv
4.74707 160.662 3.28369 160.279 1.50928 159.611 cv
1.45459 159.588 1.43896 159.588 1.42334 159.588 cv
1.36816 159.588 1.36816 159.635 1.36816 159.666 cv
1.36816 159.781 1.47754 160.008 1.60986 160.156 cv
1.625 160.164 1.66406 160.211 1.73438 160.24 cv
2.49707 160.553 3.28369 160.793 4.07764 161.027 cv
4.07715 163.115 li
cp
f
2.43018 155.48 mo
2.43018 155.666 li
2.96484 155.727 3.66797 155.807 3.66797 156.834 cv
3.66797 157.377 li
3.66797 157.633 3.62402 157.639 3.45605 157.639 cv
.597656 157.639 li
.418457 157.639 .347168 157.639 .347168 157.131 cv
.347168 156.941 li
.151855 156.941 li
.157715 157.055 .174316 157.752 .174316 157.895 cv
.174316 158.102 .151855 158.717 .151855 158.723 cv
.347168 158.723 li
.347168 158.592 li
.347168 158.17 .401855 158.16 .592285 158.16 cv
3.42334 158.16 li
3.6084 158.16 3.66797 158.17 3.66797 158.592 cv
3.66797 158.723 li
3.86328 158.723 li
3.86328 155.645 li
2.43018 155.48 li
cp
f
3.79834 152.799 mo
3.79834 153.432 3.28125 154.209 1.94238 154.209 cv
.679688 154.209 .216797 153.414 .216797 152.799 cv
.216797 152.184 .679688 151.389 1.94238 151.389 cv
3.28125 151.389 3.79834 152.168 3.79834 152.799 cv
3.79834 152.799 li
cp
2.02686 150.803 mo
.940918 150.803 .043457 151.693 .043457 152.801 cv
.043457 153.912 .940918 154.797 2.02686 154.797 cv
3.0918 154.797 3.97168 153.912 3.97168 152.801 cv
3.97168 151.688 3.0918 150.803 2.02686 150.803 cv
2.02686 150.803 li
cp
f
.5 lw
10 ml
9.99707 213.832 mo
9.99707 150.018 li
@
14.6294 190.973 mo
14.4424 190.215 13.9673 189.605 13.3604 189.605 cv
12.6128 189.605 11.958 190.494 11.958 191.641 cv
11.958 194.086 li
12.1968 194.086 li
12.1968 193.902 li
12.1968 193.311 12.2832 193.297 12.5635 193.297 cv
16.6704 193.297 li
16.9507 193.297 17.0361 193.311 17.0361 193.902 cv
17.0361 194.086 li
17.2749 194.086 li
17.252 193.807 17.252 193.254 17.252 192.951 cv
17.252 192.646 17.252 192.094 17.2749 191.814 cv
17.0361 191.814 li
17.0361 192.002 li
17.0361 192.607 16.9507 192.623 16.6689 192.623 cv
14.6924 192.623 li
14.6924 191.721 li
14.6924 191.596 14.6924 191.266 14.9575 190.99 cv
15.2393 190.691 15.4814 190.691 16.0044 190.691 cv
16.5122 190.691 16.8242 190.691 17.1211 190.377 cv
17.4019 190.061 17.4487 189.637 17.4487 189.406 cv
17.4487 188.805 16.8091 188.674 16.5903 188.674 cv
16.543 188.674 16.4575 188.674 16.4575 188.775 cv
16.4575 188.861 16.5278 188.861 16.582 188.869 cv
17.1343 188.916 17.2749 189.186 17.2749 189.379 cv
17.2749 189.76 16.8774 189.82 16.1538 189.93 cv
15.5313 190.029 li
15.0327 190.17 14.7759 190.549 14.6284 190.973 cv
14.6294 190.973 li
cp
14.519 192.623 mo
12.5083 192.623 li
12.3296 192.623 12.2363 192.623 12.2129 192.451 cv
12.1968 192.373 12.1968 192.145 12.1968 191.99 cv
12.1968 191.285 12.2285 190.41 13.3545 190.41 cv
13.8906 190.41 14.519 190.598 14.519 191.754 cv
14.519 192.623 li
cp
f
15.4736 187.762 mo
15.4736 185.59 li
15.4736 185.42 15.4736 185.396 15.3003 185.396 cv
14.5332 185.396 13.7817 185.818 13.7817 186.793 cv
13.7817 187.695 14.5854 188.412 15.5605 188.412 cv
16.6055 188.412 17.3618 187.594 17.3618 186.697 cv
17.3618 185.746 16.4971 185.396 16.3496 185.396 cv
16.271 185.396 16.2559 185.457 16.2559 185.494 cv
16.2559 185.561 16.3022 185.576 16.3647 185.592 cv
17.166 185.865 17.166 186.566 17.166 186.645 cv
17.166 187.035 16.9321 187.348 16.644 187.527 cv
16.269 187.762 15.7544 187.762 15.4736 187.762 cv
15.4736 187.762 li
cp
15.3003 187.762 mo
14.1484 187.715 13.9551 187.061 13.9551 186.797 cv
13.9551 185.996 14.999 185.918 15.3003 185.918 cv
15.3003 187.762 li
cp
f
14.668 182.58 mo
14.3018 182.48 13.9048 182.379 13.5303 182.301 cv
13.0083 182.209 12.4863 182.152 12.3926 182.152 cv
11.958 182.152 11.958 182.58 11.958 182.674 cv
11.958 183.266 12.1768 183.795 12.4258 184.162 cv
12.854 184.791 13.3755 184.992 13.4146 184.992 cv
13.4692 184.992 13.4692 184.939 13.4692 184.916 cv
13.4692 184.854 13.376 184.488 13.082 184.324 cv
12.687 184.113 12.3926 183.889 12.3926 183.188 cv
12.3926 182.869 12.6104 182.814 12.7344 182.814 cv
12.7427 182.814 13.1079 182.838 13.6445 182.93 cv
13.8618 182.971 14.0024 182.992 14.6709 183.156 cv
14.6709 183.438 li
14.6792 183.654 14.9277 184.014 15.0449 184.014 cv
15.0908 184.014 15.0986 184.004 15.0986 183.834 cv
15.0986 183.273 li
15.6431 183.438 16.3892 183.654 17.3384 184.014 cv
17.5171 184.082 17.5327 184.082 17.5405 184.082 cv
17.5952 184.082 17.5952 184.021 17.5952 184.004 cv
17.5952 183.896 17.4937 183.654 17.3384 183.5 cv
17.292 183.461 17.2759 183.445 17.1982 183.414 cv
16.5146 183.141 15.8145 182.908 15.0991 182.705 cv
15.0991 180.953 li
15.0991 180.867 15.0991 180.721 15.021 180.596 cv
15.3477 180.682 16.6152 181 17.23 181 cv
17.4551 181 17.6572 180.867 17.6572 180.533 cv
17.6572 179.498 17.0117 178.922 16.7622 178.922 cv
16.7153 178.922 16.7002 178.961 16.7002 179 cv
16.7002 179.063 16.8101 179.475 17.1162 179.592 cv
17.1797 179.623 17.187 179.631 17.2109 179.779 cv
17.2231 179.865 17.229 180.012 17.229 180.02 cv
17.229 180.16 17.1353 180.34 16.8945 180.34 cv
16.8013 180.34 16.373 180.285 16.2017 180.262 cv
15.3379 180.129 13.8745 179.748 12.0996 179.078 cv
12.0449 179.055 12.0298 179.055 12.0142 179.055 cv
11.9585 179.055 11.9585 179.102 11.9585 179.133 cv
11.9585 179.25 12.0684 179.475 12.2002 179.623 cv
12.2158 179.631 12.2549 179.678 12.3247 179.709 cv
13.0884 180.02 13.874 180.262 14.6685 180.494 cv
14.668 182.58 li
cp
f
13.6069 174.969 mo
13.6069 175.154 li
14.1411 175.215 14.8447 175.295 14.8447 176.322 cv
14.8447 176.867 li
14.8447 177.121 14.8013 177.127 14.6323 177.127 cv
11.7739 177.127 li
11.5952 177.127 11.5244 177.127 11.5244 176.619 cv
11.5244 176.43 li
11.3286 176.43 li
11.334 176.545 11.3506 177.24 11.3506 177.383 cv
11.3506 177.59 11.3286 178.205 11.3286 178.211 cv
11.5244 178.211 li
11.5244 178.08 li
11.5244 177.66 11.5786 177.648 11.7686 177.648 cv
14.5996 177.648 li
14.7852 177.648 14.8447 177.66 14.8447 178.08 cv
14.8447 178.211 li
15.04 178.211 li
15.04 175.133 li
13.6069 174.969 li
cp
f
14.9746 172.287 mo
14.9746 172.92 14.458 173.699 13.1191 173.699 cv
11.8564 173.699 11.3936 172.904 11.3936 172.287 cv
11.3936 171.672 11.8564 170.877 13.1191 170.877 cv
14.458 170.877 14.9746 171.654 14.9746 172.287 cv
14.9746 172.287 li
cp
13.2041 170.291 mo
12.1172 170.291 11.2202 171.182 11.2202 172.287 cv
11.2202 173.4 12.1172 174.285 13.2041 174.285 cv
14.2686 174.285 15.1489 173.4 15.1489 172.287 cv
15.1489 171.176 14.2686 170.291 13.2041 170.291 cv
13.2041 170.291 li
cp
f
213.618 210.439 mo
213.432 209.682 212.958 209.072 212.35 209.072 cv
211.602 209.072 210.948 209.961 210.948 211.107 cv
210.948 213.555 li
211.186 213.555 li
211.186 213.369 li
211.186 212.777 211.272 212.762 211.553 212.762 cv
215.659 212.762 li
215.94 212.762 216.026 212.777 216.026 213.369 cv
216.026 213.555 li
216.264 213.555 li
216.241 213.273 216.241 212.721 216.241 212.416 cv
216.241 212.113 216.241 211.561 216.264 211.281 cv
216.026 211.281 li
216.026 211.469 li
216.026 212.074 215.94 212.09 215.659 212.09 cv
213.682 212.09 li
213.682 211.188 li
213.682 211.063 213.682 210.732 213.948 210.457 cv
214.229 210.158 214.471 210.158 214.995 210.158 cv
215.5 210.158 215.813 210.158 216.11 209.842 cv
216.391 209.527 216.438 209.104 216.438 208.873 cv
216.438 208.271 215.797 208.141 215.581 208.141 cv
215.532 208.141 215.446 208.141 215.446 208.242 cv
215.446 208.328 215.516 208.328 215.571 208.336 cv
216.124 208.383 216.264 208.654 216.264 208.848 cv
216.264 209.225 215.868 209.289 215.143 209.396 cv
214.52 209.496 li
214.022 209.637 213.766 210.016 213.618 210.441 cv
213.618 210.439 li
cp
213.508 212.09 mo
211.497 212.09 li
211.319 212.09 211.225 212.09 211.202 211.918 cv
211.186 211.84 211.186 211.613 211.186 211.457 cv
211.186 210.752 211.217 209.875 212.344 209.875 cv
212.879 209.875 213.508 210.064 213.508 211.221 cv
213.508 212.09 li
cp
f
214.463 207.229 mo
214.463 205.059 li
214.463 204.887 214.463 204.863 214.29 204.863 cv
213.522 204.863 212.77 205.285 212.77 206.258 cv
212.77 207.162 213.575 207.879 214.549 207.879 cv
215.594 207.879 216.352 207.061 216.352 206.166 cv
216.352 205.215 215.487 204.863 215.338 204.863 cv
215.26 204.863 215.245 204.922 215.245 204.961 cv
215.245 205.027 215.292 205.043 215.354 205.059 cv
216.155 205.332 216.155 206.033 216.155 206.113 cv
216.155 206.502 215.922 206.814 215.633 206.994 cv
215.258 207.229 214.745 207.229 214.463 207.229 cv
214.463 207.229 li
cp
214.29 207.229 mo
213.137 207.182 212.944 206.529 212.944 206.264 cv
212.944 205.463 213.989 205.383 214.29 205.383 cv
214.29 207.229 li
cp
f
213.657 202.07 mo
213.292 201.969 212.893 201.867 212.52 201.789 cv
211.999 201.695 211.475 201.641 211.381 201.641 cv
210.948 201.641 210.948 202.07 210.948 202.162 cv
210.948 202.754 211.167 203.283 211.415 203.65 cv
211.842 204.279 212.366 204.482 212.403 204.482 cv
212.459 204.482 212.459 204.428 212.459 204.404 cv
212.459 204.342 212.366 203.977 212.071 203.813 cv
211.676 203.604 211.381 203.377 211.381 202.676 cv
211.381 202.357 211.6 202.303 211.723 202.303 cv
211.733 202.303 212.098 202.326 212.633 202.42 cv
212.852 202.459 212.991 202.48 213.661 202.645 cv
213.661 202.926 li
213.668 203.143 213.917 203.502 214.034 203.502 cv
214.081 203.502 214.088 203.494 214.088 203.322 cv
214.088 202.762 li
214.631 202.926 215.379 203.143 216.329 203.502 cv
216.506 203.572 216.522 203.572 216.53 203.572 cv
216.584 203.572 216.584 203.51 216.584 203.494 cv
216.584 203.385 216.483 203.143 216.329 202.988 cv
216.282 202.949 216.266 202.934 216.188 202.902 cv
215.502 202.629 214.803 202.396 214.088 202.193 cv
214.088 200.441 li
214.088 200.357 214.088 200.209 214.01 200.084 cv
214.336 200.17 215.604 200.49 216.219 200.49 cv
216.446 200.49 216.647 200.357 216.647 200.021 cv
216.647 198.986 216 198.41 215.752 198.41 cv
215.706 198.41 215.69 198.449 215.69 198.488 cv
215.69 198.551 215.799 198.963 216.106 199.08 cv
216.168 199.111 216.176 199.119 216.2 199.268 cv
216.213 199.352 216.217 199.5 216.217 199.508 cv
216.217 199.648 216.125 199.828 215.883 199.828 cv
215.792 199.828 215.362 199.773 215.19 199.75 cv
214.327 199.617 212.864 199.236 211.088 198.566 cv
211.034 198.543 211.018 198.543 211.002 198.543 cv
210.948 198.543 210.948 198.59 210.948 198.621 cv
210.948 198.738 211.057 198.963 211.19 199.111 cv
211.206 199.119 211.245 199.166 211.315 199.197 cv
212.077 199.508 212.864 199.75 213.659 199.982 cv
213.657 202.07 li
cp
f
209.815 196.582 mo
209.739 196.643 209.733 196.648 209.733 196.756 cv
209.733 197.701 li
209.928 197.701 li
209.928 197.535 li
209.928 197.301 209.956 197.164 209.961 197.137 cv
212.858 197.137 li
213.002 197.137 213.249 197.137 213.249 197.701 cv
213.444 197.701 li
213.426 197.477 213.422 197.258 213.422 197.035 cv
213.422 196.813 213.426 196.594 213.444 196.371 cv
213.249 196.371 li
213.249 196.92 213.002 196.92 212.856 196.92 cv
210.104 196.92 li
213.362 194.502 li
213.438 194.447 213.444 194.441 213.444 194.377 cv
213.444 194.273 213.395 194.273 213.292 194.273 cv
210.319 194.273 li
210.172 194.273 209.928 194.273 209.928 193.723 cv
209.733 193.723 li
209.749 193.947 209.754 194.164 209.754 194.387 cv
209.754 194.611 209.749 194.828 209.733 195.051 cv
209.928 195.051 li
209.928 194.49 210.172 194.49 210.319 194.49 cv
212.622 194.49 li
209.815 196.582 li
cp
f
212.01 189.857 mo
212.01 190.041 li
212.545 190.102 213.249 190.184 213.249 191.211 cv
213.249 191.754 li
213.249 192.008 213.204 192.016 213.036 192.016 cv
210.178 192.016 li
209.999 192.016 209.928 192.016 209.928 191.506 cv
209.928 191.316 li
209.733 191.316 li
209.737 191.432 209.754 192.129 209.754 192.27 cv
209.754 192.479 209.733 193.094 209.733 193.1 cv
209.928 193.1 li
209.928 192.967 li
209.928 192.547 209.983 192.535 210.172 192.535 cv
213.002 192.535 li
213.188 192.535 213.249 192.547 213.249 192.967 cv
213.249 193.1 li
213.444 193.1 li
213.444 190.021 li
212.01 189.857 li
cp
f
213.377 187.154 mo
213.377 187.785 212.862 188.564 211.522 188.564 cv
210.26 188.564 209.797 187.77 209.797 187.154 cv
209.797 186.537 210.26 185.742 211.522 185.742 cv
212.862 185.742 213.377 186.521 213.377 187.154 cv
213.377 187.154 li
cp
211.606 185.156 mo
210.52 185.156 209.624 186.047 209.624 187.154 cv
209.624 188.266 210.52 189.15 211.606 189.15 cv
212.672 189.15 213.551 188.266 213.551 187.154 cv
213.551 186.043 212.672 185.156 211.606 185.156 cv
211.606 185.156 li
cp
f
214.463 177.531 mo
214.463 177.398 214.463 177.258 214.311 177.258 cv
214.159 177.258 214.159 177.398 214.159 177.531 cv
214.159 181.74 li
214.159 181.871 214.159 182.012 214.311 182.012 cv
214.463 182.012 214.463 181.871 214.463 181.74 cv
214.463 177.531 li
cp
f
213.618 171.484 mo
213.432 170.727 212.958 170.117 212.35 170.117 cv
211.602 170.117 210.948 171.006 210.948 172.152 cv
210.948 174.598 li
211.186 174.598 li
211.186 174.414 li
211.186 173.822 211.272 173.807 211.553 173.807 cv
215.659 173.807 li
215.94 173.807 216.026 173.822 216.026 174.414 cv
216.026 174.598 li
216.264 174.598 li
216.241 174.316 216.241 173.766 216.241 173.463 cv
216.241 173.158 216.241 172.605 216.264 172.326 cv
216.026 172.326 li
216.026 172.514 li
216.026 173.119 215.94 173.135 215.659 173.135 cv
213.682 173.135 li
213.682 172.232 li
213.682 172.105 213.682 171.777 213.948 171.502 cv
214.229 171.203 214.471 171.203 214.995 171.203 cv
215.5 171.203 215.813 171.203 216.11 170.889 cv
216.391 170.572 216.438 170.148 216.438 169.916 cv
216.438 169.316 215.797 169.186 215.581 169.186 cv
215.532 169.186 215.446 169.186 215.446 169.287 cv
215.446 169.373 215.516 169.373 215.571 169.381 cv
216.124 169.428 216.264 169.697 216.264 169.891 cv
216.264 170.27 215.868 170.332 215.143 170.441 cv
214.52 170.541 li
214.022 170.68 213.766 171.059 213.618 171.484 cv
213.618 171.484 li
cp
213.508 173.135 mo
211.497 173.135 li
211.319 173.135 211.225 173.135 211.202 172.963 cv
211.186 172.883 211.186 172.656 211.186 172.5 cv
211.186 171.797 211.217 170.92 212.344 170.92 cv
212.879 170.92 213.508 171.109 213.508 172.266 cv
213.508 173.135 li
cp
f
214.463 168.273 mo
214.463 166.102 li
214.463 165.93 214.463 165.908 214.29 165.908 cv
213.522 165.908 212.77 166.328 212.77 167.303 cv
212.77 168.207 213.575 168.924 214.549 168.924 cv
215.594 168.924 216.352 168.105 216.352 167.209 cv
216.352 166.258 215.487 165.908 215.338 165.908 cv
215.26 165.908 215.245 165.967 215.245 166.004 cv
215.245 166.072 215.292 166.088 215.354 166.102 cv
216.155 166.375 216.155 167.078 216.155 167.156 cv
216.155 167.547 215.922 167.859 215.633 168.039 cv
215.258 168.273 214.745 168.273 214.463 168.273 cv
214.463 168.273 li
cp
214.29 168.273 mo
213.137 168.227 212.944 167.572 212.944 167.307 cv
212.944 166.506 213.989 166.428 214.29 166.428 cv
214.29 168.273 li
cp
f
213.657 163.115 mo
213.292 163.014 212.893 162.912 212.52 162.834 cv
211.999 162.74 211.475 162.686 211.381 162.686 cv
210.948 162.686 210.948 163.115 210.948 163.207 cv
210.948 163.799 211.167 164.328 211.415 164.693 cv
211.842 165.324 212.366 165.527 212.403 165.527 cv
212.459 165.527 212.459 165.473 212.459 165.449 cv
212.459 165.387 212.366 165.02 212.071 164.857 cv
211.676 164.646 211.381 164.422 211.381 163.721 cv
211.381 163.402 211.6 163.348 211.723 163.348 cv
211.733 163.348 212.098 163.369 212.633 163.465 cv
212.852 163.504 212.991 163.527 213.661 163.689 cv
213.661 163.969 li
213.668 164.188 213.917 164.545 214.034 164.545 cv
214.081 164.545 214.088 164.539 214.088 164.367 cv
214.088 163.807 li
214.631 163.969 215.379 164.188 216.329 164.545 cv
216.506 164.617 216.522 164.617 216.53 164.617 cv
216.584 164.617 216.584 164.555 216.584 164.539 cv
216.584 164.43 216.483 164.188 216.329 164.031 cv
216.282 163.994 216.266 163.979 216.188 163.945 cv
215.502 163.676 214.803 163.441 214.088 163.238 cv
214.088 161.486 li
214.088 161.4 214.088 161.254 214.01 161.129 cv
214.336 161.215 215.604 161.533 216.219 161.533 cv
216.446 161.533 216.647 161.4 216.647 161.066 cv
216.647 160.031 216 159.455 215.752 159.455 cv
215.706 159.455 215.69 159.494 215.69 159.533 cv
215.69 159.596 215.799 160.008 216.106 160.125 cv
216.168 160.156 216.176 160.164 216.2 160.313 cv
216.213 160.396 216.217 160.545 216.217 160.553 cv
216.217 160.693 216.125 160.871 215.883 160.871 cv
215.792 160.871 215.362 160.818 215.19 160.793 cv
214.327 160.662 212.864 160.279 211.088 159.611 cv
211.034 159.588 211.018 159.588 211.002 159.588 cv
210.948 159.588 210.948 159.635 210.948 159.666 cv
210.948 159.781 211.057 160.008 211.19 160.156 cv
211.206 160.164 211.245 160.211 211.315 160.24 cv
212.077 160.553 212.864 160.793 213.659 161.027 cv
213.657 163.115 li
cp
f
212.01 155.48 mo
212.01 155.666 li
212.545 155.727 213.249 155.807 213.249 156.834 cv
213.249 157.377 li
213.249 157.633 213.204 157.639 213.036 157.639 cv
210.178 157.639 li
209.999 157.639 209.928 157.639 209.928 157.131 cv
209.928 156.941 li
209.733 156.941 li
209.737 157.055 209.754 157.752 209.754 157.895 cv
209.754 158.102 209.733 158.717 209.733 158.723 cv
209.928 158.723 li
209.928 158.592 li
209.928 158.17 209.983 158.16 210.172 158.16 cv
213.002 158.16 li
213.188 158.16 213.249 158.17 213.249 158.592 cv
213.249 158.723 li
213.444 158.723 li
213.444 155.645 li
212.01 155.48 li
cp
f
213.377 152.799 mo
213.377 153.432 212.862 154.209 211.522 154.209 cv
210.26 154.209 209.797 153.414 209.797 152.799 cv
209.797 152.184 210.26 151.389 211.522 151.389 cv
212.862 151.389 213.377 152.168 213.377 152.799 cv
213.377 152.799 li
cp
211.606 150.803 mo
210.52 150.803 209.624 151.693 209.624 152.801 cv
209.624 153.912 210.52 154.797 211.606 154.797 cv
212.672 154.797 213.551 153.912 213.551 152.801 cv
213.551 151.688 212.672 150.803 211.606 150.803 cv
211.606 150.803 li
cp
f
219.579 213.832 mo
219.579 150.018 li
@
224.209 190.973 mo
224.022 190.215 223.547 189.605 222.94 189.605 cv
222.194 189.605 221.538 190.494 221.538 191.641 cv
221.538 194.086 li
221.776 194.086 li
221.776 193.902 li
221.776 193.311 221.864 193.297 222.143 193.297 cv
226.25 193.297 li
226.53 193.297 226.616 193.311 226.616 193.902 cv
226.616 194.086 li
226.856 194.086 li
226.833 193.807 226.833 193.254 226.833 192.951 cv
226.833 192.646 226.833 192.094 226.856 191.814 cv
226.616 191.814 li
226.616 192.002 li
226.616 192.607 226.53 192.623 226.249 192.623 cv
224.272 192.623 li
224.272 191.721 li
224.272 191.596 224.272 191.266 224.538 190.99 cv
224.819 190.691 225.061 190.691 225.584 190.691 cv
226.092 190.691 226.403 190.691 226.702 190.377 cv
226.983 190.061 227.03 189.637 227.03 189.406 cv
227.03 188.805 226.389 188.674 226.17 188.674 cv
226.124 188.674 226.038 188.674 226.038 188.775 cv
226.038 188.861 226.108 188.861 226.163 188.869 cv
226.713 188.916 226.856 189.186 226.856 189.379 cv
226.856 189.76 226.458 189.82 225.735 189.93 cv
225.112 190.029 li
224.612 190.17 224.356 190.549 224.209 190.973 cv
224.209 190.973 li
cp
224.098 192.623 mo
222.088 192.623 li
221.911 192.623 221.817 192.623 221.793 192.451 cv
221.776 192.373 221.776 192.145 221.776 191.99 cv
221.776 191.285 221.809 190.41 222.934 190.41 cv
223.469 190.41 224.098 190.598 224.098 191.754 cv
224.098 192.623 li
cp
f
225.053 187.762 mo
225.053 185.59 li
225.053 185.42 225.053 185.396 224.881 185.396 cv
224.114 185.396 223.362 185.816 223.362 186.791 cv
223.362 187.695 224.167 188.412 225.141 188.412 cv
226.186 188.412 226.942 187.594 226.942 186.697 cv
226.942 185.746 226.077 185.396 225.93 185.396 cv
225.852 185.396 225.836 185.457 225.836 185.494 cv
225.836 185.561 225.881 185.576 225.944 185.592 cv
226.747 185.865 226.747 186.566 226.747 186.645 cv
226.747 187.035 226.512 187.348 226.225 187.527 cv
225.848 187.762 225.334 187.762 225.053 187.762 cv
225.053 187.762 li
cp
224.881 187.762 mo
223.729 187.715 223.536 187.061 223.536 186.797 cv
223.536 185.994 224.579 185.918 224.881 185.918 cv
224.881 187.762 li
cp
f
224.249 182.58 mo
223.881 182.48 223.485 182.379 223.11 182.301 cv
222.588 182.207 222.067 182.152 221.973 182.152 cv
221.538 182.152 221.538 182.58 221.538 182.674 cv
221.538 183.266 221.756 183.795 222.004 184.162 cv
222.434 184.791 222.956 184.992 222.995 184.992 cv
223.049 184.992 223.049 184.939 223.049 184.916 cv
223.049 184.854 222.958 184.488 222.661 184.324 cv
222.266 184.113 221.973 183.889 221.973 183.188 cv
221.973 182.869 222.19 182.814 222.315 182.814 cv
222.323 182.814 222.688 182.838 223.225 182.93 cv
223.442 182.971 223.581 182.992 224.25 183.156 cv
224.25 183.438 li
224.258 183.654 224.508 184.014 224.625 184.014 cv
224.67 184.014 224.678 184.004 224.678 183.834 cv
224.678 183.273 li
225.223 183.438 225.969 183.654 226.918 184.014 cv
227.096 184.082 227.114 184.082 227.122 184.082 cv
227.174 184.082 227.174 184.021 227.174 184.004 cv
227.174 183.896 227.075 183.654 226.918 183.5 cv
226.872 183.461 226.856 183.445 226.78 183.414 cv
226.094 183.141 225.395 182.908 224.68 182.705 cv
224.68 180.953 li
224.68 180.867 224.68 180.721 224.6 180.596 cv
224.928 180.682 226.196 181 226.809 181 cv
227.036 181 227.237 180.867 227.237 180.533 cv
227.237 179.498 226.592 178.922 226.342 178.922 cv
226.295 178.922 226.28 178.961 226.28 179 cv
226.28 179.063 226.389 179.475 226.696 179.592 cv
226.76 179.623 226.768 179.631 226.792 179.779 cv
226.803 179.865 226.809 180.012 226.809 180.02 cv
226.809 180.16 226.715 180.34 226.475 180.34 cv
226.381 180.34 225.952 180.285 225.782 180.262 cv
224.918 180.129 223.454 179.748 221.68 179.078 cv
221.625 179.055 221.61 179.055 221.594 179.055 cv
221.54 179.055 221.54 179.102 221.54 179.133 cv
221.54 179.25 221.649 179.475 221.78 179.623 cv
221.795 179.631 221.834 179.678 221.905 179.709 cv
222.668 180.02 223.454 180.262 224.249 180.494 cv
224.249 182.58 li
cp
f
223.188 174.969 mo
223.188 175.154 li
223.721 175.215 224.424 175.295 224.424 176.322 cv
224.424 176.865 li
224.424 177.121 224.381 177.127 224.213 177.127 cv
221.354 177.127 li
221.174 177.127 221.104 177.127 221.104 176.619 cv
221.104 176.43 li
220.909 176.43 li
220.915 176.545 220.93 177.24 220.93 177.383 cv
220.93 177.59 220.909 178.205 220.909 178.211 cv
221.104 178.211 li
221.104 178.08 li
221.104 177.66 221.159 177.648 221.348 177.648 cv
224.18 177.648 li
224.364 177.648 224.424 177.66 224.424 178.08 cv
224.424 178.211 li
224.62 178.211 li
224.62 175.133 li
223.188 174.969 li
cp
f
224.555 172.287 mo
224.555 172.92 224.038 173.697 222.698 173.697 cv
221.438 173.697 220.973 172.904 220.973 172.287 cv
220.973 171.672 221.438 170.877 222.698 170.877 cv
224.038 170.877 224.555 171.654 224.555 172.287 cv
224.555 172.287 li
cp
222.784 170.291 mo
221.698 170.291 220.799 171.182 220.799 172.287 cv
220.799 173.4 221.698 174.285 222.784 174.285 cv
223.848 174.285 224.729 173.4 224.729 172.287 cv
224.729 171.176 223.848 170.291 222.784 170.291 cv
222.784 170.291 li
cp
f
176.521 115.229 mo
176.577 115.031 176.61 114.888 176.61 114.593 cv
176.61 113.881 176.171 113.421 175.349 113.421 cv
174.483 113.421 173.914 113.999 173.65 114.389 cv
173.595 113.754 173.135 113.421 172.642 113.421 cv
172.137 113.421 171.93 113.852 171.832 114.05 cv
171.634 114.426 171.492 115.088 171.492 115.121 cv
171.492 115.231 171.601 115.231 171.623 115.231 cv
171.732 115.231 171.744 115.22 171.809 114.978 cv
171.996 114.195 172.214 113.665 172.609 113.665 cv
172.795 113.665 172.949 113.754 172.949 114.171 cv
172.949 114.401 172.917 114.522 172.774 115.093 cv
172.137 117.628 li
172.105 117.793 172.039 118.045 172.039 118.1 cv
172.039 118.298 172.192 118.396 172.357 118.396 cv
172.489 118.396 172.685 118.31 172.762 118.089 cv
172.774 118.068 172.905 117.551 172.97 117.278 cv
173.211 116.29 li
173.278 116.047 173.343 115.806 173.398 115.554 cv
173.42 115.488 173.507 115.126 173.519 115.06 cv
173.551 114.961 173.891 114.346 174.263 114.05 cv
174.504 113.874 174.844 113.665 175.315 113.665 cv
175.787 113.665 175.907 114.039 175.907 114.433 cv
175.907 114.487 175.907 114.685 175.797 115.122 cv
174.547 120.156 li
174.515 120.289 174.515 120.311 174.515 120.332 cv
174.515 120.496 174.635 120.627 174.822 120.627 cv
175.162 120.627 175.239 120.311 175.272 120.189 cv
176.521 115.229 li
cp
f
176.521 239.052 mo
176.577 238.854 176.61 238.712 176.61 238.416 cv
176.61 237.704 176.171 237.244 175.349 237.244 cv
174.483 237.244 173.914 237.822 173.65 238.212 cv
173.595 237.577 173.135 237.244 172.642 237.244 cv
172.137 237.244 171.93 237.675 171.832 237.874 cv
171.634 238.249 171.492 238.911 171.492 238.944 cv
171.492 239.055 171.601 239.055 171.623 239.055 cv
171.732 239.055 171.744 239.044 171.809 238.802 cv
171.996 238.019 172.214 237.488 172.609 237.488 cv
172.795 237.488 172.949 237.577 172.949 237.994 cv
172.949 238.224 172.917 238.345 172.774 238.916 cv
172.137 241.452 li
172.105 241.616 172.039 241.868 172.039 241.923 cv
172.039 242.122 172.192 242.22 172.357 242.22 cv
172.489 242.22 172.685 242.134 172.762 241.913 cv
172.774 241.892 172.905 241.374 172.97 241.101 cv
173.211 240.112 li
173.278 239.87 173.343 239.63 173.398 239.377 cv
173.42 239.312 173.507 238.949 173.519 238.884 cv
173.551 238.784 173.891 238.169 174.263 237.873 cv
174.504 237.697 174.844 237.488 175.315 237.488 cv
175.787 237.488 175.907 237.862 175.907 238.256 cv
175.907 238.311 175.907 238.508 175.797 238.945 cv
174.547 243.979 li
174.515 244.112 174.515 244.134 174.515 244.155 cv
174.515 244.319 174.635 244.45 174.822 244.45 cv
175.162 244.45 175.239 244.134 175.272 244.013 cv
176.521 239.052 li
cp
f
384.765 115.215 mo
384.821 115.017 384.854 114.875 384.854 114.579 cv
384.854 113.868 384.416 113.407 383.593 113.407 cv
382.727 113.407 382.158 113.985 381.894 114.375 cv
381.839 113.741 381.379 113.407 380.886 113.407 cv
380.381 113.407 380.174 113.838 380.076 114.037 cv
379.878 114.412 379.736 115.074 379.736 115.107 cv
379.736 115.218 379.845 115.218 379.867 115.218 cv
379.976 115.218 379.988 115.207 380.053 114.964 cv
380.24 114.181 380.458 113.651 380.853 113.651 cv
381.04 113.651 381.193 113.74 381.193 114.157 cv
381.193 114.387 381.161 114.508 381.018 115.079 cv
380.381 117.615 li
380.349 117.78 380.283 118.032 380.283 118.086 cv
380.283 118.285 380.436 118.382 380.601 118.382 cv
380.733 118.382 380.929 118.296 381.006 118.076 cv
381.018 118.054 381.149 117.538 381.214 117.264 cv
381.456 116.276 li
381.522 116.034 381.587 115.792 381.642 115.54 cv
381.665 115.474 381.751 115.112 381.763 115.046 cv
381.795 114.947 382.135 114.333 382.507 114.036 cv
382.749 113.86 383.088 113.651 383.559 113.651 cv
384.031 113.651 384.151 114.025 384.151 114.419 cv
384.151 114.474 384.151 114.671 384.042 115.108 cv
382.792 120.143 li
382.759 120.275 382.759 120.297 382.759 120.318 cv
382.759 120.482 382.879 120.613 383.066 120.613 cv
383.406 120.613 383.483 120.297 383.516 120.176 cv
384.765 115.215 li
cp
f
384.765 239.038 mo
384.821 238.841 384.854 238.698 384.854 238.402 cv
384.854 237.69 384.416 237.23 383.593 237.23 cv
382.727 237.23 382.158 237.809 381.894 238.198 cv
381.839 237.563 381.379 237.23 380.886 237.23 cv
380.381 237.23 380.174 237.661 380.076 237.86 cv
379.878 238.235 379.736 238.897 379.736 238.931 cv
379.736 239.041 379.845 239.041 379.867 239.041 cv
379.976 239.041 379.988 239.03 380.053 238.788 cv
380.24 238.005 380.458 237.475 380.853 237.475 cv
381.04 237.475 381.193 237.563 381.193 237.98 cv
381.193 238.21 381.161 238.331 381.018 238.902 cv
380.381 241.438 li
380.349 241.603 380.283 241.854 380.283 241.909 cv
380.283 242.108 380.436 242.206 380.601 242.206 cv
380.733 242.206 380.929 242.12 381.006 241.899 cv
381.018 241.878 381.149 241.36 381.214 241.087 cv
381.456 240.099 li
381.522 239.856 381.587 239.616 381.642 239.363 cv
381.665 239.298 381.751 238.936 381.763 238.87 cv
381.795 238.771 382.135 238.155 382.507 237.859 cv
382.749 237.684 383.088 237.475 383.559 237.475 cv
384.031 237.475 384.151 237.849 384.151 238.242 cv
384.151 238.297 384.151 238.494 384.042 238.932 cv
382.792 243.966 li
382.759 244.099 382.759 244.12 382.759 244.142 cv
382.759 244.306 382.879 244.437 383.066 244.437 cv
383.406 244.437 383.483 244.12 383.516 243.999 cv
384.765 239.038 li
cp
f
13.7402 67.9009 mo
13.5737 67.8545 13.4536 67.8262 13.2041 67.8262 cv
12.603 67.8262 12.2144 68.1968 12.2144 68.8906 cv
12.2144 69.6221 12.7026 70.1025 13.0313 70.3252 cv
12.4961 70.3711 12.2144 70.7598 12.2144 71.1763 cv
12.2144 71.6016 12.5781 71.7773 12.7456 71.8604 cv
13.0625 72.0273 13.6221 72.1475 13.6499 72.1475 cv
13.7427 72.1475 13.7427 72.0547 13.7427 72.0366 cv
13.7427 71.9443 13.7334 71.9346 13.5288 71.8789 cv
12.8677 71.7217 12.4209 71.5371 12.4209 71.2041 cv
12.4209 71.0469 12.4951 70.9175 12.8472 70.9175 cv
13.042 70.9175 13.144 70.9448 13.626 71.0654 cv
15.7666 71.6016 li
15.9058 71.6294 16.1187 71.6851 16.165 71.6851 cv
16.332 71.6851 16.415 71.5557 16.415 71.4165 cv
16.415 71.3057 16.3408 71.1392 16.1558 71.0747 cv
16.1372 71.0654 15.7017 70.9541 15.4702 70.8984 cv
14.6362 70.6953 li
14.4321 70.6396 14.228 70.5845 14.0151 70.5381 cv
13.9595 70.5195 13.6533 70.4453 13.5981 70.436 cv
13.5146 70.4082 12.9956 70.1216 12.7451 69.8071 cv
12.5972 69.604 12.4204 69.3169 12.4204 68.9194 cv
12.4204 68.5215 12.7358 68.4194 13.0684 68.4194 cv
13.1147 68.4194 13.2813 68.4194 13.6509 68.5122 cv
17.9014 69.5674 li
18.0122 69.5952 18.0308 69.5952 18.0488 69.5952 cv
18.1875 69.5952 18.2988 69.4932 18.2988 69.3359 cv
18.2988 69.0488 18.0308 68.9839 17.9287 68.9561 cv
13.7402 67.9009 li
cp
f
13.1699 60.3999 mo
12.9478 59.5 12.3838 58.7759 11.6626 58.7759 cv
10.7749 58.7759 9.99707 59.8315 9.99707 61.1924 cv
9.99707 64.0991 li
10.2808 64.0991 li
10.2808 63.8799 li
10.2808 63.1777 10.3828 63.1597 10.7158 63.1597 cv
15.5952 63.1597 li
15.9287 63.1597 16.0298 63.1777 16.0298 63.8799 cv
16.0298 64.0991 li
16.3135 64.0991 li
16.2861 63.7661 16.2861 63.1094 16.2861 62.749 cv
16.2861 62.3887 16.2861 61.7319 16.3135 61.3989 cv
16.0298 61.3989 li
16.0298 61.623 li
16.0298 62.3413 15.9277 62.3604 15.5938 62.3604 cv
13.2451 62.3604 li
13.2451 61.2881 li
13.2451 61.1387 13.2451 60.7471 13.5605 60.4204 cv
13.8945 60.0659 14.1826 60.0659 14.8037 60.0659 cv
15.4067 60.0659 15.7778 60.0659 16.1304 59.6909 cv
16.4644 59.3159 16.52 58.8125 16.52 58.5381 cv
16.52 57.8242 15.7598 57.668 15.5 57.668 cv
15.4443 57.668 15.3423 57.668 15.3423 57.7891 cv
15.3423 57.8911 15.4258 57.8911 15.4902 57.9004 cv
16.147 57.9561 16.3135 58.2773 16.3135 58.5078 cv
16.3135 58.958 15.8418 59.0313 14.9819 59.1602 cv
14.2422 59.2793 li
13.6504 59.4448 13.3452 59.895 13.1694 60.4009 cv
13.1699 60.3999 li
cp
13.0391 62.3599 mo
10.6499 62.3599 li
10.438 62.3599 10.3271 62.3599 10.2993 62.1553 cv
10.2808 62.0625 10.2808 61.7935 10.2808 61.6074 cv
10.2808 60.7715 10.3179 59.73 11.6558 59.73 cv
12.2925 59.73 13.0396 59.9536 13.0396 61.3286 cv
13.0391 62.3599 li
cp
f
14.1738 56.5845 mo
14.1738 54.0054 li
14.1738 53.8022 14.1738 53.7739 13.9673 53.7739 cv
13.0562 53.7739 12.1631 54.2749 12.1631 55.4321 cv
12.1631 56.5059 13.1182 57.3579 14.2764 57.3579 cv
15.5181 57.3579 16.4165 56.3857 16.4165 55.3208 cv
16.4165 54.1914 15.3896 53.7739 15.2139 53.7739 cv
15.1211 53.7739 15.1025 53.8452 15.1025 53.8901 cv
15.1025 53.9702 15.1582 53.9883 15.2319 54.0059 cv
16.1846 54.3311 16.1846 55.1655 16.1846 55.2583 cv
16.1846 55.7217 15.9067 56.0928 15.5635 56.3062 cv
15.1191 56.5845 14.5078 56.5845 14.1733 56.5845 cv
14.1738 56.5845 li
cp
13.9673 56.5845 mo
12.5991 56.5288 12.3691 55.7524 12.3691 55.438 cv
12.3691 54.4858 13.6094 54.3936 13.9673 54.3936 cv
13.9673 56.5845 li
cp
f
13.2163 50.4297 mo
12.7813 50.3096 12.3091 50.1895 11.8647 50.0972 cv
11.2446 49.9858 10.6245 49.9209 10.5127 49.9209 cv
9.99707 49.9209 9.99707 50.4297 9.99707 50.5405 cv
9.99707 51.2432 10.2563 51.8721 10.5522 52.3066 cv
11.0615 53.0557 11.6812 53.2959 11.7275 53.2959 cv
11.792 53.2959 11.792 53.2314 11.792 53.2036 cv
11.792 53.1294 11.6816 52.6948 11.332 52.5005 cv
10.8628 52.251 10.5132 51.9824 10.5132 51.1509 cv
10.5132 50.7715 10.772 50.707 10.9194 50.707 cv
10.9287 50.707 11.3633 50.7344 12.0005 50.8457 cv
12.2593 50.8921 12.4253 50.9194 13.2202 51.1138 cv
13.2202 51.4468 li
13.229 51.7056 13.5244 52.1309 13.6636 52.1309 cv
13.7188 52.1309 13.728 52.1216 13.728 51.918 cv
13.728 51.2524 li
14.3745 51.4468 15.2617 51.7056 16.3887 52.1309 cv
16.6011 52.2144 16.6196 52.2144 16.6289 52.2144 cv
16.6938 52.2144 16.6938 52.1401 16.6938 52.1216 cv
16.6938 51.9922 16.5737 51.7056 16.3892 51.5205 cv
16.3335 51.4746 16.3154 51.4561 16.2227 51.4189 cv
15.4097 51.0952 14.5781 50.8179 13.7285 50.5771 cv
13.7285 48.4966 li
13.7285 48.3945 13.7285 48.2192 13.6362 48.0713 cv
14.0239 48.1729 15.5298 48.5522 16.2598 48.5522 cv
16.5278 48.5522 16.7681 48.3945 16.7681 47.9971 cv
16.7681 46.7676 16.0005 46.083 15.7046 46.083 cv
15.6489 46.083 15.6304 46.1289 15.6304 46.1758 cv
15.6304 46.2495 15.7612 46.7397 16.125 46.8784 cv
16.1997 46.9155 16.209 46.9243 16.2373 47.1006 cv
16.252 47.2021 16.2593 47.3779 16.2593 47.3872 cv
16.2593 47.5532 16.1479 47.7661 15.8613 47.7661 cv
15.7505 47.7661 15.2417 47.7017 15.0386 47.6733 cv
14.0122 47.5166 12.2734 47.063 10.165 46.2676 cv
10.1006 46.2402 10.082 46.2402 10.0635 46.2402 cv
9.99756 46.2402 9.99756 46.2959 9.99756 46.333 cv
9.99756 46.4717 10.1274 46.7397 10.2847 46.9155 cv
10.3032 46.9243 10.3496 46.98 10.4326 47.0171 cv
11.3394 47.3872 12.2734 47.6733 13.2168 47.9512 cv
13.2163 50.4297 li
cp
f
223.512 67.9009 mo
223.345 67.8545 223.225 67.8262 222.975 67.8262 cv
222.375 67.8262 221.986 68.1968 221.986 68.8906 cv
221.986 69.6221 222.474 70.1025 222.803 70.3252 cv
222.268 70.3711 221.986 70.7598 221.986 71.1763 cv
221.986 71.6016 222.35 71.7773 222.517 71.8604 cv
222.834 72.0273 223.393 72.1475 223.421 72.1475 cv
223.514 72.1475 223.514 72.0547 223.514 72.0366 cv
223.514 71.9443 223.504 71.9346 223.3 71.8789 cv
222.639 71.7217 222.192 71.5371 222.192 71.2041 cv
222.192 71.0469 222.266 70.9175 222.619 70.9175 cv
222.813 70.9175 222.916 70.9448 223.397 71.0654 cv
225.538 71.6016 li
225.677 71.6294 225.89 71.6851 225.936 71.6851 cv
226.104 71.6851 226.186 71.5557 226.186 71.4165 cv
226.186 71.3057 226.112 71.1392 225.927 71.0747 cv
225.909 71.0654 225.473 70.9541 225.242 70.8984 cv
224.408 70.6953 li
224.204 70.6396 224 70.5845 223.787 70.5381 cv
223.731 70.5195 223.424 70.4453 223.37 70.436 cv
223.286 70.4082 222.767 70.1216 222.516 69.8071 cv
222.369 69.604 222.192 69.3169 222.192 68.9194 cv
222.192 68.5215 222.507 68.4194 222.84 68.4194 cv
222.886 68.4194 223.053 68.4194 223.422 68.5122 cv
227.672 69.5674 li
227.784 69.5952 227.802 69.5952 227.821 69.5952 cv
227.959 69.5952 228.071 69.4932 228.071 69.3359 cv
228.071 69.0488 227.802 68.9839 227.7 68.9561 cv
223.512 67.9009 li
cp
f
222.942 60.3999 mo
222.719 59.5 222.155 58.7759 221.434 58.7759 cv
220.546 58.7759 219.768 59.8315 219.768 61.1924 cv
219.768 64.0991 li
220.052 64.0991 li
220.052 63.8799 li
220.052 63.1777 220.155 63.1597 220.487 63.1597 cv
225.367 63.1597 li
225.7 63.1597 225.801 63.1777 225.801 63.8799 cv
225.801 64.0991 li
226.084 64.0991 li
226.057 63.7661 226.057 63.1094 226.057 62.749 cv
226.057 62.3887 226.057 61.7319 226.084 61.3989 cv
225.801 61.3989 li
225.801 61.623 li
225.801 62.3413 225.7 62.3604 225.366 62.3604 cv
223.016 62.3604 li
223.016 61.2881 li
223.016 61.1387 223.016 60.7471 223.333 60.4204 cv
223.667 60.0659 223.954 60.0659 224.575 60.0659 cv
225.178 60.0659 225.549 60.0659 225.902 59.6909 cv
226.236 59.3159 226.292 58.8125 226.292 58.5381 cv
226.292 57.8242 225.532 57.668 225.272 57.668 cv
225.215 57.668 225.114 57.668 225.114 57.7891 cv
225.114 57.8911 225.198 57.8911 225.262 57.9004 cv
225.918 57.9561 226.084 58.2773 226.084 58.5078 cv
226.084 58.958 225.614 59.0313 224.753 59.1602 cv
224.014 59.2793 li
223.422 59.4448 223.117 59.895 222.941 60.4009 cv
222.942 60.3999 li
cp
222.811 62.3599 mo
220.421 62.3599 li
220.209 62.3599 220.098 62.3599 220.071 62.1553 cv
220.052 62.0625 220.052 61.7935 220.052 61.6074 cv
220.052 60.7715 220.089 59.73 221.427 59.73 cv
222.064 59.73 222.811 59.9536 222.811 61.3286 cv
222.811 62.3599 li
cp
f
223.946 56.5845 mo
223.946 54.0054 li
223.946 53.8022 223.946 53.7739 223.739 53.7739 cv
222.828 53.7739 221.934 54.2749 221.934 55.4321 cv
221.934 56.5059 222.889 57.3579 224.047 57.3579 cv
225.29 57.3579 226.188 56.3857 226.188 55.3208 cv
226.188 54.1914 225.161 53.7739 224.985 53.7739 cv
224.893 53.7739 224.874 53.8452 224.874 53.8901 cv
224.874 53.9702 224.93 53.9883 225.003 54.0059 cv
225.956 54.3311 225.956 55.1655 225.956 55.2583 cv
225.956 55.7217 225.678 56.0928 225.334 56.3062 cv
224.891 56.5845 224.28 56.5845 223.945 56.5845 cv
223.946 56.5845 li
cp
223.739 56.5845 mo
222.371 56.5288 222.141 55.7524 222.141 55.438 cv
222.141 54.4858 223.381 54.3936 223.739 54.3936 cv
223.739 56.5845 li
cp
f
222.988 50.4297 mo
222.553 50.3096 222.081 50.1895 221.636 50.0972 cv
221.016 49.9858 220.396 49.9209 220.284 49.9209 cv
219.768 49.9209 219.768 50.4297 219.768 50.5405 cv
219.768 51.2432 220.028 51.8721 220.324 52.3066 cv
220.833 53.0557 221.453 53.2959 221.499 53.2959 cv
221.563 53.2959 221.563 53.2314 221.563 53.2036 cv
221.563 53.1294 221.454 52.6948 221.104 52.5005 cv
220.634 52.251 220.285 51.9824 220.285 51.1509 cv
220.285 50.7715 220.543 50.707 220.691 50.707 cv
220.7 50.707 221.135 50.7344 221.772 50.8457 cv
222.031 50.8921 222.197 50.9194 222.992 51.1138 cv
222.992 51.4468 li
223 51.7056 223.295 52.1309 223.435 52.1309 cv
223.491 52.1309 223.5 52.1216 223.5 51.918 cv
223.5 51.2524 li
224.146 51.4468 225.034 51.7056 226.161 52.1309 cv
226.373 52.2144 226.391 52.2144 226.401 52.2144 cv
226.465 52.2144 226.465 52.1401 226.465 52.1216 cv
226.465 51.9922 226.345 51.7056 226.161 51.5205 cv
226.105 51.4746 226.086 51.4561 225.995 51.4189 cv
225.181 51.0952 224.35 50.8179 223.5 50.5771 cv
223.5 48.4966 li
223.5 48.3945 223.5 48.2192 223.408 48.0713 cv
223.795 48.1729 225.301 48.5522 226.032 48.5522 cv
226.299 48.5522 226.54 48.3945 226.54 47.9971 cv
226.54 46.7676 225.772 46.083 225.476 46.083 cv
225.42 46.083 225.402 46.1289 225.402 46.1758 cv
225.402 46.2495 225.533 46.7397 225.897 46.8784 cv
225.971 46.9155 225.981 46.9243 226.008 47.1006 cv
226.024 47.2021 226.031 47.3779 226.031 47.3872 cv
226.031 47.5532 225.919 47.7661 225.633 47.7661 cv
225.522 47.7661 225.013 47.7017 224.81 47.6733 cv
223.784 47.5166 222.045 47.063 219.936 46.2676 cv
219.872 46.2402 219.854 46.2402 219.834 46.2402 cv
219.769 46.2402 219.769 46.2959 219.769 46.333 cv
219.769 46.4717 219.899 46.7397 220.056 46.9155 cv
220.075 46.9243 220.122 46.98 220.204 47.0171 cv
221.111 47.3872 222.045 47.6733 222.989 47.9512 cv
222.988 50.4297 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (TCS_Re_2x2_nice.eps)%%CreationDate: 10/01/13 14:37%%Canvassize: 16383%AI9_DataStream%Gb!!km?/L#E@q"iI#%[@&YjE.>?1GJ5lRSjbLX4g25-.Kh9^-iHH=Z2>>7#Nfp"UJqMVa:'1hKGjNP[h_ad3P\X8)1_FJ'H!ep;k%J+o0(GHYB1^AdCFp](&a;er:MKN$b$;r3RJJ+n0eI/E6![q@$hAM4;TY&\9b)fJfc[A6Urm/Fu9=#[<)5C^1mEV&nk:[dc?+5["\%o[@`]?_;dmrDilaldPlXF*Dj.Qd\auY$_+K4n?S(2fJ,%DdN.0]RT\&TDm7&9eYVqc/\'/0CQZgq8;%5T5X/7++F-GI+kd@C$X+E%5A)>@]jJG;5LdqM2iCJ#rSm85h:ou*lc8l-/ad>b(N7(V'b+7!WBTjUDnj"U]CZ_N04@3S]s'a!r:]R@kP#LjXrgI8MHH*hrUt*3%=)SKE=l<Z"IW>,Mjiuu%-#R%pg2HKl`uk*>05_gQHhk>qpAXBmrhlC`7fC_Kj*s8irNC.R]&h,jhS9'a+*>^*k44.3gq:05]GK*k%l2UPfc18315@2+:H^'thVH*ZVit"n4dpKchn<OTMr\HY9Zfuu#DgNLTrTEWnr;UJSq'Z)#SDl!fB0Q@nBD@<+s'E-4b5G\"g@+JZ%s"dUemJ!*>=)[N0+)a+qj&W>R.CP38SUX\`hC5f=pkSi@\\dcJ:&]R$gRCFbhYcJ*VglFkIX1N-4o42oa"M?1X*7k&6[p?eqWi?L%2\3ZOIJ_Z$M,9C:s5j4&Rlg>355Xr`CNQ:h$3%+Fr9!k7X.)TfqR^rbo,jOgVZ69Amp8/lroWA%Xd7Q;n>eK,YCCWnYH2/'=#%^B%b.73=ghVD=IHrI&MDSp``R8"8BqZpV"^&m6[@d3@p8`u'YAR_I8F(EriL_0/?d989h*RD,@F_Q]qerh@8fdfp5!Ii9eiN9Y%mU$S%/>miQ?[gCPnK2,Qr9=/1[!3\_J+o-jKO=K$I<Y^Vr7h!&s.qsZmZ#_fJ,dF$gir)=f-p7D^[PUq+$RGdfDk*-*q%q!q8MYahEUmr%PP"L:L[,c4m.@>3s5W61+5NP<0`Uda]A(AqX6\M!5PSVPrO!\a:@aJE@K+gVn$bO;Vd+EPo5R(rnTFS>pMX<A"1`mZo(6kP%r]1q%kjCT??U(':O-6-mrji'PF`4$Xp;F[4U">?4G7T,nqW6I/VYkQg:U"ajmu%u!'G%+64M6%<p$"F0pNNCboq+_<$58-ls,>k1S.E:3%eSAllb?n/"o3^d#i.'OcFR/]$6N>++aef%0qX3eFX,$""?f/SBl3EpUp[LoIDr528IIlaIqn(UlYNC(MaQM.cO1-e1DSGo.mGlHl%&!_n#puCc-^94!iFCoCY?bHK`3dpPkopZndq=sX/C&,^r0`Rh.7dp3QrpN)<'>O8D:&Y=>h;^G<SW!F8s*]=qQe2/Ykss&`qn3Vt%J,d@LL];DnlK7`RTDe8;gV*gJR)sOJe[+XXli/X3FlN@LOT57H\j,]MrkOZ$E,A\<BVe2t@1+5d:"f6'FQr_ZO.T-An@NW8?iEk$%_gcdl0;ipgjluO>^7ASRoQS'!`mS3Xqk88MIs?/5@BY"W^O4/[.e=Ci[@KLr^?_iObqo:]k?i]$b+A2[0#PI$Y@eZ!mIM.?56&a'%LAfj#l)3^X38Z_4Db5TU^Sho\'^02]O4V_WmLMOh^\;Wbheleo_Uf=UnF%[d:-F($MuM%n;RTMr"(0nl5J0+l+K+!j?f&K^"8RFj%e*ZeFTCch%]6uoWZr6qrqYnI+mb^1!^6439"/`Pu)g.IubIh7/,0"utk.eX@^69K5ntsb'?XNOfpi-+;6>%[FOsb9@Tt\:iTi^@<%k.B>2gq4?E\1RCKe[rj\rN/7gPMf($6fI^m:;LjT^\F\Xi:c9sD'th1Ynj[6^U6SebC-GYGe&7eOj9!EhE5lqnXH$JHp%AfbM1)'%05p;s+29gcX):"R&)#_%q=X'WhK>94qY^>PFnb^)qVdJW*j4Ucs3MSFS%F0aIdG&G12e4_n[#_&=+0XRbNJUQY4(;:]WF-fc#k*q%psmRX[[mCG`3jsT4tQ/??f.@pqeKNH_c)kL6Jqh-k3[q`?ejJOktMSAq4G?W^I!VHi@!JaKAZ_)k2?b]XZl7-T!#X`m>gt"`s;+g%ci3Rs?i9iXh46G#^NOXY_!geZ*]Rb]0>I"lEVfEZmc:nPr0Q$+9YS#^\pKU+cj.\1=gd/$\^uQsC_47,F*i&\b1D'\4G-sG^\s?k%ULLRnc1T8HU[*C,MpmaE4l27qFQlcYktPMA+8W'ap$V6ocE[>]"'kl>`9t@a`nKgXf<>4%rUu0>6_F>VQT$R9hn=&/ptoAX5;gr?%4rTdZjme!9BeRunn\tIEbF=ib:#$Q8qo@fjGQ3u4n)l)Yh7i#:\pm?kn_GZ5:;&AH:cU`GC&:hff:V>QrO!`NIPfGO]'"kK.`:Ht%IMaYc>-.bgiVMXf)@TK'3:8R-\N!T7kW.cCLa*t8"$1qq]CaW<If@<1D$)MAIj84Pr^sl?(Z$,+[M#q8gfS%bI9T@9qY'(JQGL&W%4_qqWp6L'8rUSe)c.a?6\TE&5&si7O]6_)uO*=YYV'li1)kDLTQO7LcHTd8bJE`PiYE3^KrLL"Yk2j(;q;U5ba55ce\6!HNDtrJ>%_pp?eFB<ZFIsh03QB1dOo&\p,YiWdi='oa:Fk],sqrRcdYO:n<Q_lEDqj71ErpfC#j0tG)I:dZMPlGb'AT,`#[pQh_^>q*5L?uu7%&_anrE/?Eas5WM&c$-D(If&6oj/_K)+#Xk'LU0;HPkBsHLT;6cYIek(`'X0KWkrd9i@g>/rdaCRbH(LF9\erPq>"q'a6mNQ^45o2%*?O[SU;-G64jf,]eR$/*lShmPIn.+8^V=Z)^3]IMX.._69col`[$,bk47NEM]n7AE+%L6VL&C!KLM<BiE2nDuIJN[2[oDuoT+8=n%eG^5i#8_r>M^eJ=Qe)ad5L>WOlj\(.ZHjQS%DIJbE!Y@;f"$J&@-sLOH*@%El\@^<?#0BZN(:"bK<;3IGHgeKI`d_Tn+c><9rD;^%_-]D\BE.c'n`o5lRtj5b^])U0Ie37?N2lc5[iZY,Dm-a%"G)$X:#5Ym@JQO6XrbmE&(gQR/AM$6NiLj5T3<G&&(jHYo)97D?9Z#-%kP(0u%F$G;Gl.45^\m*AQ,P:-?@DDgml1dF+29^+n771G<Co<r#KB3AdIgd.BRAI,?m2&#Uo*WFX06I(_#:>JU$dJ<T"b-boWs>-%5GPY_]=.^s,U+=4M\fao^6SJ*RIHOp#U:Z,53-Rc&h[11E_QXiqR4B&iN$m(:qDW=-N!LCX1(5_^Tk)Yea<NtP8M!DHh#>c"se%l%]RKaOQL$Mj[s'('o\S-V/[B*J@RKVVD6(g3H-iIh/.QI[Osb,'^AH@8l7)__*>NeB5Np8(]ES96TZQMhYPLlek7>6b>\BsQY<QiE%\&6$g5@28ZkO/"YCq[Djb*,l,#<n`R9\g.1$'"\ib0I[ak]?4M]_DK'TY]@n]K-L.^ACY[lIg5#T"3jGhn=L/+U:9-ldr<l61Y,X%DtC9jB?sHNfl+(.\2sTCc'LRQ^4,Fonc+(3`P;B:oDe]?e"=PT!_2s48+N8j[G;%l?iR<&!AX8'[)\6PnFU6(mu-Krhu'd`!Ok3o%s08GKc5*GuX.NtQ0!ZQp#4pUHXF;r@jDWB/Hm#`*]DFL!%Z];7r`:0YdkH.GVqX-n5^E<Z,oC5)h*X<;]g;<45$Xc2ms8j&pK,iQ%?"Mnp$Y0mQ+)db9nc*\1,rX(SJ%M;:*]WK,mCd5%fgl']fe7DfB\`s1EJ3oc#Wt3=Cj2ddn@qITm@g+<cM]C6kjpI"I7Du?re&\k%f?]hoIQU9(:(*Dfl=MYaf`1hb48i9*bM&7Lg:?)T;G>kG$a%M<=pde"6V,7`E@)pK(3"feWa'A4"l2A[^]!7.&VBuPo_\%@#cDWA%lcJOk`Hp)7H^muJ=#_5olIhd*@sMjCimG$CNlA'4`'Q#n?8H!bWZ8P^gM.D'(K^-?]kXeRao,k]m3$Kj2%o4Tg7t%#9qKS>="bA!%.;j]=m6=W%Z2V=^[U>SB-a^k4b*?:<M>2qfWeS_f9/#_SNEC'um!:+g(1OQK</6M$Wbu#eZu8%NNd)<5e=k;`P@$:)$9j:-,Z)13%Ofqr7h%&#<p<rMd+37N#k7?'K=G`;>5,97-QZe0b#Z77$>%KXg?A-h'@2Q3jdT-<#>H,TB['Lk&eQ2IBXoDF02oMb[%ROjG7O2CA%o'TZ5H=<5t&?bkC#1ADZZjOK(&trX]_*6LurL92IZ7>`Z^IjLS*qm:.a.:Ss*ppXdQ$7C;+$?Y2<j&mH0%d=9MLsBZ*;T#N8B8Tq%68'X[%s#9CC(m\8f1Q-Dp<#<"]sn/mcnXd;&:/&u^C?lhc-b:PG9m"bV56ktfNSROQbRhLeg-Q^4\/"^h8HCU`crJNYL"J#5P=#H%1'APJI:cfN_In3/`e.)@:$+e-/]Z6XqHPFb\:T"C-Z^qc9SOfGd3li:L].ZOs/E41f#JIP6Q_57I*/eoOa-NhNcK9,`1K:`0c?#&%4-'"$<U(%@IfTYTZ#1DOS-lZ/[3U`ghrbjCK1m5js*Wm,BGanSoj?U'0=3oMb0F2_+-2cq3#iioN3,8YC@"0W\'TJ'*j*+49SM8W%=mo;*qB&A/MQq'48f/&ooCPn*?k@e7h-er/T=d.9f(O_8nT!lk@3^6e6Td2O2Wk-?MAUct&,r.1DL+>+i)61V]c.^tQT3M3#FBbA%q96Z$%"d$Gog[*E^3[<Ak?-SB&(b/GM+a9Y0&dE=lJ_SiDfPGhI<=R6X<+PEU#i_/\6ehV[@83i=B@R#f4TOBD/jPTl5Nb7f=_41%3\2m9oP"uVlJhM$2U^mMp>5a\0!5^]R=rl)F]T:KR>]h>682[b7[OlKHsE;nD&8OQ:6+`b\&HI3XLH16jt__i^A,7!V+j)$n8fW)%!h3p!\U=&>&m%TTYs'SRiop6GD09i>*@Zu+K6)+1f17W;F+"sCq97+"#Lq;KFXW0cSSkTs[cbWQF\'R)n8c4N@HS7Y]j/T]pP+Tm%bF$FtF`JGX0!/H_p[k<md_$PhAj,a+q'lP^\)HGQ7]W_]?4PI1m]2\,NtB&g]NfCGj4qoPRO@@al0!)Z&BF)!C?I0OhI8OW5&b9F%kFSi21JcUa/tRF$55fW?R@^Rj:-)EG#M5U-ip"lkcLg>[l*_MGoD/m\;[gl''MR9kPcAqXHFc;W[oTEMl^eT!UOI^Tj8+9X?npNY%mD6g6FE/BpYq/)A6T*93%j0ED\hT]5j#U4-?<eJq/')+c0!8^S8;i8hck1uNR"sF;InTHHk2CKBR:G>t*BT.)6M#/`F>Y]]Y!]IN%'/9aDTgKU%l/D>Ge9?/INeNeQio)qqb[A#lN`B3gLPsp?pgJ/^*UE1+]"!cc(027'Z+fM*/oL,&<L3C<i]<=IOVSbbZ0nd3io1$Z%a5.RJ(Z8H>9'+ugA3cW>lU[oYX+q(2i9]2jjZ6GN]XYK>_h.a8iSjp9a0rLf%^dO_/e3B`KMr=%(OAkn_FTEB_`o3ZG_VE?gQacU%ol8g#`O%D2DVg7iYMnO$oV07F78.Of2T*Z0#>2$)PtR[=+01IgrtI6oh=P\IoUca$1jkhbh8@9Aea#ruI2l\tM3=`slN;Ot^mQgX%&*A9Va"gq*2_2r.iSY"QkuRCph%;QAn`JfGpl_`"_o&<7p-K+!*Y/-!bLCWR@JKf[iqa'UI/P^COu&YXfmQigM:V5(j5\\fCYC^0%g@coo$KJbkft1n#TDbs;&hfmV8OD761rA&I/GpM/%bd\A7f6F3I#X=i0i[NQFd@H9?*S%V\A2Fqhf)WZfW-B7!k\L*>IKB[Cjib\%(#N*OVu*+_Ej2pjqH)>*N@3'aed?1#F>q^_d,Em*@:@aKS[9XPp3)a"Qs]'X6'+<Q[S.<_`0Qg2^nQ\p#f;g2Lid+QE7icK-hQ@4%",>Ze_%dL[2R$Jl]r$u9I@2C53-IUO:0p&(=C83B&3O=)\7[Co?kd)rmbRa@ku4etkqaN!=ZJCZ3l.`EZ0h,;edeZHO8?.)[F\?K%1Q4QUSUKq@EV\3m7UQ&s6i8.CZlQ(ggfIIN4$=e,T'LB>i%ObK*;%hb>UGS2V9XKa[MA$i&FDKoqT=Y'npJC`>UU3V,*AW2"<sCX%!B<.9[%au[O*)fa[%]^l!)g9Q"m&W%,1#AaYKr,,?b,7\Ng?IQ@LcNPXRu'g.,!ksj9>EiWsJVR&[W`4?L4otnYKc$"F9#kUAA9&%Z*G+"h$LNf-<MfS>5F\%,I[!;b;&qSfcMqeJ'4&8^O,dXi&e@(rS)[rhcP9]oUFJgrBA($_ueV;+=k2Mnb#MZ?l0NEJk4@,'a%u4%b0KN20apX6GRnqOW^X2O]9`SQ!,s&M-dm9tQILb_@&3gr4&p52!lnUQFG`p!_:!qU*-N<M(nh.Q#5[CZ==q2s"ZuQQ-s5;&dnXme%P'ZeXO2!W#WX!6,/%R&+@Xl/&anp3nTQ;ug\0A1V#CB3"/E!dI>7E.WSg8ibJQ"GdK0CCqbAp,L4L;I/Z3;d$74S_N!<iB8Dc4a]%?LW+7`6!q^;)U!ElifqBNl_p4b@A*FU_Pj5Xa5@=8-2Lul\7cUXg95K\Uii`#j_A"H!`82YhOC'LG;=K>g23mpO/)`p,3e\ST3f@%jXA\/fV_B7OQ$`&XRQ.kLh."]eAJ>AKGKZt=)B-E8o,Q*OrSc;Cr(->2.G)tQ,k",<t9!W[-2u&F7dj"-A=<h[TM\.!G2\7^[X#j%49l*oK"&mcguT[6pj8R=[3@sleBK=,gR9Z:V+-k*8"jukPd[b\6bk(1.>AOWWO1rS.nW1JSG@4FP!Ej/c3^nI%%lJ($[X:Sg*Z2W%c<p(o/PkF2RJ7Bc@We?%X-A:Fn=oO$Z2<cuI(9%eR8s2+Wcm^:F+NOLT<KF=5q5K5415k)_i`eQ-qT(f"="u/dBrn4SA&'X@nu;B%jHkd8&1aX>J@'\p5DPWS7'p$Vif3g+EO/(a($XkX2VV*2Q$!RN2mM1CP\Tp;aWAhtU@sUU&Sn,*<+U<]Wl(k.E+'E.BrUs!:-:'o%F?^X/jIpHOl0Ad3$q-P\Y;UO2,!V1JYK5FEmoqSjanscKB%b)=H5u5D65YXJ^sZ*%L_0O(Xh>P2Zd56ln*\*^n[EauPV`c!a<>`r%Q""""JG$IO8/27lZQ^?$i.M`o'/#:dPM#rsfYf?IM,&j,K-12-Vkbk]p^kV7XI,h1_TCDl:*uh(+D\E@p*'t%Sa0>6$h_Ia.97pH%6cV5d3W\IT:odF8/dO6fW&i#U$U310YQBQpP=R04Pp5@_7uTH(XRt&?26Fd3%X;n9;1YJf!VRk`>a<hNd'bHXm5q:[ON/h/;<;(C%B,$Kk\<XC&*ICI`;Jef_7ofaa20ge^PsH.j<%>po(=f1p*e7"2AHb4he#*C<Y+UDWgN<o2`<-gqkQJKG+dB8tfXDLSYV?N/EA<@.%k5g&/XF5mh].DYEb:!!\_cJ2]Rdppt?NjC%bj\UE%4n`R08P@d%NFBmJoToR5q7%GY5iSKau:Vm"kG&m@Ye?AFHV%j_/$4jEbS-N%-$])"IlteqnE""/GQjs37"\P`6;KF]"`W+()S6VtqW$X*5\`-9N!4\sF9XdB`3'KffTf!(g<A37aJQ=IK3-X_:tj.48SY94R:.OO%-5MBXF1J<k+'*Ygk02bKbn?7$C[_Z^7V0jR?J1uSR59Is+T%i`=b>6/dbpCc+t@T`i0Dr79LuM:<J`MA<uFc&%G/%\/dLkkc?nqh%/1C88D<Fr5a'oBJK/teL!D,k>Et:>&MX1T"G),aAQt)mkX@f!mjto*"4hs[MW6b-#NCn(kj3B7e--e)_U`al``0n[SB%qB-i]O<P%V'U27^R*/g,D7LCVa/?rS3)@hM3<)EaXNSCObCt)RlUX]g7BVX5t8h"p74b1PW@nHK@Y)oig@2YUme82F,lYe(KkZfc:%/(ks7p*%Zg-%E(6C`QbNZ>0N&nkb,b8*boQB+-Z(i^i-IHC]6&BX!.;FY1([j)Vemr.lqcPJL<lrI"h6RKp.sL-[PNO3BO(m+D=Rk#KUB)W_%fWd<1M+E76Fe$>t<_GG]E3lI+Ep'qYCM02-8BurTX$%nUmLsnROmUf$4dVBppP:P]ePTm'#Q;'3bdh0V;P)=)f-c!C#6L5m`k@.E%f5=S1844@bF%ae.7qL!<)<Y<"Bm;ELe/XDlVd+A,*S>p+R-38=W`;(M;])-Tr^;#RT/Z3J>F%]Fr"M-WZ)??>e71j@&r=QC)C,>t%7D3t\M;t>hLe!Z>h"nNF!=ASKN-&H!%S;g:>-QHO&7J.)&Q2UOgMt:ODt7['.3bR'lObAB<$a-L-[FiAaFMbs&U>q(Qr^6fG/oaU%\C6K)8_IecmEk#SENqrUAr,e>LaUeF1hPnNibu=mrB_D^lXH"f-@':FI7fa=GA>C.135Rl<cM1j=H?p6h`"u/.=gX?%CsV&Z7X0f%&@ScuZnM,kSWQAC7-N"&HPM-e8uZBM/>G5$KfA7^Oq4DCI;l;Z.JDDE;ZGKC$;qourWtfuNKc[LUB'fqB1^HO.E.H";-H(=NPZ/.%2tC(8S=O-8M)"<S0W@ANO*k=COk#C^bA(Hb]g[e&.e9/r3ZldLcb9e8M31OCln$>$<<r[Rbctq(9%l-dCq\;hYEOsuh%LIkq=dIF%]424ds(u-cQfpq5P;Aq/Ca&Y,GbXX=,Pi(C7,MK@oRTt;oHWMd):=N':(,I1$jTOkkTdd4c\T<QpuAt4[a4t7LjfL&?\j/$,iN-!%IjW\nd>rT4j<XRq+>6.?,=_;Q2Mo/gK]iLu(8;<bT+QKZ@3PKKksG%41A-Ui",dQ77jF7PkXVlK1SPu=c3r#)Z7SHd9cR3.mi`qP%F%9UNI>j)g&q*#b+o30R$dl^+^lIV')0_S_I:PUt6M-D0D%"bcL_9TB):8[%(SVu^CQD'ZOWr!Wd>tB?-i1n6LGPZcjQ<l^IH8,c%6M)LMh&4V$E6AX:O'F+rd@\K*qAp<EhiV"VU*"Ael\t$POhQ1:*taPb6m&V!c\Od6`s^;`8D+fRJ'i[skbAI=)::rtG$g%hOCKI1%':D8G@m]g=`.dDF**#*GqPZbdLjhb2(SZsLO(Uj&*IF%$BTEPK*sXP@d0CF&U5tUY$dn^)&cIP(d:Z%2k[WX_4!XU'dmE\(mCEjW%G3^$n7h_,@kbFoR,Pi3^pPF]T?VnX[7eAiUU`S\&iu-8=QkB:Tnid*%a14W1JV'Kt3Q%u>c6T+<6Z+#<P-@M5BLH%W-h;l8*Lk)m%VJ:<L%C\OdJ@)%UlKBj\c[gmaj];[&b`;&%Y#\cnDJVW4`Z<&&Mb*';UtuT&/`cB.TW8;]!K_V.p]o*):_$\!>6kj;0RMCUH#S1>%`AXKG<GD`Zl\0"JBe=Ut;g5W'h:UjA(t./(:63u-aCn:.;$ma2nG+m)#B^8U3M_?h"Zc=nFP$s>=re4gYnntMKlehL,o1Km\c9I&%*$H&FDI>R<ac^D#^k+i^J*kUmWNQob:8LKN>MKf?R3Z8"M*3eh'[_)]7pN1)V?qA2D053!,DR2m.EP>9+$;5h3\"u](qTm(^lb?n%*4WXR*\)s44CfK^TUc3(7G=5"-'"ii\q2f&Xd)7?%dg/]h^,7!/=RJrUPSAgUgkV&.?`Y1<m<t<[-K9iYca1jVF*Pgp+b:0acPZj%2:<g#GsiH1IEjN!+%29HWBAhWT9Hnq11iF!lR!!4@[P%oC3/E>2&TUeJ<4NSa7`5'-<-PKQAF79O<<Y*:5n3M%XfhljJiH:88OI*%P6ke(+nc1;<Q\eRiuqA;Pd2iU]nr3WILsP!qM_oWDhkj0KQF6C9?hX99@ITX-6OP2<V;#[KLe9tUrb/>7hQ<#aqgC.7aFl/`IgWK%j1CgAP9s-"*,Lu\PdTRm.#TWnQX:g<+$h(k?pUe`U.q:/;"m=)8NJ2mDmkqK>9T2mMu)]g9sh&=hs:'ge#,OU'B_kM6<(NT4n?3B%0X/Q,TapB5T+P@br:',;&>+@L6tr9$WQ$7N4-nK(:N='Glqf6CknKp!!q3N@f^*nRCgpW9I9`.oR+Tg08m.b8Hk>iqpj5TD1YGk+%X<eladq_)8%7FG(Nr's'%ub8A+nc\Eqt!pM4BC%j<;)^:LQr^W@V#pFYEH+DKR@@1]##uR4&G<!F8>oQX8_2-O>d/;e9>r&gEAN^%.:LH9E2(+&^065Am5Y#9"J:nZ$%4NE,Tob_;C$Ml9KlV3jfkl:1s6+N]g7OibjH$fNX`^)ab^ZR\Bu?gB(#`Q`2NrWOWY3#*K]8G%HQH/fI)SVZejMd\jKXR#isckIa^1A_jE/IZ@7#0!MDhFMfABt%'SgP5!U0ipMm!5+UMX6Y_sp@'4XV6PD!WXl\(HsR.go6$Am[6t%.P46'GJfP*q)s&;MG3TDccQ%2a++T%H6k9qNmJtgfE"-&VhdHX+=jg$WL%`2<Crl;^G^i%W)IJKXgS8uh$b22TV9#6UtWt-8U7<?%S`6VKWR6hb_jlV`R(f%6nsm/gYXpjGQ*^2=\&;[(PPAq^DCO6aga$FfHSZZ4@/r77Qr,('g@9lH.1YUfRpVFo-H`R<PV`uk'JGo;%.3&b0DAutNVBjDS'fd4bY,OLb_IcLEL*!hLd*"-D4LN9:))e0o<BH@CaPm:c]-d:>US>4TH_KBuOc63&30P79<T;#F\5PN<\gnIY%0X,s=p;iE<[<I(I-7's+0Q_=e7")4;BjNjoLbIp$nK#"d;U@Q/OXAcUD6`(::fRi(_n>?HR>0DVN%a?&66bYmh28Bq86_q/<.ho/%boUS^@$d;f#&;!1'-R(i'hH?bFt>^D))(VWnslr5?Fpp)p"L4b/I0-+)LQUtf.ob*25m8h7ba6JLonj\5([lF:!oE?MR2."TFm7f%TBEN>9R.$LYI=h9pXjB0eLeoD3KfCQE+t=LCm@XF[p:qJHM:B>;a(c2kfZ]XDQML$g"Wpq1%o^l5mMng_8#X!qn0_c_gIguAr/9s%-LQlb>-YE[N;AHU6Fp>M[T\F2AbRE%QA1r52VFL&//;A@UMc9@3bt+3R.N*N/Ts4UId#iH*$07hogsh_4b'3-:Vg[`L':=;npp)>%J/&7tNOD".X?.W2F4=]d%Z,4L?g-Rd1;7<E6N<$]IR\]$%])?K^+T^GKndHob>(GM3B?<<iM.TB*-/9&i._M'.eMZJ.dO'3DGF_N%FrO^HG"4G^D.BBhKqf,#><l^d&1rqf4U]][6Ib04_i];I:FM&P*%cja'#"FD#=ijtc$14(Dt5T&PZh\1E/\IXI>#)al,!lA:1*5%%]iCg87nJ\>k.LGC$V(TQ$1L<:&iEEm*h)P'ZHtpe.3S)=kh[Nu8!BAiQB6[EkNKdFKasS7=6[Sa@?rbV<M0T;\SN<-+FE4C7lF(J%S,QXkXqVi3gC/&D4,ZD(b*2)$nMAq6nmm+W^n$jQn7DhHr1`$kRYI$h#0(`%;Gr_[]PTR"ke$Yubnfq3+kP@?X3#sI."`1?hXJMJ%\eU=X8BF0a?TN(bqP'a6l*Et'2tj5u4-1S$DL,J-G@a<tE8u`Cn\%<Z97'uY3F;hlI"R`+f8u,ld;nY+g1+[TW8X'%AE<fc-a!f$%:@;qOP5A.1OtXQqN8.KiCtmRo!;BXu\T\iZmb<MUg`"QrE`/VE*?te%oZ-UC'Uap8gB]%ujfDb].2_l8]WAIREh]aj'ZI'n(0<j(%O_l3#l9ODi]HKU#eA"#E`cI9^eO`$MHZLE2aI>IY1i:,*[TM)QPhdQD]Mn4&JT[\4b])a=7!qb=PM150(7HBDi*88apH1.egF`oI%D-<qQ*HRESGkuVmDK7AYR;g[hTIKn2$A=3j2depWIOb'H*n<ErEnRZMUI@,`XM]q-EEGQ4+YF%U-?a,r;aegSZ&\"7`s%ctrEbZE%b@ObJb0MeKYpQHUU*,.6a!<EaGS[5GhDQJfJP$/Po]-bm2\I99LA'$.8$;D":R!Oaj/8h@C=YY0T.S*OPG[Xr;CTUu>(n3"Mr,i<%"KWkO#0OAGq)\DY*5a&-70S8XT8Tk,)1ar5&.R%7g4R($&ITIcRb2[>H`R#((8OuZb/@#C\WpHqasnFa2BEXejOu,eMmajj.k%E>%l@ElM8C4n"-HW.,\1]b;[Uq1V[8Z+g9lNKTiXnuN#&I:kUZ>n!-D0P]a@p=!&QMsO7`U,!U)UuPPH>f?^2_/G)=PPm"PI"fa81B:%:8=!lBnF5#5Rs;OAupC*Cl"&8[VZLa+N9ln+R+tj`1&oGkUF-(_$/!M+lU`q=ri'+a8C:GI2%[nFWK.YYo*Hi*tkitXIQZ<_=l5p%=:q12&il,VCf0N=mnO</_0TF(,R)>beUK1-q1HN:#6V<bE*5Y666jD!d"kmZa'u!oR9^!^>0O#%puJPt`$r=;9VF8S._`h+A;5NF%J8A%k>clUJiY'UKglg`M(YhuADn-X:*ru+U-6ofk_1a]@d%e#oSE\+\FV%Y7K3PNuFik,*3l8+NL,4SZE+W9V30Vb:b't_-aZ/*#%#I-`XKBp&XY$2[?oNLM%16DKa],X!,(u'Lo1MA/X;-?#6edTsSkAj#H-F^e7Gbu]7`9Q>"6[V#VXX'K(8HjHo(S,afcg\rZFtE.l%)F([d75'%.%5AQrEq7Jq1H$.a4O\e(CK`ZRB6'2/Q[D&N>M=<7B`p8(ZaeCL)FIb+1Q<re@6n+<E=IBb8Cl'!f:Z$cPDtAE=8?HG%6$QY[a#/-Y#$G2`CXT5B/B0Oa1G)cm,]O9r>g(ZO2&q&\V_YD0`!83W8g53JJ>1-=Hgcl/:^2qPqT&lnYr*?<n?/I4L>ZQ[+5$'7%dd@1+>_H,%^]r>o%47'N!:aa"75h]tVr9E50Z;!ihF`A=?]YCLl`Wm%j6OY)`E1fEq.bYCf9bF82\CZ]CI]K%^ob\JYi$j@\LYe8%RNaPtnMV$8pi=qlqiohEcFo;+#'KBE)e$7#O-k9dR(;srgG%F[fPPTqII&j#pHEa>L>s?0%F2YJrJ'RnD8TenGM@*+mbKc@VL,eS%K^%=uinV/`e@jUk_fY@UiS`P(DE&(!5'@p#iuU8lcFo8ZLM:<]%`>teFPc,>K6-Kka'lLPZ'R0"qa@<.pR&JbZ/[Onqq,n-mX=F]%%/2r/*/<Vt3tBQLgQ$nFg<SKcm5T@bDEA?W^"Zl1FRK\WmX8K\^"\RbFRQ["i8"4^E\R5OFrZ7s*]jkW]oO1hBk9@9_nBFLhLBIa%!I)N&@p^(M@4T;J<JJS(WRts26oeuC/IaeJXGD8M//;A@.mGJ?$c+^e'+isAn+>'qE:Ir@[Lh/Q8B,9d9Zemp[j$Ie$#W0Q5VpVN%E,eJ+T'*?jhR/,@mg+s3<kZt*&mRdd_4=UrE'#76fE]7323h$OM@nXTMZ]Hu[I3T]%LJ;OnH9YF&@Up20"sre%)*9X>khBE,N9uY%2=]tba`$^+Ct8Hmn687B^\(XEDc%&VSR1sE-,6ROgp,l7/`+*RL00gYeWAE,8?QirC*$JMTfIR[c_n,#:&$;(]n`*Or3kUjMc(P0%jlaL-E;\8ua)@l<nQQ^7=6#c9\t[,Nbq/c.PmYZ+Kt17]`k`l^?LIW+`?pYNB0*i.2`+<Z>C#\5nS-sk'rMZ[JrATSoMgb\>XLWi%oi=Cu3<9gs]C1.N\,SO2%A)LP>_see]68jOPV*71"n`:jn$2a'2*b>:No=FcQ""B9aDgGl2^8cd$fK\8M&J`D_t@'IE.($hE7\G1%L?n.nqWb+uJ9s5-7KWq8oo2@sCG"d"/f]dC$_t3so%C'tCc0_n2[eTR^6#bO5%4"'N<He;T=d[hPgWh-*f\U:bM=],;tnR,1A@%m%k.8JoH7`s!cP$S0]bF_?Sj)@/.mblL'DK$8+m8,'pQ]+87@1O)[1u\+=gQ%0-G5kSZG\m;n^*`82o)?Z]ohCDJ[Ff`\U,OJW3kXR%M&hmCO5g-t=ZA!WcUFV]+V2]N"-Y;fbM<9BFa(BC+Jk&L#3P?)nOoI9]*H3VG"2&:,;W5ZgjR^Oa?Fma@ZnD`Co6ZP"J<Bj4V=0+%Q=TH8*R*2?p:fMp7^3YIQKJbVJmi3YX*uqcZhIHG"FTna(luUologG9R67hM"@`A7fm@,8)'R]1.VJ6`nm2?h]3!(OmQlSHWnZ_)%Z1,4>B'u8be*-<GakcP,P%8]ugjN1.Js!Z8DjBZepDd)IN\3og*nRot&7+]F(UW,;oU3>3\m5jD29FZaZ,?O[1FnN3[7(UblcU%p%iHpoZ]B;$%p6OJsr(8@Qa@bkA*eIb1O5)mH@Z<!aDhu`q&$(i)#BJ>ZEqaOD1E_t<4YSl%+dmWN2*G<CIk>6%Y#7YO9XWA5J6Ik(%h30I'HUs^TVL&q#FcR8Q4+bZ3)rd(UhFb*J/A7n/KmWgbZhO,(jV&_J(q,/:/W>b-L8A<kQA=t4`DWtIS">7[38lCnp@Op&,K+SG%6@Yd27o(IES1EA"($6*T_1De,4=HhI1pjYHUi)L`<K(odoLJ6k<M1mANn=H4>Lp+u8TbSh1V^5*S?XHM++!(G*<]!h,^iD\R,ntt%gI2r]DWC(GcdTW>lQ\4_1\Uag9pmlafFs([:9Nnm7pD#+o6"SQks9U/0eW0=#eg>"(7lsUja5VB/(W_qq*?(,#Jput`t<Y@0dI,5%Gf63+ELb#THN<tiDOdpQLdi":@D>q7KKT_&kAPO\Sk)$r_p/qh;MAQbKrQ8HT>"O>6)8=_nfCp%gZ":HF/UD\jA1ih&',cr-Pj2O%1sX_e$,K*,+3@<KZ"JQA,p89MV<;;Yp"?rI4%#C(F9-r7YF]`B5epf8_Me`Phf1TX/No9%0cEMD5To2M8b52P4KqpB*`rd/icOm0%A&MN80Q!.K)rTSsT^hje#F6\<RC$RJd==cM`%[qe,.ga"I5=;]4L!Hl+BZchqWnmX]/]n/2c]J*nAP7mF6'WX`,1PV_*(qV>nA_E%?H"TRhO/T$fKg"82d&=.G8Y>m9FZ,V]\,+RELLIO#N@Mqe&jH&lqj;![Z!/#b-kH-P8S;i@1+^&NLFcg1RnP-;Qp=01#tXnA.0,@%CoOLkZ'k,oH]G4W,eS[BSh%.#[nQN@c@kpW>f,5uBu6>c[?s^U]m#V.k+i<'pBbcP[iLE?`^/HCL)$BnSP+5!]f/$/O*hHLaj=2-%459K\0&]NCg[qR0'Ac!76UOQPGlsH@n&:(hD\c<ISTtao(&Yqt-+ne?3TdBAC`rV;W^hqO/F4#+'HjD.hjo&?M2eP\Mo-]6E;=B4%(k,(n$#`t_A"*enJ[gBBZdON9N.9YI=F9M?96fc.5`T=`,S,#-A>s.21olI,/%\&g>"rO0;64C(AN=:)fk(03C*M-l^]C4T>>8X3%R4cOeRRhTa&e0QnVUJm?GmVNTkIXE`a9;Wmk7T%bS9>QKm&HQ_FERcVFpIHeg6S$GLppjq-2XPt@'PS%fK6Ej/9XJMb].e.EHY/E%b'W\//JIYtHOqd,BfD0nY"ElmfaYmS@;hhkrB([1(SN@ErLblQZ&5:2iQMM3fG1qPeCb;LgZ9i=lDEB*]NlTsAJm!.=mSC$Q<'E0%[la(NCKj:.5eJ-0gUKe5iGZM@L"!/^!ma7M]-:<K3P0i%4.B%%ffZ5M'\`86Ef[OHTDZL1o!2g+acEbJTDUZApW:agS=f^Q9E3+p%ZQ,V83(s"fca947r6.+jTDU[lEE6tCl-ILHbAgR#)S37qc;)^.3O<^+DH`%+Emr7'Q#h-/XPA1:Io^GjcHXa>Uu*/7Q=G!c=h;l*%BfS+BVkr8jFd?NYe60B-d:kU"8*:iebu&+61*NttT*^pO1D;MqI3um8N_G88FI<]<Ai2=e_fEkP4JdD4?)V7!p$0;cDCm>F&@4Q%%Z&T,LTPq-"V%)-'<>CA-VJN(cC<Sd59-mTG;+iP(,W)--3P"Ij^D;K;&g_[_<X4:6$+m/&MJQUPpaLDN%LE$TPL,K37n8Z?<#O^u%MPpOXj7T.^RbWB!*T,*'l(uQm&S0]IFoLBO)\nJf5DBY6ljkq1^EMHs+#o@mUIJLQl`N:'L>XYqa,ke2fO<l98-cRB.+]5['f59Z%3d+N2MbqOT/Zo??mJ(AT-P:nbFPNMhL9pSE?P`FB,Zl]0X#q]F[mgX0$2m\"2!XLsgfg)D"56Wa#[&56/g%CT%IC<?Jr%bJ')\gF%/tA*Z4'Rp#6ukX-@Z`aKm[uDY)]'p"Q^_B<3-#V`/qeOj]G%1g8PF4Wi7f-5!DZ(f,T<h[q-+"9`<DD%X[F'O[R23_6QVo_/SJ_:%+nC^Vb2j.iP&I(^%$,!Ge!Yp]'ci0pjYi<_V4^nIiEc7)ZkaSW!BMNkh!:^>-`N"PT,3%sXrEOQ34.Xbi8$BV<I:]/+"HHkZ'uXb%ASu'Ci')/gXl;T@PmN!e&uuDj?pq^GkXBUCg!ZB%Fd(_l(bT[UX`nZ'!c'sY69jCgDpD%8dM1(<ck2IC4d&M-e98A*(YF9L;5dh=%7B'RWYgEmsNk>3;[h-msI6;]15Wda9hO&WC&R+]Nl61pMS>K_h0AA9;c6-L\mVp1Ph#7P5)cb9!X\oYpD_>Q`*?CY<k.3Dj*I=G3%ILb`[3$5#iUJkl>IP+sK0Q_ar1@_dI\KG7)/q,DiPAks\%if52%\\"TX/!Q:7G1a<#;;Tjn*,-9\p-qFf.kfpT:W2bd<P5RN^CX/%EHL<H3B')Ar6$F)G^-et\6$*u\h'i'`R-t<8KStE0$/j+pN/d?h0D'(h1jJ/"V[t]Ska2P>s'-l\+eG#kq:`MkTJG*NcTNX9tn5D%4P_=c?Ak`9j=XO&kr'.!>?kIS6o3Kk\mF1WkVc!t/WL<=pYnlDUVjMg="rh$!l+,*4C+2H]Si[\Ebj^plEY-T%p)hWD1,Yo*=-!b%QTJJY-iHb%b]J!d9%H2hlB:MoH<1?.C>fHDeSVa\3`jqHBfc!23&Mq!0qB=)`N_J9.,Jc[G"D2SF'iSGiUh7Ymds_2?'K,*(LMrW%De\7rlej/O/^2g4kZ'Kgs(5Hce'0$p(shssG)hc4/+msSguYoQ3TQrG,Y^5<bajiciTIG?/HYOmd32:idc0Go2bq@Hh&OChpO.%&%f_,b@Knc'al;Zj%Vjl^YlUpB.L97MGlPS:EioWQb/i;B(ZLW!B#otodg.LQiZj?i(DQZe&RS$][>W=#!n,46s)*+gJ%W7tc08Ftg%>f5R__D+OKn8c=_O\RP7/BEno?4L)<X.//>^jY`nbdEsd3P:\Phr3Xl7G?b^YRbd:jL?e6(E\F-6R'o@I2muMb[GL4OZ,(n`Q^h7%i8NK3mlW5'Ru<',SDiVAIF=H!D@V9J6/A6F3F$'](,)$D'nnL@n8d@?37IA;)2+k>:(Hj^'"L[hLY8EWC3Vc6@-*0]b7uH(e^_iO%jc@8uLR1)AaApr8GW?>R(8CPD<A-K,?4LGO8QLZ3k/(dZF*$hH'J+6A%^_0I`47n>8Fbs,jToS-0c=9#dOp@aVQ2RKr=&+tZke&O%..UQhZc(5p3:0t,Hj79QjZB5Ym*ucWQn$S2(t8)Tc2;:2IFKe@nN0,*7Bb>[XQ[pk\70qVGk&75oSS'PN@X]=9FcsR:>U5KcL0<i%ZL=fWV0D9)fmJ^(ofYM(i8?$:?*[6A^VrVKg11&+/6%l13WH-cZHjBKfMlgPa+W0?B,0g"I3?q/dp)O&aUN'4b<EsS<1,Gfch*%M%A`g4:bPm+`Q@0XsHG);Q^iI1KDV6C<RbSN,>*#b!Eqeb?gM@@^kOsP[h`@fde!l;AbJ(o,HB"r]ZB+_>FiEC,IC<gp$hSG^5&$&5%4Y=/009G%rc[d7C4Drh"G3F(PHHj03<UXR]3n<&J`S4`.ipV#Xkk*\Kr_;`(CI)H]M0k=#<%Ve"P%!kL$c8BT(IYX'*G/L%$UcR[%,+6U/.L$>--!mN6`1V[\<hYC:"&\S$<J(M(,-QeAf.SbD.R.E;g_9#C1o>$7^gaA@$W)H[U-e!_i=)&SHVEOoJI)c>3G9U*A`G3E%]c\d0mB@`=]jNfs8Kc,KTc1<8[@mfL>)Ac2W^09@K?PC.m7VVoE\fRd6CS>1Qq`aP;`/6sLtj+5e=_@!F4jM%RVccf=`eB+/i!TN%!W6h"2_\6a-G,Dl*GWs>)R$"ZEmPd^VUA4"k[iD(kI;AMo:QZiNlhkA3G;gU%io];5_Sd!*4/(f*;"h[%[tJ9+qg,m#,3\)jIlCK%0p)O&K*K1c7nr.a6qqUM*,<j9OuORs[>R;DW^/#h?/9&!;DmZ+q+k.r-jC-2LNH6!H3*XtK>UXsRcQ490JR5`4T6g^%nG%1FIcDh%B[frKd8ZZL+@>l4O[]pt33@!Gfd+mlflqW=KC*;EVlE#bj)'oG%@RIk9X:W`08QPm4%T$_M<p_g2;PWO-#N50WWk%\fW)*<6*,01%WR*HYHRj([d]4!RGq8]RB2^g(p2eV==QQ2Ij^f'mC,\!TP2=o`F8!\:K3g7S6*p3#(N(@r(D+.WIE4]IX\(S_3G@!6&YB@moDOC_%QLiUB"hBkG=M]Qf"Gp+>UAI-6g'-'Y`.>Q13TpWFl":,e7oN9<V_FBg^+Aa5?TEoO:_aT_EmVburAY6HkS<'NYol0cl_#C+]jNT9%Eg/rGV?RJp);@u?-DoD=;[aR0W4P/=F"^$T02F=d"VTp0`1=MG&,ud.@aGNrM\VlZ>rY0a9l!0(\/_CG;DDio:";Ae;XPOcihR_%%]cb=c-T8o9(JI"+!OA]o1=`&Rn!P(NTu0j#WLl+"W]JIRR3RuRaE'DpSCMSc<.cM1XDCad"u]N9.NK?W`"=k?[]l\:RMtf"W>[TI%$+2]jK,3le6I7JGZWub=MZV0nX7#5Uj7f_kJt<8s(H5.VUB[nqP3&M0Jcr9/.8s[E\fqDd(IWmWLQ157_)U\8M#5f^(!(:YSHc:5%_P'k3$snMKW6sN<L^Jori72?8q+^9D^\k,9YH`XIDn8%RGQf:BMZp:Plo>M]JYeOjf,;4&;)5/fl[n='FP$k*(Q?0\95g;`Li^<i%JlcEdBiGAX+Z2tH/=!]t*$W^Kf6=LRV;3tQ"gXQCXTkuViag!0BM<CO)RcqoP9LXJ/s(gi)uuJNT4lkL/F=,!oPIJ9c)C;OXS051%No%mEA'8q];fT>"ML=5=`8Q5g/hZRYic#:"ic#B+EB'70[8V')r15acd"VX%MQ.Ze8jjf]:/(=4;WH2mY\:oT$R4dtXMFC+<GN-C%3N+4j_E:d:%[]:OrGEO0XuNEjkE)AH[p[^?MptroS2M@K+d&YUE57K1/YXlg2FHOYF4TX=Ojf%P,OcX<B9aW_-jZB]Aa^LH`kQ2G%1pl4lV-p$BW$N$!o;W8_OJ*,m@+9oUP,$K\j6ot_'NAp/G,$Nk;&Tpp%P1V.j,;ZtUXF,Jf;e0'Yj->,SVB$Bg6<[;3GgbLIaYWq%*u>RCPc!qprdq(,SAS<n8kOsrCkM[i;GfU)L6FYu)9LB_"/<G7<T!Rpk'C#H%[a,TL/g-g?u!SbG29')b?.G`)5Yf:>;4TYj0"I9%``&7>_d/T&$.s9B"Y'd67%bh7.AC*;&SS>[[NMB=Edi=]r"+D`B&P0rTV_B_8W"G5$_eQd$c\*p=]!KH9atcjXPse[rDX)'L_MKT%AJJe%WJiUQ=kF]<cV^7U=Wt'$"PH0]C=g_(D+HoJ_dEUH1hV!V*Gh_U9uP\e.R:=_6^69($IH_[.^`+SRY;!3PF.VuQsqI/$QDr+%M4h+%&"!iHB5)uM:IH6c@Q:]/P/pH+BZsZ:>N@'&3Ks&K#XEGsMCP;l!U'\!!U']]!&TU*an[:_fV*&Q.KD%.Mrk%./iq(9;t5lF%oh:'D%fp>Z,tn4KJ7bO4]:F[J'u\9ms-^8OT;MJ2')ZMr<(5J!>09Y6TBYd&:8p&jZ!s0KUArHCG#Jb^rT@a`WW)MNh"tFScZ?/E%mu%YAj7<)#6St6/1k&4oe)%t1(PM_C,KB1"2Yk&,K\n-l^RG'am;f/JoD=2'ZdKZKpF40tPf`BV;idC(0n/RFrqpB=m.7t%I\/N$%UF3fH(:Vps'`%^OUecH#*3l?YL#2tM$#oH^Nu5X(f];cJ'7LJ1]JAaMr4,Df;(]tJ$b^1A2((#p*A:noEMN9DD#C?aB)+$RpLk=8%M]9?*3&Yn]Lk-:&E<(<JTC@E(VSJJXHcSbWg]Wui+.-WYNTDP"Eal9NFi8kg?]8F6nr\I/bc7pqUcg;X.4d\ph>&-Dh]p/3-Y=nO%L_2%Dq+./^<nq@PdXmc"(Rgs]#G&;E6k7YNil:PODmlaW>"+>QN9+!P;R>B&nt?1g4ipK0SM63kO\,+,-6tfE4WlOO5%Hl0/T)gU%l#b[W(6VJP;9dYtIn,+Jdc/:;R53@#\6<I-$9"3"d<gN-UBN6SC+MU2R3rQ3T11eO/:Sk-ja0['5*0%RItd!ZCeK^+b@`JC@U*S1%NigCD1'3Lqhm@Nbk4>ZHC#1?)*Ii_(o+6R%`f9+Z5#r?W6M#b1@U*T\7uZS+b\014Qc-D\I/MgKi^WOg#S)gU1Vp4\d6cd]G34@8%k+`A2/af^/V8\)2R^MTJ&^Bc[C5Z^]hd].?;\L1bpL-P_0?X1e1gc:?WE?]YiW?&u)p8qgqj^XsT[M,JM<.tidedb@<1R%?BgDW0%!4p'/oUg\o>pS]"'5>&(6iH0O;>oY]U]*'3lk<\&4W/uAs-].0[TA26)h@/7W@C!A()Zno`0.9_e&kEdn1HpLqdrIK>#,l"'C:hD%eEs:<1_Dg3dB#?PMk#P([.Ju_/Kb&<Wllh#'n?LOU^BHj>5CP`"!sVn0QMP2-(l&B-(l'5'$r2/)#M?TH2KhI?OR6SNW`MM<<J]_%PZUK<S`c(Q)UQoY`S9a&#"9f1!Q]i2D+Hnob=@[e@KVY+Am5=7$L`[k'%"FgLk$!BB\MhlOKcQ(;U@C\'%!^FeHe_mT\31Fl^aca%RL3ABDhr>(<G>DIT\43_'cVp.iR,hC-(m8kX2^s8!=__XQtelV^UHH;BSR!*kQR^c1_EqZq.U.s]'K,`@rg]YD+>%KWFaP`'[pb6%>cP8!,Mm+@M$>e0SnAY@N#S<'6NfGZK-Mlci+M^JFPC,%TGL!rTGNP:cn$W5W-m&pWfiVg.aY9n;0;sKLE`RmRVm/^<Q[-t4_^14%jsVXX-p=Z]WMg4^7oP]RF:QgZ+/o<97&IZ?5VIrY5d+;@ZK8$a#sg4UWt7+'?s]=URtto";WM!CMT*[]"\l)\[T[DA7AZY1<fQQj%GjEI]S,)W"k=:>'EOADJ!c$pa0:7V\a#KfMV_M2'^+A^dXOtp&ku<6MXQ?Da]coG_YTfeE4gCshm4_Ol"qiIcKVM->7KQ;\TReOH%ea&o[jAP(oC-_r!2__V3(JJtD,=Rs+$;Y*1"V"-am8OH3Lj"T35tB'=l#Z"dUE-/f<"(h-Yq)PXcjgq&ckDmXcjN;tBHkM1RMPPn%\Z#a,lqf2RTU(J8;E%UIq(b'N3OPM)Q/tu3F]_5`b-[hp/6m%i(3JW"GpLa9$_$J)Rk%2@3`8g0's@eS@\O%N!FfuK>0t3TT:]T>%16D2b`1YFGD@PdM+pK(J@B73UK9!4hOX\g@-=Zn*]OaB.0R:K*YbWQ,r)@oDIZK>F+jUR5QY`sb3!0IK4fo&S"4<q$OFmb'A5gHM%a`f&F,X!Ncr8&94UK4t_Ng`%?]V!*K'ok;I[AAmD*A)I<lnigSV:nOIW:fL`DWjAZ'5VNng.b&j$<m>pj53smXH6s]VBE8,kI*,L%Tp]r\::(<o:Ljf!0,P25Z_4=%bEVU.&rQ9n$:4jDI4H%cNj8,]S7t.Hn+6TY&%]A.OmJMp<Na=ZHI+o6TeQ,3dDSb%b'=:,J84,+%EmP:6EmPIU3G90r7VQnipc1@s2W^T_ag!#>K*EIJd$1-tDN)Z6*],Q2R5h:rVRQ>i*qX$aNMK6t=qeG6%iX#'dF[G,-nJ6h=&]^a%+[Zcd@\sCTP"9[g&":S2Mq<Sn&!C+a*]+EK<%@Rb2m:ppWX"OW&UHUBWdY^kK$`jume':?BOGk2aTS;oE0&6HTdMT!TbhMecQ,Ho%/-M[.kDFL?Pndi+W^\WUKP&1L$_^JEGeH)&D%VG5,=lY7XK$+,W$(_Dp\ctY<DBn]/r)^o8@AQtjY5/&g^W9Ph;'d&E*`u0%K4g2%dr=(Nisabg0Z.j9$o8af8!eh!,]lXE0:3#0:]C2IUgh];V0s7S/'#<#(j)RlUT#;D(e4ooWnO>'bS(k'cjN;Jc'#)!.T6`oLiAt8%"t_s%+""!)1g-u1p.CV580LF%ljYO[Z7gNBD^FR3UM<)I7&`6-d"2I6K!pnq"s>Fu8O5"c8jPO4V4^tQHoiiVci>=-4/JSpeVA?G%XlN2sjG7p8VXhs?P><HZ(,VGoHq??"ZDe)0(A)2$:%t4O)jRB+/O9DE5dd8[l#.%`kQOg8BSWQ&1eXS?2D&SdFPfFnRXHUA+0-/6%.Ar+T8j2dRX#<\Y/sX\8BsAcVK"19<4e,L?;oPCW;)U.B,':mQ#47Kq#/+D,2(U$g)6O[+QJZ2u$o)Er8d;\\5teSX&s`7[#(UH`%RM[kgSmHcrADNS21$HeU>88G2[>RB\HIDA_@`O[O7hnF8aA>T;0M3ik>&NWKPEl`9k/kb?a*Ft2Q$T%7FiZjE:@;qOP5A^AOtXQr%4PEk-\G!#26cQ/9Cc&pUBf(u-Ebih6aJ8#[:IZC*le/u)d"@pKgfs.m,AdUdh=_-l3@LWpMCLrV?0j&`9mn.g"PEsalXbY62Jtqp%)NZ5N]TIU&DR[fPJ=$RC6"j.-VHHV*RN.Ca@T.r'aA@Or0IfCb->SLcA::t2fI9.NbgTRj+>c*F'I7G>jRUPJN0>h)5l&VLW3Er$%1'3RJ:7f#dkeIa_-Gj8%-4!>a8;QIq'B5U>ks5]?`JUs=Ji'HWl9S)%]/Ve85qbHhbH?AA4Oo'rK@EUr'bPpbgP/7;i?8Qd)FT+2%3_U'QLe+oa4_TZlRQO&&BHi5S:U>)#dmPX0k,3e#W:AAiB)15#R<m5u@MVI04_Q#pqc")pDo9In;\7ZrTaF+BqHsZ\Un/kBg="(L%6;,OalcBH"PFuP?9*CqK@r0,>*]-AretnJKV)VhhZW%I('?3(u(KGKrL`!E)6HcU:]#omQ[(M>)LrWfU5e)^Z6;'PAI_#kQZ]-o3%5U9&,P4C@:%M,KVoRoU@RQkrUe'N\Y"k>l7TK+aWpJH'!U9S;oo8nOFCV62NZqS[T="@:g<[DES]CDD][KErIV[Xqc#11>)5s&VU%5qa)JTS]%SU*);9(6/,5#YiP@'a:9kc+".Y@aC2Y:nJXr/L=YG2Ne8%60Lu1r-^FKB%/Uh\X_W@^Z9DPN]SkkS\*p&RctQRc>$U(%3K1reQda+5E&l1_"d^GXqrh51P7gZrcl(/c=Qk]B9It9O<%QO-.Mb(?)&!CKdEE:4S^ECQKoTid<'Y(Q1UTP^1uk\`RPCqk)9kjW%ck4Ni<9T9>9IeO86Rm2of^^he0r`M;c:k4a):"UMkR;)t"a#JT;_)sE1XjL`):Jr+m(:G[Anm%FE5o7OB:r^;TahrDTaSlV35ZW_%$D$/"e-_c:N+n!kGfF8ZB1+P`6>'!PXX'o$Z-XB>9X2q^esKS'$s61SF?rkWe6uiGaMJi/$_:_N'FUI?NJ`G8W5`@5B36t/6>'OZ%XXp\2Z-^\^HXC/:[@h/?@m\3lA2,h""VJT3"l]te1TiIgjVcZDFljRoR"k2@CeX#;o)GZn4[U0,-*`F_8Re1^pEV$S[?@b*f%_GB%H4J@]E!9r;=_olORPhN.)<VmlR+/Hh[iku>@iK?oX(rXXXZcD-G8m'1+1i!Iil<[gE:Fu((I'WqnRJn6\G3>^i*?34CmZh]2]JXc%[bV/Vibc;9>1nABFRcfsi*F"`2bY$+3sjBT&&c#'LT-3@rJ'RrD83p!GU"ok`S6-bFPaIbi*F!LBu=\%3"-UQd<Cor%aN%S%>Wp%%a&^&rnIq<ChIGR)a+hKNnRKJQ]6N(LQnI5R*2`>9%0u@]D8TdcfnRCdn[@E7?+b#69G_VO$.HjTA@VDc%2Wq%%b&DONe;QG[c9&H%]PTW%kA;.JhSn6(K=@jn0)iN\r`^<Oo>^An1&[*pdr8Q:mL7p*kJM8qG<QK7IHT'u>^,TEh0%nuE8Gb%kj:lAJt<Zj.R?jVCJ)s;%\sa8=6VIf4J[Xk.XXQP3H97Cb-bVA`kWs,]id&u,.0MfuXg\phCI6C3hG,6X6#TI&H4j<.JTf,]JTdFG5Yl]A3ma)I:*&OiDcI'h%Z<NN;T'UV-5u2YcXc2))&G0Pc?*`36"?kG?#shADC-p8W)+)[X7Nq!;DG:C_ZJ-f24kZqD5u2Z>)UFW':*JiCDS;=>>>p-FlujjE%:NgMGd$(r-'(gdS'"#PU$$rm];hCV-Ft,dRG&'^sPMVbJo;&io$$t%SBk?qfPb9],msXhO.R?jVCEgf_\XF*#JuDlDK(6;>a_smr%H1K^hbrkg(.6(+PCF[Yo"&:H3a`"kXn697_nD!X1KU2I<$$DdrGK>"nLM89KP-h'Ei(fDH-+Ki44://_4YQ7N@aL=q3h+q.Uoflh%j$%&:I`at&be;+accj'p4cdP[:kP?bHY4O:HW>]i=o50&4gXi/#<h\K-3q4,.L5>pQ%PZMd,^j4epbb-O0$$o6-lXG#sHVArKMpU%H2GR:M0i0RSr*?D#!EXoV?T1>l)"YJ'),<5H7&&S%!j8g9al=pm\^oo9\c*So_NY,IV33ZLD]YWgeZnlRFbb"8_k=DF8%-g4]D)R%%!nf=9al?FmS++9VXC?!oM"(:1$G%:T46/'F`1a91NdVFcnff/eY&71gheQ.;YR3`4>Z_!%=0AhLDog/gJ9]jOgm>)kaAq>2<^14%T46/'EGo=51NBU5cnfT)eY$R3hUJ32ini1XBB"B?6'&stM*[2u]P9aY^Q5G=4@CLZOgm=nk`NBI3m]*kD_fZqEGkp)1N>WjTP*9@%>H&CHb!=:krKMl)M0kG;Sgeq"JmJGBJmL/,7WmeZ9auF2mAClpbhJU*oZZ'ZcLX`b:Gq>Rpj+G^h4#>TV0i3B;tj2mBa,J^")/TI%$)D;!-'5"_:dB&U:'#'8a#jKdL>a>,FE)6*75uAn#^W"5G!aR9<;[;Z?4cqPA3iThg0m>Sg0r)oVOk"69$lUS]i0M(8*l!DoJg;E%UnGbJH7&m0?n2%9Nmk`R;^ppM`-t6CO!F?c$[NetT3BV%aSX>9*p;U>(:6G`(::u6(A*2U$eeA.%k22dF$g:\S?Oq$k]+CeLcg_#%p.bs@*3`eOU,8K76&u-A:'u:eYTHcij+RAmJfaH:PCd*pQ%C&)m%"j_3+;9_TZ7B9T`r+>h%8<)E\K^t`-uGeO-!`T*=oG?`/kd'%'pBGmZH=C;0]D+*&NFpq&J5E\k7J:7S`dhXSJq-V#SsHd@N;Nr7KdA=2o_@fMOr\TgEGVE*2[Rlbi,YjFL\juAiqbXS4>[qUn6DC%%6<Va&M-tpWCU5Z9>>nlI(.RW*r55t#<d+\6P%lo6P"LZphAL(GRlt$On!U@cm.R6oUmer4bTCs`nSU$O,UQSW[9p!k1OQ_]U^%L%A\<d:oZ1SS2<Y3@2/%cE)YD*q%lNR5nXaLBA)/5Icm.L4KUt]NgW;aB#\R=D_L'?i?Zt9p_V<0uO+d7hK-%#Y+U>\'.L5>pQ%L+a%mi_p!'&H@nH6g.Y*:udH&#JHOn9/j!,N8$k1uUUiTLZlRks:A`pX"O6WU-;`m?""H]jQ20q<jp]4n@E(%sm<KLE?(YGRpY6OmmO?%cm.M_=>AbtoUmkLn#oB/leOgdBanTd,uZBc(/)!&aL&7"7&SR'L6WaLoOU$n>1nW/dqU)UWp1$VdqU)Ub/?<;eO88h#7^2IhI&+r%AKjnB2H"WK47*T7/9ZeCXC4%!Dca8A9\7\p=mYd>NO'R[\)Vn7D<[78/9],TcEJ7DZf;cuMr_02]Ns1O^6`OmOi;4>K#;IKh@=l7%`OCam(:tpNm5qq2Ge4[PZk"MC0W4lVdsG5fh*AVYd2QSnh*emr6pR+/ifM.I&HD(_#3,#bO^/,L!sZ'`5q?Y`Q\ft!VP!=h\MB8c%0$C\VZQ$u4<2#r4p7VK1L!l!f*$>/F7OYHIrA_.RfoMQ3DgnS:r9-Yqr"hTCCjbe`B't#<Bf83NR;_'!pi2V[OIR*M:WQ8:EC<R(%h"`pBU^,u)At4mN-KB?@g:4J/c=e2XS$i!gj/1qn$e=hG7]8*^4/$9K[R$hEg]ph8^Bs2L`\+3X\Ll0B2YTK">PLohB0!7<>+eZ6%9XC/Q:c"a-E+U?D@:h.:i<5uHSjU_f,fcbLe9Hb`Xig7l-f9r'ULNfr6F=8'jAj6f95K4IPW[^Z#'YaaLL.+b/Ep_'^dJ?Ek:Q](%.)kiZ296ZX:G@1a)"'F6C8YNLHUbN1jX5<-$S]8M&f;?V3`b`rSO4Kg*'408FAq>;NWFpQ?>qkB<:3"FP/Zk96VSS2Ej]CVj[E)=%d&\k(5\WP5%^oZEOK1Y_VF.n7DXDDV&A/5`6t(;CS")Epd/WL<'/<a\")_/>BYFJ1mu_q/-ok^$LOT1/m6_bjHe\2h'%'9F`,OT@%\tZ-R#-]Y(rs/eX<lGRC*T5=Qmi"+LA)\l_-AhugP'rcTrsgU7I6/#+T_r&Vb7^i1oX&ZB"FMrJ@k<BEMQd?!>(gWOI'XkT_QV&j%$5>f.G3Eg`^aB=c,Re,1r:1mT#n7;%d.@kRGBF+p66<4P7DQ8Y@K[Q8*51NpSCF;Ae<33qlk#XoNs-LI00r>Wn@fZG=cPl49sS)U%%S5o#1MsdT1F/u<2YL5cdHuJ]m+@4dOPP:l\;?91,"lei(f[d@JZD8KE5pi<:5UM[li7EV=,&IVPPN"m"k8#'q<'6HARq:8-%qhm%_MJn_k,Y`n0++YO5^`^'/X:o[m"rS`XrFVgWkb<hb)IuLoig.2*?&\qZ[m.)""=jDN[eZ9-m?c0e4LnE!0>@M+Q.2LH*h<J7W(lH%/Hflh?un3J+';jong-:=m!2hA!<udJO*lD[4H^?_r=rinq?m]?O'SL*P!:(P`Et`Y^7)gC=C.`*Su@bb"UqdGjso>o3Zn.OkH%O.%`q=][IGMsS"PXCO%g^TfT*Y5-MTE2q'C3?T6_Mb,%,\2i.#=&elpqlo3O[e<6kVG5LgcL4!sNlX!bjeS(?Aj<RPZ[[_?2t3460cQ%Wdn<1]An;XX-R&sf&qnh6D&&oGYnYqL("6IArk?)^>NL+@JGRJ`hTOQ!du1'9>lEY0NVRX0Pl2Hp-)h<IK2b=CGQOYil'`T3s#/!%R0`4D-3P5=p"Y]QR)+0:]f8EOitfI?<H'r8Oj479_=a$\&s$#mbBqeiaAXNWq)e0r5a^FUP'AMOJfQ$b_pKXrX"l/^+\=\u42D7/%,&Zk/12(]B1.EL34t]@rpUXUE\8sk@-al^cO"_$Jk$YMKk]sU<$71Bc('KaYjFCSL*EN@'GUsig*ogPZ5^:bN9Su#o!kr,SY9&"b%"3SKhILqGfI6^+jnm$kO((fj0&kMp[fgC1N<7X;Le_Z'9djeHM9oHo/SA9':MUln(jfO.uf45Kqi_u40WR*!OX#&%#&>fVfJHu'!%<`Ni%q24]i1m,JoaR+U?9+>'h=cqcE#I1!:1M[X/g^?IL)1K:,FtEnBO*,YiXB'ahQCm3>ZYYk3I]\Yd3_9&d=1nj%T5;cJ?@XW3%bME@$*jh=TQ?RenaKZoW)h^@(<gppj(*/p[5sDE8;&*oop=9(M(sb@?!&=_35rL7eX'QC=Cdf>`_GYot+,EeriO>d"!SrV13.Jd>%.4P]dcnQR"M)QR*)Fp&e"*opY$uqLWf!iHl=,s).$UR/O(ip,H"j,YfC@kOumOscL!=oe(^-5:Qanl/)o1:W4:]R&r<n<F\<=>N?%q%Mf9dTq<=n$?6P#thHf6;qgJKU4gQrMFg\?9K-MZU5@$9(Kp0CM5ChjR(%(S5l893t'1NOlq.*qZ)2fGAU5XopS<594ZN3;F)(S%'=dVm[B9e]X@i3mL4^7sr%*n]#9K6<d];0`6:ElnjKYh)])(JTqQSZ]E6FI6I?ZK!H#F%#4"G.&KqbVK($*.NBDfFug0*Uc``qg9%`%9GtYuQQ!RX*N*%-'o[+umYqG2e($rZ!,&NYjdI/!WG:*-r$H'p"gm;2X`@)(t]_:#?HTLH1hJ='Ni*f03=6maGEj*,rc+=-(C;%j'So*V$inOR)5Q]pHX,sq%KTQr-N&XofhUqUVuf.%*O6RL8ZLK6Q"lq(815VW!R=8ZgiEoW#l%jk=^@//Z0R[!BCShN+XVr"gCj/%S'>@GKQ@@LAkTsKj!R5)@3G65_(*Ltdh!^,6+SRIBKtQ`\Zn^/8t\FgTT)4ueMW$&/rrk]K1K!\O'?'V?o3-oJPk=r'qmQ5^_]::%Z/Y>PJui>"-mm'q`RnNI-sj)(Y^X5Pb%W'je@(Y+Xb(Q[+@ikjF9\DZ*i34r8GL<q#9%T[Rm:E^+J[AldOFY]fYHcQm;4X\(6#:j%`u#DgX4WtPW$/G5d.+Qt-quTFrODeVPlO;ib(n4Tqkt)W'4jc2MFO\!"iL0=MFapi!3V,GX:q'8l[iQZ&^]0i!UJ%d7VFtn"]f\[%1LT$a"?4PL'`^0Q>eK@+&Y&3I#=E_H2W@_E]R[fWeQiYcc>XL`Z_oWbh&.Xu$P,S`lYOX=Nc9,,F<41nL8t^%E0\M<,_Y,+Oh=1#%Y7_0\dkY6pMJgIn7/8IC3916M=D*o*3m&4N]Xfm%<RS#>.^30C%ik.>G?/FtX)-X3*'R\70TB.2o3Bi?BY;LHTp/0e<C4P.1gH;3%[I#bT]c>%U/,+j%FB^";3"h!kJS%66FUlN$+T,?$M)4LL08NrR26kFgW7O?]-=nAu!,2rVOkB:\?E,<)2PY6HHd@r#_>DdaKYWP*%!-jACT`f"\q`p=)aXq-LHRglN;@PMlg=CrO0LH,!P09e6!puUNV,Pa]##p]'##\)jJe6VA3)#ZL5Z.noC5MCL-&dj^-[u'=h>q!D%]4G7hU+eQ78'Hl+("+u;`j!5E3Fg3J^8>tOTI$C02<:o\*eO`^>C>n&*E"hY'9g]Z(r^BL6jZ%[H/Xs[lWZQ[nk=Lre/t)J\S8"N%BDOV.M:4>&Qg5RCTh"WBTWsqg@XQHRDAn@pY01<9G;cE-gUosXr%l&T?B@nL1n>I-45Bic,ukhsHS*ZKH.sU%dp(\)<`qn-/4lG6%[;%J#Ps`15gi"^o.[!6k<]h-Dj1a`e?TRW(ct'5U<&'L04Z$GS#KFYfcXlhuC/"76`b1o.;;T>@au_J&bFo?Jnf=qjPq8AX1==sQ%>U%I^D-;s_3[o*i$o!R^0j_au'p-'K3eWug1lruTMCoah@S,f<<nDWH:-hbuk:Okle!.m_*Cg='eW_=iPh*gSE$&p>0BDe09WJoC%F(\&^hQ>b#^a@5q'=B)pFK]5Ri!YV^/g2Xjjm2G"`S]n8_8J6;7sKdT\R8P-=Vgri9&G6)_qqUqX&O<)Q'/D69gc5[Li4&m]HJ)s%.&+FlKO"8.85$pM?]BBq+\8CnLC3A[P-WP7oJ,4sb'(UP>9M.AYhhn5Esn^$nh(a`iCQWKe[[.,?B.kfbBT&&qh0f:.@lrmFBr"$%fiM]Sr6Fc8f@.f9Z00&cTMZ:UWC%8i9VDk=<TCGRY&@t/;j87,O8eNC1#8:O:.urGWL@kjL*<-])QRAr1a/kI^M/?;$cN=9#tO@M%M+RKU;ut&%s0>'OY`I!#Oa1eV>bBZco`akjImK=b&'T$AO-/c"N^qFgEJ%@Qj8(LOmE(RX7n*WAlUTK1pKW2WPLi=)l%Sk>PNt`#%DU8!<a\AAm8%gP/F+%G5iVH(aa+`i+`45f^*7sqPE;d<$Lc;IIA6ZT.Wc0LohsQr'/0=6mca\GZD:1GF]J!MSl9aXDIY=)>j8*H5%]Q!hZb9u/<l[-jc55,*'\3=h">Icqj\o<'-WeKbG$tI?NObF0U>T]B\ZuCGhY1(8\4^qZG@"[d?V!>KSPI"n,+0!(niVL2WcuXVA%VS$sJO`,D$\h.DsT,/'2EID(sO;G&A\QX6\5EO"[4X=8s1,%e#541YfcF?'Dl,@^l]*WPaGbk)C1TldlEQr,sI2I:5J'i=ilf0%=%FN3tu`?%1o7u:[5q?(_BhdaOr;,T9SO2($o>i4t:**aS`=44tYUM=1`Y0X;Hb%_XV_Y*)3M95GXb(Rn0m=**tofZbhIpdopZ_W<@%o)ah+Y0U9'>bA"gL$QeGgokaH1r?tGIC)pX\Geq;I3PhT%t;A5fCt[&H@GF(`q;K,>lUP2:VcXCpeU\\-;rR$M"*8.8a,lN8jR)S%!</6=C@]smI"5PFrZ)-DafOYSg7?BY]@&6%@02?F7Ar=:7#r8U]6FkU6OeH9+aQWU>o=m]MYL,5"&OPcH&*gV3@2c(OQt@65q;?[%Gou)g=KigF@>.@c"j)Ac']VI>\TI$A%I/-NiEd%WTL^J7-(Q:!G5XRQm*:nM\d%[k'@o;33^mf$eup!!KNtUHG4[dX+ngSG1d.5A%&'YlC++*9oL/guIVVq.AGjiID@FmYWN0T!S!*RgH*9uZ/BiVLq3/uicOWsYE/ao_T2_0M$'E\t7'Z?@rjIEOtTkL*Q5dn7<,_hdl%M/8L'hf\^-?pQ>amtM[^8!gM2*u)j1jZ4=25Z1XrQ:I@6V/MPY'p87FX!614@UI*9-R(.d>h_+#AO^O8[-OZGg-'qf=h!n9Ji'\'%?-^(%\aUIH_>A!g*HkgLM22Q@>TghS_R9@UGmfDfN2jIF1:0=VPK)9qf/i@Da`Arq8?8J_K(bA7oGVlBD>J!=1<)Ub]fa@$Lh5U-%8En0dUJfSY=+jq4b&[[&E<6o_l+r%Q"'j<$Rjjc0juM`k4iGpJPDWJ]BN$_<!D$jYW".0jp3kCqDqmh%d2%WkQ>+Z'fZH/id839e%+Jch"O&`ASgW(EoX=tNS1jPfXlEh7RaM&e%=u:7o3X<,jCt&9[3_Mf2LsDi[b%_Y$NH[C(/shF`HO#*H+]SS/@94o*F"+PhmR1Mo%X(egqm*)cVa+;+E=6u^<*3b2m&$iPn-QQN=%/][b%OU+LN;,6*:Hj9&Zqmq&#9N,JEo%^maX^hKoGeNkm]e<%OTDM/)"Tm-c5iN?%H3#>f_H!fOftgHmo?ke(oeaNhgcb1.c]-qj7'*W[JBsQ'K@hS1V#>WK];=$Mg#pPD>DPa-ks%=:oLb;KfQV4gdM#*]R"4s.&n7@@%.H2=!*`e5,0X.@)<'nJSDcsr#3FR]hYXI&SO2se!R^OI`])n,1$13VV#!M_n\i#TK>\J-far>3bOFh]c%:(J'8M/%!:+t8U3<a,E%C'Xn"c'E0*D!F*XaH^?-gq\SA@,R+OTV;#@TYA:_be/*(OMmutb.<1.7]9UuUCg5lj^_h#]6jlY&52[s&IoEp%jeV-8VskHAlM<0%/fCbg,j#iH_NSYXD[F*9&b_@]L52?kZ-,<IN*gh8,b?@J^WRQ]Lu;c_+=._M9NKD=jYIYp+g<):Ph`RWGWEW/UfT@uUj9"93lO^#%[Eq<qNBamd6gIHR^j&9Y&aoTU*8*F-MF8%PEu9"SOC;Wj3]fp'jnI9rFmj_AF)hJki?j^5cUfC8iR]$@YK)m"!n&Q,EtFgT008fb%N;^0MrgN;Pk9gBOmXra,E\t#n@fq)hNq'AV.X#FWAF"<A<,AttPJf`Cd]bN#Uhsl=MrDH8raOM!*6JH<08@8e"6*S]h?3;ik>.?9%.2KfF\X4E[N/eB-I#=sRGAJ0B*pQ;<<NLMZG7ZcRd!$Tc\6+R&d^6jr6F_XN-'?\dR6oa@8/0_e?p$(BN2MJ_n4Ea)P!GQDQB9Vg%\Uj8l0I"T3!F_Y<hr?S:]:8)@?<4BS2J!8*q8=Gog\@QRE,hEl0;Ml%I^*"OMs$c25p4lkbhNRA`/&FV7*(18@%e0#P46D/'?,tW%jhXVD3eDP_mSsbCZ0I.EJ]%ZT^OWpqe0]qhop,Emai')3^dCQ1G3#^pJi(E6p>!H.=W:"c!cJ>?kUQ.E\:k4p06,I'5Z(DU<XmRn%V.G+]bZ/G;.7LUtj^jqs:N!D4,725_!.Sq9&X;g>@?k$h[Q4G_ga"B[<t46K?/0\<K3.#o#">rZ+sYm#gLO1tkY%RL]2g(GRj0*[%cu`bP:b07i@FI=uhN-QM"^ZQ/UoTR^)2O;AIW@EM^m^E/&lN1<;je-1=,V2pjV:I&WD38`nW#W<Mg";LiaIlWBJ7f)eHTij2M[_2%.$gqj%?:E*"_:cZW`B9N^1E,>XDTsDS(ZG"jkte7(eXr#j8d1oJ#n3K,cN^a$L?@h0mkl&KSiV0V_Rp84Mo>RGtbK;qsM9a/VIoU%Ae]_ZLlVn`S/bKBhf6@m*84=2RlHm"-7D$F,1>WnD[Dt8=nY^LaR::T_*'h->Jp\uI'`3t>g5qFRK`cg5[FHI)59nU'Hls@!#r%.%86B--1$pm9R04Z;01;TUneb:YS16N-5j))!PI'4??uGk'Bt,c8I\TGj,t;$8p8C7X+C5sKkW[f:1272kiVeE>\SYcn"EaJ`QPgI0%-M0#F-BNqZ`#05mCUR,Q9JDPG'.cV3$.s`%fmXZ;?,itoO?f*^CfMD,kNLt=M2>3B+39-=C]\UR)A99B6B*3:?rMg)L,i`Fq?,j\%/LI,,$/71EJq:G!?s6],+J,[adm_koKEN8-BF#CeYiVWL?D@,7pHJ9cTlcM,$,fhs1d_=INOCT0!ccKEoIM>^-ajS>0`bU;B15<a%0G#$6/67]9=Ag1[IC&$$)d6_QedC;9%CXTO-S?nO3TS@+(DDmb\;5[rKcAGU&TG\@DomFpQqq+&,9Gdij67cr#R994Jn_&)JIMK%%S1_GA^D@O@$heFE8\&7[.0h`_H+Sd:<,At$H@j[O)Ko_\jVkGD;R+ab(NK-3@gNGMqZJ&C09]]e!oA]1USn,f61Wt*bHa<#4FiD\%]qh-!_S+A75qd6?p\n]EE>KW)3OOQYh1kiS1"O,\IC\]<XnYm=qgl@b*`7d,"Y3(YX/'2KNS=r99iu\i/j%kZPh]6c0jZl`>2hLe%O;N0&A@tT<!@;VR=`(YP_fGH%$Y8;GJR@0mg^+b@U3AY6%"WQ/ar$=j#Hl*npR`bBd(U2V_!QVD2iEP>EgrOELO?0\iml(7Z>LeH%Df30n92U?%Rq_%#V0m^@bQ)4DWU.n7(Pj?Mh4ed"0ZaKIBcjr3?r9F[a-[>^6,TAu<]_BR:h$BCiX?4fODaC-N/S$J\baY:22Bru%d?p]o4m$cY"a'+`<?NYXH!,04?9B&/PqJckM*4q/h"HTH]9kKb3b3qUZq@.Y)cu,8pgsnm!/TI#cL5ncGXp;Id4Ys>I*4\!<BbSj%oIu>In8:q<UsIXqVK\80cFi=9&?;Phlo_%0MrT!U8X=<i@4[1$if'-b[`eIdUJtp`>'EK9E<"h:4:.d?LE,?AN!`)AMIt(c;&S@1%PrB=F(%la]af*Pe`fZ6YTd<"n-Wu=M)J:6g[e;h[65p'p-_XM,EG_1Z<gdtHW#2AJ'\eoJ$)PL<iCU^KW=8<]C01p;Q1P]_bKd`\%<#B1[$I>^@i]PjSfFhQ('p%u'O!-'EMV!rfju=+2%kb#US-gkuf=GoN\sp8m:'I8?@nW"a)<*ZA[h;GiOsD#&:5.S`g="!?G[oq)%ZDqqdVNP"Hn:'-+:b#^(+$t.H$F`f#9tUh46IY%X(L"d>998.I'uo.(N20I.GZlu+N)jrr\)VS`HiH64Q')P%:M^G$,;pCRTraQ;%Xd6JJVr`?32!iFaYFSoL'jE95/mh_->%Q>6TN)OdX.#r.=HC%O-W*Z,I.I(HV1"eLa)Jg-(-Mcl9!P2EY5&B1R7BXh:ks!)eTIBa%DE)HJgQ_m$a6AbLi=/k7T,3jF/ISkNZ.e2!HU8lj[OI&m*'V7ab4u(6<a0ALe%?q^@cr6)FG<$m+!'ob2GG<MVB1g5MD?#oN1V7$%c/Gnh/*&6Q["AZNlFXG[KW"G&3PfZ;=L1U/Ld[*@-5VPR:'n[ie6C=Q10OdW.=p#_6jjBK$'olfE]a1a/6RoWZa\p16S,4Uk&Mk=%0,]u:7*UR2Lsf,*(`,?@,`/EnI]jH4Cd:M9@ma>S36EPsMW&CC^iYd,4q\]-Kud@'2HH:[mUc#SQ0uJrF]`'84"3J$HBWOe3H;_4%QB7Zi-HGL#3@Us;1s$%\s(2rrlm/XI`agI-MNZM#-\aU(if/V^E&oE9&9`ZaAaJ=,$*&M#,*R589k^k#H@8^d$TipWC`tf^Jp,#)%\%thdR's8/li^C_EL1UJ'6Ha)fs)2X4?FE]K:SY\q&\J,o.J]&2(RdQjBs@4gc0Qa?JKT8]_3-3_G0OR#lZ21.6+FCPN*u9aH6#K%V!-E'PFE8680<`L-AHb_iiRm'TVOWi_C"l<6*9;s\-0>GTA:s.I#kuar8b\X'AQdcs0q`?]=&tTEo?fpoagqR5RSF61[^Ye:Sace%#S7iH,s=2%G1Wr)m)*QPX/45$:V)tO@]ac$2764C2$!cdmJ)QtN/WZbR"r4+=lGlAVTO;C,OK+?'m!)[-:?"F]-c`h7nKk?+k\_m%.s"F\o-Xmt5MZ:-@l!`<3kGTNmB48<8VN]9<p7B&;r`'X<:%Hl"SK&<')J'F>rX-5l0d:c,r0XsMemE4=9bs(I%ZP]atJAu>*U*d%_C/L/87`i3SbEQ1FUd13O^530`QGSdb^3@<2*l%m9qV/J:(m*8(Iq"4-(TdL5N^g[+G:stn&^SN>9.`1+2Wu':2+>mP\'JSQ;c*;%&:09A;l6og[Dep;fs`/`R>DP'!L&e<[k<k'g<%VSVC596261Z=)VZ'S3LKOd'O$U!C,jGn*C_/0miC(RAtUJ,kc'_)ceiW0pF;b<%k_Ig'Vg=T&l2$!Q(K[BeON@pA#u`,b+Hd%#&En2pH'$L>/)_'sdik9=>Nn2pdP$\$i$8X_IW@qpjt"'kh2T#^`/1Fm,iuRa7lDiD%.#&k+EjC^:Pb+#IgmBfA[p_jf]`Y>P+,@$uQk.F']n:_KTuU&FW8436GsmkkTSB[Bb*=\<&i-IZkF[XuTC/nPq+O.8cROs?UpMS^%\jG=dbJ:E[Mr?#+^lkN"`3-Y;RBUMlZED;)Y\YadVm<YSQ@WU?]-Wjs""W,bRM#p_!&ASck4]7bRdBCs')/to8FL@4fOh\Hf/?:B%ZK7MnjcR<1A"0;'R^!eMPjKTBF7.?aCpP*DT\:q;99rC$7_D?.gVC++.B9VB/-FWX(D#F_9?4?7lur4m*saE%b"+V6hQ74?ll%08%2abVDbG!),g![-A3>tm0ZXmOtElq+[LGfKUZTRnK5?g17/Jg`0+3'.Ifb0]Fq`[[^g?`@`HdLa]CpP+o[CTL%Q7R*_JY^l_&a&aQ%Wl2G<R"o6@R"o750MduU@:#(>,@e?7E.eODR9Q%dZLfieA=::;PGO$@-Hd)M(mYa\(m[0U0Ni^hTYJki-5`&bE^lIbj\1ucE[JuJ%Ee\/0S7.ggc=H/jB<k2^B35A])/kaBc=H/EN)=1N?qcl8^mH\%!Fo6O!Fo6o"3+m9#E6b[*AE4Z*&,AOjTEM5krY(W1[e#SdW[$H%R!'guc?CVW0^VPsV<ps>@I-Zo.Vnq94R>a*,Op>4ahcF^NNnfi7uM[9D+r*EJ)&\15U_2F/+eRNgf0I0I14,&$J%cuYplNr,2kJ4%6h`u&U$Q_pf]\m]R%.WAntTSnr"PK%10P4%FtVEVVVa9=cT_QE,V@&5jn_W]Ka?'n/k)ebEA*r:XN&BROUpLi6;h9<@@RW2G#@!\%&j7C*f8[nk/^g9&$P6#'s"p\@6)4DPaY`7V0H#eq`H4Vk?9?!U8W"Zc)8@#7q13WS81Q!]'r8VMdR,0*6u2'!#ps\^GO99DGP*-^%YY3CQUl(@9R1j4'DFsX4<V,G^-;Q-1o5`iqr@j!E+gcKqA1U';^LSF:N2C!RH.ldQ]skQ^fHLpVNbO]X,aLaQ.nN"1R,[(rHDj7W%W=/?F94f';lTI9^@XfN*&MdogE@SIAR:SX$b@<CCJ>C(L0T+*(\7I;Fd,`PRcHI25__)5(W_$oC9I@:#1mS!S]%FWPb)h^:Sd:Jr%%Er.AliE!5*P!1E.-+4+96]a_J5h4B"6uW.`HfFqORo0P&<d53351T$;nh\H^beW;J\6Fj2@h.W7"u7r(<Mas0euei.CEQ9C$[+S%!flUN>Eo,tqjf%gk`X'J7'_te.73GLVUCLK3Ys6(^'8[4)mik4RRkjU/IW*Akf_!=`^K#'6UUeIcITm9`8h,H%clL5OJ,kMV@G/=%h3==h>G:XU?E0KOrVhAQ/Ep\aKa<MLQm1N5o780<koI8!>c\)`#N[-%^_7Q.gI1l@IYh]RL<o(M(UZh;%j^<Oeu;W&KRHd))0sL_%WAE(i+f8G8E:A#Rg#+fBgd5DB/$i[WdN;(tL^VB3_J;%Q/0c!pTt7I%Q]$=Po!kua+?4L=ata9E'q$[u=%$$P2<N%:Jt6pfaHU6=%5lOcMQB>o&p+qu"&Ic'jBc/%+93Dc`7&=Gr$Yc"<K<u$udj^'Z9K^XtAH4G8K1a=kU-4@Qn7@W5]]4ukLM*rFrk(nI#_K.Q8QnS;%K]9&>$sN6X+W6ubJ@K+lV.DPYV.HHoo5%Xb"8%\$Ct^Y_:;)!-Mu;.G_/_\_jaU.]"/!g/-k,G]V`j701,RE#&CLsF#j^7Xl1$j0%*Qt]YHa$r*(D$^;WM_lZEXdo<CYFE$d&PON4RI\B\<God&%\U/9mI7-9TpH<"S;<V<D4&J86Rq`>+YM^,>u]SYTuC4@_ZF4"+fAI%Gif+h/1d5<"dolZ6o,nfG'`;'%7B7[P^[VJ5bTMGGC&6N?sQdC7;A%:<#p+W1]VQd$/s4qB\.-U[+%@ZAJTru##<Kl!:3fk.H-IO%'"[@Y7LS"r9Ap-%I'@%Jq#K6GW*Fse4obe0o[>T<!4.V0W6RcF]f4V?4ZSnb/kXoS[[C_kOS!pV=812L9\?6MDb,9f8>JH%0EbUQ%UnR'F8:;W,@rk''K+?/qV;7rB_D23i]a9JYip'C-0eshm#\KSO>F@+IANo>I%'T5f;BH0V_E&;007P47\7\"X&C#S6Qt8Gm"SjW4%o78$ejKFs^"Og@R1ET0$92e[uj>=[,X`=T^7OchjGH7Tu5c:JCGlDs-BQU2ukea<u%g5682,AW#7.g=<otcArl@Zl/o`9SgW8<,2%iQ'u]K.jC,&,6TVI"KKQ7/N5r28G+\D&c8uJBrPdCUX@N_3GB]?8U9Pl)>3_nbZno%Y_TiW0Sf/*s<4U%lOiq%tHp8hGPHRERg4`%0_GGs2(^PI9Kufo6ThIO?I,NXjus=b7!#XH9c+W&_XN$RHG>EePH:mZXIqGfj9HX$R1?Hp1)6KaR&3)m0(7O"?-1*(%1:Epp&dXY%;LdKhRt8EZTc%;<K7nLOKFL9Q"<]T1<%WtF:*Kdl@+V*/'6&g"Sj=1si>E10\S!B\GSt862!%#iA<^(O;-m\TK-64+-5-K-=qI3l%GTHu1CM@A``jZ<+ZsJRb!AI/no0`j'@]jc[Q3q&U0L#q#9U85jb'9AP63'hob(Yp,WG)imP^*JMhl4t,Z77>PNgiYnnkUd)\Ia93%m<Z*D#\_>_MM]\K($*#,ECk3pCma?O5Y"'`K?/`HXOeBCLLOk=XLGm`p@I[N$icKK&H$&gn"U!^VOL[J4ZeS5*4gtQAo^K[R.uX0%6m3f1`!.!HfF=mJrbtsh)VN%9_G;&=fHquT&G<>'X<?V>[dB;/>R*'eVbM!EI)F[`1OP?ubVueY;2A@6Yu7jZZANiMLi6C<'8s6\%<Lmc=@Y%3oQ''l[,<?G>MbWPm@1s$EgYsbCG5Q?oLIJ<toppA;H>;B8mnWC*j%K`.Vh<-o:=CH:4Y.MJX7NE>=M\tIW-_W'k#0g!%f4lRjhK;s6,j\qu9_YbN]:C88<u&?sH.G,03mD*tr,@o]pKL+%55""+SsuZ3RqJJlW.O!*U?eQ]E\@$VZ*iF"eOL(moML/Zl94/3%5(ordGuf>m_5LsaqP\uc7nB71#^T]>L%E_F8SN1)A7I*u-BBV^DJpeG<5GerR6%>V$OV'F3bfe?Nk.MQ7n#FTd$&%2JWM6Z4_Ibb%'ato(>oluWcR?lH:flaMG*5?19G^pBC6f]9j\_X7S9`Cn]qrH0b+f<@qZ2sP7>Y=KA8FF3$$k#0KBa<cbn5[pE#>)*;>Kb3CPDtC%S?'qtPY^hpQM3o2;$FiXlXX")Dh'E$^9O55WBR=i3d=UG(!'@X))5bCUACg>R6E)mLS0^mUB4T`2/AEiCSb>noMJKWW@FnR50*Qr%r(DH;ZpH_)BsYCjYasV"I_U<A?cHlI,unO*>p"4,<!sG:OF<6mR-LG1QhTm\Ag+'kPp#0T!+Am>mVaCjY9-7c#iGghn^A2sKch6'%Mdli:"(..8=r+kG96*FA+`&"<!b*dPUd@>oa"feOSfUE;:<b?omSaZ;G+.MX&DX0W\Ie7VWs'aK72n)tJcM77atk1@4#F>qUlP]D%>r/pNT=HQjimpL'B\ua:@82CTZ_?BTN8B\k:/++Vok$K:F+nl`";6P-4\4?E_s?i'5a*1\#t-NmAO6s0?cRfL]JP6B;BZ=?M:k!+%69g?uBk]%"+OkA]<!XG;d=N<l<!Y%S`[$8Y29VG^^QM$[>7+fla32)"]!K<VN%`_APk9L@dj<lb+UA9\>/s`tTgoo>1(D062berJ%(ra*E%fu`ADRMY5K"+=I=8W3][QX1(T_P@Nk!@W(S*!"]*e=9b49uu9YYf"mI9Tc[:1i[AWt0#fof!#Vre@APmoXW'1Bpo&='IUb%?]aTieSi=^Dm$fZ6115C0B_ZaK<$(r\FmA"q;CNC(9YAV9^LH_Q]p72\b^<Y*j35I&[0I0QZM5n\b[0u=5U:Dl=Z'Y^6F(X=5P)9%Y.d/LF7iDVc.*WkG]<?;rp\QFrME(qiT`@AclZM@_2dUAbH9g9\b^Ki3kP5+1KQecJT18clOU/4?t49NF2+QPs4!6rX"S++a+LEG%-aI<)p#RU6DQ\FXbggp]?%#6\B3/Hc=R1U?01WlpF7g\RSm;5#D'/#F^77F>m-;dapURj2EjT*n>lCf]Zb-(i<bHXL*=5e36Zi"5%+-2hj06aYPK<#NJJ^)`3KDW*fqXSOi_:?U%n`K+([<lufT0AdWqBCc$+'a5i&)CK=*8#/3^*CbMcPTr9W5Y7,O$&pCY!,$UG4g3i%mUT'ToY2JQI0_iLY'r%/RA$[B^k`4s^D@hOk3D!Xp?(XQ`*@`2gsm3OCp(K7Y<KJmW7C%qj/@BIp#Z.t#?N!Nl'na229I1LrMM=C%$b?*H7HTBalKW$+gj0:EZbu96R(<&hjo#7`^4ZUZ(t;J-#_m]'Q3onXY$4G>+FbSkbYfTT^n-9>i88NDX544^+UHM^H"5JC#h3kX%@$qQ;p=D-0!MdFcU:Cgn%!/0XKHQ@Tq)0@Nnjo2Y!Hk[r$$^HA*(HU;T24qCkn"DMBFC23\P%h@#='iu6dm24??%EiD2>ntU_4Q6%eD!KM$<b.M3h^A:<Ml\^+\o"l%f*7ZV\(;J$ir"tHOLnM[!^_jA-a-KaUg?=aUh:39ed23`q)0pHSP`Rb#8!Y)$7CkaCu,^5Or=j%BU<`2h.lHXRORdJ"j'-\da>`4Am(6>,pS4!)pm(N`*$#5L*2lP6SoY^m(0X11cpR5\uEQ?N$*GRjOk+>!O\ZCL4C>`T!*t\cj6Od%]pK60%9b=Y!N`*Ei<F$X"SD8*&R[X&J[Cau*J+:*6fkFI"$@GfL+!-PV:Z]<Y(fFUh,gZ8%n7,^0275;1"@k"Ph+MLR&36$<Rp.8%d&oe$=qIt_TE97/L4Dm2E"p'VOCgTdeQ`A!U:Cgn$oaQiP\<P!;u?<&b/S-J">k8KA,s])J5>6bG-caF"JEGf3?uC1k7bIC.%TR:%[V)p1lLQ3bA't0qk(H!7#+,]?6V)k1i6pBhF0^.=\XEeTICLcch0&X0XI?"Gi!;>I+So]Y9m%s\nt@&So-3]X$J]qF^tG:]4hnsJ%oW[O:#qR^]M^A^iM!P\a;&$2gq<@@?9D\mYB-cn3+.j[VjTPiWB*A>=.u5OFSf3``&IgTgfV1!+6Sc%VTLi=3!O1MsA2%si0\f&2%%,i4Y5cd9`'JAqELj+#1I^^m+.Tn5!.4$P\jl4tU13kA5CU"s7HEDe_!T*[\:o"Db^)P33ja0kO_/M[ER[^r()Nu+$aoZ#:T3ThJ%i<1GNeuD=GANKYR=5dh.)HJHBm.rN$.-FEtT[Nsh#,cgMjb\OMFO$1H/7NDV*l=mH!feBC;n'>m<I;?XXRJ)IQV9aP)?iC5QC"J"%Knp>TMD%I?8o2Zp!u0]Q?afm3e`7ks9.K9X<EC8Y^=gE,eTkDE;(QS:!M\Gjg5o)"NX_cWS<QF)W&*fD"p.PFmZp3O,cdp1kb)Gh%W`_C;([ifojB8%0n[6iWFK)W.075m3)j/hnqRer[I%)P?K2-`&8AZ217*!AUA*J"(rSFZH)aGRJN""0j;u6$%L<`,Mna&@Nk-%6e%?\I@I!1L?.i'*@Sr3YlQg0+'-eVbGQTEW/k+T-'7887Xl3JtP\.7I!$bScsW*se:gc3km:1+7s`@FZ\6h1KmaD([]5RZSGLX4m(\%bL*gs&EKQ=h[iAr\OI,)R4<g?DpE.)d?C'>%*-\$9ti"AkR1-TXRTM0Q9l=]#Jridl/0G\N-QFY`"k-2VCCN-?9bi$Ut9]&g,(gH%@;3[cjW'tFN.ThHQ@uK=cJHi_2/RK!CZS2nG\Gc_P/I&)>hmf(YB.nH'Y5GIY1>6uD"<Z0-'@GR#G2u)9(du]dV7$3F?-5+_W95k%cF=ZP^..FE[(Cfb4hnGFe8r;pg$n0CpX`[CGLo6cEeu$[1EQgX)R`p<\aF`e*Fh$-CqGCAFDOa:SO&`J&\kpLj:aQGc#cV6Oces3%3(!GHA$\KWbC-%e@JK6Y?^1:XGXa')6&-GMcVoTO[MXdSV/sGoETOHA3`um]F$tcrNoe,mOrHb[3:E*n!-](e3KnBig``/`@(=2+%oF?O2"1RP5RFN'76:L,[\7$+D,im`jEcR`TlHg0@Xoj:Qcr.s!@X>j:Y#6-*5RIQbd#-1iTL;9>\8aQ!com_geYTjH716l1C4+U3%aMEk"1a_idM^25%Ti+9A$A'dr13I$C+S?eB:!Tc4/M+0@Y<B"R`o[Ia,>E4C*a+p3fB(/K(Xnhta5p..&4+YXb@/Mcn2n.qB\q&-%M$:u1U/s*%kJ>!]AZ_hG7o=RqeM16o5&XJ%2'&X+,4FJ#CfWYpQ."nZBa,g3;i`(eEAZNm^WoGlBZM`c^*5N*2FKFX'6Ztj,InGg%b_HMi4H>Be\f_A=/q6K68WFZD/EP7>/Wcc."M"uh2RkJULsG>;WbOD693Vl5W;E$EG8-</>t9ul!B9hDq@?W-\^WQXUbgqX_c0BT%P4+_26i];`J73Z#FK5$>M4#+FR-Lk[D#'ntF4+p;%X0&,/n6;?.ooG<.`EA0r>'PX,$uFiHh'1cY&:lrHW%:!"5YL3?$bND,I6pi%&'bKB+7F\j]n6sqjK.UhP@<5B<%A\qZ_:g>iQ8FWbtt[i:f8Eo>#8Dm%/L-.4A!i#muoJ:^r`Y3="sRGpFj\d-!!.a,dZYYD]u`^%c>p^LT<[P+,r0=2GknPJ;Wm(9T-+Rm,M%qP2(X2;G`MJ4#kdt;nQrt+',CR??^.S2+.U"8S%.9TlMfPAKi%\CN>E`jla=?GL2FW9%:N!^%6cCt$;5m]`%1V&$:J8Oej2IZu@(Zn.6J+bcgl[pZffV#r@ef'RT?@!V7`qBWSVUOXV=iG.PE<*.SmkUc*VBJrfM)$JW&g#W%\5,"DPegkO+2Wca1F%4]RN2Km%@*JBqmjj+6=q6J"tC"T$9=!S=U9Khj[e1)V?`rdW5sW)*igGhk]":dZ\!e5+NJVpHDj,889h<8%fhiQ>.4IZ=ZPT_jk`$F"j5RLRh,n)o.Dn5hCnE'O9@4(q$@[*";jB.(W4AMUO(5?<RL]P\fEn;q;\qY>)CV6dFO@D=L*']Y6,]A^%#NT$i=G.#6R\E9m'Sh;tf"'?/-R)I\bYBHEBBAq/,6Z%)\HPs.o;(fQIXZ76_kWA1cNC#Uc([;n)njTmDbi0Llq0N("2bj.b`<MC%3N4QMngFpfnonqAX>RrT54]7mk_TAR7iMQ<G)NCuAn^^*P\UF(!&:2X83647m"!m<o>pfeZgM1hEG+H=kP<N0D15`D]9mDJfP\21%a1'_6qMKZRcaVe:8JGNrG8a^XP[EaLFP%Mr>FCXf6<m*(_[u2<"9\L"-.1ooV^mU%`*S-aFS,,Hga,9A$6aI26DEtQZ$;&SA1XMa%M/jNue.tn);9g7T7hhNqB":i_6oSZ0!P2d@,DmNI]%M0nrAZfZ6o"4s6Li96g]slq&tsP3kf8@<./1BVmT(,]-WNLsq9s1N`RspU%/gST7i^uL1cI[YuT0H=HF@0"u1gt\V&W#4QF!4E)*E+g4/YYMqJ>pD=7-PO/C`Zinj8!.Ud\?SD+[ZoD;tkuF'#f(W[4P;ijY=?(%pZZ;BcM1()1a*nZ]O=VLAP&)6QML.A\4LC1<>%`cfX%P&atqC!hHV:i/'"/u8P,00(9?k(FA#>"o_I8?Fk\J]jiWdE@nBBn,^\`#%--O*0V(54cbJ98e<0u<FB#:jMlQde"^p<($nZ^\%Y\\"T3Le0O@p`4KKrc,I\Fb6$,ooBN>iLT>Z4&9gY&:!e[B=#m;A]Keo>rbl%c#PO;lXoD6ApI6YI^=,I>@,ilV=\UF99pds"YMU?DID-q;KeXY.jZ`NetJ+9mOsT3bBok8<8Q:`Yg(V%;IiG@Z6^]spJso=Am+L&%@^:),>DedA+SV>/c19j?[*@%(C^I5HLK4a5>@KlXp+ca)/4JUcTp5]&QFM8;cq8k+Q?makZZPOaHD7TB\N5o+5AF\^AT0#&Ei4th%3D"BhS[_rL:-t5hR1hI$]Lc3/ET6ZGR$2(FB3ePG53WEd39i92I*e/Fr1qO'dQ(C]`BdST0V<H@AXkATM>:s2g%jTYgSL[!Y`#gk%Zca^(aj,q_U5&J[+Y:MM[h?##*d6M$RpC3VPF_O/DAJi=CONYeJ3E_fDgr%$r^4t^TJrfqLL4pm*%ooD)YO1?';e&!(O9bD5ai&3%;Cr+b2"cmF_7Up6bVqq2Ba6J7gD[jm/Jgb9M^Ui^7f`+T9!ZB0jNV493$p$MKSXRde"Jn;^Dsi_lL4cH2a@9=n,N1^o,iJ[e+Z**%pUC1_LAj[1KcKEIs5r]es3o:YrUE[5Gl*ufrq8;>n,N=Imsb31HSPIXDu]]Opj_0#V`t)c34H?:UaPa;f^2s&e<>`JUuGH#pNDDN%aL<)p@@L'p4ff-WMA36nPkG1sgh4h!*0UXCLe"?9I>oD;DSnO8"5NrpM'*EtMU!DF[Nk@eTo$#`qZ)B:$gF!V(X+;`&Zp\MPq]E-%e6Uafh5s!PN*J^;nr^gE,D18R13Bfd3\n3IUrNp?dh(&-lsn'IH+dW9:q&<8%NK2cIKmZ<\WF`PO$Uej*O5p/M7`qY%(m;83ZDX'%D1m&B#udd5MS.Kf,faX;)7n!HKO8mF$#$c!Y%U-I/LW\1@Z&iBg^tPFlNRKK15.]RGgV273.',H)$DE+:MV5BRD_JHY(5k96n8QF%.pF1EqJ/J$4?![Q3g;I)h3!Q\Xb'6D,`rn7#C/`$WMU_Xnf2U9b$\\o^dK][Yu]JMN#ORJb/AQTj(<Qcj\q/X[KEZ/!K8aXLW88o%=205e3WC70l8BY;%H$akoh"bI\k8=nHOu@%7-,t%(*9MBqj7O_jdqV,.KR`T'nZjm?+`$]\Os,m[tbjlrh9Id3lgu%O8[T/'G]U'%E'WL*n6Prf,T_pP/#%q75%[oR?I%Q2,LSOpWg1Kq+XX<@kG@sdV3!f0PTClq.YA'rkA)&QK[nRcp-X%2JX#3HRL1mE_G(Z_$Ni5u%i^43ha8UDFfC`;X<g@Y6Po%_iUg7"q`<n8-U@`bHoYjYbZKMf+ULACR76AW@$&ZNl\_Jum<FG^W!PLl0cCsbVbYTPOL6J`[Ge.Ct%h!!-3UrCr2S3)o1bkkltqRdtrQkt?Q09M<]Lc18XLdjuhFI[#QCfLUX%#-/<1'W'eYUCC*(ee'::U78)Q`:=h<ZDX25dD1=<fUjq%2?^^;qd$*B3IDHOEGped`:JWp'#`3++*'4M?`$_P<GI!OG_k9Q&!2845koe%1:LCH,-`.M_XPk\_p(e;&"t+?o<oZ>'7Ug`7:A>\%WPf^A6#XGk5c=g-*`MZCN_O&;4B.+@Lo;bqBTZ/56m!d(K4+mW`C<7)2?_Dkh0IGHo?)pBW/d6Wkro>=Ifq1b@o1*0C,qZL3+KJr%V#JNaq>$[F"n)SFd\Z1fl\qYsJE$_eR+V\A#l!5d!L3[Rl0+0XgB^b'Vd`u9[2NJu04X)>9FZbLO/Lk<KW_d:TK=pl'aT:Ilg\?t%aE>uQZ(-Xg@hQSpdUp4lAS6s]cH!5V!YZcC*_,7HK*2@j>9#a5E\3cA#CcobHtal4AY;tXc]O\0J_.GT>t.%Gg*m,+QS-l1'E?Qt%el_ncJ[-Q`<6"AUmslkq5NIWHL1fb_'p!n*km>bqj+L!;;U[c6#ek>",9o'Jk;`WQ'.lfE]iuYpU*)dLmtcCTKOIqW%ou4?WBo!o%>IkdZQ:5pkh3NRJQ4-3F9aaM.d^ht@!tiRE&A;0G%0"U_:nT]fJ+i@ZU:0\QL*:;m%P>Ql2#.:*4p7f%_KS*-._F6eDeN.]#90Dp%8&/.dk-'r'S\!#fd/dQ`2D-GTZMd)cF5hdP"L(02MTo\)qk(TE>fe/lgit-@nM\[IJXo0M(Y1_K@]I$$?UrEnfL,T6i!qbSok[kM%n+P:mH;n*.9%!@J#MIfucS=kD+[>R,bLGR8r^e_p8E=/7=.uL3HO:r7K2DPn0H<pi6nq`UrgJC1C=T"%Bf<4V^+N_Wq?hm+1HP_/%<.G@YHBH)IYZN`V,'A/tJA,GsB@)BjaPZ[WlRN6U`-+R;XOiTT2-QckAc,$]#$uDa2rp]H:gd:A!(TU\04!>]Wa?L"3Z7XrA%4IV%GEXlO$'?"%.FAG`1'=3pq$Gh?7"S$cP072DHYb^Z*H8$d>*TbJqKpeZ>"MWZEKE+ROdQfmQ\M_.9dj(q4oc`6LI(_5]tXW5aA76-%+S6Rm1prI6(I5kkXjbq[L_aVPMBH&1'VT7ZnX)XsQhTsC1(&GWQRf/\:qVqnp=d6*M3!Jb22ZfE%D:$@TcP+qLbr<VM5h1H&PN!%%BUm-`1GsT"oX`/6kQr->J%,+&62,cmYFRCB5`e''&3G_.QE1IKY^b/S[d9<nVEgd^T1(K,+J+/#fVnQ515*XG,B]Fa>'Si\m4.Q;%ST-s[Dp<6m&6q0<>nL/AFoW5&<2Ne^TDT2G<S3uta[5LZa:9W>m($bO;^ShBc4Fjj3_KBSqA`[\6Lap?6[CV<Qp2h\:OTn>?_=`M%rF\9!;%Y$Ere=W^?dL7#\mcMphW0Ws*=NF"!"")4%KpnE2FnN\(Br1G@>8a&Xon:*>;aOBfQ0WEpu;ECS[e]16!!=7GC+i0^7WoH%FqE"TaL.ID2Q6JW&gHKalS)HTge]GNkZGN1%h.0<9ad-3P(EB2KIg\Q'[nmG76Jd*>M]t9k>kdPVTL;_Dta2.ZCc?>U8Kk>Dg%^l%j9Kt<1>h(eFUu&q.l0S;:Q31_<fVDZNo3L`mfmnn5'F#`duY,8qig<<L`\ZhPHgH/i\Bn_DuGOQgaP3Sb:pt35oQ%;8:uMGglSBN%*3lQfA7F.XKFMWR'HJ(gO!IS)drVGG=n:),+pVgQ+sFkF36+4]A<i8%q;_EB'7:H/nu`$H[q6D]:L8ng(@jpigR++W1aKDh@:^g.%?"4ZadOg;N_Xpq]Z\r2,`]82XdWF8rKbWUrXVFu06S]$`=Cr`:QU]=jl&KEt1>S;_C@oc2OZ]ub(("^!-+>&83bcI$78p#RH:E3e%[gW&3?Aa0t(keP@XP*"u[=f#2UEL)g1h7Y_NbL\Z#OGu<*>ulb)@b@i3nGScGs`-U$Q:c3UEL)g1h=%h"!*3GOBj)71C`#M*6<-o%,Q6<@4qq.]U<GH)?h>D1L?sh5qE[IeP%i!R7=t%UJqMuT6["2!#7Hq"P)oa0CF:8WCLcW_.[I^j8C*Yp8-tB?PrhOX)^.:P*+VjX%TlH1BP[gU6qkR%`:lmFk#TN@t(VRSNT=uHPfhZK:1Bf4p:P!.U=eE)[@+qENOQeq4"Xt'VCj15n+n%'6nG*c/I^Q?<EnJPq"Z]O\%2uS"Norf*2,ZBe5A`TTL;Xq9C&@BdSZP[.qFY<@g16DHF8:*%PL1CKDXGgENVp-WME$(A`84sd4$tRlB(s)Vu`^",dEf5OjVC3Uf%8t6bi_:V28JJ:M(3eN$kp<Qtf1qiZ:"=sZ"LA5X/@CgY=%MBsd#H&d:2>s=gB'(5<:BUojOjn+%++)DEiZLa$.Y>l1%TsW\jrd0l%oNZ?sUZ8@tVBBd_^1gE*2ps[f)F%h)G!X!f&ZsQ;XK1_Q'@jdjmNWRi;/IEm""AMbN?9kZEYN9;"9U*@S4R',")1;<&iV=.7U>B^%)9;RJ]?*;?@j":8=?nR%UN3i8)+^b(BNsMrn6J@!,H3F%3>t7GK7Y'uU";t()NlMi0JWu5&8jXiJs<"anB_A9OJD?s:2l;H/9NYf%2bLgDEpOdAUtMo;SILd8PZU_>'dO#E.MHk,$#)qB+gY1rTM`cTA72k2>IM[tE\GpU8?5_:OAR;Kpi6P&LQkS'kM(7&%06uR8ELSl%Pp6R-gQ?bdO1uW=3/iW?=j:`.C`I^kGs/I>`^:59?jn)SOO5ip.:99%/em@iV'#1T3nb4@oso>Q[4XXdkdp?2#,N/gLqF>5"R&OT%(g/O#RE-?3(+)?pdZD[@Ah1R6ld&AJAW2pbP78=%jNs-1_*f3)RE3XQlHM^C_\;&&ba;X6%jk1h5jHIY8DK1]_N[ILR!*:W7&1rB%A0Q%f?9UqKjHrC[)p:4<%A&ONAKJEmQq;pg*7IY0N/KM<F-5.5>biLtM('6$k-$3G&nL(MqkZTmaUM.fN@5Z)(7BbJ7S6U"br7P$%6[J[$M8c\j8E1I:,HX30$l;utO,WO.im)7!8L,AqT?6k!H+3BS,tUW;Q*JMcUj\N1:"U`284n*7Aa=>es)\HT(=#'MG-'qmC(/)k%l%+R0C!U6mI7Fck-4CfW*W"D3>^d([!_B"`9E)eib[23Qq$Y+<T`5aWCQ"$)OPAt-X`.`XLR(+6K'UEO$t^n\IhjM^4/.#N][1XR%Zc!'Li4N$u+P8T-TU<)R)T?.W"cuE:)%cFo+dp'#TD@+.U(buBSjC6#RRU=?,I9'jl/P4qqH!7-S<b!KGR)-VR[A_K?3&f!<!Ljr%1\P9mS5ALg'Zou9=;`h*,rstG9:4Sf8gS2ZT3q$b`=%/'ro1(.4Rp?sbXN3uaF[PPk/\AC"YtFuO:r:*b"9<L!I[ii04m.,e4Yq1%T@3;*'ZoE)=N+L7XhHs3eberrIcb7d0&M\us)pUG=+DpV0_"3mRG=5K1ab/ij:9S8**;@3,DgSp%etT0iIB-Art'7o^$Mqhd"1/G%bP:l#:S0I]rJ"8`6./&fPh5ei`%0j`)\K'%KE?tqUQ>K=GkemWjDbbYp5U4<O/cSIccZ;$d3iIlq"KLt#.u'9Fp0,6W3j0kf.%)h%h_dPp%4cq9aXpsgPfS?(DLg%qZEeFUW<#su^&U5c1f!_ZV<6]9<M>5P-Z5M!n+\;%%@jMq4rV$uLH(A$8Ihh"60ogTnLL[q@e'PP%BJ,D4,1""Xd7S&fWMq'3bhIc%%[pfJ^lVkKrGp'3proQ^`1f-l96Heo&a]Ug-`MOj5oJX1.$2_Rg@*p9(_6g+Jp<(C]OC&s;nWnB%aB1r-V$@9(/#a\.lptoOklCTk4#@/ZL7gndLD(182`hm#CG2C)&d""EBL>J5hZO(6WCV7rc?h@!*(5hVQ*KRE<oQ4`&'/LDd1[Eg%Kn-n$O5hMo5pW!:qD+ep1'6hMr>dVX9>olOEg\%0b!k&.j@00Pjg`lZFKc'X+f]Rh@?:UY8^PH3OR$//nG#9*GVF##Lm6ClN;^i=%e@R+HK@V/O%\b@OFXH2h0L]#bfj2Ed?Q.H?(Pp]QAf$#aC=1!h3u_cq3O7[=1t#(iraL'IHq$F(2e@26<<qgtk33%)9JE+=(*j"L%(60X,E$$a;6:!?=GCcn1'@6O(o^DP;kC;dX/qZX=cLT-red@%J5B[H:%5rm[#-$a.rCtk>IU1XJ_AZY+]m_)ZD>#!]CW3>)nsPV1%7;es>'p_V%<XhI[lrn25deG1=WS9O+jF1@_aPO]XEhMrHgfd4e,t#Lbqs+]g9&-Mn<>cK-0UZK;0+DHNf2e_eMHLZDVuje<Pp"Wi%A?i7a*2KkQE\RK=6gSiK@o\.f0n2RjX^6=\.ntfj?YLoO.)>/.eFNgZ]n6dI44*k_:A)^;KldN8+^:i[.nAZS1[`i)4iCH42M03l%99>l4S%<m.4$]&hfRc@c\D_AE6O7Y73!m^p86@/@2;/V6eK&G6YXtQF`*"shh;NW"26),3lGfdnf.&]@n?"*Q>a\P`?B&\iL2[hI%Pe,%=NlV[X*?bHLTn81/HlSc>gCe0XX<F^/0juXQE_o?PEBQD;Y*%>nOAj*uEXQA?U72E3\$!47UhlQM)5>HPUfXj*32dT\Zu+l0%l7A0unC=Ek&e,[QoPo*<@d2TCd_cX*f_gsdA'fedWhmT"9eR%;g6J3$[&Qffbj[S,22#Ps+*?jMWsjGB#WO0,fb%>@/24\LfU#YI%:;F,9C,0MR<Wu@g_[KTi-jTf'E!@^@7Y!_''GD"H!"e%s+d[(B*,EdAJ[3JH?e2L\g1IJQ3&t.b.Rno_l5(;.5Ir46<O(*L+.9]#%'Ui>N011BKjnl@;BLkVK61;u9Q[2j@oi=#12_?gPV#pJ,QC4CEBGjGdK$BeU/!sZ_A_:/Q54K;-''U-)[bjs`EID@aN$8O$L]i$1%ZYDO%?HXpa(M+RpgGBXu%&5T.a;W_CqaF?cD2K+EJQ6PZB_g"^<mA%b<\[p&q$qs)l6'&<T<kOqHaT,g.Z\,WP&)XKX(V(bNZ?VQ%*91`Y>[#Ap0su`'.3p)7).e$J8=&(ijlj^4nCG3!IF-;%<%\ZN'IFQlFBM.CK:0Dd.N1\aE;nIW@.>3R#R'*FUoE]C&6h(m1tA]J%i?a!`RB&ONDK4\ucVa8"PKg@]h<'XMfh<6Shb!$OX`gb1O%5-?hNeCh72&f"7q%T$.iOF(kV/REEVZ])=3f._DIr+:aA,sM1k*PK%Yt/B7o#qYW2rfh7j3-2":!]Al_lp.R%--t)@I7NM-m7VN5at#;7A%ae/n7]lifSpiQhII(b.Zm?cjqH8A3l6,!g\uZbOE)Q6b^a'%Okmq2H:Vs\jH_^BU_tr-4*b/DUe$eSF@Yu_8Q9$$Nubk-e[Ll]*5Y-C$j_H@5A@2T,MIc0dM1.@EG,aF0@QiHdN(@H/n`2:Y+i'Z%f5"&@'%<=7GIUEq-jgU(C@pCLVcRn,,>=:tJ`+FVga9Ei!pLc6(g'_f3squGmJ53nbG;f0H"t'$[H]6e)'q;+T')J;^R_uJ/]fLA%n8e!Dn,&OFKQq34Bi3&,42ueihE5F-1BK3abI)<o_Z&@-nmo>^]lh@J6;#+SP)OXd3&VUYPtILl%82a,^p_`RR>k9p,StQL\b?mn%r-;MPs75!2`QfWp?n+cJ.2+QL#c]/(,RA^411_$hYUi.m@-r*)1-e?q.GGETP\g[pPS-BP16Y0^#r7<u9]WlAPqpaBT]iW7fUJj4%=TEK`Fn%a.DuYZL2,Z?LdZ[-<,V-*_2iTSM?h>9%@skb2ArSS.WB&:@-+R@CUsLs@'&jg@$$/85e@;\:eL4(XWeaNij]&%He;Ga]%-o48_3E02RE-V`*O9R97E_oFPQ0sHDP\lf>eT2f!(fS"&b8TGtC6WQ@29Ii@A7p!P29OA->b`iMb;IF#9Jsu$Q\7i]edslW;KJg,%)7n+9So<?hFNcVb2@T#&6<']gne^Wodt_"'pY1qOTNQ9;CIc1?-B0bdfH<j@X9MV6D$W?kLm0c5ERu'PAO(uBR6dW"+XU*q6(4ul%7%th3KM.RAKbu:N_"u`./(KN(Kif8IN)=iR'RP!+._q`UL0&!T*`XX^I7@5Z2FLQf'"415)=M4TK?TT3M_WKb6D^c75+F.(PX3[7%6k$nM5kbJN+\\_KT9+<Pi-CL^oE0Aa"LFDLPS_8jL1YBdI3)pZ/sRm?&Ci4&QjT,;`K*;qRZ\,P(ID]ZFnjIC?9OD;"UtjMZ@o2d%foAm>a=H_Z?<F#mD8WC-g8UfX$$"@u^eD*D,r$'ub)rAN@C3UXR>XrhUS6qj9X?8]f.9RVm`[@cTZ\GMmWrW4hbJ'CYMJE4=gDj6%-s;iiPq5;]bVMc21'$Z4/m3q6MY&AJ=dB&Q/DC`$/DDj(Z'BUi<aA<Xj(.U1$'t,+7W]%%!6rr8AFDSJ0=oWqT#Y?^YEngs3$,Kp%<4*,ZmEdfR*#Kd=<QdA?7T(g*!l7MG!Zq,/_d3YjDFl`aUmkOk6M+r>_lBP^>=b2lU1L8'hnV\(OS<Z=bqc.MX@])o?&M$GY$&aS%W!\,bjTtJ*AOKJJAdk,>l$4in/Q,>-1s=h=?!?hm'+_D5W)sgb]3ncrk\@n5S;L,gXDe]@oZD^WC[P4aQ0<oljD\X6X'?NiClWMX%Q/Mn-`P1Co>"f>;Eb-2eEb3$G9;q=q*0o)AM@=DdNpZm?db9Eb&$emjCI@ad-Xk+CmCK^P3hb_F!tdC/H9RKA^jV^\Nre2"S.VWX%FMY8;TE/'@F/qQfTI;&&VN?Jq5eES]l^BJBl%3Jc/ZpX,7VAL]q]b-j+<7[>=@Nhi@RH8=/:,\+P%@j-Wb,DN>dS=bZtguk!OM"A%C^eQ?/aK%aa)]igbVgHI1M.nE*=:CS1s7`+1g3UJ@MOr"Luh;?9P)E*ZdXt35r),3aEnQ*A\aE#BX:%*.m^8Y",RQKQqG83Y'+Jd%/\^`6L<*B<J8qrp/f'PL]t#O,>,=nmqpK<EBW6Wq=;*;A&/-Y=J#R$_L,@<ATL7[IA6A`cP$T#4JZFQqFJ\1qYKT(d$^TaMGC.i=%.ni/<reeh,A9qmLEQ']LFBY@8(]`]&9gI):VRaQQjTq=Um.eF0eL]H/Ae^E63BR*33o\C`ZO@\_LOYo5r0=)fHt\PHcn*)/E9.V9%2+b4?<@-`:>G`GXoM9KEOS]_lFO;jp0WVg#)3B:nfs2&ah6Og_!=X6BOXp)TQqHg`(pc4/_UV`,bD<r8FS.Drh<LJU)&=cH%En]"%#FEXWr!H="19B6cGXPhWR);Op2K,psR*3KC6<(`O0G?/3JkWp1Se_ZF;6*MIgG%MUB\q3kE6fO3B$B.Y,`H;Km#<H]Tc-9#3Ap91%=0.-OV^%X:3^\31dkk?I+QdWtN`ku/0d1(^R\!U/4,_tb!c]fue-B:'%+rd=Aj@1U;kkEpU5EP%ep.2U-)mhGHCjI\R&rF7V-*0/%VGO_7Td/D(^:mT12[a3'Vr@GS_d6puF;S(;$cn"GYT#ho+qlk-ST3@UjG425D3t[",tntu1pRFHp=@->b0[%3CkefSqQCGg6O)_:%L!<MZ59hdt[UCXrQ9OSo%?2+C`JE#,<8VLZ<8hZ2)!I3rW#nb[jQLs(>V0c=,Lng/0\g=HEa;9#/9NgO3_L-@CRq0l%oYBUHG&0C%Lo"`P[E]C#FcFN$($9gT:S$opkrA$eWWqL_g_mQgf[(Okgt1BTcEn1?KE,&i<2V9>1+fhW?7;CR%(#ccMYBG85mG9V$rXXB.)g!#%oPX+NhY.]Z3)&1f)g8p$%BFXt`Q0Wp1':b-1mV8JcYteM&qjDi=@"]e2C*\Q@O?B_"dtZZ4=q8nU/#-.oespukI5efn]%2F-55Q*%TmO4V9\>gHpFSo>L&)[1=E"eWPp9I16<*n7@BP'f@1:!`7&A.+*F/Ooe^U]@nWFNZ12,#$n9Ir_o6_^7(+a)(0EoX6=Kn;7JeRHH%649g;PgD=aEKhe\lp"Ao1hSgCj"+lh&4-br1T]s)<!Y&Uf0OauJ8[brL(%5sSL/t)7&L?]"jn2CBL-`pQ#4?2"t^u>jI7ii$qh'-%)H.N\KW.dN&=k.[(.;fVTETBQ12+Mm`@m2QN7&_d)70kE\f*g*J7719)75]d:6RuuOC::/@8><$U,$EHGqO`8lK'd7)l>B(gKXN"%KXZVpSCCjpK,/iG*efWb%,-H,XK<_b#ilaa--cn?FIIGW0V'()dhsoS_/tEs0qB3@rZcO3K'>*4Zlh(t#;%*rK=4)F<Ooi3TNNt>%+bUV)B=:\u\lX^-QYb;Rm[].2)8P)cK[>>61a06U@oN_N6W==C@4HpG4JrO["jP^62/+nF$_[aIBgQLLEgdQno5+'u@YX`6/8(o8%"j:UHBYe&E'&&(6Rog(T/[SnG:&-?3(KtLuFnd:7B7<.a64keX`NkJ6K\VYjhNc!1jU<["02367OO-EhfVp6m7WOsWR?O-aM\[RN%(`@g;Z=jP!=gW]Q(+i)&W4%hYq;mk%bXO])1f^o9*#=CGA*bg;EgeI]YahDE(3HCQU'4r)BH,s#L4neDcY-'P75LAg1sqiU[!iTD%B1DU/oDYIKI4LaBK[Jf/ab8&njtpMRTK-9p/Qba]7LPO2,gW!9$XL./8[=I&>,Mh7R'ZuFq-t\Jl(S@')7jKVEgeO_OH(Z4(*mP6%U'4]1=W%9DZlPhkg4i<k1Sj2>VabB^j:#0J-TOm9/R#=2&Zu/;M3];UU'8_SC1kA'L*Ts,SCrcNkKk>-@lZmg/QbbH6joI4'[_N\%$q7N44"LHWBMR%L$C]H)a+EI_6*_UoZPBGNdh1=GeO3&4nk#,2Zt]cn)3lre0ipZ?:=D*/WcLNmFbV5H:mTeWO\Vc/,;tN,CiJ2a%Wq0dZYN`<:4F]1^[%KHS'.p0.cpS8Ado=_Hl82MJXYj)o/Rbf?[U[>&3jSTU>\=>;"kbn*KZoPE1sN?L4$sl;aNh"F)D`k)ONX"I%a/6i@(tiVlB0g]q10Td1Rh[n9;b#LQY@kjGPpk="!a@s6\hI<,SYisZ>c.mG"kOX'BYeh[0Ubq.VMhk`I<c6m6H[Iih._1J8p?"8%>0rgK@W\M>U'9B;RV9N]RO24"H_uW8HtS80"lF%bAjLZZ8C=W<Z=mqm8QLj.43Ru+ouE\E/+/X7I'k3UcCG384Q@q0j_;#6_0Lbd%>&^),<OQLJWu1(=Z=qS-qe*5WTo,/0VGjM"+!uj\BAY%nQB9!)$%lIsD1`sg(>OZoR0E<sU1hAkKIC#C+9"oG"^WB&M\]ENTEQ/%%J76PXA[Gi&<#]ZV<#mQ!WfIpLRm>\f"G`mT4YqlVQtiF6(oIA35"t>pW/jbH$gJsYdXq>b?cE>VdPK>=U-lf!Y"j&N_Eod?WQ0E;%l6E+QK!6p[8.F$?98KX8-*3NHlm5Xn`Ur?(>$@"'@AU>#'P'Hkbor?E9>t#@T3gsa`=%//mN]*e&uK,P_)&#$>*'=KQKEjSR5h$O%@VH-g"g\Zu)X-:]%U+1EX/2X"\Q*qf7Sl:_g&$]:rMG0\&gb@EKJ&W-co2S2!saZO%>&<aB;hRK&/r7L'o$Lm>:H0tR0Gf'Cg1."%9nE`9._&lM5hrOl,QOR92?:Qg+dsaF.ee%]?k[K7fZ+R?:"qA(>;<6*Ps]&GaH;R.]F"fm_TH4\7FMn/U1mCtn<monGM+?cqEm(K%&n*%9B-b;D;rs0e@ZL2Po.?r=8Lp<"-'ZpE*fj-a2V#0f6qh]1XtZ0qp_DqkBc@7^1OP*ZBm46_Tt_"ODOm*^a5]@";GE?IE_dLd%'JTaDf15'3Z-^n6;I-3>*pjdG+&+V06^F]=.H7@A)l=2a$/ol54O7$V;S?<m/RbNF[QuNVV%$jcB10g.e!FrE'W"+ZOK56q(cOc!%+n^>Oi4[(L=BADU`6L&+5p?IfFPe(DBdbfRUnQ"QN?-s]6s!)MpLM'qWi"b4fE?Au-mPa\Q7u<5j"$dtX8Eh[J=t6OZ>%**Nl%oc%YiI+)Z=t8TnH;4UA2XR;`fNp4/&Qp:h6b[;N%E),lDAEc`dP@7S*Hkj*36N:.b>g<#Ii8N2bgMk(nF5)Mcgs%`Dd(<PL98c$0q*g%%-_QZq3IhqjJff*B"D[nZ])c,Rm<!eDHao7on./9!7XU3Vn$^!e+5eHId`a"+MXFTTprK!\FZpJ4B4p0[gRI:Dh6LIUDabV"b^2)%P\ZSWePJ?fjV]KQ^6g@DTbASE-$7Ti%tSO)/'Ct$\nQ_KDHanV2[pu<;fG]@mU4@VJ%_Q=U"P>$JEj$!JDOSQ(pDB=iCsR11rdmV%_q@dW7Ob2QP>+]k@I?fUm#m38-C]_rSDoZt`=<A(^I'o=Dq@q._kOr/R#o#]]YEZ/T?LYAUWl.a9e\Juh6rH.L7fSd9oGt&OA-CI%W<T#bf&-ptAi<4;\;mI&D(udnO^ot4GZ:+DT@Y*![^P#kaWeNX8-MiGcqT^-nu@T4VSTkGf4g+U%*ICKdt#^=?t=dX-6#4!/0VUC%>B#I6VP27RQlhc2E:%VKCmo(;fi0bE6W>jYCKrD[.-]*^`9W$g,MYmXpcD6V@9%HI0[2FB/lT*Ra3)kUAE0+moX,H!PI=@ff.Su0%2G?!WJ3j%Uf)e\B@H(g"e%3]VWE^;p/GGVKcDsWP/0UmX[QtZ0?7f68<=6(PR2+1)ZQU8QY/8]\4">[`J?s>%cLr$2Bn3@lS(QUk%f51bWUif5YdbkXeJ::?[Whj./7qeElV1k7EC2''^E!nALd^[miq!,N5/ith1=Aqk&,@V"([BtUt>2"]cp`h$59W262[STWWf!3[r%>t@s@Ydp165]R?WlJ/H?G/AB_7jc/fK>=FO#2^CRXZC.d5jJ-T<Z3)#Eb?Uh$^b%"7Vj*Y9[4%2$1>9kj;-Q^e^qqo'Oi,MmL(:A%R]IX/_8VD8\2g7J"q4G-Br0pWdQknp3P;C0`dpr\(2d=<jf+k9[*m;Bf9qUL?JW!:i3Zh&<Z4/>;pd6&Zcck\3_m*2A6.,bi`^'3%3!ZDE)%`r<)(E0u)OCf[>r+!$GZ_U%e4SK"`S%RaZRA"BZ-fn*ZW<:qM=5!>`CqeA7js'UUK/:6!n0HICeq0-@P^P+ehd5r`s)CI%(lE'@e=i.n0\8pLq[T4>[*lIT/oNA-(4[p3AI.,a,9YH,_kmU.MZRO9eTR1d&5&-J.1AjhTeq<[;;/2`A\F[ccq2tGeO1(0+8Gp>%\SXBA5j6?sG4Lb,;hiA\*fX=eVN\G5HB0@%mlFqtVE/GG9/8[s&<"<S:#hogCZqR&.r]49<$r."NXco@N%^r[)rN2[)=iZ.bq&Go%$^%gZT(^:UKNpAr1sn*JdP,RD'j$3XRoGB+X,R._QPE?''+?Ojg19B-EeQ?[dqJK[lFLFp8WKUe3Mm-tW?eP;_je>(^[,U='&o-!%0IRX`2N3c!eapU8%G);DP3pb.Roh3YeZB>)!Nc]C)j3C:@]GNU9%$P!Gap4YV)k$(=*l3RF*kIl(GG]''[l7Z8*-<Z]4>!=[L4eB%2%+R<dJ>0q(;#SH?h[1*+oT2UP;(Z@SEmUM)S,u\aP9ma8C?:p]d**[c8_2%-!oUpmg4"S"R=LW.HLY*F=B;WCu("Z>nnQaW>pbC%3Zjqo(poa5$E$GE>;?3bded2;\9is8qE%8&,nRL_!Yj=+Tp]HIh2l^:fR(Mt,7=[?FZpr8C4YkupZaSZX#:J?BjE*e=j`W2oMqsk%Ce?YP8>eOOc*J.6"3Eo`7]BlY+MXrK*4!hN6kO7i=Y_2n]f'H=mb("1`-4SX==4+4M5$-6TBI))(Pm.#qLMXdo5C]OF.hB2LrXV.%PdfH[UeK212/F:EnU5BYHm@'E!o."t!*F6&pL,<D:@U"A\B?3#?U,Z>Ni>7<33$AglMJGh\uU8RQpp)+I(<8MUI^SW(`]ipl$210%-sXTk;;$:L2H5fkBBe<o]mC"4qm8PJ4#u+Pf*YEUFh,f4-2.lf]P/UQD+$<s2SP2?A.F#)P0TfBO/)!MKK^$g"_u[-bnf-2F&S^C%OtZm<,ob+0N06WSF@2/!Kg,r=o[,RmQ,2@/)WnZ7bN]AYlC)l,&6QijSD6hV#T0-R_7"04+?LnUFp-F8nIFEjaY$]srb*nROHU,6%`V_,^+]:a`;Edmg1;3^Sf+U9S9((%![t".ipE+='o:+WCDnl2?:I"jNo@n25r9$<C_k5icmZ2kma.GB6f1QVIms"c2naCu&J(=72%7*8+#pHMhA]#_9bpO)\b6N?Y<s$Y=_UNhjWH]3@&oX@'ar:>tVdZX6326'<X94uMM;-i?J4-'thO!%GgQOTY\@=g+hiqm11a;X)r%`Q41K(aU\<N!-s#-XVkoE@<TE7UgN/'JEgQ;F.l4D3*/V0NmXT,Y4ssK4?c*"mSd>&LoK_as4]AT%='"`l`'/Rs25AMfqM>,"L'b%Zro7]S2W38M7!V]krQ;m82-hMn\n%*"m:u])EEtHUWj,rc.9IdW$#6[j?C`QYoX4'Fi*<\[T)/!JWL!"b3P0tpC?tWeOL1p',ttn%<UtHh;8:VI^j:[5i]LBq8<0J\.9YnuKTbK!YpA:RkIgAKKNdp#lB3F6e9(pFOoXZfot2Kj0L=!OZm*UN]fjZa<[@LQ/bQub+pgS2%eJBJrk;doU@_Y"M=HUrdb,f;G_?_dSN"nnqm30%bZ.H1l+CSq'=<quW8j,V0UoclGRZsmqEC&QRE?)Od%RjY]9]tu"5etAU-,+;)%Gu6oo</=<Gl@NV3f6Z0`Ic-1W.*Ji?*m7V2I+Nh<Yq.nuetpUu$e+f//55iaVljZn1[r.39_ZERmiT#cGL#mX`!'qm\t#e;e%/iE%2^!,fKPaW#gNl4JC!hUU^^slOPag6(2_J1F+*5S>&qA*..dpLfS&.;%fHe:14N/c!VbKuD!d0p'iQ)P_A"7lD.M['H1%_k:mN*0b%!Z"7`GJm<laVl><]f.d_%^FQ9ouf6b_V>LH7b'uF?6piZ"[[XTegW0o,u&4D132Z_'F93/g1@=3?.+l]QP#=YT'apE?W++L9\mo`%%(N[\@=(N4]1rrE\5ja#RM)VagMV-T\p)-DWJ&>8erQ0%HUXa\')E%X6h6J8CcRPe9<kP]=27;iKG$*anQE(nWWulKdlMXuo,dKb%;OYA+@E@/T=,'>o"^,25!T&>OX?$HMZdli[/8Vj8)ZfMho!f#>`SUl%+8Wu:_Nq=PP`?uj,#^Y58o:*P?]Tp>X.1[aU.R*B]jRld%8^@O=L[G;FA1dr#Sc7I(Vj;G.E84FMIHuJZS(Q7-:;K3*lOc_=B"ug.E+SoSTFL='kJY9<m^XgR=6o@Gg4)_Y:OQsbP13RoK"R\'%G`QUSSfO"cZGNGWPV18;L5Zd34$-K>.qb[""s%7cHXH%K9!-1iaC[iCa+(>],5s%GV:o'p#:/@V"7u/:%"`RL8d=`54!>c."hC+L%#/Y[.[>o(RoG1CgXXSNBFefH0o*"uplV_&UY[#A!RFW\Z>PIb,X,nIn.5tdB3mo#^mg<?&f-P6.ju$s\o"WYbP\bGIJo;qtZ*-f>%mZ)>MKaAh!4`k.A8gW`=Pb4jP@Mn@HKNbkVMM6o$h)4f@"Rg7%)9WRpl)8)^Ner+N$!UeJI9kQWZZQN$Wg%A)..Jh0RUV0f*T1u"%71$RPXJ3-O_/C'?`YTpkd\=*O@Cb(Fee&$WVF:f.ElF1EDg.dS/4jLem3UWg6FYt4_NuP7Q*)uR!Q)!-p?W`=>fW8!,WMMR5P^HF%p[r9&/4kkt-#'^&P/LYXFnq3=D:(*0Op%l;&k`kG8t<7!gO0@`:?TQ],k6ktU\)2E@B\28N$SeB-.t!KP(]r7e*0XE-,J/`3p<<V%?Iq[u9'D]9](2SKr_dTt%K6c?"^@5<lh`F.U4fdKYXmuPPkp7i8m@A)7;9*Fie#TKfapq5Y[]SV3s+9k(F?fag%1rVh'DWVD107W%j='sY"8[if0YAN\k1*Ze8j"#*,8MRqd\;u-R[jNUdr\GR*KQB8,bKJaF\TI!,c&U(6DsHK)R3tUZZ6@r!M+q<WBQ$i#-qFTn`5M'%BJ2,LL6^.(,%GVr:-525/."[c"B.@h,5WJ0WOWf9F&"a_&S/%^cR\M2qkOL3.VW'eBh*gsD/4Wm`gi]t9AFfVmm.Cn:(ftH-.HAF%'&>XeUli-eM'FN;5beh6)CjO/+e"Qr_P9">7l2`'7^t`Wf\i_OOb5M]DK+a7PrW(6Bt:W%"`<`eldX^h1=cSZ5i%0rCKT.=a)Dc`%/R6rFpR(,fki,#mU?s_Sjj-t#1'.OqRcF6f%N!<+RW0=FFY1<0;j%V.h8%UX9^MM&K5]42BDUb5Q5'\K])&tCeW_H_,'U)r*>rLr%jH#=0(.(T&Ym0ARR)X+tXjas8[QMMS-LH6N2A-XQGF%n2\W"kV[R+B'At0g*(kO-'&J"P-JB:)/Eh$R/&@J4+,B,R>'(BTd,P\@Y%/8o"ZY;F:6U\l9sBq5S[:'!)CBiPpH#2@SbcmBfW0:5hSHuS,"jX/B^*lLp&De)L1jL"WJdAMeC-@)_>I*h!Ms'SF>/a8)RKP[rW%A?1&,\2)L"<=!0.bEA?TEjA`Z<G(l-S0!2$SS:s3OkYsX'#Ls"UY">e.V^j/"`[$h"j_p/bWbLA'4H)qkS<W>_=p$;]6q9S\bHg?%>VJWY4$+]F_ngWtd(.:QApD81W+/7!J8pm_+b`/0K27%P:CG0AYCR+&`#I-l&hIITG>V2HN2J9ergEbg@dro+:>aYHe$)tS4m0BU%55OU`)'Vr,I?M_^n;14-cs';QUrY]4lW-Uo8@@+;mr`":`8.,]D^LC4+\])lfX>CGC\2<>-)^5W,BEHd=Z\)[*Z3m^;VSq&jPZZ&%4C\ps^c/bU7JbDn$F7(.&5IcbkqGf/Dfk=?jktQg-p8fR"3XRnl7*HeP;BNMm#WN#jEMs9jG#p=1*I[Ng\Z161mq(nOo$^W1+<"Z%L1lc7<(jKW*TJ``"Egl#C^4*p"lXP0NN\"KRS(f1L4*T+U8uK1LdAs'+d;3uk4O(d!]$(-hjCiSY^92$fC80.[Z#;glgB>n[?27P%=Ue[Zh2p/u@Mc;0j0BBHLE(RGG4-36V\p<AV*@>aDaSmqF6qoc#1$Led0npP"Tg]!6@ie!;NAcQUiQY<ic!'QPbE,f\jZ9RG,-+A%2V;$n@P:V:^q02"G*\>T0cQkO.lQbXI#Im:3@@)`L<2;K:3S/kJ^o7kH?E^'f@156;k&-\UT3+i?t)+FkrR37P6!l90.*Pl^T*&a%->q-lkc0#-?U<gX_,d6KI[r_L2LE[h):NV$.jSOLRd7@^H)2sY=-K3fT;KF$Es4aM@[HU/ZZ^dZa.PpVp%'Sd].N4#L>X)HSdO,1%6G1,gdVpoiI+>JFdSS-X^FH+LN:`Gt]C"sMNrrnP#Wj<KW0>c-ih)GlMgNQ2$F`+Z,m14/a"_PoDI9ES>`Fm(Z2B'Fq(&.3fkM7)%]VV<VjT0Pcn6F+r*E=mJYLV<(\71'Qi=(18/-Ol!4N+dqmP/iD.jCIs5'CK0ZM*/jgG)hre(lV^KgXUcLUP^/45N^b`4LdIV=p%6%L''O7qu&s]qV98?=<(jU2(&LS3?fE4k:,#6%]4.l`A][$#q:NRmR%PeNLK9\U1#=b95!8PgFoNof#8?]V91^HOR/%<<?PJG%CnR]%fRG:G.rhd(L>rY<l=-@MJcj?P9r#'\'^B4Y\[^7THQe=GAKC&R[GG[ARXb-p?":;MA=iAn\Rp?hh8rs&4AY1R]2n;9QJifAE^uJ"%LNJ^==P_WXUus]pPh/8,SIIUVAR;'>js>pMG,"I4!CHlW_b<XP^S3BICb@V)Y,;t,8L[2=2HH?-aHfGk6]Y]\#F^j'3qf_U'g-X$%:=pDcRaWGmdt6E3_p0aM4V3aBH#\kE&jPE4mXh\#cW1Le@6qChFi9G)Dp[dmB'"@[XALQC)@Mb5<slF<qHelT6,2uY:,LM^I=rW'%3+b\U430'm<fW^EUATPCZgYXJ]FYC1#Y/hEoje`2&#k%5%Xl*Lj.O4j=!6Y)gjTE";Eg9Ch'@.a3XPBX9YUC,XjIA<4G()ENIf1P%EU2>uN^4D)6e6O%/``VG'[HMZ>1W%B0$\fNYinsDri70T07&34b)#nO]l-qtj"8fs&ICCsk$o$.#IQFHaUJSt'tS@.gGK4XO!A-\%gJk\r2h3Dm4$j!j_q$f%3ja^JOA33%N3N3c;JIpV'/E13*N-#?FjTDUK/GX9?S;cu"#M_O#edZ!CH2C$f!5BHkOsFPT6ecd\ntcY%\a&Jh5S*6/-4Mp!4OOITS]iUF\2loZSc6<B#W%`u_c1^!@HNe+s2%a]F$44p-B/+.<n!AI\00#]>Rq*@Aj^AXl&WT#jRB:Z,'0p-%T8e/;PsU.,HoTe"KB07t`8BO.;g]oX&H3dXQ\2&?C_HpoEJ?qFVLOl5:!dplQk/n%Wm<dZn=Sc+I#SRQaOU5*#_pQXL^N@Ua6]_0%+gM@[Onh5XL'YP>O86PJ%Dg;2SeO4)!auN(Z]#@`>OKdXi5Yb]&\TiY`@%`TYsM5M_1lc^$.K3WC^@BRY2]pK"Lkkeh1?*0*^EM;%81J>B<fA9KL29tu40D,.iG8cTMoe-D`.jopUEh`#2c3!oaE\7<%B$JVL7jMpG$qXs7.8rDKPX2rPRZU'.Z"V.ZI?s,#VO=nW4%m5%PWLi<)6tDXL27]LED:DgBb$A%C;S((1eYO5DD_tZBOhC;7DsKc)$3)Pn\GhU!]?fI8Ht8"\2Sj"VZG$CACQSIT`WWHFt9Mu3#T"F%8qq.!a:OYZ-8L7C/4P"d]f<.^LVF@Q!7'm=15,488rkA<K$0gppIp<<>j,ieL>Ys90q+jGFr4Oi#r72)5\gN@Jl_:cfF[Zbd:3G?%"OL!Z)oAt.m0kn+S\K&Y#_iUc@:_f(G>U7D+jPgY=L\3_Le]a(K>VG8/qdC$lEqQc9JR1(j-[=f849$#`e=\QH_8St!%F<V!R`_b%_QoDA8lebMFtR;mPRH.ueZnZ-.2N%K06fXrKfm]"T9t*76ZaW7isY:5Ei'1i!'*#-7E.'XdKH2.&\_V6+i(<L2)6F#8qq/<Os(.\%D'#:h1JUae\AO3?B4M:eF(D5=Ktj+?+UN-DjLGFX<SpETE@*FDUT0;HaUlPna[I\W3I!Vef!lhiOHO_F"O!mhV,"[c+UN-D,[jFf%Upb]*3>o,2RPacE\gjP-HAT(&,"%aCYpJC^dl7/Hr,No=Ae^g:V*Y6@MF'V4e40p.fZo.d#ZGXF@SFiI;8"@hAO=i*S-b$U3>%Dt%;]@P]BopgG8oV#*l:-D62J^=XO9S:Ddi]T!/akrh#/PuLYDi`Pel<;;F7MX/36hip)ZCR1#is:6IV#P\EM*aX7??o&"i2ZLPd(?!%!r3KiVJm;]6[T&Y9N_oh:,4::V1D&La$.e#:m%\o-4gr=#q-=i@A#b[9^.VZ3]A5cY:G2U:5#FWU.!(W=<?pi*F89=Z3!XO:p]^@%R0]MOl*1gDZ-X@#!g0aBTgp;['@<29#^N#+^4Bm)U\n?U$KrkqpemLk.\El^KP\_Kd5$E?#sl=,=oc3*HC?W5cSbK.=^!4[D6N,i%;]uHG.V(o^!i1]7=+E/"4O[i;q-BKu8VhF2$+'P/n<ZW(6I:k5+\>ppla.uh:!DR$84&gS8XONA(eqL]&iK,ODn3PgB6'WhWaA9U%6?_F/`>$A.Ki%AU-8's\a[aHX#f\>HB,DGJ&EQ5:7(JBgdgad!FI.%l/kVM@&AI$o>R4U1CQ9E$*-,LUT)7&N9,CXBA/'+k]^C%k%3Wso][9Cp#:iYKgV:-U/G)l78kRdNKEoGE&%O>,2LE1J-GU1s7O_G,6&u'J=_NYO]J&:5Aj[8OMIe:j>5_>k?M%>/e26Rch#?7bH%f_?"c+sFR&3ASqVJ6]EFrpJi:<V*=Q+6)!AM%:1,1*&uBYjG$n3b1UB%S<&`am^"*l;WN=m8+jVF9j#a,0=H]!B9,O7&S'r($.g0%0+b[*KErm3gB^9%4\SENAOJFM)%d3FXr<)l4Kk]?&YWB;3AV[A?-UoD.pUAB&g8F92/Er%N!P*,AmJ7c9H>?6%9+iaD6LhDS"*R>%5H%>D3>0IqYDj+pG1HmC"i,n0^f!HlK8.K8%R#Dj;+G7dGZI[BYT\*M>%0kWm$?'T)aZK%?,;7\g'S'm`eL]Lf>`Ojbh8'e@ueKd%J.9=B`i2J4+ZRkW7o2)H;f"IHk!7JU$jIS9S\^_R-DfqSo,Vg',V\7Fi2E8oW.#J-E<i\1)A`IR.B28aE.3cSfb&6J)[7pJDXH!7%8=aX?gUIe%CFWhG@s/u8Z,I7,d3a!H/qhJkbhtgDX:]!aNg+kdmh>jE6>'@qkC&,^:K'.SYL8Y\;&`YqY:J6:/DtZBR18*]f$T*Z%_*g(pYTYdFnR+$&&Ab$hl)Y(#geZc<XNeS9E#ff,<e27)[oS/ua9I2)6)BJ0@Jk5Q+<cCafFVGW0dQNjZAEIsZQVG73ArdK$UjtD%>FV;I33A4#%=):<s-4)i$p*JD^]!S%^\Q^\qu?/`J,'!:s8@_Frp@K!mT71"O5KurL]@;$pOE,9iMZ/DnE99?lORpks63<W\KCh8%rg1)Yr:In!J,\u9+5["pO$EV&611A4q/?8ka8b=X^]3-1a$9V"kF]K'XoA;PrU"NQro'b.J,Ic$^tTr[q"a<4s6ka;s,E=orl=L-%iGO;&lMM#js6dpg++O.CQhsXhiVX(<mo$!snF%G`r7<#Sl<!<DX'bg\s82immf*OP[$0\~>%AI9_PrivateDataEnd