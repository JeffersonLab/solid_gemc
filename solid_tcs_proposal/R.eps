%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: R.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Franck Sabatié
%%CreationDate: 26/02/13
%%BoundingBox: 0 0 266 162
%%HiResBoundingBox: 0 0 265.4883 161.4692
%%CropBox: 0 0 265.4883 161.4692
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="Ôªø" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:ModifyDate>2013-02-26T11:56:43+01:00</xmp:ModifyDate>
         <xmp:MetadataDate>2013-02-26T11:56:43+01:00</xmp:MetadataDate>
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2013-02-26T11:56:43+01:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>156</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAnAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8Aln6XstX85Nq9nf28Gl61&#xA;5nXT7LW7WdpZo/0VapO0ESJSLjeyW0qFubFhIoCNXlirKY/NmtaRo2mXlo1q36VOr6nr93dpNJJC&#xA;LRZJGYIrx1WApHb8WbpxApxxVknla8u5PNV8skH1U3+kaZql7Zhiyw3s7XEUnYbukCrXv6fTFW9W&#xA;8taJrvmvU7fUdMiuHbSLaOLUpIoJHh9SW7QrGz8pFY8uWy0264qnX+E/Kv8A1ZrH/pGh/wCacVd/&#xA;hPyr/wBWax/6Rof+acVd/hPyr/1ZrH/pGh/5pxV3+E/Kv/Vmsf8ApGh/5pxVQsPJHlW0sbe0GlWc&#xA;ot4kiEslvCXbgoXkx49TTfFVf/CflX/qzWP/AEjQ/wDNOKtf4Q8qcg36GseQBAP1aLoaV/Z9sVb/&#xA;AMJ+Vf8AqzWP/SND/wA04q0vlDyoooNGsaVJ/wB5oupNT+ziqi/kjyq19Fd/oqzBiiki9IW8PBvV&#xA;aNuRHHqvpbfM4qrHyh5UJUnRrGqmo/0aLrQj+X3xV3+EPKnIN+hrHkAQD9Wi6Glf2fbFXDyh5UBY&#xA;jRrGrGp/0aLrQD+X2xVQm8jeU5HtGGk2cYtJDIqLbw0f908XF/h3H7yvzAxVEf4T8q/9Wax/6Rof&#xA;+acVd/hPyr/1ZrH/AKRof+acVd/hPyr/ANWax/6Rof8AmnFVC88keVbqFYzpVnHxlil5Jbwgn0ZV&#xA;k4/Z6Nw4t7Yqr/4T8q/9Wax/6Rof+acVd/hPyr/1ZrH/AKRof+acVaXyh5UUUGjWNKk/7zRdSan9&#xA;nFXN5Q8qMpVtGsSrChH1aLof9jirf+E/Kv8A1ZrH/pGh/wCacVULfyR5VhmupP0VZv8AWZRKVa3h&#xA;ISkSR8U+HYfu+XzJxVWHlDyoCxGjWNWNT/o0XWgH8vtirh5Q8qAsRo1jVjU/6NF1oB/L7Yq1/g7y&#xA;lwVP0LY8VpQfVov2dx+z7Yqx/wA5+SvKsWga5qA0K1uZf0eyxW629t8DRLKRLH6gQKw9apNa0Xbf&#xA;FWbkA9cVSmXytosumalpcsJfTtWkmkvLUu4Qm4/vgtCCqyNV2A6szHucVRdnpVpaXd5eRhmur91e&#xA;4mc8mIjXjGi/yog6KNqknqxJVS23Kf45vxyl5/ouzIQK/o0+sXW5anDn4DlWldsVT3FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FUi89lB5M1su0qL9Tm+KB&#xA;XaT7BpQIGan823StdsVT3FUt8xpqz6NcLpNfr3wcAhRXKCRTKsbPRFdo+QQtsGpirz/W7P8AOSaz&#xA;C6c8kd3FbWsbFntBHK4Nbgji6N6hJFW+AUB4/wCUpZhZNfHzhOGmijH6MsWurV15zFvVuxVZFdFA&#xA;Vjv+7NfbFDIsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdir&#xA;sVSHz2blfKGrtBcQ29LSf1HnQyKUMTDiKSRUYkihqfliqfYq7FXYqkUaXB85ai0cUQ/3GWYW4Yku&#xA;HM91ReAXdO5+MfLvgKomvmhe1jN9M0X8Jcq/ef0ft/ay2d9c8xr9vTLdh/xVdlv+JwxY8WT+aPn+&#xA;xaDv0tqi/wB5otyfExSWrDb/AFpYz+GPiS/mn7P1rQ73fp7j/e6dfR/88fU/5NGTHxu8S+S8Lv8A&#xA;Eulj+8FzD/xltLmMfe0YGPjx8/kf1Lwl3+KfLg+3qVvF7SyLF/xPjj+Yx/zgvCUVFq2lTf3N7BJv&#xA;T4JUbf6DkxkieRCKKJVlZQykMp6EbjJobxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxVJPPCSN5O1pY4o52+pT0jmYqhAjJJJCybgbj4evh1xVO8VQOuasmk6ZLfPGZuDRxpGpA5PNIs&#xA;SAsfsrzccm7DfFWJXn5s6Zax20rafdPFdQ28kZjHqN6t1UpHwj5sygIxZ1r02DYqm1he2c3nKWZT&#xA;M8l3pVi0LRi4e24NLdPVmC+iDt8Jejdh1pirJcVdirsVdirsVdiqGl0vTJv760hkr15xo3T5jIHH&#xA;E8wE2UK3ljy2zcv0Xahj1ZYUVj9KgHIfl8f80fJPEWv8MaMPsRSRf8Yp5o/+IOuPgQ/BK8Rd/h21&#xA;H93d30ff/ey4ff8A56O+PgDvl8yvE79CXC/3er30fhvA/wDydifHwj/Ol9n6lvyd+jNYU/BrErD/&#xA;AIthgb/iCR74+HP+d9gWx3O+q+ZV+zqNq/tJaP8ArWdP1Y8OTvHy/ath1PNC97GX6Jovo6y4/vP6&#xA;P2rs7635lT7enW0g8Yrtqn/YvAn68eLJ3D5/sWg79Laqn95otw3iYpbZx/w8sZ/DHxJfzT9n61od&#xA;7v0+F/vdOvo/+eBk/wCTRkx8bvEvl+peFx8zaQv9400P/Ga2uIv+Tka4+PHz+R/UvCVW38waFcHj&#xA;BqFtI3QosqFgfda1yUc0DyIRwlHgggEGoO4IyxDsVdirsVdirsVdirsVY/5+ltk8nautwJyklpOo&#xA;+rLOzhhEzCptwXVfh3J+HseuKsgxVZcW8FxC8FxGk0EgKyRSKGRlPUMpqCMVQR8vaAxkJ0y0JmCr&#xA;MTBHV1QgoG+HcKVFK9KYqgbZoV88X0QuuMn6LsytiDHuouLoerxp6nw/Z2PHfpWmKp9irsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVUriztLleNxBHMvhIqsPxByMog8wtoA+V/L/LlHYxw&#xA;MerW9YD98RTK/wAvDur3bMuItHQZIt7LUry3p0V5PrK/T9ZErfcwx8GuUiPt++14ncfNEHRrS/Ud&#xA;AwktX/4IfWFJ/wBiMf3g7j9n612d+m7mHa90u6hHeSJVuU+gQlpP+Ex8UjnE/f8ActImx1nS752j&#xA;trhHmT7cJqkq/wCtG3Fx9IyUMsZcigghGZYh2KuxVIvPckUfkzW2luvqSCzmBuKxrQlCAtZQyfGf&#xA;h6d9t8VT3FVk00METzTOsUMalpJHIVVUCpJJ2AGKqDarpafavIFpCbo1kQf6OOs3X+7/AMrpiqAt&#xA;2uP8ZagoRPq/6OsiZOZ58/XuqLw4040rvy+jFU5xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxVC32l6dfqq3lukxTeN2HxofFHHxKfcHITxxlzCQaQX6N1iz30++9eIdLW&#xA;+rIPks6/vB/s+eV+HKP0m/I/r5/emw4eYVt/h1a1l04jrO37y2/5HJUKP+MgXHxq+ocP3fP9dLw9&#xA;yaxSxSxrJE6yRuKq6kFSPEEZcDfJilHnRrhfKGtG3RJJfqVxRJHMa09NuXxBXOy1I239uuFU5xVA&#xA;a7pS6rpctiZPSLtHJHJTkFkhkWVCy1HJeaDktdxtirDNQ/J+zv7SSzn1Sb6ubVLWALGgZTHE0SM5&#xA;+y6/vGJQKo6UpTdVkNvaxHzxcvJDJLLBplnwvWKha+tdqVZVZfiYEnZOPy2xVkOKuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVKZdDe3ka40aYWUrHlJbEcrWQn&#xA;ryjFODH+ZKHxrlBxVvDb7mXF3pV5ueW98ma0uoaZL9YtrWZvRjdSrMYmHqRSFogyqCSeVD7VplkJ&#xA;E8xRQQyvJodirsVSK3df8c36eu4Y6XZn6rReBH1i6HqcuPLkOlOVN+mKp7irsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqRee3VPJmts072w+pzfvowrMKoRS&#xA;jLIPi+ydu/briqe4qlvmSTVY9GuH0oMb0cOJQKziP1F9Vo1eqs6xcigI3agxVgupap+Z5twI47q3&#xA;kW0hSR4Le3kP1lkPKShSYErKUEgUFeHLjVqYpZZY/pGTzXPLzSOA6bYm5t5Ij6xYyXdKOsvFKHqO&#xA;LfPvihkGKuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KpH&#xA;53S9bynqwtJY4XFncGQyxtKCnovVQFeKje9T8sVTzFXYq7FUit44v8c38n1Wso0uzUXtI9lNxdEx&#xA;Vr6nxH4unHbrWmKp7irsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdiqRee44pPJmtrLa/XUNnMTb0japCEhqSlU+A/F17bb4qnuKoPWNVg0rT5L2ZHkVGRFiiAL&#xA;vJLIsUaLUqKs7gbkDxxVjN1+aWhwfVeNpeTm7iikhEaxV9SZWdYTylX4wiMzH7FB9qtBiqJttXsD&#xA;5xlnVrp1vNKsXgEVvcSwlGlunDO0cbIjU6cmGKp/+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd&#xA;+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b&#xA;+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/&#xA;AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5&#xA;/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDm&#xA;jFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXf&#xA;pO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFXfpO2/kn/6R5/+aMVd+k7b+Sf/AKR5/wDmjFUh89ar&#xA;Z/4Q1dHF6nqWk6q8FrdMwPpsd+ETcV2oSdsVZRiqld2dreW0lrdwpPbyjjJFIAysPcHFUsk8neVZ&#xA;OXqaTaOGRIyGiQjhF/dqARsE/ZA6Yqp2pZfOl9EskSwjTLKltx/eVE90AwblTgBtTh9PbFU8xV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxVY88MdfUkVOIBbkQKAmgJr4nDSrfrVvyKiRSwf0mCmtHI5cTT&#xA;oaGu+NFXLcxtx4rJV+YUGN1+waGpYACvavXtjStGaYpVbd+XBWCsyD4j1SoZt179vA40O9Wy11yN&#xA;I0K81CkuQSlByYjh1BrQd/EY7K4C6LAlowoL1AUkkV+DfkKU77Y7KtMNyyUa4KsYwpaJVFH7uof1&#xA;KewNfpw2O5V5hYsxMr0LKyqOIC8ewoK0PepwWrhboGVuTkqzMKu1Kt1BFaEDsD0xtVos4QnDlLT0&#xA;zFX1ZK8T35cq8v8AK+1748Stm1hNdmUtwJKsyk+maruCD8/HvjxK2IFDBg7ijFyORIJYEUNa7b7A&#xA;Y2q0QShQPrMhIRk5ER1JPR/sfaXt28Qcb8lcRdoDxKSj4AivVD1o7M45Amm4AUeHuHZUo86Szf4O&#xA;1xlZLV1tLhVknAdCOBFaK6faGy/EN+3bEqnuBXEgAkmgG5JxVY80KCruqilakgCnSu+KpNCHXzpq&#xA;EhhQxLplnWcEmUH17o8AgQ1Ujf7XXtiqbG8iAJ4yUCLIf3UhPFiQBTj9rbdeo7jDwq2Z6MV9NzR1&#xA;SoGx5AHkPYV3xpXetJVR6D7lwTVNuJIBPxft9vxpjStG4m4cvq0pPph+FY68j/uv7dOQ+fH3xrzV&#xA;tpJwzARVAZQDyAqp+03+xxoK2rXPIco0C8mBIck8KHiacRuT1HbxOOyreV6U/u4g/pk/bYgS9l+w&#xA;Ph/yuvtjsrbC7Jbi0aj4OBKs3f46iq9R08PfHZWwtzy3dCvMkgIQeHHZa8vtct+XhtTvjsq0QzUF&#xA;bh68GUlQgFSdn3U/Evbt4jG1c1tyDB5ZGVggoG4UKGtQUCmrftb42q76vHy5VevP1PtvSvHjSlac&#xA;afs9K70rjarRZ2o4/ulJQOqlgGIWQ1cAmpo1NxjxFVRIYo6BEVOKhF4gCir0XbsMbVdgV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxVJPPCSN5O1pY4o52+pT0jmYqhAjJJJCybgbj4evh1xVO8VSLWvLV3q&#xA;VtewnVZzFchfTs5o7drZCkiSAERxxTOrenxZWlNVY4qxLUPyjvLiERDULWVI7SGxhE9oWIijRoyP&#xA;7wjjSQsihaK4Vt6UxSyayt4R50mWUy/W4NLsiDEbiO2IEt0jVUMYSfi+FXJbuOlcUMkxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVj/AJ+itn8nau1wZwkd&#xA;pOw+rNOrljEyiotyHZfi3B+HuemKsgxV2KuxVIreVf8AHN/F9ZQMdLs3+p/DzIFxdD1evLiK8fDf&#xA;FU9xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVIvPcqx&#xA;eTNbdrlLQCzmHryceIqhHH4iB8VeI+eKp7iqS69qmsW9heGw0+YzQhPTnKxyqUMirI0cUcjSuyRs&#xA;zqvAcitO+KsM1Tzd+aCWUr6dorXF5Fp6O9v9VkQC4aJmklVpHRZCj8AIEYtuRUnopZfaTX7+b7kr&#xA;bIlvJp1i1wZZaTRsZLshQiLIj77E+p8q4oT7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FUj87ver5T1Y2kUczmzuBIJZGiAT0XqwKpLVvag+eKp5irsVdir&#xA;F9V/TFn5h1DUNO0aa/nl0uGGzukktlhE0Utw/pSLLcQydZENQtKd64qmf6Z1H/qw33/B2P8A2U4q&#xA;79M6j/1Yb7/g7H/spxV36Z1H/qw33/B2P/ZTirv0zqP/AFYb7/g7H/spxVRsta102cBvNAu1vDGh&#xA;uViey4CXiOYSt0Tx5dMVVv0zqP8A1Yb7/g7H/spxV36Z1H/qw33/AAdj/wBlOKu/TOo/9WG+/wCD&#xA;sf8AspxV36Z1H/qw33/B2P8A2U4qovrWu/XIgugXf1MxyGZi9lzEoZPTC/6VTjx58voxVW/TOo/9&#xA;WG+/4Ox/7KcVd+mdR/6sN9/wdj/2U4q79M6j/wBWG+/4Ox/7KcVUZ9a10S2wg0C7MRkIui72VRF6&#xA;bkFKXX2vU4de1cVVv0zqP/Vhvv8Ag7H/ALKcVd+mdR/6sN9/wdj/ANlOKu/TOo/9WG+/4Ox/7KcV&#xA;UbvWtdESm00C7aX1Igwkeyp6RkUSkUuh8Qj5cffFVb9M6j/1Yb7/AIOx/wCynFXfpnUf+rDff8HY&#xA;/wDZTirv0zqP/Vhvv+Dsf+ynFXfpnUf+rDff8HY/9lOKu/TOo/8AVhvv+Dsf+ynFVGDWtdMtyJ9A&#xA;uxEJALUo9lUxemhJet19r1OfTtTFVb9M6j/1Yb7/AIOx/wCynFXfpnUf+rDff8HY/wDZTirv0zqP&#xA;/Vhvv+Dsf+ynFUk8z3Ov6npGr6cPLd5Nb3Nl6dqglsVc3D+oG5E3agKv7sj6euKswxV2KuxVgWoa&#xA;f+YRuNUWGWZoLm4j9BoZoVIhWZ2Ppcypi/cGONu7MCdq8iqv8sab+YFvqNk2tTSzwiab644mjaM/&#xA;umHqcBxIjd+HpoAeO9QMVZ1irsVYXr9l58/S2pTaZK7Wk1t6dkqSRKEZhGooshAEiOsrF/5WA+Kl&#xA;Aqk9vpH5lxXcZuZLyeH63C6vDdQjhAkiuodHdeVIg0Mu55M3Oj8RVS9MxQ7FXYqlnmWHUptHkj07&#xA;n9YMkBZYnEUjQidDcJG5KhXeEOqnkKE9R1xVgl1o/wCbc3og3jrKtosVzLFNHHG9wtqqJIijei3q&#xA;tM5ovKM8OLfZxSzDyfZa1aWV4urSSyyy3ck0Dzvyl9J1Q0YCSaNOL8gqxkLxpsCTihPsVdirz7U9&#xA;L/MhjqSWs8rRXE7NbcJ4o3Sj3Xpsjty4RhJLOqhd/Skqp5VdVlflqLV4rO4XVefrm6naMyOr1iaQ&#xA;mPjxZqLx+yDuBiqbYq7FXnuo6b+ZJbU0tpZTFPcFrYrNErBRLclDGSR6aenJaAr39OSqnlV1WReT&#xA;Ydditb79MJcJJJdM9ul1LFMVj4IvwNE8nwO6tJxNOJYqBxVcVZBirsVdirH/ADfZ+ZbqKyXQ7gwO&#xA;sxM7KVWnwN6bvypyjSShdBuw8emKsettK/MGbzDDeXEtxDYfWxObR50MXpmeYssnoyqw42skCIi8&#xA;0MiOWXcOyl6Dihitt+YVhP5ifRDp95FKmotpIuJFiEZuFszfCgEhk4NAvKvHoV/mxVk10tw1tKts&#xA;6pcFGELsKqrkfCSO4BxVh+h2nnSFdFhv1uZPq92Zb6Vp4XBt5LWeMpIQ/KThc8JBsaKy0+yQqrNM&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVYO3+H&#xA;v+ViaV9U+1XVvrPGtP0p6dn/AHnL4vU+qc+NNuP0YqzjFXYq/wD/2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>612.000000</stDim:w>
            <stDim:h>792.000000</stDim:h>
            <stDim:unit>Points</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:OriginalDocumentID>xmp.did:F87F1174072068118DBBB214030A75DC</xmpMM:OriginalDocumentID>
         <xmpMM:InstanceID>xmp.iid:FB7F117407206811AB088599DB67065B</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:FB7F117407206811AB088599DB67065B</xmpMM:DocumentID>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:F97F1174072068118DBBB214030A75DC</stRef:instanceID>
            <stRef:documentID>xmp.did:F97F1174072068118DBBB214030A75DC</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:F87F1174072068118DBBB214030A75DC</stRef:originalDocumentID>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F87F1174072068118DBBB214030A75DC</stEvt:instanceID>
                  <stEvt:when>2013-01-16T11:15:43+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F97F1174072068118DBBB214030A75DC</stEvt:instanceID>
                  <stEvt:when>2013-01-16T11:16:20+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>converted</stEvt:action>
                  <stEvt:parameters>from application/postscript to application/vnd.adobe.illustrator</stEvt:parameters>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:FB7F117407206811AB088599DB67065B</stEvt:instanceID>
                  <stEvt:when>2013-02-26T11:56:43+01:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -161.469 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 161.469 li
265.488 161.469 li
265.488 0 li
cp
clp
[1 0 0 1 0 0 ]ct
.4 lw
2 lc
0 lj
3.25 ml
[] 0 dsh
true sadj
265.288 .501953 mo
265.288 146.995 li
28.2568 .501953 mo
265.288 .501953 li
28.2568 146.995 mo
28.2568 .501953 li
265.288 146.995 mo
28.2568 146.995 li
false sop
/0 
[/DeviceRGB] /CSA add_res
0 0 0 rgb
@
0 lc
32.9976 146.995 mo
32.9976 144.189 li
@
28.4346 154.526 mo
28.5508 154.186 28.6089 153.695 28.6089 153.052 cv
28.6089 152.54 28.5737 152.131 28.5044 151.826 cv
28.3735 151.256 28.1289 150.972 27.77 150.972 cv
27.4116 150.972 27.166 151.265 27.0332 151.851 cv
26.9634 152.163 26.9287 152.574 26.9287 153.083 cv
26.9287 153.562 26.9644 153.945 27.0361 154.232 cv
27.1709 154.767 27.4243 155.035 27.7954 155.035 cv
28.1055 155.035 28.3188 154.865 28.4346 154.526 cv
cp
28.9155 151.564 mo
29.1284 151.975 29.2354 152.448 29.2354 152.981 cv
29.2354 153.401 29.1699 153.796 29.0391 154.167 cv
28.792 154.866 28.3652 155.215 27.7573 155.215 cv
27.3418 155.215 27 155.026 26.7324 154.649 cv
26.4453 154.246 26.3022 153.699 26.3022 153.006 cv
26.3022 152.462 26.3979 151.994 26.5898 151.601 cv
26.8496 151.068 27.248 150.801 27.7861 150.801 cv
28.271 150.801 28.6475 151.055 28.9155 151.564 cv
cp
.137255 .121569 .12549 rgb
f
30.0454 155.125 mo
29.9761 155.054 29.9414 154.969 29.9414 154.87 cv
29.9414 154.771 29.9766 154.686 30.0474 154.617 cv
30.1177 154.547 30.2026 154.512 30.3018 154.512 cv
30.4009 154.512 30.4854 154.547 30.5552 154.617 cv
30.6245 154.686 30.6597 154.771 30.6597 154.87 cv
30.6597 154.969 30.625 155.054 30.5566 155.125 cv
30.4883 155.196 30.4033 155.231 30.3018 155.231 cv
30.2007 155.231 30.1152 155.196 30.0454 155.125 cv
cp
f
32.9424 154.526 mo
33.0586 154.186 33.1167 153.695 33.1167 153.052 cv
33.1167 152.54 33.0815 152.131 33.0122 151.826 cv
32.8813 151.256 32.6367 150.972 32.2778 150.972 cv
31.9194 150.972 31.6738 151.265 31.541 151.851 cv
31.4712 152.163 31.4365 152.574 31.4365 153.083 cv
31.4365 153.562 31.4722 153.945 31.5439 154.232 cv
31.6787 154.767 31.9321 155.035 32.3032 155.035 cv
32.6133 155.035 32.8267 154.865 32.9424 154.526 cv
cp
33.4233 151.564 mo
33.6362 151.975 33.7432 152.448 33.7432 152.981 cv
33.7432 153.401 33.6777 153.796 33.5469 154.167 cv
33.2998 154.866 32.873 155.215 32.2651 155.215 cv
31.8496 155.215 31.5078 155.026 31.2402 154.649 cv
30.9531 154.246 30.8101 153.699 30.8101 153.006 cv
30.8101 152.462 30.9058 151.994 31.0977 151.601 cv
31.3574 151.068 31.7559 150.801 32.2939 150.801 cv
32.7788 150.801 33.1553 151.055 33.4233 151.564 cv
cp
f
35.9424 154.526 mo
36.0586 154.186 36.1167 153.695 36.1167 153.052 cv
36.1167 152.54 36.0815 152.131 36.0122 151.826 cv
35.8813 151.256 35.6367 150.972 35.2778 150.972 cv
34.9194 150.972 34.6738 151.265 34.541 151.851 cv
34.4712 152.163 34.4365 152.574 34.4365 153.083 cv
34.4365 153.562 34.4722 153.945 34.5439 154.232 cv
34.6787 154.767 34.9321 155.035 35.3032 155.035 cv
35.6133 155.035 35.8267 154.865 35.9424 154.526 cv
cp
36.4233 151.564 mo
36.6362 151.975 36.7432 152.448 36.7432 152.981 cv
36.7432 153.401 36.6777 153.796 36.5469 154.167 cv
36.2998 154.866 35.873 155.215 35.2651 155.215 cv
34.8496 155.215 34.5078 155.026 34.2402 154.649 cv
33.9531 154.246 33.8101 153.699 33.8101 153.006 cv
33.8101 152.462 33.9058 151.994 34.0977 151.601 cv
34.3574 151.068 34.7559 150.801 35.2939 150.801 cv
35.7788 150.801 36.1553 151.055 36.4233 151.564 cv
cp
f
38.6851 150.832 mo
38.686 150.836 38.6865 150.848 38.6865 150.868 cv
38.6865 154.677 li
38.6865 154.839 38.73 154.943 38.8169 154.987 cv
38.9038 155.032 39.0659 155.058 39.3037 155.066 cv
39.3037 155.155 li
37.5161 155.155 li
37.5161 155.06 li
37.771 155.047 37.938 155.012 38.0161 154.956 cv
38.0938 154.899 38.1328 154.775 38.1328 154.585 cv
38.1328 151.656 li
38.1328 151.554 38.1201 151.477 38.0952 151.424 cv
38.0698 151.372 38.0146 151.345 37.9307 151.345 cv
37.8755 151.345 37.8042 151.361 37.7168 151.391 cv
37.6294 151.421 37.5474 151.454 37.4717 151.488 cv
37.4717 151.399 li
38.6328 150.807 li
38.6709 150.807 li
38.6792 150.818 38.6841 150.826 38.6851 150.832 cv
cp
f
67.2466 146.995 mo
67.2466 144.189 li
0 0 0 rgb
@
62.6846 154.526 mo
62.8008 154.186 62.8589 153.695 62.8589 153.052 cv
62.8589 152.54 62.8237 152.131 62.7544 151.826 cv
62.6235 151.256 62.3789 150.972 62.02 150.972 cv
61.6616 150.972 61.416 151.265 61.2832 151.851 cv
61.2134 152.163 61.1787 152.574 61.1787 153.083 cv
61.1787 153.562 61.2144 153.945 61.2861 154.232 cv
61.4209 154.767 61.6743 155.035 62.0454 155.035 cv
62.3555 155.035 62.5688 154.865 62.6846 154.526 cv
cp
63.1655 151.564 mo
63.3784 151.975 63.4854 152.448 63.4854 152.981 cv
63.4854 153.401 63.4199 153.796 63.2891 154.167 cv
63.042 154.866 62.6152 155.215 62.0073 155.215 cv
61.5918 155.215 61.25 155.026 60.9824 154.649 cv
60.6953 154.246 60.5522 153.699 60.5522 153.006 cv
60.5522 152.462 60.6479 151.994 60.8398 151.601 cv
61.0996 151.068 61.498 150.801 62.0361 150.801 cv
62.521 150.801 62.8975 151.055 63.1655 151.564 cv
cp
.137255 .121569 .12549 rgb
f
64.2954 155.125 mo
64.2261 155.054 64.1914 154.969 64.1914 154.87 cv
64.1914 154.771 64.2266 154.686 64.2974 154.617 cv
64.3677 154.547 64.4526 154.512 64.5518 154.512 cv
64.6509 154.512 64.7354 154.547 64.8052 154.617 cv
64.8745 154.686 64.9097 154.771 64.9097 154.87 cv
64.9097 154.969 64.875 155.054 64.8066 155.125 cv
64.7383 155.196 64.6533 155.231 64.5518 155.231 cv
64.4507 155.231 64.3652 155.196 64.2954 155.125 cv
cp
f
67.1846 154.526 mo
67.3008 154.186 67.3589 153.695 67.3589 153.052 cv
67.3589 152.54 67.3237 152.131 67.2544 151.826 cv
67.1235 151.256 66.8789 150.972 66.52 150.972 cv
66.1616 150.972 65.916 151.265 65.7832 151.851 cv
65.7134 152.163 65.6787 152.574 65.6787 153.083 cv
65.6787 153.562 65.7144 153.945 65.7861 154.232 cv
65.9209 154.767 66.1743 155.035 66.5454 155.035 cv
66.8555 155.035 67.0688 154.865 67.1846 154.526 cv
cp
67.6655 151.564 mo
67.8784 151.975 67.9854 152.448 67.9854 152.981 cv
67.9854 153.401 67.9199 153.796 67.7891 154.167 cv
67.542 154.866 67.1152 155.215 66.5073 155.215 cv
66.0918 155.215 65.75 155.026 65.4824 154.649 cv
65.1953 154.246 65.0522 153.699 65.0522 153.006 cv
65.0522 152.462 65.1479 151.994 65.3398 151.601 cv
65.5996 151.068 65.998 150.801 66.5361 150.801 cv
67.021 150.801 67.3975 151.055 67.6655 151.564 cv
cp
f
70.1846 154.526 mo
70.3008 154.186 70.3589 153.695 70.3589 153.052 cv
70.3589 152.54 70.3237 152.131 70.2544 151.826 cv
70.1235 151.256 69.8789 150.972 69.52 150.972 cv
69.1616 150.972 68.916 151.265 68.7832 151.851 cv
68.7134 152.163 68.6787 152.574 68.6787 153.083 cv
68.6787 153.562 68.7144 153.945 68.7861 154.232 cv
68.9209 154.767 69.1743 155.035 69.5454 155.035 cv
69.8555 155.035 70.0688 154.865 70.1846 154.526 cv
cp
70.6655 151.564 mo
70.8784 151.975 70.9854 152.448 70.9854 152.981 cv
70.9854 153.401 70.9199 153.796 70.7891 154.167 cv
70.542 154.866 70.1152 155.215 69.5073 155.215 cv
69.0918 155.215 68.75 155.026 68.4824 154.649 cv
68.1953 154.246 68.0522 153.699 68.0522 153.006 cv
68.0522 152.462 68.1479 151.994 68.3398 151.601 cv
68.5996 151.068 68.998 150.801 69.5361 150.801 cv
70.021 150.801 70.3975 151.055 70.6655 151.564 cv
cp
f
71.1885 155.082 mo
71.9604 154.281 72.4849 153.693 72.7612 153.318 cv
73.0376 152.943 73.1758 152.577 73.1758 152.221 cv
73.1758 151.909 73.0913 151.671 72.9224 151.508 cv
72.7539 151.344 72.5522 151.263 72.3184 151.263 cv
72.0293 151.263 71.7949 151.369 71.6157 151.579 cv
71.5166 151.695 71.4219 151.874 71.3311 152.114 cv
71.1948 152.084 li
71.3003 151.6 71.479 151.263 71.7314 151.075 cv
71.9834 150.886 72.2539 150.792 72.543 150.792 cv
72.8994 150.792 73.188 150.904 73.4082 151.128 cv
73.6284 151.353 73.7388 151.627 73.7388 151.952 cv
73.7388 152.297 73.6196 152.63 73.3813 152.951 cv
73.1426 153.271 72.6245 153.841 71.8271 154.662 cv
73.2798 154.662 li
73.4824 154.662 73.625 154.637 73.707 154.588 cv
73.7896 154.541 73.8823 154.422 73.9858 154.235 cv
74.0679 154.272 li
73.7168 155.155 li
71.1885 155.155 li
71.1885 155.082 li
cp
f
112.522 146.995 mo
112.522 144.189 li
0 0 0 rgb
@
107.966 154.526 mo
108.082 154.186 108.14 153.695 108.14 153.052 cv
108.14 152.54 108.105 152.131 108.036 151.826 cv
107.905 151.256 107.66 150.972 107.301 150.972 cv
106.943 150.972 106.697 151.265 106.564 151.851 cv
106.495 152.163 106.46 152.574 106.46 153.083 cv
106.46 153.562 106.496 153.945 106.567 154.232 cv
106.702 154.767 106.956 155.035 107.327 155.035 cv
107.637 155.035 107.85 154.865 107.966 154.526 cv
cp
108.447 151.564 mo
108.66 151.975 108.767 152.448 108.767 152.981 cv
108.767 153.401 108.701 153.796 108.57 154.167 cv
108.323 154.866 107.896 155.215 107.289 155.215 cv
106.873 155.215 106.531 155.026 106.264 154.649 cv
105.977 154.246 105.833 153.699 105.833 153.006 cv
105.833 152.462 105.929 151.994 106.121 151.601 cv
106.381 151.068 106.779 150.801 107.317 150.801 cv
107.802 150.801 108.179 151.055 108.447 151.564 cv
cp
.137255 .121569 .12549 rgb
f
109.577 155.125 mo
109.507 155.054 109.473 154.969 109.473 154.87 cv
109.473 154.771 109.508 154.686 109.579 154.617 cv
109.649 154.547 109.734 154.512 109.833 154.512 cv
109.932 154.512 110.017 154.547 110.086 154.617 cv
110.156 154.686 110.191 154.771 110.191 154.87 cv
110.191 154.969 110.156 155.054 110.088 155.125 cv
110.02 155.196 109.935 155.231 109.833 155.231 cv
109.732 155.231 109.646 155.196 109.577 155.125 cv
cp
f
112.458 154.526 mo
112.574 154.186 112.632 153.695 112.632 153.052 cv
112.632 152.54 112.597 152.131 112.528 151.826 cv
112.397 151.256 112.152 150.972 111.793 150.972 cv
111.435 150.972 111.189 151.265 111.057 151.851 cv
110.987 152.163 110.952 152.574 110.952 153.083 cv
110.952 153.562 110.988 153.945 111.06 154.232 cv
111.194 154.767 111.448 155.035 111.819 155.035 cv
112.129 155.035 112.342 154.865 112.458 154.526 cv
cp
112.939 151.564 mo
113.152 151.975 113.259 152.448 113.259 152.981 cv
113.259 153.401 113.193 153.796 113.063 154.167 cv
112.815 154.866 112.389 155.215 111.781 155.215 cv
111.365 155.215 111.023 155.026 110.756 154.649 cv
110.469 154.246 110.326 153.699 110.326 153.006 cv
110.326 152.462 110.421 151.994 110.613 151.601 cv
110.873 151.068 111.271 150.801 111.81 150.801 cv
112.294 150.801 112.671 151.055 112.939 151.564 cv
cp
f
115.458 154.526 mo
115.574 154.186 115.632 153.695 115.632 153.052 cv
115.632 152.54 115.597 152.131 115.528 151.826 cv
115.397 151.256 115.152 150.972 114.793 150.972 cv
114.435 150.972 114.189 151.265 114.057 151.851 cv
113.987 152.163 113.952 152.574 113.952 153.083 cv
113.952 153.562 113.988 153.945 114.06 154.232 cv
114.194 154.767 114.448 155.035 114.819 155.035 cv
115.129 155.035 115.342 154.865 115.458 154.526 cv
cp
115.939 151.564 mo
116.152 151.975 116.259 152.448 116.259 152.981 cv
116.259 153.401 116.193 153.796 116.063 154.167 cv
115.815 154.866 115.389 155.215 114.781 155.215 cv
114.365 155.215 114.023 155.026 113.756 154.649 cv
113.469 154.246 113.326 153.699 113.326 153.006 cv
113.326 152.462 113.421 151.994 113.613 151.601 cv
113.873 151.068 114.271 150.801 114.81 150.801 cv
115.294 150.801 115.671 151.055 115.939 151.564 cv
cp
f
117.228 154.78 mo
117.423 154.916 117.573 154.984 117.679 154.984 cv
117.922 154.984 118.134 154.876 118.316 154.663 cv
118.498 154.449 118.588 154.185 118.588 153.874 cv
118.588 153.327 118.297 152.934 117.714 152.693 cv
117.391 152.56 117.09 152.494 116.811 152.494 cv
116.764 152.494 116.735 152.493 116.724 152.489 cv
116.712 152.486 116.698 152.475 116.681 152.456 cv
116.685 152.439 116.689 152.424 116.692 152.414 cv
116.695 152.402 116.699 152.39 116.703 152.38 cv
117.393 150.868 li
118.75 150.868 li
118.817 150.868 118.87 150.856 118.906 150.833 cv
118.943 150.809 118.991 150.766 119.05 150.703 cv
119.101 150.748 li
118.857 151.333 li
118.849 151.352 118.826 151.364 118.788 151.369 cv
118.75 151.375 118.708 151.376 118.664 151.376 cv
117.438 151.376 li
117.168 151.93 li
117.515 151.99 117.769 152.045 117.929 152.098 cv
118.193 152.187 118.414 152.318 118.591 152.491 cv
118.743 152.64 118.858 152.809 118.936 152.996 cv
119.014 153.182 119.053 153.379 119.053 153.588 cv
119.053 154.055 118.887 154.444 118.554 154.756 cv
118.222 155.068 117.801 155.224 117.292 155.224 cv
117.085 155.224 116.918 155.205 116.792 155.165 cv
116.58 155.099 116.475 154.982 116.475 154.813 cv
116.475 154.75 116.498 154.695 116.543 154.647 cv
116.588 154.599 116.659 154.576 116.753 154.576 cv
116.874 154.576 117.032 154.644 117.228 154.78 cv
cp
f
146.771 146.995 mo
146.771 144.189 li
0 0 0 rgb
@
144.216 154.526 mo
144.332 154.186 144.39 153.695 144.39 153.052 cv
144.39 152.54 144.355 152.131 144.285 151.826 cv
144.154 151.256 143.91 150.972 143.552 150.972 cv
143.192 150.972 142.947 151.265 142.814 151.851 cv
142.744 152.163 142.71 152.574 142.71 153.083 cv
142.71 153.562 142.746 153.945 142.817 154.232 cv
142.952 154.767 143.205 155.035 143.577 155.035 cv
143.887 155.035 144.1 154.865 144.216 154.526 cv
cp
144.697 151.564 mo
144.91 151.975 145.017 152.448 145.017 152.981 cv
145.017 153.401 144.951 153.796 144.82 154.167 cv
144.573 154.866 144.146 155.215 143.539 155.215 cv
143.123 155.215 142.781 155.026 142.514 154.649 cv
142.227 154.246 142.083 153.699 142.083 153.006 cv
142.083 152.462 142.18 151.994 142.371 151.601 cv
142.631 151.068 143.029 150.801 143.567 150.801 cv
144.053 150.801 144.429 151.055 144.697 151.564 cv
cp
.137255 .121569 .12549 rgb
f
145.827 155.125 mo
145.757 155.054 145.723 154.969 145.723 154.87 cv
145.723 154.771 145.758 154.686 145.828 154.617 cv
145.899 154.547 145.984 154.512 146.083 154.512 cv
146.183 154.512 146.267 154.547 146.336 154.617 cv
146.406 154.686 146.44 154.771 146.44 154.87 cv
146.44 154.969 146.406 155.054 146.338 155.125 cv
146.27 155.196 146.185 155.231 146.083 155.231 cv
145.981 155.231 145.896 155.196 145.827 155.125 cv
cp
f
148.708 154.526 mo
148.824 154.186 148.882 153.695 148.882 153.052 cv
148.882 152.54 148.848 152.131 148.777 151.826 cv
148.646 151.256 148.402 150.972 148.044 150.972 cv
147.685 150.972 147.439 151.265 147.307 151.851 cv
147.236 152.163 147.202 152.574 147.202 153.083 cv
147.202 153.562 147.238 153.945 147.31 154.232 cv
147.444 154.767 147.697 155.035 148.069 155.035 cv
148.379 155.035 148.592 154.865 148.708 154.526 cv
cp
149.189 151.564 mo
149.402 151.975 149.509 152.448 149.509 152.981 cv
149.509 153.401 149.443 153.796 149.313 154.167 cv
149.065 154.866 148.639 155.215 148.031 155.215 cv
147.615 155.215 147.273 155.026 147.006 154.649 cv
146.719 154.246 146.575 153.699 146.575 153.006 cv
146.575 152.462 146.672 151.994 146.863 151.601 cv
147.123 151.068 147.521 150.801 148.06 150.801 cv
148.545 150.801 148.921 151.055 149.189 151.564 cv
cp
f
151.45 150.832 mo
151.451 150.836 151.452 150.848 151.452 150.868 cv
151.452 154.677 li
151.452 154.839 151.495 154.943 151.582 154.987 cv
151.669 155.032 151.831 155.058 152.068 155.066 cv
152.068 155.155 li
150.281 155.155 li
150.281 155.06 li
150.536 155.047 150.703 155.012 150.781 154.956 cv
150.859 154.899 150.898 154.775 150.898 154.585 cv
150.898 151.656 li
150.898 151.554 150.886 151.477 150.86 151.424 cv
150.835 151.372 150.78 151.345 150.695 151.345 cv
150.641 151.345 150.569 151.361 150.482 151.391 cv
150.395 151.421 150.313 151.454 150.236 151.488 cv
150.236 151.399 li
151.398 150.807 li
151.436 150.807 li
151.444 150.818 151.449 150.826 151.45 150.832 cv
cp
f
181.021 146.995 mo
181.021 144.189 li
0 0 0 rgb
@
177.466 154.526 mo
177.582 154.186 177.64 153.695 177.64 153.052 cv
177.64 152.54 177.605 152.131 177.535 151.826 cv
177.404 151.256 177.16 150.972 176.802 150.972 cv
176.442 150.972 176.197 151.265 176.064 151.851 cv
175.994 152.163 175.96 152.574 175.96 153.083 cv
175.96 153.562 175.996 153.945 176.067 154.232 cv
176.202 154.767 176.455 155.035 176.827 155.035 cv
177.137 155.035 177.35 154.865 177.466 154.526 cv
cp
177.947 151.564 mo
178.16 151.975 178.267 152.448 178.267 152.981 cv
178.267 153.401 178.201 153.796 178.07 154.167 cv
177.823 154.866 177.396 155.215 176.789 155.215 cv
176.373 155.215 176.031 155.026 175.764 154.649 cv
175.477 154.246 175.333 153.699 175.333 153.006 cv
175.333 152.462 175.43 151.994 175.621 151.601 cv
175.881 151.068 176.279 150.801 176.817 150.801 cv
177.303 150.801 177.679 151.055 177.947 151.564 cv
cp
.137255 .121569 .12549 rgb
f
179.077 155.125 mo
179.007 155.054 178.973 154.969 178.973 154.87 cv
178.973 154.771 179.008 154.686 179.078 154.617 cv
179.149 154.547 179.234 154.512 179.333 154.512 cv
179.433 154.512 179.517 154.547 179.586 154.617 cv
179.656 154.686 179.69 154.771 179.69 154.87 cv
179.69 154.969 179.656 155.054 179.588 155.125 cv
179.52 155.196 179.435 155.231 179.333 155.231 cv
179.231 155.231 179.146 155.196 179.077 155.125 cv
cp
f
181.958 154.526 mo
182.074 154.186 182.132 153.695 182.132 153.052 cv
182.132 152.54 182.098 152.131 182.027 151.826 cv
181.896 151.256 181.652 150.972 181.294 150.972 cv
180.935 150.972 180.689 151.265 180.557 151.851 cv
180.486 152.163 180.452 152.574 180.452 153.083 cv
180.452 153.562 180.488 153.945 180.56 154.232 cv
180.694 154.767 180.947 155.035 181.319 155.035 cv
181.629 155.035 181.842 154.865 181.958 154.526 cv
cp
182.439 151.564 mo
182.652 151.975 182.759 152.448 182.759 152.981 cv
182.759 153.401 182.693 153.796 182.563 154.167 cv
182.315 154.866 181.889 155.215 181.281 155.215 cv
180.865 155.215 180.523 155.026 180.256 154.649 cv
179.969 154.246 179.825 153.699 179.825 153.006 cv
179.825 152.462 179.922 151.994 180.113 151.601 cv
180.373 151.068 180.771 150.801 181.31 150.801 cv
181.795 150.801 182.171 151.055 182.439 151.564 cv
cp
f
182.962 155.082 mo
183.733 154.281 184.258 153.693 184.534 153.318 cv
184.811 152.943 184.948 152.577 184.948 152.221 cv
184.948 151.909 184.864 151.671 184.695 151.508 cv
184.526 151.344 184.325 151.263 184.091 151.263 cv
183.802 151.263 183.568 151.369 183.389 151.579 cv
183.289 151.695 183.194 151.874 183.104 152.114 cv
182.968 152.084 li
183.073 151.6 183.252 151.263 183.504 151.075 cv
183.756 150.886 184.026 150.792 184.315 150.792 cv
184.672 150.792 184.961 150.904 185.181 151.128 cv
185.401 151.353 185.512 151.627 185.512 151.952 cv
185.512 152.297 185.393 152.63 185.154 152.951 cv
184.916 153.271 184.397 153.841 183.6 154.662 cv
185.053 154.662 li
185.255 154.662 185.397 154.637 185.48 154.588 cv
185.563 154.541 185.655 154.422 185.759 154.235 cv
185.841 154.272 li
185.489 155.155 li
182.962 155.155 li
182.962 155.082 li
cp
f
226.297 146.995 mo
226.297 144.189 li
0 0 0 rgb
@
222.739 154.526 mo
222.855 154.186 222.913 153.695 222.913 153.052 cv
222.913 152.54 222.879 152.131 222.809 151.826 cv
222.678 151.256 222.434 150.972 222.075 150.972 cv
221.716 150.972 221.471 151.265 221.338 151.851 cv
221.268 152.163 221.233 152.574 221.233 153.083 cv
221.233 153.562 221.27 153.945 221.341 154.232 cv
221.476 154.767 221.729 155.035 222.101 155.035 cv
222.41 155.035 222.623 154.865 222.739 154.526 cv
cp
223.221 151.564 mo
223.434 151.975 223.54 152.448 223.54 152.981 cv
223.54 153.401 223.475 153.796 223.344 154.167 cv
223.097 154.866 222.67 155.215 222.063 155.215 cv
221.646 155.215 221.305 155.026 221.037 154.649 cv
220.75 154.246 220.606 153.699 220.606 153.006 cv
220.606 152.462 220.703 151.994 220.895 151.601 cv
221.154 151.068 221.553 150.801 222.091 150.801 cv
222.576 150.801 222.952 151.055 223.221 151.564 cv
cp
.137255 .121569 .12549 rgb
f
224.351 155.125 mo
224.28 155.054 224.246 154.969 224.246 154.87 cv
224.246 154.771 224.281 154.686 224.352 154.617 cv
224.423 154.547 224.508 154.512 224.606 154.512 cv
224.706 154.512 224.79 154.547 224.859 154.617 cv
224.93 154.686 224.964 154.771 224.964 154.87 cv
224.964 154.969 224.93 155.054 224.861 155.125 cv
224.793 155.196 224.708 155.231 224.606 155.231 cv
224.505 155.231 224.42 155.196 224.351 155.125 cv
cp
f
227.239 154.526 mo
227.355 154.186 227.413 153.695 227.413 153.052 cv
227.413 152.54 227.379 152.131 227.309 151.826 cv
227.178 151.256 226.934 150.972 226.575 150.972 cv
226.216 150.972 225.971 151.265 225.838 151.851 cv
225.768 152.163 225.733 152.574 225.733 153.083 cv
225.733 153.562 225.77 153.945 225.841 154.232 cv
225.976 154.767 226.229 155.035 226.601 155.035 cv
226.91 155.035 227.123 154.865 227.239 154.526 cv
cp
227.721 151.564 mo
227.934 151.975 228.04 152.448 228.04 152.981 cv
228.04 153.401 227.975 153.796 227.844 154.167 cv
227.597 154.866 227.17 155.215 226.563 155.215 cv
226.146 155.215 225.805 155.026 225.537 154.649 cv
225.25 154.246 225.106 153.699 225.106 153.006 cv
225.106 152.462 225.203 151.994 225.395 151.601 cv
225.654 151.068 226.053 150.801 226.591 150.801 cv
227.076 150.801 227.452 151.055 227.721 151.564 cv
cp
f
229.008 154.78 mo
229.203 154.916 229.354 154.984 229.46 154.984 cv
229.702 154.984 229.915 154.876 230.097 154.663 cv
230.278 154.449 230.369 154.185 230.369 153.874 cv
230.369 153.327 230.077 152.934 229.494 152.693 cv
229.171 152.56 228.87 152.494 228.592 152.494 cv
228.545 152.494 228.516 152.493 228.504 152.489 cv
228.493 152.486 228.479 152.475 228.462 152.456 cv
228.466 152.439 228.47 152.424 228.473 152.414 cv
228.476 152.402 228.479 152.39 228.483 152.38 cv
229.174 150.868 li
230.53 150.868 li
230.598 150.868 230.65 150.856 230.688 150.833 cv
230.724 150.809 230.772 150.766 230.831 150.703 cv
230.882 150.748 li
230.638 151.333 li
230.63 151.352 230.606 151.364 230.568 151.369 cv
230.53 151.375 230.489 151.376 230.444 151.376 cv
229.219 151.376 li
228.949 151.93 li
229.296 151.99 229.549 152.045 229.71 152.098 cv
229.974 152.187 230.194 152.318 230.372 152.491 cv
230.523 152.64 230.639 152.809 230.717 152.996 cv
230.795 153.182 230.834 153.379 230.834 153.588 cv
230.834 154.055 230.668 154.444 230.335 154.756 cv
230.003 155.068 229.582 155.224 229.073 155.224 cv
228.866 155.224 228.699 155.205 228.572 155.165 cv
228.361 155.099 228.256 154.982 228.256 154.813 cv
228.256 154.75 228.278 154.695 228.323 154.647 cv
228.369 154.599 228.439 154.576 228.534 154.576 cv
228.654 154.576 228.813 154.644 229.008 154.78 cv
cp
f
260.547 146.995 mo
260.547 144.189 li
0 0 0 rgb
@
258.981 154.526 mo
259.098 154.186 259.155 153.695 259.155 153.052 cv
259.155 152.54 259.121 152.131 259.051 151.826 cv
258.92 151.256 258.676 150.972 258.317 150.972 cv
257.958 150.972 257.713 151.265 257.58 151.851 cv
257.51 152.163 257.476 152.574 257.476 153.083 cv
257.476 153.562 257.512 153.945 257.583 154.232 cv
257.718 154.767 257.971 155.035 258.343 155.035 cv
258.652 155.035 258.865 154.865 258.981 154.526 cv
cp
259.463 151.564 mo
259.676 151.975 259.782 152.448 259.782 152.981 cv
259.782 153.401 259.717 153.796 259.586 154.167 cv
259.339 154.866 258.912 155.215 258.305 155.215 cv
257.889 155.215 257.547 155.026 257.279 154.649 cv
256.992 154.246 256.849 153.699 256.849 153.006 cv
256.849 152.462 256.945 151.994 257.137 151.601 cv
257.396 151.068 257.795 150.801 258.333 150.801 cv
258.818 150.801 259.194 151.055 259.463 151.564 cv
cp
.137255 .121569 .12549 rgb
f
260.593 155.125 mo
260.522 155.054 260.488 154.969 260.488 154.87 cv
260.488 154.771 260.523 154.686 260.594 154.617 cv
260.665 154.547 260.75 154.512 260.849 154.512 cv
260.948 154.512 261.032 154.547 261.102 154.617 cv
261.172 154.686 261.206 154.771 261.206 154.87 cv
261.206 154.969 261.172 155.054 261.104 155.125 cv
261.035 155.196 260.95 155.231 260.849 155.231 cv
260.747 155.231 260.662 155.196 260.593 155.125 cv
cp
f
263.231 150.832 mo
263.232 150.836 263.233 150.848 263.233 150.868 cv
263.233 154.677 li
263.233 154.839 263.276 154.943 263.363 154.987 cv
263.45 155.032 263.612 155.058 263.85 155.066 cv
263.85 155.155 li
262.063 155.155 li
262.063 155.06 li
262.317 155.047 262.484 155.012 262.563 154.956 cv
262.641 154.899 262.68 154.775 262.68 154.585 cv
262.68 151.656 li
262.68 151.554 262.667 151.477 262.642 151.424 cv
262.616 151.372 262.562 151.345 262.477 151.345 cv
262.422 151.345 262.351 151.361 262.264 151.391 cv
262.176 151.421 262.094 151.454 262.018 151.488 cv
262.018 151.399 li
263.18 150.807 li
263.217 150.807 li
263.226 150.818 263.23 150.826 263.231 150.832 cv
cp
f
28.2568 137.229 mo
31.0625 137.229 li
28.2568 142.112 mo
29.9404 142.112 li
28.2568 146.995 mo
29.9404 146.995 li
0 0 0 rgb
@
10.0249 138.357 mo
10.0249 137.994 li
13.3452 137.994 li
13.3452 138.357 li
10.0249 138.357 li
cp
.137255 .121569 .12549 rgb
f
17.0283 139.213 mo
17.1445 138.874 17.2026 138.382 17.2026 137.74 cv
17.2026 137.227 17.1675 136.819 17.0981 136.513 cv
16.9673 135.944 16.7227 135.66 16.3638 135.66 cv
16.0054 135.66 15.7598 135.953 15.627 136.539 cv
15.5571 136.85 15.5225 137.261 15.5225 137.771 cv
15.5225 138.25 15.5581 138.632 15.6299 138.919 cv
15.7646 139.455 16.0181 139.722 16.3892 139.722 cv
16.6992 139.722 16.9126 139.552 17.0283 139.213 cv
cp
17.5093 136.251 mo
17.7222 136.663 17.8291 137.135 17.8291 137.668 cv
17.8291 138.088 17.7637 138.484 17.6328 138.855 cv
17.3857 139.553 16.959 139.903 16.3511 139.903 cv
15.9355 139.903 15.5938 139.713 15.3262 139.336 cv
15.0391 138.933 14.896 138.386 14.896 137.694 cv
14.896 137.15 14.9917 136.681 15.1836 136.289 cv
15.4434 135.755 15.8418 135.489 16.3799 135.489 cv
16.8647 135.489 17.2412 135.743 17.5093 136.251 cv
cp
f
18.6392 139.812 mo
18.5698 139.742 18.5352 139.657 18.5352 139.557 cv
18.5352 139.458 18.5703 139.374 18.6411 139.304 cv
18.7114 139.235 18.7964 139.2 18.8955 139.2 cv
18.9946 139.2 19.0791 139.235 19.1489 139.304 cv
19.2183 139.374 19.2534 139.458 19.2534 139.557 cv
19.2534 139.657 19.2188 139.742 19.1504 139.812 cv
19.082 139.883 18.9971 139.918 18.8955 139.918 cv
18.7944 139.918 18.709 139.883 18.6392 139.812 cv
cp
f
21.5439 139.213 mo
21.6602 138.874 21.7183 138.382 21.7183 137.74 cv
21.7183 137.227 21.6831 136.819 21.6138 136.513 cv
21.4829 135.944 21.2383 135.66 20.8794 135.66 cv
20.521 135.66 20.2754 135.953 20.1426 136.539 cv
20.0728 136.85 20.0381 137.261 20.0381 137.771 cv
20.0381 138.25 20.0737 138.632 20.1455 138.919 cv
20.2803 139.455 20.5337 139.722 20.9048 139.722 cv
21.2148 139.722 21.4282 139.552 21.5439 139.213 cv
cp
22.0249 136.251 mo
22.2378 136.663 22.3447 137.135 22.3447 137.668 cv
22.3447 138.088 22.2793 138.484 22.1484 138.855 cv
21.9014 139.553 21.4746 139.903 20.8667 139.903 cv
20.4512 139.903 20.1094 139.713 19.8418 139.336 cv
19.5547 138.933 19.4116 138.386 19.4116 137.694 cv
19.4116 137.15 19.5073 136.681 19.6992 136.289 cv
19.959 135.755 20.3574 135.489 20.8955 135.489 cv
21.3804 135.489 21.7568 135.743 22.0249 136.251 cv
cp
f
24.2437 136.148 mo
22.6904 138.342 li
24.2437 138.342 li
24.2437 136.148 li
cp
24.4521 135.495 mo
24.7529 135.495 li
24.7529 138.342 li
25.4141 138.342 li
25.4141 138.763 li
24.7529 138.763 li
24.7529 139.842 li
24.25 139.842 li
24.25 138.763 li
22.4272 138.763 li
22.4272 138.342 li
24.4521 135.495 li
cp
f
28.2568 117.696 mo
31.0625 117.696 li
28.2568 122.579 mo
29.9404 122.579 li
28.2568 127.462 mo
29.9404 127.462 li
28.2568 132.346 mo
29.9404 132.346 li
0 0 0 rgb
@
10.0249 118.826 mo
10.0249 118.462 li
13.3452 118.462 li
13.3452 118.826 li
10.0249 118.826 li
cp
.137255 .121569 .12549 rgb
f
17.0283 119.682 mo
17.1445 119.342 17.2026 118.851 17.2026 118.208 cv
17.2026 117.696 17.1675 117.288 17.0981 116.982 cv
16.9673 116.413 16.7227 116.128 16.3638 116.128 cv
16.0054 116.128 15.7598 116.421 15.627 117.007 cv
15.5571 117.319 15.5225 117.73 15.5225 118.24 cv
15.5225 118.718 15.5581 119.101 15.6299 119.388 cv
15.7646 119.923 16.0181 120.191 16.3892 120.191 cv
16.6992 120.191 16.9126 120.021 17.0283 119.682 cv
cp
17.5093 116.72 mo
17.7222 117.131 17.8291 117.604 17.8291 118.137 cv
17.8291 118.557 17.7637 118.953 17.6328 119.324 cv
17.3857 120.022 16.959 120.372 16.3511 120.372 cv
15.9355 120.372 15.5938 120.182 15.3262 119.805 cv
15.0391 119.402 14.896 118.855 14.896 118.163 cv
14.896 117.619 14.9917 117.15 15.1836 116.757 cv
15.4434 116.224 15.8418 115.958 16.3799 115.958 cv
16.8647 115.958 17.2412 116.211 17.5093 116.72 cv
cp
f
18.6392 120.281 mo
18.5698 120.21 18.5352 120.125 18.5352 120.026 cv
18.5352 119.927 18.5703 119.842 18.6411 119.773 cv
18.7114 119.704 18.7964 119.668 18.8955 119.668 cv
18.9946 119.668 19.0791 119.704 19.1489 119.773 cv
19.2183 119.842 19.2534 119.927 19.2534 120.026 cv
19.2534 120.125 19.2188 120.21 19.1504 120.281 cv
19.082 120.352 18.9971 120.387 18.8955 120.387 cv
18.7944 120.387 18.709 120.352 18.6392 120.281 cv
cp
f
21.5439 119.682 mo
21.6602 119.342 21.7183 118.851 21.7183 118.208 cv
21.7183 117.696 21.6831 117.288 21.6138 116.982 cv
21.4829 116.413 21.2383 116.128 20.8794 116.128 cv
20.521 116.128 20.2754 116.421 20.1426 117.007 cv
20.0728 117.319 20.0381 117.73 20.0381 118.24 cv
20.0381 118.718 20.0737 119.101 20.1455 119.388 cv
20.2803 119.923 20.5337 120.191 20.9048 120.191 cv
21.2148 120.191 21.4282 120.021 21.5439 119.682 cv
cp
22.0249 116.72 mo
22.2378 117.131 22.3447 117.604 22.3447 118.137 cv
22.3447 118.557 22.2793 118.953 22.1484 119.324 cv
21.9014 120.022 21.4746 120.372 20.8667 120.372 cv
20.4512 120.372 20.1094 120.182 19.8418 119.805 cv
19.5547 119.402 19.4116 118.855 19.4116 118.163 cv
19.4116 117.619 19.5073 117.15 19.6992 116.757 cv
19.959 116.224 20.3574 115.958 20.8955 115.958 cv
21.3804 115.958 21.7568 116.211 22.0249 116.72 cv
cp
f
22.5474 120.238 mo
23.3193 119.437 23.8438 118.849 24.1201 118.474 cv
24.3965 118.099 24.5347 117.733 24.5347 117.377 cv
24.5347 117.065 24.4502 116.828 24.2813 116.665 cv
24.1128 116.5 23.9111 116.419 23.6772 116.419 cv
23.3882 116.419 23.1538 116.525 22.9746 116.735 cv
22.8755 116.851 22.7808 117.03 22.6899 117.27 cv
22.5537 117.241 li
22.6592 116.756 22.8379 116.419 23.0903 116.231 cv
23.3423 116.042 23.6128 115.948 23.9019 115.948 cv
24.2583 115.948 24.5469 116.06 24.7671 116.285 cv
24.9873 116.509 25.0977 116.784 25.0977 117.108 cv
25.0977 117.454 24.9785 117.787 24.7402 118.107 cv
24.5015 118.427 23.9834 118.998 23.186 119.818 cv
24.6387 119.818 li
24.8413 119.818 24.9839 119.793 25.0659 119.745 cv
25.1484 119.697 25.2412 119.579 25.3447 119.391 cv
25.4268 119.428 li
25.0757 120.311 li
22.5474 120.311 li
22.5474 120.238 li
cp
f
28.2568 98.1636 mo
31.0625 98.1636 li
28.2568 103.046 mo
29.9404 103.046 li
28.2568 107.93 mo
29.9404 107.93 li
28.2568 112.813 mo
29.9404 112.813 li
0 0 0 rgb
@
17.0283 100.159 mo
17.1445 99.8188 17.2026 99.3276 17.2026 98.6851 cv
17.2026 98.1724 17.1675 97.7642 17.0981 97.4585 cv
16.9673 96.8892 16.7227 96.605 16.3638 96.605 cv
16.0054 96.605 15.7598 96.8979 15.627 97.4839 cv
15.5571 97.7954 15.5225 98.2065 15.5225 98.7163 cv
15.5225 99.1948 15.5581 99.5776 15.6299 99.8647 cv
15.7646 100.4 16.0181 100.667 16.3892 100.667 cv
16.6992 100.667 16.9126 100.498 17.0283 100.159 cv
cp
17.5093 97.1968 mo
17.7222 97.6079 17.8291 98.0806 17.8291 98.6138 cv
17.8291 99.0337 17.7637 99.4292 17.6328 99.8003 cv
17.3857 100.499 16.959 100.848 16.3511 100.848 cv
15.9355 100.848 15.5938 100.659 15.3262 100.282 cv
15.0391 99.8784 14.896 99.3315 14.896 98.6392 cv
14.896 98.0952 14.9917 97.6265 15.1836 97.2339 cv
15.4434 96.7007 15.8418 96.4341 16.3799 96.4341 cv
16.8647 96.4341 17.2412 96.688 17.5093 97.1968 cv
cp
.137255 .121569 .12549 rgb
f
18.6392 100.757 mo
18.5698 100.687 18.5352 100.602 18.5352 100.502 cv
18.5352 100.404 18.5703 100.319 18.6411 100.25 cv
18.7114 100.18 18.7964 100.145 18.8955 100.145 cv
18.9946 100.145 19.0791 100.18 19.1489 100.25 cv
19.2183 100.319 19.2534 100.404 19.2534 100.502 cv
19.2534 100.602 19.2188 100.687 19.1504 100.757 cv
19.082 100.829 18.9971 100.864 18.8955 100.864 cv
18.7944 100.864 18.709 100.829 18.6392 100.757 cv
cp
f
21.5439 100.159 mo
21.6602 99.8188 21.7183 99.3276 21.7183 98.6851 cv
21.7183 98.1724 21.6831 97.7642 21.6138 97.4585 cv
21.4829 96.8892 21.2383 96.605 20.8794 96.605 cv
20.521 96.605 20.2754 96.8979 20.1426 97.4839 cv
20.0728 97.7954 20.0381 98.2065 20.0381 98.7163 cv
20.0381 99.1948 20.0737 99.5776 20.1455 99.8647 cv
20.2803 100.4 20.5337 100.667 20.9048 100.667 cv
21.2148 100.667 21.4282 100.498 21.5439 100.159 cv
cp
22.0249 97.1968 mo
22.2378 97.6079 22.3447 98.0806 22.3447 98.6138 cv
22.3447 99.0337 22.2793 99.4292 22.1484 99.8003 cv
21.9014 100.499 21.4746 100.848 20.8667 100.848 cv
20.4512 100.848 20.1094 100.659 19.8418 100.282 cv
19.5547 99.8784 19.4116 99.3315 19.4116 98.6392 cv
19.4116 98.0952 19.5073 97.6265 19.6992 97.2339 cv
19.959 96.7007 20.3574 96.4341 20.8955 96.4341 cv
21.3804 96.4341 21.7568 96.688 22.0249 97.1968 cv
cp
f
24.5439 100.159 mo
24.6602 99.8188 24.7183 99.3276 24.7183 98.6851 cv
24.7183 98.1724 24.6831 97.7642 24.6138 97.4585 cv
24.4829 96.8892 24.2383 96.605 23.8794 96.605 cv
23.521 96.605 23.2754 96.8979 23.1426 97.4839 cv
23.0728 97.7954 23.0381 98.2065 23.0381 98.7163 cv
23.0381 99.1948 23.0737 99.5776 23.1455 99.8647 cv
23.2803 100.4 23.5337 100.667 23.9048 100.667 cv
24.2148 100.667 24.4282 100.498 24.5439 100.159 cv
cp
25.0249 97.1968 mo
25.2378 97.6079 25.3447 98.0806 25.3447 98.6138 cv
25.3447 99.0337 25.2793 99.4292 25.1484 99.8003 cv
24.9014 100.499 24.4746 100.848 23.8667 100.848 cv
23.4512 100.848 23.1094 100.659 22.8418 100.282 cv
22.5547 99.8784 22.4116 99.3315 22.4116 98.6392 cv
22.4116 98.0952 22.5073 97.6265 22.6992 97.2339 cv
22.959 96.7007 23.3574 96.4341 23.8955 96.4341 cv
24.3804 96.4341 24.7568 96.688 25.0249 97.1968 cv
cp
f
28.2568 78.6313 mo
31.0625 78.6313 li
28.2568 83.5151 mo
29.9404 83.5151 li
28.2568 88.3979 mo
29.9404 88.3979 li
28.2568 93.2808 mo
29.9404 93.2808 li
0 0 0 rgb
@
17.0283 80.6274 mo
17.1445 80.2876 17.2026 79.7964 17.2026 79.1538 cv
17.2026 78.6411 17.1675 78.2329 17.0981 77.9272 cv
16.9673 77.3579 16.7227 77.0737 16.3638 77.0737 cv
16.0054 77.0737 15.7598 77.3667 15.627 77.9526 cv
15.5571 78.2642 15.5225 78.6753 15.5225 79.1851 cv
15.5225 79.6636 15.5581 80.0464 15.6299 80.3335 cv
15.7646 80.8687 16.0181 81.1362 16.3892 81.1362 cv
16.6992 81.1362 16.9126 80.9663 17.0283 80.6274 cv
cp
17.5093 77.6655 mo
17.7222 78.0767 17.8291 78.5493 17.8291 79.0825 cv
17.8291 79.5024 17.7637 79.8979 17.6328 80.269 cv
17.3857 80.9673 16.959 81.3169 16.3511 81.3169 cv
15.9355 81.3169 15.5938 81.1274 15.3262 80.7505 cv
15.0391 80.3472 14.896 79.8003 14.896 79.1079 cv
14.896 78.564 14.9917 78.0952 15.1836 77.7026 cv
15.4434 77.1694 15.8418 76.9028 16.3799 76.9028 cv
16.8647 76.9028 17.2412 77.1567 17.5093 77.6655 cv
cp
.137255 .121569 .12549 rgb
f
18.6392 81.2261 mo
18.5698 81.1558 18.5352 81.0708 18.5352 80.9712 cv
18.5352 80.8726 18.5703 80.7876 18.6411 80.7183 cv
18.7114 80.6489 18.7964 80.6138 18.8955 80.6138 cv
18.9946 80.6138 19.0791 80.6489 19.1489 80.7183 cv
19.2183 80.7876 19.2534 80.8726 19.2534 80.9712 cv
19.2534 81.0708 19.2188 81.1558 19.1504 81.2261 cv
19.082 81.2974 18.9971 81.3325 18.8955 81.3325 cv
18.7944 81.3325 18.709 81.2974 18.6392 81.2261 cv
cp
f
21.5439 80.6274 mo
21.6602 80.2876 21.7183 79.7964 21.7183 79.1538 cv
21.7183 78.6411 21.6831 78.2329 21.6138 77.9272 cv
21.4829 77.3579 21.2383 77.0737 20.8794 77.0737 cv
20.521 77.0737 20.2754 77.3667 20.1426 77.9526 cv
20.0728 78.2642 20.0381 78.6753 20.0381 79.1851 cv
20.0381 79.6636 20.0737 80.0464 20.1455 80.3335 cv
20.2803 80.8687 20.5337 81.1362 20.9048 81.1362 cv
21.2148 81.1362 21.4282 80.9663 21.5439 80.6274 cv
cp
22.0249 77.6655 mo
22.2378 78.0767 22.3447 78.5493 22.3447 79.0825 cv
22.3447 79.5024 22.2793 79.8979 22.1484 80.269 cv
21.9014 80.9673 21.4746 81.3169 20.8667 81.3169 cv
20.4512 81.3169 20.1094 81.1274 19.8418 80.7505 cv
19.5547 80.3472 19.4116 79.8003 19.4116 79.1079 cv
19.4116 78.564 19.5073 78.0952 19.6992 77.7026 cv
19.959 77.1694 20.3574 76.9028 20.8955 76.9028 cv
21.3804 76.9028 21.7568 77.1567 22.0249 77.6655 cv
cp
f
22.5474 81.1831 mo
23.3193 80.3823 23.8438 79.7944 24.1201 79.4194 cv
24.3965 79.0444 24.5347 78.6782 24.5347 78.3228 cv
24.5347 78.0103 24.4502 77.7729 24.2813 77.6099 cv
24.1128 77.4458 23.9111 77.3647 23.6772 77.3647 cv
23.3882 77.3647 23.1538 77.4702 22.9746 77.6802 cv
22.8755 77.7964 22.7808 77.9751 22.6899 78.2153 cv
22.5537 78.186 li
22.6592 77.7017 22.8379 77.3647 23.0903 77.1763 cv
23.3423 76.9878 23.6128 76.8931 23.9019 76.8931 cv
24.2583 76.8931 24.5469 77.0054 24.7671 77.23 cv
24.9873 77.4546 25.0977 77.729 25.0977 78.0532 cv
25.0977 78.3989 24.9785 78.7319 24.7402 79.0522 cv
24.5015 79.3726 23.9834 79.9429 23.186 80.7632 cv
24.6387 80.7632 li
24.8413 80.7632 24.9839 80.7388 25.0659 80.6899 cv
25.1484 80.6421 25.2412 80.5239 25.3447 80.3364 cv
25.4268 80.3735 li
25.0757 81.2563 li
22.5474 81.2563 li
22.5474 81.1831 li
cp
f
28.2568 59.0986 mo
31.0625 59.0986 li
28.2568 63.9819 mo
29.9404 63.9819 li
28.2568 68.8647 mo
29.9404 68.8647 li
28.2568 73.7476 mo
29.9404 73.7476 li
0 0 0 rgb
@
17.0283 61.0879 mo
17.1445 60.7485 17.2026 60.2578 17.2026 59.6147 cv
17.2026 59.1025 17.1675 58.6938 17.0981 58.3882 cv
16.9673 57.8188 16.7227 57.5342 16.3638 57.5342 cv
16.0054 57.5342 15.7598 57.8271 15.627 58.4131 cv
15.5571 58.7251 15.5225 59.1362 15.5225 59.6465 cv
15.5225 60.125 15.5581 60.5073 15.6299 60.7939 cv
15.7646 61.3296 16.0181 61.5972 16.3892 61.5972 cv
16.6992 61.5972 16.9126 61.4272 17.0283 61.0879 cv
cp
17.5093 58.126 mo
17.7222 58.5376 17.8291 59.0098 17.8291 59.5435 cv
17.8291 59.9634 17.7637 60.3589 17.6328 60.73 cv
17.3857 61.4282 16.959 61.7773 16.3511 61.7773 cv
15.9355 61.7773 15.5938 61.5889 15.3262 61.2109 cv
15.0391 60.8081 14.896 60.2607 14.896 59.5688 cv
14.896 59.0249 14.9917 58.5562 15.1836 58.1641 cv
15.4434 57.6304 15.8418 57.3638 16.3799 57.3638 cv
16.8647 57.3638 17.2412 57.6177 17.5093 58.126 cv
cp
.137255 .121569 .12549 rgb
f
18.6392 61.687 mo
18.5698 61.6167 18.5352 61.5317 18.5352 61.4326 cv
18.5352 61.3335 18.5703 61.249 18.6411 61.1792 cv
18.7114 61.1099 18.7964 61.0752 18.8955 61.0752 cv
18.9946 61.0752 19.0791 61.1099 19.1489 61.1792 cv
19.2183 61.249 19.2534 61.3335 19.2534 61.4326 cv
19.2534 61.5317 19.2188 61.6167 19.1504 61.687 cv
19.082 61.7578 18.9971 61.7935 18.8955 61.7935 cv
18.7944 61.7935 18.709 61.7578 18.6392 61.687 cv
cp
f
21.5439 61.0879 mo
21.6602 60.7485 21.7183 60.2578 21.7183 59.6147 cv
21.7183 59.1025 21.6831 58.6938 21.6138 58.3882 cv
21.4829 57.8188 21.2383 57.5342 20.8794 57.5342 cv
20.521 57.5342 20.2754 57.8271 20.1426 58.4131 cv
20.0728 58.7251 20.0381 59.1362 20.0381 59.6465 cv
20.0381 60.125 20.0737 60.5073 20.1455 60.7939 cv
20.2803 61.3296 20.5337 61.5972 20.9048 61.5972 cv
21.2148 61.5972 21.4282 61.4272 21.5439 61.0879 cv
cp
22.0249 58.126 mo
22.2378 58.5376 22.3447 59.0098 22.3447 59.5435 cv
22.3447 59.9634 22.2793 60.3589 22.1484 60.73 cv
21.9014 61.4282 21.4746 61.7773 20.8667 61.7773 cv
20.4512 61.7773 20.1094 61.5889 19.8418 61.2109 cv
19.5547 60.8081 19.4116 60.2607 19.4116 59.5688 cv
19.4116 59.0249 19.5073 58.5562 19.6992 58.1641 cv
19.959 57.6304 20.3574 57.3638 20.8955 57.3638 cv
21.3804 57.3638 21.7568 57.6177 22.0249 58.126 cv
cp
f
24.2437 58.0229 mo
22.6904 60.2173 li
24.2437 60.2173 li
24.2437 58.0229 li
cp
24.4521 57.3696 mo
24.7529 57.3696 li
24.7529 60.2173 li
25.4141 60.2173 li
25.4141 60.6382 li
24.7529 60.6382 li
24.7529 61.7173 li
24.25 61.7173 li
24.25 60.6382 li
22.4272 60.6382 li
22.4272 60.2173 li
24.4521 57.3696 li
cp
f
28.2568 39.5669 mo
31.0625 39.5669 li
28.2568 44.4497 mo
29.9404 44.4497 li
28.2568 49.3325 mo
29.9404 49.3325 li
28.2568 54.2158 mo
29.9404 54.2158 li
0 0 0 rgb
@
17.0283 41.5566 mo
17.1445 41.2173 17.2026 40.7266 17.2026 40.0835 cv
17.2026 39.5713 17.1675 39.1626 17.0981 38.8569 cv
16.9673 38.2876 16.7227 38.0029 16.3638 38.0029 cv
16.0054 38.0029 15.7598 38.2959 15.627 38.8818 cv
15.5571 39.1938 15.5225 39.605 15.5225 40.1152 cv
15.5225 40.5938 15.5581 40.9761 15.6299 41.2627 cv
15.7646 41.7983 16.0181 42.0659 16.3892 42.0659 cv
16.6992 42.0659 16.9126 41.896 17.0283 41.5566 cv
cp
17.5093 38.5947 mo
17.7222 39.0063 17.8291 39.4785 17.8291 40.0122 cv
17.8291 40.4321 17.7637 40.8276 17.6328 41.1987 cv
17.3857 41.897 16.959 42.2461 16.3511 42.2461 cv
15.9355 42.2461 15.5938 42.0576 15.3262 41.6797 cv
15.0391 41.2769 14.896 40.7295 14.896 40.0376 cv
14.896 39.4937 14.9917 39.0249 15.1836 38.6328 cv
15.4434 38.0991 15.8418 37.8325 16.3799 37.8325 cv
16.8647 37.8325 17.2412 38.0864 17.5093 38.5947 cv
cp
.137255 .121569 .12549 rgb
f
18.6392 42.1558 mo
18.5698 42.0854 18.5352 42.0005 18.5352 41.9014 cv
18.5352 41.8022 18.5703 41.7178 18.6411 41.6479 cv
18.7114 41.5786 18.7964 41.5439 18.8955 41.5439 cv
18.9946 41.5439 19.0791 41.5786 19.1489 41.6479 cv
19.2183 41.7178 19.2534 41.8022 19.2534 41.9014 cv
19.2534 42.0005 19.2188 42.0854 19.1504 42.1558 cv
19.082 42.2266 18.9971 42.2622 18.8955 42.2622 cv
18.7944 42.2622 18.709 42.2266 18.6392 42.1558 cv
cp
f
21.5439 41.5566 mo
21.6602 41.2173 21.7183 40.7266 21.7183 40.0835 cv
21.7183 39.5713 21.6831 39.1626 21.6138 38.8569 cv
21.4829 38.2876 21.2383 38.0029 20.8794 38.0029 cv
20.521 38.0029 20.2754 38.2959 20.1426 38.8818 cv
20.0728 39.1938 20.0381 39.605 20.0381 40.1152 cv
20.0381 40.5938 20.0737 40.9761 20.1455 41.2627 cv
20.2803 41.7983 20.5337 42.0659 20.9048 42.0659 cv
21.2148 42.0659 21.4282 41.896 21.5439 41.5566 cv
cp
22.0249 38.5947 mo
22.2378 39.0063 22.3447 39.4785 22.3447 40.0122 cv
22.3447 40.4321 22.2793 40.8276 22.1484 41.1987 cv
21.9014 41.897 21.4746 42.2461 20.8667 42.2461 cv
20.4512 42.2461 20.1094 42.0576 19.8418 41.6797 cv
19.5547 41.2769 19.4116 40.7295 19.4116 40.0376 cv
19.4116 39.4937 19.5073 39.0249 19.6992 38.6328 cv
19.959 38.0991 20.3574 37.8325 20.8955 37.8325 cv
21.3804 37.8325 21.7568 38.0864 22.0249 38.5947 cv
cp
f
24.6738 40.2432 mo
24.5259 39.8804 24.2749 39.6992 23.9209 39.6992 cv
23.5938 39.6992 23.3765 39.7959 23.269 39.9902 cv
23.2056 40.104 23.1738 40.2939 23.1738 40.5596 cv
23.1738 40.9033 23.2471 41.2397 23.394 41.5688 cv
23.5405 41.8979 23.772 42.0625 24.0884 42.0625 cv
24.3394 42.0625 24.522 41.9556 24.6357 41.7417 cv
24.7495 41.5273 24.8066 41.2769 24.8066 40.9902 cv
24.8066 40.7095 24.7622 40.4604 24.6738 40.2432 cv
cp
25.0137 41.7905 mo
24.7661 42.1006 24.4438 42.2559 24.0474 42.2559 cv
23.6758 42.2559 23.3379 42.0815 23.0332 41.7334 cv
22.7285 41.3857 22.5762 40.9224 22.5762 40.3447 cv
22.5762 39.6001 22.8711 38.9609 23.4619 38.4272 cv
23.9893 37.98 24.582 37.7563 25.2402 37.7563 cv
25.2559 37.8608 li
24.9922 37.9092 24.7651 37.9751 24.5742 38.0586 cv
24.3833 38.1421 24.2129 38.2583 24.063 38.4082 cv
23.9092 38.5601 23.7646 38.7529 23.6294 38.9873 cv
23.4946 39.2212 23.4019 39.4536 23.3511 39.6831 cv
23.4819 39.603 23.5947 39.5439 23.6899 39.5059 cv
23.8584 39.4385 24.0283 39.4048 24.1992 39.4048 cv
24.5347 39.4048 24.8159 39.521 25.0439 39.7529 cv
25.272 39.9849 25.3857 40.3159 25.3857 40.7466 cv
25.3857 41.1323 25.2617 41.4805 25.0137 41.7905 cv
cp
f
28.2568 20.0337 mo
31.0625 20.0337 li
28.2568 24.917 mo
29.9404 24.917 li
28.2568 29.8008 mo
29.9404 29.8008 li
28.2568 34.6836 mo
29.9404 34.6836 li
0 0 0 rgb
@
17.0283 22.0254 mo
17.1445 21.686 17.2026 21.1953 17.2026 20.5522 cv
17.2026 20.04 17.1675 19.6313 17.0981 19.3257 cv
16.9673 18.7563 16.7227 18.4717 16.3638 18.4717 cv
16.0054 18.4717 15.7598 18.7646 15.627 19.3506 cv
15.5571 19.6626 15.5225 20.0737 15.5225 20.584 cv
15.5225 21.0625 15.5581 21.4448 15.6299 21.7314 cv
15.7646 22.2671 16.0181 22.5347 16.3892 22.5347 cv
16.6992 22.5347 16.9126 22.3647 17.0283 22.0254 cv
cp
17.5093 19.0635 mo
17.7222 19.4751 17.8291 19.9473 17.8291 20.481 cv
17.8291 20.9009 17.7637 21.2964 17.6328 21.6675 cv
17.3857 22.3657 16.959 22.7148 16.3511 22.7148 cv
15.9355 22.7148 15.5938 22.5264 15.3262 22.1484 cv
15.0391 21.7456 14.896 21.1982 14.896 20.5063 cv
14.896 19.9624 14.9917 19.4937 15.1836 19.1016 cv
15.4434 18.5679 15.8418 18.3013 16.3799 18.3013 cv
16.8647 18.3013 17.2412 18.5552 17.5093 19.0635 cv
cp
.137255 .121569 .12549 rgb
f
18.6392 22.6245 mo
18.5698 22.5542 18.5352 22.4692 18.5352 22.3701 cv
18.5352 22.271 18.5703 22.1865 18.6411 22.1167 cv
18.7114 22.0474 18.7964 22.0127 18.8955 22.0127 cv
18.9946 22.0127 19.0791 22.0474 19.1489 22.1167 cv
19.2183 22.1865 19.2534 22.271 19.2534 22.3701 cv
19.2534 22.4692 19.2188 22.5542 19.1504 22.6245 cv
19.082 22.6953 18.9971 22.731 18.8955 22.731 cv
18.7944 22.731 18.709 22.6953 18.6392 22.6245 cv
cp
f
21.5439 22.0254 mo
21.6602 21.686 21.7183 21.1953 21.7183 20.5522 cv
21.7183 20.04 21.6831 19.6313 21.6138 19.3257 cv
21.4829 18.7563 21.2383 18.4717 20.8794 18.4717 cv
20.521 18.4717 20.2754 18.7646 20.1426 19.3506 cv
20.0728 19.6626 20.0381 20.0737 20.0381 20.584 cv
20.0381 21.0625 20.0737 21.4448 20.1455 21.7314 cv
20.2803 22.2671 20.5337 22.5347 20.9048 22.5347 cv
21.2148 22.5347 21.4282 22.3647 21.5439 22.0254 cv
cp
22.0249 19.0635 mo
22.2378 19.4751 22.3447 19.9473 22.3447 20.481 cv
22.3447 20.9009 22.2793 21.2964 22.1484 21.6675 cv
21.9014 22.3657 21.4746 22.7148 20.8667 22.7148 cv
20.4512 22.7148 20.1094 22.5264 19.8418 22.1484 cv
19.5547 21.7456 19.4116 21.1982 19.4116 20.5063 cv
19.4116 19.9624 19.5073 19.4937 19.6992 19.1016 cv
19.959 18.5679 20.3574 18.3013 20.8955 18.3013 cv
21.3804 18.3013 21.7568 18.5552 22.0249 19.0635 cv
cp
f
24.4365 19.7798 mo
24.5674 19.6177 24.6328 19.4219 24.6328 19.1924 cv
24.6328 18.9922 24.5708 18.8223 24.4478 18.6821 cv
24.3242 18.542 24.1367 18.4717 23.8857 18.4717 cv
23.6919 18.4717 23.5317 18.5332 23.4048 18.6553 cv
23.2783 18.7773 23.2153 18.9258 23.2153 19.1006 cv
23.2153 19.2983 23.2896 19.4824 23.438 19.6519 cv
23.5869 19.8213 23.7827 19.981 24.0249 20.1304 cv
24.2231 19.9917 24.3604 19.8745 24.4365 19.7798 cv
cp
24.5347 22.3418 mo
24.6592 22.207 24.7212 22.0386 24.7212 21.8364 cv
24.7212 21.6069 24.6553 21.4209 24.5234 21.2788 cv
24.3916 21.1367 24.1211 20.9214 23.7119 20.6328 cv
23.5303 20.7466 23.3984 20.894 23.3164 21.0752 cv
23.2339 21.2563 23.1929 21.4312 23.1929 21.5996 cv
23.1929 21.8882 23.2671 22.1177 23.416 22.2881 cv
23.5649 22.459 23.7539 22.5439 23.9839 22.5439 cv
24.2266 22.5439 24.4102 22.4766 24.5347 22.3418 cv
cp
22.9683 19.9624 mo
22.812 19.7598 22.7344 19.5361 22.7344 19.2915 cv
22.7344 19.0132 22.8496 18.7769 23.0806 18.5825 cv
23.3115 18.3887 23.6118 18.2915 23.981 18.2915 cv
24.3203 18.2915 24.5903 18.3833 24.791 18.5669 cv
24.9912 18.7505 25.0913 18.9634 25.0913 19.2061 cv
25.0913 19.4531 24.9893 19.6743 24.7847 19.8706 cv
24.6665 19.9824 24.4756 20.1113 24.2119 20.2568 cv
24.5703 20.5225 24.8271 20.7539 24.9824 20.9512 cv
25.1372 21.1484 25.2148 21.3809 25.2148 21.6489 cv
25.2148 21.9526 25.1006 22.2075 24.8716 22.4146 cv
24.6426 22.6211 24.3364 22.7246 23.9521 22.7246 cv
23.6084 22.7246 23.3135 22.6289 23.0679 22.438 cv
22.8223 22.2471 22.6992 21.9956 22.6992 21.6836 cv
22.6992 21.4155 22.7847 21.1792 22.9556 20.9746 cv
23.0674 20.8418 23.2617 20.6826 23.5381 20.4971 cv
23.2593 20.2734 23.0693 20.0952 22.9683 19.9624 cv
cp
f
28.2568 .501953 mo
31.0625 .501953 li
28.2568 5.38477 mo
29.9404 5.38477 li
28.2568 10.2676 mo
29.9404 10.2676 li
28.2568 15.1509 mo
29.9404 15.1509 li
0 0 0 rgb
@
260.547 .501953 mo
260.547 3.30762 li
226.297 .501953 mo
226.297 3.30762 li
181.021 .501953 mo
181.021 3.30762 li
146.771 .501953 mo
146.771 3.30762 li
112.522 .501953 mo
112.522 3.30762 li
67.2466 .501953 mo
67.2466 3.30762 li
32.9976 .501953 mo
32.9976 3.30762 li
@
.237 lw
255.341 .501953 mo
255.341 1.39063 li
249.521 .501953 mo
249.521 1.39063 li
242.923 .501953 mo
242.923 1.39063 li
235.306 .501953 mo
235.306 1.39063 li
215.271 .501953 mo
215.271 1.39063 li
201.057 .501953 mo
201.057 1.39063 li
141.565 .501953 mo
141.565 1.39063 li
135.746 .501953 mo
135.746 1.39063 li
129.147 .501953 mo
129.147 1.39063 li
121.532 .501953 mo
121.532 1.39063 li
101.497 .501953 mo
101.497 1.39063 li
87.2817 .501953 mo
87.2817 1.39063 li
@
.4 lw
265.288 146.995 mo
263.604 146.995 li
@
265.288 142.112 mo
263.604 142.112 li
@
265.288 137.229 mo
262.48 137.229 li
@
265.288 132.346 mo
263.604 132.346 li
@
265.288 127.462 mo
263.604 127.462 li
@
265.288 122.579 mo
263.604 122.579 li
@
265.288 117.696 mo
262.48 117.696 li
@
265.288 112.813 mo
263.604 112.813 li
@
265.288 107.93 mo
263.604 107.93 li
@
265.288 103.046 mo
263.604 103.046 li
@
265.288 98.1636 mo
262.48 98.1636 li
@
265.288 93.2808 mo
263.604 93.2808 li
@
265.288 88.3979 mo
263.604 88.3979 li
@
265.288 83.5151 mo
263.604 83.5151 li
@
265.288 78.6313 mo
262.48 78.6313 li
@
265.288 73.7476 mo
263.604 73.7476 li
@
265.288 68.8647 mo
263.604 68.8647 li
@
265.288 63.9819 mo
263.604 63.9819 li
@
265.288 59.0986 mo
262.48 59.0986 li
@
265.288 54.2158 mo
263.604 54.2158 li
@
265.288 49.3325 mo
263.604 49.3325 li
@
265.288 44.4497 mo
263.604 44.4497 li
@
265.288 39.5669 mo
262.48 39.5669 li
@
265.288 34.6836 mo
263.604 34.6836 li
@
265.288 29.8008 mo
263.604 29.8008 li
@
265.288 24.917 mo
263.604 24.917 li
@
265.288 20.0337 mo
262.48 20.0337 li
@
265.288 15.1509 mo
263.604 15.1509 li
@
265.288 10.2676 mo
263.604 10.2676 li
@
265.288 5.38477 mo
263.604 5.38477 li
@
265.288 .501953 mo
262.48 .501953 li
@
.2 lw
28.2568 98.1636 mo
265.288 98.1636 li
@
5.14355 4.41162 mo
6.22949 4.1748 7.50977 3.42139 7.50977 2.33447 cv
7.50977 1.40967 6.54102 .719727 5.13086 .719727 cv
2.06543 .719727 li
1.85059 .719727 1.75391 .719727 1.75391 .932617 cv
1.75391 1.0498 1.85059 1.0498 2.05469 1.0498 cv
2.07617 1.0498 2.28125 1.0498 2.46387 1.07129 cv
2.65723 1.09326 2.75391 1.10352 2.75391 1.24365 cv
2.75391 1.28711 2.74316 1.31885 2.71094 1.44824 cv
1.26953 7.2334 li
1.16211 7.65332 1.14063 7.73926 .291016 7.73926 cv
.0976563 7.73926 0 7.73926 0 7.95264 cv
0 8.06934 .129883 8.06934 .151367 8.06934 cv
.453125 8.06934 1.20703 8.0376 1.50781 8.0376 cv
1.80957 8.0376 2.57422 8.06934 2.87598 8.06934 cv
2.96191 8.06934 3.0918 8.06934 3.0918 7.85596 cv
3.0918 7.73877 2.99414 7.73877 2.79004 7.73877 cv
2.3916 7.73877 2.08984 7.73877 2.08984 7.54443 cv
2.08984 7.47998 2.11133 7.42578 2.12207 7.36084 cv
2.83301 4.49854 li
4.11426 4.49854 li
5.09473 4.49854 5.28906 5.10303 5.28906 5.48145 cv
5.28906 5.64307 5.20117 5.97803 5.13574 6.22607 cv
5.05859 6.52783 4.96094 6.92725 4.96094 7.14307 cv
4.96094 8.30908 6.25195 8.30908 6.3916 8.30908 cv
7.30566 8.30908 7.68262 7.21973 7.68262 7.06836 cv
7.68262 6.93896 7.56445 6.93896 7.55371 6.93896 cv
7.45703 6.93896 7.43555 7.01416 7.41406 7.08936 cv
7.14453 7.88574 6.68164 8.06885 6.43457 8.06885 cv
6.08008 8.06885 6.00391 7.83203 6.00391 7.4126 cv
6.00391 7.07861 6.07031 6.52979 6.11523 6.18604 cv
6.13672 6.03516 6.16016 5.83057 6.16016 5.67969 cv
6.16016 4.85107 5.43555 4.51807 5.14355 4.41016 cv
5.14355 4.41162 li
cp
3.5957 1.44824 mo
3.66016 1.18994 3.69336 1.08203 3.89844 1.04932 cv
3.99512 1.04932 4.33984 1.04932 4.55566 1.04932 cv
5.32129 1.04932 6.51953 1.04932 6.51953 2.11279 cv
6.51953 2.47705 6.3457 3.21826 5.92578 3.63672 cv
5.64453 3.91553 5.07324 4.25928 4.10254 4.25928 cv
2.89453 4.25928 li
3.5957 1.44824 li
cp
f
11.4004 10.6621 mo
11.4004 10.6299 11.4004 10.6079 11.2168 10.4253 cv
9.86523 9.06885 9.51953 7.03369 9.51953 5.38623 cv
9.51953 3.5127 9.92969 1.63916 11.2598 .292969 cv
11.4004 .164063 11.4004 .14209 11.4004 .109863 cv
11.4004 .034668 11.3574 .000488281 11.292 .000488281 cv
11.1836 .000488281 10.209 .734863 9.57031 2.10205 cv
9.01855 3.28662 8.88867 4.48193 8.88867 5.38623 cv
8.88867 6.22607 9.00781 7.52881 9.60352 8.74561 cv
10.2529 10.0703 11.1836 10.77 11.292 10.77 cv
11.3574 10.77 11.4004 10.7378 11.4004 10.6626 cv
11.4004 10.6621 li
cp
f
17.2617 5.0752 mo
17.3164 4.88135 17.3486 4.7417 17.3486 4.45117 cv
17.3486 3.75146 16.918 3.2998 16.1104 3.2998 cv
15.2598 3.2998 14.7002 3.86768 14.4414 4.25 cv
14.3877 3.62744 13.9355 3.2998 13.4512 3.2998 cv
12.9561 3.2998 12.752 3.72314 12.6543 3.91797 cv
12.4609 4.28662 12.3213 4.9375 12.3213 4.96973 cv
12.3213 5.07813 12.4287 5.07813 12.4502 5.07813 cv
12.5586 5.07813 12.5684 5.06689 12.6328 4.8291 cv
12.8164 4.06006 13.0313 3.53955 13.4189 3.53955 cv
13.6016 3.53955 13.752 3.62646 13.752 4.03613 cv
13.752 4.2627 13.7207 4.38135 13.5801 4.94189 cv
12.9561 7.43262 li
12.9238 7.59424 12.8594 7.84229 12.8594 7.89697 cv
12.8594 8.09033 13.0098 8.1875 13.1719 8.1875 cv
13.3008 8.1875 13.4941 8.10107 13.5693 7.88574 cv
13.5801 7.86426 13.709 7.35742 13.7744 7.08789 cv
14.0107 6.11719 li
14.0752 5.87988 14.1396 5.64258 14.1934 5.39502 cv
14.2148 5.33008 14.3018 4.97412 14.3125 4.90967 cv
14.3447 4.8125 14.6777 4.2085 15.0439 3.91748 cv
15.2803 3.74463 15.6143 3.53955 16.0771 3.53955 cv
16.54 3.53955 16.6582 3.90674 16.6582 4.29346 cv
16.6582 4.34717 16.6582 4.54053 16.5508 4.97119 cv
15.3232 9.9165 li
15.291 10.0454 15.291 10.0674 15.291 10.0884 cv
15.291 10.2495 15.4092 10.3789 15.5918 10.3789 cv
15.9258 10.3789 16.002 10.0669 16.0342 9.94873 cv
17.2617 5.0752 li
cp
f
20.8594 5.38623 mo
20.8594 4.5459 20.7402 3.24268 20.1455 2.02637 cv
19.498 .702148 18.5684 0 18.4609 0 cv
18.3955 0 18.3525 .0454102 18.3525 .109863 cv
18.3525 .14209 18.3525 .163574 18.5576 .356934 cv
19.6133 1.42334 20.2285 3.13525 20.2285 5.38623 cv
20.2285 7.22705 19.8291 9.12207 18.4922 10.479 cv
18.3525 10.6079 18.3525 10.6299 18.3525 10.6621 cv
18.3525 10.7271 18.3955 10.7695 18.4609 10.7695 cv
18.5684 10.7695 19.541 10.0376 20.1777 8.66992 cv
20.7285 7.48584 20.8594 6.29053 20.8594 5.38623 cv
20.8594 5.38623 li
cp
f
246.779 156.166 mo
246.833 155.971 246.865 155.832 246.865 155.542 cv
246.865 154.842 246.435 154.39 245.627 154.39 cv
244.776 154.39 244.217 154.958 243.958 155.34 cv
243.904 154.717 243.452 154.39 242.968 154.39 cv
242.473 154.39 242.269 154.813 242.172 155.008 cv
241.978 155.377 241.838 156.028 241.838 156.06 cv
241.838 156.168 241.945 156.168 241.967 156.168 cv
242.074 156.168 242.086 156.158 242.15 155.919 cv
242.333 155.15 242.548 154.629 242.936 154.629 cv
243.119 154.629 243.27 154.716 243.27 155.126 cv
243.27 155.353 243.237 155.471 243.097 156.032 cv
242.473 158.523 li
242.44 158.685 242.376 158.932 242.376 158.987 cv
242.376 159.181 242.526 159.278 242.688 159.278 cv
242.816 159.278 243.011 159.192 243.086 158.976 cv
243.097 158.955 243.226 158.448 243.291 158.178 cv
243.527 157.208 li
243.592 156.97 243.656 156.733 243.711 156.485 cv
243.732 156.42 243.818 156.065 243.829 156 cv
243.861 155.903 244.195 155.299 244.561 155.007 cv
244.797 154.834 245.131 154.629 245.594 154.629 cv
246.057 154.629 246.176 154.997 246.176 155.383 cv
246.176 155.438 246.176 155.631 246.067 156.061 cv
244.84 161.006 li
244.808 161.135 244.808 161.158 244.808 161.179 cv
244.808 161.34 244.926 161.469 245.109 161.469 cv
245.443 161.469 245.519 161.158 245.551 161.039 cv
246.779 156.166 li
cp
f
.6 lw
2 lc
[.72 2.88 ] 0 dsh
32.9976 114.631 mo
87.2822 112.336 li
101.497 111.469 li
112.522 110.696 li
146.771 107.69 li
181.021 103.977 li
201.057 101.928 li
226.297 100.606 li
249.521 102.522 li
260.547 105.307 li
.247059 .239216 .6 rgb
@
1 lw
[] 0 dsh
32.9976 28.7412 mo
87.2822 33.1592 li
101.497 34.2012 li
112.522 34.9834 li
146.771 37.3892 li
181.021 40.4121 li
201.057 43.1523 li
226.297 48.8472 li
249.521 57.9805 li
260.547 64.4194 li
.6 .545098 .239216 rgb
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 9.0%%AI8_CreatorVersion: 14.0.0%%For: (Franck Sabati\616) ()%%Title: (R.eps)%%CreationDate: 26/02/13 11:56%%Canvassize: 16383%AI9_DataStream%Gb!$lCNF'rFY3Ig<qUsp?W8>DHV?$(!W/)A8"uMsUf,BmDu$2.CiZSqQq_adCtZt7^DQPC9WUsojWm_MMI^aH/hAP9#3Gn4J<)nj%m.UD&jjhVFcYidVX+SUk&=bi#i"*)G(E\(tO&o[/n+S_QE=2f%B0NfSXkd,s0)%m6=UDM0kC.c)nc%qGk2FLqgPb+jrGQSWDt!+D%Fnj2lk;S/\SA4<<3C!Fka6W'G^E,SN5/6lNH0!NQGOM]<NgK^`\*re^e%[rVl`&Y]*tFoLhS)1&F+*ucGjW9Ao^d1g3B1jRg&H8/%6LXgLD1>DAbM=^3CA.Jrp&"WA]CUg44%\j[]8QRTH:IkdG,UK"p&;REPYP#Jp(TE\ckH<=pK,tehr!;(4b#Ge1Vs4Vl]:d'?bJ#[%1W,jB>[5%Y4FYsVicn&J^;h><2tZ^Bj245[^R'T=Du])E5-ot>X2@F,I/N02Nc2)aA$0]frp:NXZ@=mLnC@'b3TE9%SkB%G@hd+)%O5HPD^OG+2*2Za9n_k8hqU.%R!P#%_Eds(DIl@+XIrf`4qTgf8rdUB-re-pB+WM]>k0#E-McY0&Heo5eotPgXG>G%70f"UVqtg*]%h=^T]OW%ocnl\#,QLNf-ZWQon+Y/U<oM8'oG,7(qqeWa^n#qb$rRKjKO6;kM40Ht,miGe@rC='&m!O<$1]#Z!lf6eCDlt.-.1t(>%eGjK7H+^"8P@oApI?$q,,shQBK<NVihAdWakc`m=b^Xc6S,DNChnOSbrkn9o?;bRrI.?WLoC_Lc:_$d4LQpL9p58&UjL3\K135bT%&rb(7PpD1+nZ\loH6msl>M9m;=)Y6ZIO07hhu(CJe`CUq`?-T0LU)>/c+d!Qjo"dII<[a.8:I-0ju7dWl"o,-+("V!rpJq>2n*^&%g:anDoN?+H2n`d0hnJ'aNM#GgrUKXN3;<(B2ue9[XflW(k)4_d^XR29]RJc<oFH/Tn)&PBoBkq'O/[aQ^:l\Dk[oT'?N9omU:9KM%"dhNfH@PU,4?L<(pPWYtlCW3C4RaHi_t:#/mt[P'h6#/BI%8UAh/kQeI:n]`aSF*BiEsq"hL.BJc5\e+G6buTatKs4msd@dAMhl-%fT/Sqr8G95cGuEtqiN6*\u*O#LXUTmJOXX'q!@GIrHF%#Df;gLZKn,Pl2hV+qu7Q&plZ].q;R,:kk%SYY^]TLJH'V-l./YFU&XY4%EpCD"^V7F.F*IWO];pk1?LZ%na.)jBIo!uYiU,scl`9olZTT2ebO`?$X,H<(WupaONc1O_%AiU^eP.,a%R`?6\$p;5_9Y0TqX4:;%Oj\XPme:8fC*]1\l,787n!Ce:SeM.l#9*UG6f#WjfA-u5jT"#jrq2"p3W/0]a+"l&iST*(puJ'nh]<=.qo'qdY57X7<0Q_=`Ja,"%li.dt3:ZVOr6M"\qZC3u#>3](r1E*!EXhZYk.Sg&ZFLrdf_j3r0;^u'V]Yags3uPnpC@/0%tK-hr;#6Y_du@<o[O=ArURoTb^dHW%EVQ>B^&Ka6A1s5DM'":H0@-j!k]M9(Q[\c,7q[#6PL2)^VuM!]ii@KQn`%a<7Q0mUInr5@m)dr'3Vc9&GkscR3H]h#HiA!`ihLEU%dGK;YijYrrAGH)jLIZiTLJL,&VB91#?Jk^U[u6<]EJI=Rlb2WRnbp)S#DThi^fHfjY0Im<eEX^@VB,=&r;J>XKm`[VX5eKGhOS"[%1A5MYZ%l-45MR<o3q#6#Y'Xfn"T##:hXqA$GIYD6qu3$VHt86m!fPo`?f.I4>okWV\aeQQ553O<]6!tV^\?:KqB+$*HMR1iNd%,q%p7D75:Hi[lo(M)@)L]WZ>(a$)?XFoF<ln_Z]kqI1[46WHIe3O6rN#Ib+92-Ia31OXD\(<>7,NCbE!M`-5M5YaW(-?P%cX&P1?i[/%F:9oNWO[9)H`0No0;!^mqtJ^oR`)s_LCll45t\,PO[HSu^)\Z[;18B5qsJEGD=RJ84"(oc?)uU@Er5jpqWd3fkT/^W01T^_3Mhh/%XJt'K?=1H3Xn2P:Qhns.]i_j(k_;T*Z-O?gjlZ9r00LP82sa.6Iab/g%lsF&Yn&,6gfQ5SU?<neO1mfKC#;iR*e19Yh,.@&fTpo4%nc%KQcfjs\nL!AC2`LJ:iuN%jIcrf%]'N]h>L<[s0oPj[2.Ac;K=9h#Sn\u.cpI34dsCoina7DWCJPO<[%`?9h]A@bqVqA:?-`er%Y.sXg]ReEmIDTtO5o.3&8KN>)H1c.UqWdqBiJ2gnTD#XYk;R>9G@>Xho(JV4VdH2305g52O-cb,dg+FXLZQk--NC\2?QHl5'nji5%5BK*e6;$1$m75o0<aUo.qERM.aiGjCr9g^o^OJ6"J+E';YKqMpU49;@\i6>lGFseq-G,f#otp"=oZ[W(]Dp()]@WTOrpkt[ZdqQm%VlM&ViU4bJ:E/NrLGGla-F:H.m0+!?5Ma&.a*04b5&6<si0b?4<IIb8`obhIpW#Mj_>^IDhbVj?4$3;pgs3WT\@S@LIsZ\<n>"#7%b3Uoo`^p:1%6E'YUgnga4-gm=aHYBDPCMP"ij33`YdDU)s)<12H%k)YA^!9Lj1C!iq4X-'6&5t46sY';d#T&2;&qm,%+t@>69)B$%[)^n+@^@.^=D\!2Q52^XiSs]0nAMq_G@q`\miQH)52?ZVF34E^N(GU8me1gR]t/UdNid'g:K`*i]R'1?,kc5%NVf&J*a\kcq!Hnf%pE5,Z4#\4n)>1R(QM/9M$Vq_p*'@7SA45JKL\PK'dV1boG@ti40;$M]h<!>Wh4(``o.2fW9.b!V>2=C(p8D\Rd-gdDE_]*mXtP6K%\n/+j`Qe@&-/!,VqP\6.]@.Phk3ZO$m\,A!@+/CMoh1m`\[]8"pN2_9]m2TL]O%W!;4IIWYP"so@rJqCUXbB;noB6Rq?gNu=d,?8%S*hAIs4hhUpOW8)iV)DZRqmf<j8@kh5B_3P'04ni-f[@)"^gWYGeYUgC\>/\B7'1<QjnGRV_d0=DVnaTI_an@R852_bP+59]\#CA%I*_1$6na>i2]'dP!#_?bgo-$X`p,oBHh#Yu`Q*HjHZaN,fAl0\:j!TBo'h,nIeBmOI//8AEVSBTnNm-LGB^OR?>1L-XOVK`mV<g>%^KOrUdcf(H]*in[0kD5":D1Bk\CMgTg_oeM*`!O%@Q*Q1):Ner.%0Cj+.\+0QQJh`CL\3mqUA>aKn[7tf=ub/EL%,-5,je0/aqg-%<4Bn0iimiZq_/r71F(fE\)6$a+$O6/h9P@a^\dSHJ+_sdr)BmalCbo3"R5mV.?^B=T[2>_hnQmOG^KDuFhj5YmWNKp;r_hpdI(:&%@*7f'XMT"fjfbolrqtDlHO!X?qua.kL>R/$r9j:H5GWQe@7:O=VY,TucuXG[rpI[!K@i=Cd*nY5]YP<6Ze^?@=6_`N&t^oG(%cJ<%0P^L/5OLAF[.de7frO<0GXeAoYI],YJD$K]a8M+7J/OF"kBH[H']jF#HJ^Gnn0<ks+oDW#]>Z5tOL6Bgr1s/Co=McmYIXWE`Zs)"%_UdfE7p+MN5H6W-Dg[%ar9`mjBDD.f50H^W]=W!"Dk?:Kj@[)h?edm'/@q<mHrte>nu*W$548.:6]1=eb;VY?W8KEc:G)0Kce.ch%lj"MuV11]jfW`+86Mg]\kr4g$_%U`'Dh!"l*N.l`_ftAYXHPB2Wk"OXq=U_/SVol$63tF?p&PF547U1UL`$'!["IuCi)ApU,bQet%^\F14&+16hQT$R2H/N,?[P0;WX@"q9mSM6`2_VVWV_A&$HX8Bfr56)Yk%,iT4,\m/*WgS*=Umf`<c0N2Jkp#*7X'+S_R4WSoB%ED%rSl?PW3JaLQOgX0Q32Oshm6FVU2M-q&M3t6+0hcrPAY#QgY/*QJ^q(@)^kTUMZeru\WuLh/]T0`5D5K:Y1V#lBF'dSc<Mbs4(ljN%PR6kC/M'<4,%?$t3X`+ArZ6:G9!%[QFI%M/*UARD:_#a:nr3A+%,fiB8YmI\?7]1aBHB^CKO26mT!dc,+V?p=8]:jYY5aD.]5gqF%32!3CY*jh$6R9V3boh6^oYO5G=p5Ae.qcis7YhGOd-J-o31KoK7S:@c`R])8UhhJY`j`JWhQn<c.E50c-*pVG1'<jU1'46p5q:()%]iE@S:VIF,bJnhMM40#XCSB>sI9g](+rB%i8ds9#SS`*$R`[MK_eIq4]_Jqelu2.QMAj8hHB\Okl^":*U/.@rF`ZE_GDEUN]`sX!%%qGQ"HaE@/hc>UZ,]AD&Veq.B7ruMg(R1*Yb@C3]Q%J2i.62&?ne/f-\ATj`\VsNJlckcu@L8"3O;#=2eksj=B?ijoL^+"p,i^o0%hsk\8"aroaf@q;"jMELG[*[l>W#_,WQE*-69(^W]>&f7tC2XpDp(3Q[hq"_f#f:0$X0Aa-`Hs7tT*oA83`Kj,$L7Gcg>%%:,b&(X%+`@\QO$q!&6ihEU7X7!<<u7ZU/u%\LXQ<=jOqPNXj$qJSQSpIXh@0%ejLHQsYSmN0SitC`oD<lYE>.</l5'>5<GO1%67p`p^9*oB%^/UT"NoXTS4b<-?'9WD^1,Z.eeFG.]aWeTKM,RmA*,\o09hIsj9FuY(DfIX,Y-.#j[3i<X7gcWue)cLH&C3T>l[L;$pE?>Yl4AU%%rO/86U#el55[9PV"DXREV"Os:C8Z`bF-bNaYI_u^eD?BS!6h84`p@D1]Cp60C>;X4("/UQ]r%?AQJ-[OFq.WR]pse@US[\44&Lft%g<K)=g(g+,hUC/HZdb#(FXsen@;Wt=HZ-6iH-=kU[2;qVmo36!ZW=1A10Vk3p3kIcB($HGAOIK]hL1+ERUu2aikk$ApVH-R9MY%j%<+=\"koFamXdn7KYJt$3S]]K%FoUIdr6"6rXODW(XYq4d#,Co"N\RVo:6_+sUN[ujC+*?gbNT3E;Fa&&=]3<+:be9cd?#,=n+dGB%>.3kFD`OqihFkZGL&$'EWB8!dZrYl&k^N,ao[@d-:W'o=L.D)S39d>Lf2(qJI6RnDoMYa*5P:L-l)2>JIL97\q^IVT56\Lh;]rN@%0#(%DSXB+L8n[Cd5^*)?d+V9XmBrS7a6i^PMI>hL5h:C1>'8OpnX"Yg"h+,'9%!90o=OWn7C8[b)G<:@ACjVVqNcR;`:d.+ia"bP%[e<WBCHnX&hXsfTCHj,`p<s>lI_&q::H9TQ:\f-K5G_',IS0EBqC.MS5G\upqC.]Xm&-a][dU-M&[#+RpT8\?;IE3RO.MQFR00F*%b<)LZcAZ5r("oG$98iHO[2/!u(KAbge-PSnj,`Y8JKtu=,$f(:A.s%UiogYG2K:nfI@,^ds/).$*R0ESq$>LKX?mb/p*aemHo<)j%3m"4rAeTNTPikXJSB['OaX1"LO;+u62i_X"+;d[;OQRJPW:h?:(m'@t7u.[\%6d^[_!<IcWo.@7/<mrrFXQ'>7_*+t$_1%TF9pg&%](``knlq6`9Atgk0>%smoSV9Mg_\'526[)CA]33]$)s)L:JMa3Oap>mG+kP_6MF4Y,6=Ok[Bq#/1=C)8>$d?B$#2G:_b^*%A)bJO%Z+TS"CY.4)R0nTFUb`bBGE4&R1DR\t[5/O_=An?:3<1j/>)\5.+PtCC!9p%fRAg0%URA(]YW4dDdHS!HW-+u3J+QlZG,>=3:3NK9%#YJYG-9JXn4&aO,;f=sCVIK@,LWP+,@1qfM4&Z0ua*"6\=Eb.s9EjO)ZSN?gF^^i?!7o=B=K>c.S"6N<Xh-;_U'0dC;ZY*\G,BkQ%ChG457*!H$NR8Ap[keaa>Ztbi-kG1[<8a6<[5/QijaNc"!4HH#;h5R^cH]Bc:"ONbJhUhM.]D_"S>d@?S'fYL4BPK2G,BlK[E_`J%NkCp^TNi9p;aK:Vf9lsqJRiCCW1Jp8WAq#kh09gapXbf?_RuG=!0WeAWE9^/o*\$N?W&X8'gTpMc;Y?UbY/1jR`nG/JDORtR0k&4%:m:6>"V;L:9Ec!BXYU]F'g#=p,e.6g4b<-?'9WD^13TOH&8*@$-puD+<,eGr9SN;J0iPo\+'53tf1P;oC[J$lWT]T!449/C46BUZ%mmpQZI/o#U/]Q9MA>T!MRCO?GpJJ"DeD>b`;L@WEBi"+:M^u2Z`3%OL4l^m(moWbm]d(p&]DZ$7I:.]]Oj6Sd*@Z>Mms3VfC.H!>%C<+rnWP+Wa>cGC]Ff"eq\f9.Z'&6E4a3%$A5ZVX/Lf4,c#.4P9W?%#?T%]<^Q.e=Z=),dBn#=!1Br1N`KU(7gdsGg7[Sf30hGUub%DQ)AV9^S(e6LFEJ*OR+^/%$VR/%+Elp=,*8=K*>6]MSJsea9?L4ORZ]8V\np%U1"=YiV[uQBMe_*pKnShdQ+JLJ<hOfQ>PMdn,=S%O*'$!dUD1=_o>2-CcpsdnYF(B7lkHIl*0EJ_kopbCd.*fq4tprlY^mur()Uf-QP+;FP-L^LWq1e2P5*Dr()Uf-QP+;FP-4VLJ9-:%2P"sBoLOa3-QP,43c$kEY\E!'dn,<hO*'#rdUCTrLJ<hOfR2+Uo=i-1X7!@4VWKjp?KO(g&SbC`J\@>9n.c\D88B!i%AA8ZNngKV%,UII5&VQE`[.>VFWQ6odbMK?ll9uuE%BP;DX^[2NT=/>-N6VGfM*_\VP33g*bk`9VAb:A-_ElGD9M"]V9]UdhYBR%<Q"sAt.[5SB%_&YHQLW+](UZNJ)d_+O*b9U>25+[iK,0rYhTB*9&&(8&J8A-:MC`uHtY0;^8JAX!8+\MdY;W#/sWlusDjS=_?Q3#6c;&R:l-Gh&D%2OSOrX+kA%Wu;TOeN"t9lo$&eLc$>)4OTlf>a23`kPFcSl*OHKPNN,c,CEsrj?6:6\ug",(7L%IA#\!m6U9t37`A,BRk&lo(&hU@%J"kk!oXW7TDIP7*RoBiUo2'_Pcu%T+VL5s,b,j%dk!#Lrn`P7g!9-ur"DhlY&o*Vengu\D/f)K0baIU+O;:Rib_\.1h#L_FdK<kU%>r+,;.Qc0lk%/!dmEA5fj5HA*QdNMm?="Y)I0X"pD%?7A0S@'XGd%FY`FK2MK'38=0[RYM7%RO$K7+!9poA!D0*0OaAh=(FL&EJj%JX7=^)=0FO;$1F3n'G/>kHS><H$$-s^["udYVF]RS`#\LlO.=r@pI$"S0V*G.Z_XHSo%P_\TefAE->gT:rdkr_3Pk;.'j1?e=T^q%)!_!*!p$7"l8oba*9p@]"Cju7W4.Qmo`H.#IA&?M@"s!'*SN9s,7@^uAu%)A&g<Yt]T?C>b=LNq?A!^7EndHb:ET"-DVL;fA"?hm%)<l_5&EZeR!&N21N!F]%W&?Haj)me&*d"Wa9Vl8(HXo7hAqk;Q?<Dr.'S0Q25UE<>k<OMpEP$e9pF#2@3os7u(X02l*NA=Gd"I#P%FAft@4E3[/a?h)sD:#=o3D4!M9#_sdR4%5)36'1=FJO,FYfsV!9U9XV<HP@F.E,VGqtG4S>B5u`;rhf@%5L,n?r@2ndS`d;IEhS!%g'*kq'i.Mi:rZ-a1Fi"fk-PL2640dD(6uZ`Ts`m/L09jpF_Phb#-B*a6$s^3p"gFhN:P3Y$<UUnR.*.!&)gOIFc?$nY.WV;,8SUk%Go^25>JdOFi\>`g:R,45+HYf.[Bs7NNS!`If0VpcQA!k`8_U!5q<MF2JL7@/9W/_"l9uI(/ZBO(Gp]M##u)C&Tkio/$`R(?aC<]^%8rp4Q^>:3;GP<PuYd-<eD+h19hGXhM\;%F9K@L^+XPRof9sUj,Z2!B]>-AL-_9tAN/5Eki2S+"5/$3;aYhCDg!fop=UP79G2<U7S%9@j<9Z_WTu+B]1e;HLYs]"s'LOc[qZO?-\p0&e!rA>p89l93ln"!3i8_-j"^#-Cs`I'cqfor(BuV6nh0NnCBsmB+q-HY`;dhDtYc%>:mk.'a_"U[JJA/g9J&p<k%CseXcEb]'Xi[7s;SR,H&5_Sb1LAp==E@>MHm$[XE)]Y<(pMFkcZA]'Xi[Ff2p\\p\Ma7C;B_-hTBD%COc2V[ruT>>ERq!>:lS_F^UuR!a0kcFf2nfH!#E/Fo1$Q9&96m]'Xi[h=eMse\(V,NpM'BOJTDr_":ZcEGq\,QJP4eg\"UidaD?^%mBsEt>5,]F7BlJd2"[WRT%)T1[rsVA2KfH^8+Mt=maR.6K)&+`I0^WZ%&:,3EJ1b3JBVEs,5Kb;L#K0Xk+j6@C%jp(noKdK&0Qc+%<,56Ve3mPM&=V44V\hen+/X(?p9sLe:u*<[k?Qth7+4O?oPmh@<0)hL!>:ki?[M3d!V'B2,5dtS-*:3cCc.#O&2-;sLRc^4`LdaJ%3MAS_6H$Q/9Tk_R'Z-jQO?l#BdQB#[M@s>cd\_&Ok@j9"=SKPkI6t7@RgBqRS9BGDf0U'QTtm:e*Ri^((%\Hn#U?,Ng!kmb2AK(Q%:"15KpB<_3Q&qq2h[3Sq.!*8E1D1AG6$\J7iTJW9.^[%0PrrS'!i.JOP3FaG7r_"fbb$3Xh6ft.9bZu<,N1BqSh1MO;)[39'@6C^%KF=hMRAqIt-"25g&K/(./6Hsn75[#?=.D[s2&]i]M#5Ns>GPR!!KOFL>U?011-\6,S)!_41nn+F@l3D4RK/\<j6eVE4>[@EN7-.#%WOp$+Pu>n*%iUk(&DUh/SX,^He`!:<YK92"Dt:Rn'bQasa1[LA*g5QjjBEm_U(=gfEWaRtbD$Q\o2od1Xa1/,/Eu112s_:`_9g2s%9rk!\1W!+Be06ZH,bet)cn#nr2mM'<=UgZ8UDm!F!l9PX]MFs<nb[X!bT\ia&<]TD_%=JUfDW%[>/_VBrEG3('+7\;?1Cb-"Wl.;%XIR+UdTJT#8Np`L`$#97hk-c5#_Zcr3.qs4%cN"rRdCD-4"WrmT_ik80">a.@$M(Fj%g`1?8#K1IX$O]P./n\5U__4G_BMkmrcg\%*2!o6_*^jc3r'!Q#aaGf-(LA!KKrEm.rYJ\=_HiXUFk,$3?VfpJXen"[^+3$T`fZP2Gq@WC+p^fBuR&A#h/.k=ZKk9fNC4$RXR*5%;Zhh?3$<>K$(s.$FU./B[4ZI:<.Cn.kmdcW(+"t^I5Q_D9QuS5Zrs:=84[o!%Z#>pS/g(+/1,D)&81.d-86IW"XAea'5DMJK_.=?%cH1('m$o&WN.m/JlI"eFD$_4P+a>e]8&_hA;RJ(3e$F)Nldk0V0eWcjessa5'-Z5Vb?7(WXt7LIS<Su'QfFDm=mt9o117aOUpFcg%<*?O!4LaadpPaAX@&^$3>30S`ja_I4$N'QtE`[([C(,70q*<0e%;_8[Uh#@^`-#CHE`L>r*,"'PbF-Zqo5\(A3k20>>Zd)@euF(3%K_Y![pu'S";M3V#083@VZ"#uK./aHS@Q0YcHVZ%nV%9B3<TsUDfdM7K>;Sse\$+)3EJ^dt[RS/D/Bl'_I3<N6Ps11phC<pfHIp]Y%n?Dnp`'1CklogoAk]@)K%IO=@?H#)^*dn7!GGKL7p?Co6.e\F95KI%Z?-f.m^9>+>m>4nB(M\^eD8e[^ea<]GO?r;l9m0;H5AnO_%i<NRiaZ[b1o-F(/X\*:H+!/T<>!^\2?"mKY=1;?TLkKq"[A3#0#8:#tONhJ;#oIEd(fNL-Nc\68VjFMhT<i(95-iGNm%eL:s8++N%!Z4H(>,r7;?*u6>dorC1OpmJY08)%p@[ld@iL(2/(U>6t04\O5?\lO/?O6\)UK1%Q;!Sl6;QW%ti,s<:Ln:=VSEpWWrl/M,2MNb"%Y@\$+Q$FI*A7l0%%S1WG1B]qH.!B1)hbH\&AN>53=fOnK"C_>,e$1)RMi=2M'D&dkA:_aIHu85Pd*<2O?-n!;0khCi<Uj5)A5m"s%B\*J#R0=FS6O;^pc!cl?GdAYB`m#-ji5a[c@&6G]$B?$-()HU=4+,ThUmj^e89TbbU$3rJmLV"lg*V!f(j-BC]0j)6l$a5B]Dn1_%/1pg?nIr1kZ4fG9qe=#FN75Ji0sY:<0B+?KnPs[i*.SnO/]M9GO<l4S8DM00!:r)q+[f#u/E/#]NE_p*AFqhs_2=kF`$H`2Lg+@%%63Ke0ihn"I)"D*cf.h;R@uNf:_2=laY&+u<!6d)>#se%oP(7KB]9!.FJSbu`;'n-?#^K<f@ta1Zf3LoKYdT31:kI)P*s:a%W6cA&%!Gm\h6,I%XIZT+t&O/!`Mpd^u?bPjF:P@'*N1q`&,p7d(GScGA/@7kD!3lP2'/1Z,`H['3KGO*1fBiVP3)bb16,q@tIdhVk-[nkt%4.DD7pc5=`h=qi!1Keq]#FJ`6:Ig!G9!EiG!s>f]TO\i.6SI2NT8nbTV33.aW1$0QFJS8T&qJN:LnC%[37+Nj1Khou&-T7o+!>D4%58G-/B.tceOch/j[L5\MbQ]A4`Y\/$5AuE$.YL7gTV-*t_J.R!jPhQ<kunR+msR>Ni[6Vo1nDRfJ0fAk$*j5XQ=Wh(Y3hN8JJGf@%$,G;,:5j5B+];X%>Hs!V??pBjjogikbFHAbZHNWnHR""+mt97-S&Cn0SS0c?!oeF`Vdj:@ksW8AZI0&TlrH/E"=&"hXK!7k1T>e0%Fd(MkBtP*D&UrjdIZS#@`/d=k\LTSk]ulrH610R,h2*5R_aXLAWi^$_G+#6.%!"#LG-'6&/9FcYkEXc[o.Ar,LgB57J>IFA$+5fr%Ba2!*ANTEL=^&`SZCMd$K3Iq0nUi#f(-8F^U(om?<OX@MhRBdA:J,#?IrTCFd`i>*%Nt?_Pm!BT&Igl)b<p<U5,a%o5l/7$W_HdP%+qe"l?kc^<.HP"?bCL)b>lr1u%p6YVk8jP.7uEX-itS'o,k@DN#V63=HiUU49o<6._134[@6t%=!V(nRn$I@!=eF9\E^D[@+m$L[%.cB<P^iEhfN1O=C&?-8DH.jNS>QW*J@eARdG5^rZ=pBB$!m3b='pHFR._V"X[?AKl8dQP:#Em"-86e.t=to+36hI_gTu"^kML#7I%Wn]oT<"=F_K*IUi]4dLV#*i,AS4nO@Vj00nq4^1:5^6AT$nB;=4C:=*b(4-\CTGM*d&0E<'N@gu%4Xoh#EQ]SfeR^53`Qhm%R^Mt%&QB7a8(hAs604>[o8Db>?&aKZ:OD!Bk6)`p@CI;$BX"+0YgqSqV=ElUhOtiu"dXr:MT$c&i<@-q!6hZb0rAP.<+PS.&*js'Z*Nh"%L\6\(3Mol2eHJ%5f;]EYF&9'j6trqAR*q#Z*JdR9([.5mMf'um0tegdej]Z8o"0qH!uk`r/Mj>Ua7PC:SN+tN]jkR"L<&qD[EM'p%iT$0CFA/lo%($tp:aeVBUj,Sj=5+S?.i)B;?AA*4aZ_!kdZGY0q_=mN7#1DcN?K;k<S9OT@lb1aQ3_N26TWt8N9U;)Ue0faN=R\m%83$TfkF/_X1>7^2*Ru,U<_<Vi.Z<V6:^7VDo,%r%"#,A=`HY4_72IIr:oDq0/iss#.8LR/cD(d<*Ltdf#)#Oc%dGGE>-XPtFM>R"%,!W3Bh4WW/==D:k@V_IYENA[=,jHg3,ZcOkU;gXnI41q*jUo0Z/s551,[<s<<nh3h3m4ejZklHaf!)a>ibIRYLc-QW1QLUGQr4;M%;e@LU12`3DGm9I!d"FkKiGCVW.[#e^Uj<I0B[\,ELp?bq;mN)&1dFa92EeQ<'AD'o:G1=>d,g;A>NA&K8aQrp$^TKO@&Vmj9^PAa%V=orE4gf'h"0p>&S-uU^=OoX?GAJ(ock4#(H\8N.,PL9lg_M40N[.9ap3.hVJIQ'Y3\.Ho2eRf/fGhJYL"JJmM_:YYB6V:S'2)D9%a6BBMZ0s2[&3GoMh%Ml1g0KQ+%V]4)h',JX!uo1=PZD5uZ6shFiC`HY:?t75D(P]]@ddE*M7m=JQR-fSo:FSrk#PprZ4Qm5%'a#q%M4G8_LqO\X:5PP4Zk,=i]b5\lhJH'T."df;>F9su<=1NH9C-0&9Z'a/AR2'>-KteiE:I*EBXo@n#AV2RL6h$%-F(]QN`asV.o2/-%Un9rP!-/f7lhQZ@]M8M>:DcKO;@Os=WBb!#8qKqiM`R7U6)fEqT8k[,J41q1^*jA/^XL`I)3d`qXF=gDWeRZg6+3LBW:EoSr%]Qc%';RmnKJ.X_5o+c&.[@99F'5.B+N4J[1*H+b5)lItjG8-e^!60'-mk2kBuL^Kb%2bEqFUT69!\\(lP^V1;.E'\P%?Fu&!/,.$V3f<%0W.!o8QPsAZED.S@lS@k2c#Kj<5PXB9TDZ?jAgJH5Uo&CR#"_eVG-;0e)d,7^KA73<@aX3lP5PZ3gRf3,aGrqQYk(^OpW`cg!_An%WFSNc-6]>g>*A,A$;%)NU1$b/P=kdBe3AY_;KpOa!1FV\QCkOt<rEjg;Zo4Z5m:gD;RmDuR1,)'b)/_fNC`/W.'/db,'?1Ndn["0%aO+?rF@N3#a"K`q80oIFHDmFM/7VbM9@OYl8o1<^K+a>>4Z(>+o!!/("Lh9".eUJ!dJ+?;)X,CiFg>\?'ITiWVLe?LY)%b,Xr'mo%"&Y)ATl'-[*[.M9.8MsP+&@B$Zmk)ma:tPjU]rm!]jtp/^KBN7-mnV?V4UtGNHEt1.d@JOM#..#=W]dr#2+qcc6(oWks5j@quLe;%-9pJe9jg#3$V&D`+l&*sq8;O<C5Y'$OhQ14Kb;BS3,N?umJ<SF[#5"lBUR>153T8]iW'&=2:(Le!^lKO#7u\5PLdp\ir0BX]g#+7%b'jE_rd^eU#o6(Zq.f1ZaRM:p:S/Bo$jcS*nF9g\_@WcDX<PC9Br.g#7n(JgE5VLHkG8g4pEP29[D_fD&Fo]GVS4,q?;Jgrmft*b%M7=AZO0[\tj2q#t,4.t73r3f$HPYKL(f++8/*GtLan_\mXtop5o1'W$5H+/YA.5SZr['=i^BGkFNtY.7pZ&a)P+q`#PUEY?)rhXo%]9r7kqRDp;*[NEQ?E9GoBeD>E.Ef-a<nEBlTh2Pakm?sUN(BuN)$f)`S6Z[<]aI<XQrD.Mb%H0q*kfT44*ir6a=)$NA#>473Y:^E%6dc(r$%?Y(K65"n:`lsrrcP22>*>laSXZ1/=HN&u#*V@j.?/p/1/gDK2Wm\naH#5p)&J@)jSJecU$9)nm-OgY9M/]WcG&^qC/#di%qPbN/,;F%oaatDLZn\9[eKC`+76%/]@Pan+?kUpX886Mj1$Se%E'oV!"'!a25eTJdG&o"$PnIVt8M2`7$c\CpdG*@2;b1BOJ2,M4%M.m&iX/r]DDN&_`01\bU1+Mg`'%9=+qFEV'",r&E!KDUfM`>TuR(&B0=qo<&YDO5k(6^*+A-RR]V`9l<TbOIq+&\Pa?+ZcUX^fP@%>4H]t`j5]fGmS*cPa%ko.pP\og9ZO?&`RB*(l,FLOG'q`kGda.7aZ&%1A#NsM.U6k,M`4JUu_boYor\f2EZ:[Zea^TVs<efTl=.,%0]?p8"]BF`BitiJg=[dD%!kP_'l\e(9J2%q$*JQJF"?02d.s&h?>hQ=6XFpEM?+Fb"@g_OHmHDkTDh"fgA(u'%&]`6e*GnAc$ss<%(elacnSl-;W-R]6YoqP?/m]A'r]b9)5tYhA3-Q'T"Mi&qj31.Ioj(B0$:U/5^s4D@(6H@RY`Pn,o-&)tGRc)%Tt*oK-c9FiWN2LZ%8>iLV8DH=?e&c`8FREc(?6Htu"%L*oL`.Nn&b'iD9==?f-oMn'"T8@o]4[*r1XQgm0]!e"_\M,Y+lbZeK$t_RIiRifinq:;qS7##%0Ei3e9f-OSf%[^YKXToL@&IKqHQg$J/4E6cifc)u67F+CJ\DuQZP]@C-CJ8;J$-]>*OKm0j/tf_>D-gQoAr-;jAY0*NH8-(A1Pr?%@@r`I3#=LcY0FIb3ltR1QpX1t1U72R1g[YNib`d5:sTiH5>I"N#,#WHK1,E0j>k1'j:A0L\G=P[+hs'f-L_VsS50A+KoS9TSrBCf%gmmR>"T#dndmU]F=E%%dbWMaLbs$2#Y;Nf$V5hsmO[KYM*(0.pNK2m$L:0k`3D=ZroderC_RZ]Wbh"Ed,U%V^i$LcbT0J9DBeLkB%c9Y2MMjR-`UbtF>eJi\`eiFCl/i79m_hr*#D+]YF3Ek=,^"_Wue"5'WF+]G?1Dgp[:-6^@8hrK.V9+egBjIBr6r\ga68q3C]M:Xd%&1JAUZbfm+V\H!WXgRmZgfB,_=rpNL]2rhIE0f="CeD+r5(UQ;$4UaR,31,\=.+*8gg8=D(:A%Y(lH6H9\.4g4tEsPg#t/-&9d5p%AbN2NC7$#?K[g]^P&'M5Yn+ba]>90Qom![^lrj4h@J6e?e6qu$fA\2s(Mt[Tfu]dB(0*7D:1iD8fjo9>?cb'MQ/g[IZU:e(L"[!1%gchAsm[0'Wd?6T:nLSQ(GFZ(/]d<Cs4,G;&A)>lX-Kh,_q[B?%Aj'PS4j+G'QJHO-/,9R*h6Vbg9m.V7@<[>1]-AWuR_eE:TCC?<%pFHu`PMS%?>qBn13F^=?4!\A0X&TU(8N1]p=DMi)#N7#QM.ddl*og.p*%(C-@_I5q2SrRm*A<I_JS0.mB-5#RYI2$=]^V*NUY's[%6:83Z"=AE)IcT6iNiUbcFjI04@GM#[\k0iKr>7CrdTiAklKD"mh[aB5S4eaY$S+(K>I?po4QEqR$FX+^1(ZZP9>u(?M)JF;q'+23%TO*dTelh[/,(G\S.Z\'0m)qoIq`32"b.LBuWgAt2d_2>I;W;bK%>%kW_^-3<\Ih3BUnA-mlD5`QWMe&$-$?*rNo:[*an%@*'JG>G%nM74G]Hkg]8Q38IcYIAu]HgXmT<]`aY\T?AZ`dEBTF;t@LNlB[c*2FaF9Z;]`(S7cE\ta.!cP\YjGP3_^e?8D0M'<PE&au4;[Lo;%M=09*&dBH7`*F^<6Jl(+!H=@RVYOVUHde35$+&^<)[V^=L#,FhK_YT6VhF:77H.&KUPP0heqta^&opDe`Q%RI_C/r\0ZXq=]dcd=%Deu^7#k$VK4Z]7\DojDp'R2.R<%o`.Zt6:GHE4%u7AF8;nkd>)_'ib-bd:7O6Z'Tf_eI(QV-oIa+Ef8CO=\\ET%YG5ng*R`_UIu^%7]10#"d<KDRL1B5[$"ECaC5]L_$UB;=^6>CXFd]XXC,j:XC0WRZ%B6k@VmlADNOC:#*Vq]#r>4H-&`P9<A<>GXQE:^"!eJ^NR&9V%.Mus?$HAsMeDAM#?nB-pJ=-NniahVl!f#PZ,j_Z8B%"9u(dmbl?REIeI[S.!qSeW0lBc4[qIPi%l5*+]U0f7VX"p*u4qPX!!up$u%qIPi%l5*+]Wa@*`X+$JDXU<(2]5!^IV(-)?qnD&b<K&5J<AB]m<M3$/+,HWbJLS@7MOFCF.`V%kWgLosWa[;tX,=.bY:=-fWJ[)H%Y:@O)]W.>jn>]82_%1&h]Rbao<Q%R_<tSpK?:E(KGS)Zo\lH[NJl`OoX]WM8K&9YdT&?[)`eZH0-gj+cO[9P_W?.Wm8"3E4[S-r3%N5EWZ4S=>o>?\*u-OsTS\q%p3ZN:?(ASQZdTj.Z6N*!KOS@.`RW&0qi8%MM$>ipU+%P7[tEFMnRNKL?C=.jjO>EYMa_N'EtNWJO[%!lEp)GTZBL!QOk@VPMJKaXOE,2]G!4AIs1qFDf<V'Q7E9Q?L>!O+*)3UQIA:A(iKQ-N-q_=/X:_8K'^CVWm]Z#Y:Ya"Ld@r^r;PE%F;)(@!08BGJ`L@8i?iUc_?ENTd%oa8VgIGEa$1]uM=(G;!$**#:FS]4?'GbOrh[]0@.Z4c#FX;%X4dV5@JW7,.mBc/,9MaVYTVN8%1%=4G'_/"29B30Uo>ETr7BCH,&eMbo2G)9"jBMp&U^9;VhnVVdKSQ=q$[sARH)D\\W_Gp0Pee^C;FFlQ/k4LdBt&Fi$U:\E;e)_G%dB%r%RPdTqe[(R!m4;h4hI7qdC5G"^YUXLDY[Thf&fsB8@&p_C6mSq`#[9*JYsdHi[NJ=WpBH:<)j6[/')**u`3$!^l.1g)MF^ur%&N=VrA<A!b.3]M3,'$kdLb-(89Oo3&a9&9A//j\S@G%;ON!5EEU.,=Nq/&j6kJ6<XnY%+apki!;QGfIA<^Ykkrn`3cL;ZCXE3H-n%<5`OmBr)`2DFE.BiM>a6,p[@5WA5*cKLF5RqA%+>Ho?rn",IqaCEt1Z@@!06erY!Q9$BalQGdPO<^YlpLY21IOE>CAq/WJY'sS\*%>-WgXKXPVP,[Qg,+gZnkVIG?N0d>Z1OLu^*QPMY:'M`=27,kM3lu^p?.`YIiPgPR]>2[nlBQutD"\;!1@Q!5R;@Qc>&&Du)4f'<K%UF/jgMFaNNk+2(IaG,9MTt;SOLnsLD)A9`;RttfM+LR3j*n$-=0!Clc&kE[+SK2?3XG4)_X<DFQX<H3iZ%fWr@WaXcDLh8"#*Uf=%#s$1#-)?j(eW@T%k)G)ud?J1VNWH1'N=?7dS'5&Y5Gs)ijK8Q)P.QOfamBa<C0+q"]B[F.mA_6[[B"hJe?/jnOu<\=9C+,NVi;&)%8aIoL%C(h?S@l#IE:Wij%'LUDG[:"&,^._!QIo2%:1@<'3%8))UEt*6O4-_oj!=>([@PH19C+,M-aB^+SBO/.6gY'kDHHcr\R"m'%j`]18PM9)%:>/bIBZXQQj0V__36>J!UEt-7O-A@!)GY<3a<:5.%<>MN3QYP1U`js4O-ABg5>Kp5rFj;YoqSp(rA_oI?[MZ=0R(rL%a`h';X8:,:[i.MXlThhd,*fRF%O^*)<k.m>DhWRDHRmV3Y.(j'hV(_NCHLpcFl-Eh8T1_lo[\?:>O+k!D3+>?G1'UL^:3+Vp:V2%%I-n&\m<e05g+LV?hFVX>crtcH&mTeL6tUAF)#%(,[.[NCqqd2[>^ItQ*A5#?++DXBgIZ=#-bZoNdTbHtDf$l8[6;rBgIZ=#-bZpY%p==E8>MH<iP*4_q<g:GS>>\.2D`t)5B1&IZ\AjELWclfgTN)0TWe%[^L5P@L)kWb:=:2K?@V[UYMQO0`lt9.\fV*s-e5faNhRkX2%&fJRb[KaS@gNed]Ck4a^Te2bceu7:8>FPFJ/D:`$=IbARUgEA'FJU0^>>?^!QJb[(K$fn:er;a%XLQ3/gubo)P"gb`+CWLf9J#c6%R3=2P;4B*h;4>/>EJdEU_9=JJES6K]*j)^SGD$g4\=?SL/s0')LXXC-'pmRBN0:F)P.$Q9'4QgENo#FkdS=Tnres6/CMIV-L>*c5%%C*iP3&_VD=^,@qADKq8-$E#FA>H%%<`p?1Z!!)^9:Nd2)tE2A?l#%f7t<`HQ&JG?Q8D-?2.;2MP67VYYf+iRk&#Jlb%s^DHmNCB%b3"YgV#C6102'Gc&Z[I\Pq#FAptj"lC:-4$/E%L,N]S?*'%jKNM&59b![X0j]FnS6-%_S>-+XFB%i(BiOhbm&6]nSUL>?iJ=<c)J%.PCh(X>Di@_qu`WWcEM*X%Jj-(5t'("rSLq0J3B+Q(s:;<,+^&;$fG&0K2F3PKh22gB=dedTWoYZmi*lpN,Ul9C42[-aekISBS-d%+nc3KYH+t!`3.82'"]X:8aNH.-Y9Wi['[!YEn[ItS@#HAdaG]tbK9$!)CMQr`3B*R#-4f3S@#HIdaG^!b=V"L/LOu-['[3CdW/Nj%ZlHHeYIIMFBk^kLjeR#6NK_s!15UEEK@s7-:1dR=Bpi7lj^`O7Q@lVG=;kpU>rc_#<_dC2=_Xj@A`]_2'o\@1#@aXf?pa61.jqa*%XL-K[\oMi'kfQKNW[f[/X0/g1m&<`phcJW4l]Ot[ij0#VB[[YD3u00BC1Aq*PB9Pj;pUjJ-IL,.=OEifQ.hN>+?EfQ<.n"6SEl?j%cjk8AY"N5F55&F<F\-C_Dg#9HC,VM\8HJ1PUtUbbaX.s3kF*Z5SZaMQGtjH^lB%i1?B_1;!!9?%ntIC51%4r[MirUp+k3Ye;O9#9%J"9s;`/Bf._hS<Q77fNl`L/STFD&\W\L=G5?'Vct]I\nm6AT5V'!L&720CHCU0+Fse'X='ZAlP-'>XDI8`p?nUA]4U=VB8GmAk;2%&hSdGDU2lcZm6Poa0HtN$Z(ZR)_Xj9GkkakYq2l9?'\H+/k\*@<[9ENa76-=!27kfkE7)cdrDY<=VU/+*)Jkc,gf$l?#GrRRqsC#%\b7YmXrlnJs7nOo<r)Y+X7?s/<*n>]WFBA9d*Ae7/BD9KfP3toA]VN<kf/2PoX_<6D!*uhX_n:(2eNmKOWeP`>l`L)+r_bEpaKop%ao`2I1RmrcCsk7A2Fb:VCbr@Oie"K&ifoE)0s]2/M/5RP/kU41a[RDD0Q]Ala[TYIk6qkeLg7ns/V)N9[\uYF!Z1!j4Hu"]'/``6%OAqs3'2jf%f9"qce"I\2KOQk$.:>!mZk:DNa`qI,jc,-Zd>[k9S@3#e,CO[gVIlWBY0Qqdk[^qI)6"2P#u)_fLf`#bQ6@,sN0k`M%N53He-g*>F<l7$Wj$8Q:>c^IRE^DBSeOZn8@u6UQ,A#"$ZR_(l^A5,[FCD+FN@9>D,ab"R;:HPpL2*M^Mc#g8Tc*sZ9h7W/EiX7n%=5H3$C,Atc)S+ZcUDcYA4eWeaG?Rp$Wfba&hX&AeijZ2p@?Wr?K9=V>A0W8*Bb4n;%nilR]CIA.^7&>QK]HNm4pPPMj'p!jK@lDZ%3UY`ob&PN<BgS#)K8f7T(`.cP7oN/,*Cjf^kt%=Bh,KC;`"_Ri$"B.Z@R\Ge-FD@[cR9bLDAV8F\=H(IV"XW]@!75.Z&<KVbV$JH%@<U%XL=o!S)U9\c\F@)n7Um[SdI;H_%Q1oE]$\m9.)JRA"#.*"0VNWONJ?&kp0GT%=i[JWlQR8qB,>D6PLi5[:)hT>L=c0bFs7h@%?5M"&G[9t",k_74AiGfJ]4aZ$m@kI7C)>-.W*M6T@;QU9$b)%/1fbe>%C_73>e"'MUZ$A.KSJ4j1:Va?KA/gQ)K$AE\8]($7RQSp%)\$S@Cg=JUAE.,fZI*Xg^@IlJP=I2,#MGJ-GlrD-0ne]$AcLRb(u:sqHhJ0>]VNlrrk$4Uq5j#!HO?O\>X.drq`T5'?b/GEm)`Hq%7a75UQRDf+Hh&A@Gk,r_f(@B*>J5,#G](l3.^l[bI!++O.G/BlNLREZgNrjVr=#8^[].9V3<&mDFSshal*3l=bO0dE4<L5+4o^%Z%9(Uibf%h2MKcZh88!:HMm.Z8E=,3:DCd;J$`VBCh=MK>hWS`aM>H7;7mgg7PRk?@uh]JLpS_;>DCj-I4<hs,F[#RA.+Ju]ANCld-%!'C1mj*1%jK>s,d^E8r#H$WU6ImpI%5HWH.V[`1QChM4c48&LRc5Z=I-mBD=GB5\^IC8Zq!T\X8$"9VD!Q)Q8p(S<C"6B@.-@E:=%B1'tadZe@OKOdC]#@`+2CW4"P&rOC@h]K$hS$p$q1<$#SHM,@(:p6IQrcLCUTnpK<`ALs$JAhb3[^/hH.9R/k+kJqpI'iNfrR(+l%2r!!i@U9"JV63$?I;cR#NLG4:p$Y[aiPU!@6)]&iojQko4VspZS=RK"a<hU`HAbj;20*]`)6qca%hb'\4b"S+RRkAJ=O5l.Z0-%(%@aBOP++*u6;s_rYHlHUDS\_*1eFT<oUn5=8VKMe;EMlXZ+#Hp%eMW4dcehp2kAO:&lL*j-r!g-9j$1([]_Y4e$5dBIO:]$Mrfc$c%o:O70IfEr%p%p+LZeo\H?2ab:UON7(FnPV`YD_:&BjG$@8a?QuZp(][lg"7@?<>2)n@JJpPLn@RT8]n4^ZBV2r25gkrfbrX[<Cj2%>@(CWJ+C0soon#;173JtKA+lMT@C$X^SQ,Hr?o"RmlsrZI=KH-lMF@-p&-8IX7'u;?%)apmHW4tDBF\nG(VNYX6W!\?!Vs'mHXOD%EYm>WZF7@DQJ9s_[oVkl:N#(AhBS/=:3[62QAapuRg^jA8p"Glr1\)I>LHuD,81CBWIHu#A6RAILQ`.D+ou,F:[1;OdWHP@RKQ_`%g_B!n)$"a`J3gCl4-jB63'q_J'eeoAY+ef$LTSs40rXF]992eB]:^L%M[=(=K'>5:hD/7k#^IW,7R2_l"!]jP.4Zp*]4h6&/2;dB%&RJ'rl8ZP4H<T-H)d]M3dndVMJM8rui)S@Z@a<bN6eHL'/NBR0hM/Iq=$W+Co#GQtH3*G>E4Xn*Gn^[7nJNKS@dfpJSY<'H'HS82%/'l`[Ukf[#0pVqKT]$Tg_a54e'Lk1Bdj9"$e[G!_Si@S>n]RtYRCS<.\T0Z(E2-X$/CLChMM!>D+4J8&Xct(p1X;GbjW4']i?.k!%JZJ4P4?"t*_LPOIL?U.uA)B(SYc$NN^$#nWEEF:<#NlDgHVs#@9BH(i]!%=#HliV1Z)@o86:I-YUL&l,MgFh-d1`Q]C#1<M.[g$_%2a3b(EY\>)_i8^7>Z*bc+n5U[STI;Je>1R%U)m4]=O0GTP'CQuMK`=ppeKLE)4N,iObOp*=fo8nb0Q4LT]-AH)cRRh1,7^T'"i;>%*6^B(J(GlA"Hbo#868L/)88Y$Xqg\<MY$2rJY'0Kf*uQHfTBW5(.3XrG.:#Zm0j/&/[84l!T-qc/+tctG3mCAm9A88!aen]"Z\?f%>Zq`3AB&_!N\?nCZ9=%FT!FpT&0+oT\DsICS)ef/p5*`UT+<9mF!+Mm:Fju_\<>6bF,20)e@$[I'3N/?m8K/--Gd2<Mg54HX4rhC%ffaG(1.%RT4)].H%ag4p^4Ea`X)Q+.q/sYO&M)Y7PmV^r#U8?IC#tm8GIkOD/4XDPfdB"FS`0#I7`sap6<X7G:i=edHK(c]&$\sm%:8^kj[jZHjWDk0uPk0clo#7,q3=r7HXVE@1,h-*1UYN-/\CTambt)K;A@#j/17lr%\.k:)1f4<JAja,hda/bOU4=]ur_9YkSg`Ds%>VXBlD?H//Z>s$b.edYRb+7784IfI-;o0QqEUgU,;n3"20cQ[D(M/HH*_=A[/BT!*O\7RS*W78nYphgho0MY?\cZ^\`lQT!Y"[+&%.*[<Fl#*V*]%`HO]!(R4l#(R]WdNsa+QN>--DdBhI?p+4G:cT@hSC`tR'SUUfh,PbDqi9h&W:jK`T#^N[+=-\WST5IX*gNZ0@G5G%qud5A.l7N<jniS5Q1($t<PT-"=8b=nS+XDTGLc027eQZ>GLc/JhaP:UH<4ZAl$X\/h@1h(Y53S;]BXU`mjd6C^T2mWbcLs'o",8(%Br(l[o)$/\:)1G'G?+-rhc6.AJffeWG_6=AX+HrXY6s,a]IN\JnZ(LpH`Mb-*3T]u>,d+G*3T_+EkEmsamlCU#KIckE;[KUa/afa%*3T_+EkEms8b/V6-[VnG[iDRYhHI19*ur&!]KO<a*RB!h7:+"!*Lja'<nO=Jb@.>lDEb6pN($Nf)-F^HW0@iG5G5=Eq5l:-/$:![%]@4jhXr(F)()mfAa8q:c[30UP!gJ#\pH]hpOB8L6Un,tOZK0!6W'//b&LMV_2Rb!_C+XJpiueA\Uu6B.h8$VeQ%6^u5#GC4o"N7/%<c_9C\E,&JQUJd="YS;h]S*1pQe4$ReYs%EnI_IMRBoI$Lnj(=)YKbg`(k6M77/5TH)MsrNLuDHJf0a"<^c?l1>!p$I8LDc@-1/!%8Ie?,(W+5_I8Sc,k6fNboW^_"ejTo)UfCA_AA/:]l:rjE#ib-ZXm+D#a*A$HVAg$0S6bD1c,lYElKZ`m@g6p(W2+\g7b@QWi%B4A%MV4]KO=IS\mgJtoV#*@>>&8X,.=Jd84**/OM82LMMnmW0/$I,H3F8Wq4*chLhflbF5A8tq5WS+I;#/%9'sbO&bE,0EBJ2oGTrEW(%SgC.r&B[\ci/4$8jYN6U3E/U?YtPNB']C'$DE2F::7J?10/l(iNS8$/%@hR)!P69QUlHB1k6S;,4Mjr"oQ6s:+jsgYR;s4%$Ze4X%0eCbrNoF;%ocRfr.%OO8XT_X`P0Zn49Uhm#F@7UKd[6Gs=Q+gMZ/dO\<\(cNR(Y]P&,WB%.]"_l_>nuV-$Sd:\WUH8BHBN1SF2WN%'hL.G1uc;Cb];JTL,!-ng_n'S$]`n=:*3uK/>D<2k,ad$WT,2im;8mjU?T5LmHBBV(2!8Ed^_WjN`us&HE"KW]J%`%:.AMQ$dSf0%9.Z,Q(3psjc9L:h`"R@SFknKSb,oq_0/]0Kk_-`?i2ZFN<;:7J]CD9aMPE5/-e"@J<(_7J*78u[h7fcOrbGFr#oET*2,lrJFb1re%-9c4EfZk*G4fuQU!j-WnilQ6:bJ7Z2Vgh*9<_slT[9"nhqH\.""/Z@X@QC^4Z;a]8`c>J<1*Ff!SGm4_Z,JKlDt#j3JM!2?2mBD1%0JR?'mOg>^'=4"a5N-q2_d?bq1uX<e@D6Yh\>uS!Zs)oc\8l=9Z\_gXphaH+k/=>I[VF`F!Ga\M@i72+.b3YJ#$WWu;cI$qG@K,Y%UFe'@MHHqEpmaWc2_ee[2b3'-fd[ic@b:BKb/J=-f$\\Tjk"\qbZa$&4rh2KeGm=C-#UXh%t?n:s)bHV\H3E\K@0X6p9pi43GrW$%L?>ok@lJ:@ietRgm^B!,3DX4Y8_R+rNTE-bh,p+Efr*poQ$lii;q[/,T#s7'Bhi4uG2pe/PG1&nDd(FBo;8?I1XB0`1\6R%3AYSW%c85'(2XQoX`_t,iQq<b<(T-"NIpj8Lo,!AI3.JbHRe%>mjZJ$$k0fj9?nB?9T:)S4m5$<VDP(?NGP`5hZ.m;9Rb^0VEpiW=\Qj=T%(s<M\37G7>M:6Lb-;I2QRqO?CCne0kZ&-qM`[8uYg=Sf'3S%YORW^8p>)p"XBkZ(,N87To0ns9lAm3KfR$gUZ(1SnNq_6L+m_cE%%m_cE=mXqcDpV@\ApL2cY9%7*LpRr+PSIZf(U[kc&ns.!Oj`l#+=,:lYe"P-tY$l>'_Bq'5`UUSI+^"CA6?B:pkfd9uY^u_(T'IC@%:(.E-_Zcb"*pmH>`KB[`N,YerDiZ+'6.06IU=F$%Um1a(,s%;.#LCa+`0l:WPK,Rb-HWdr&=TscNl;&4Me%uo64`./b/q,%Yj9cD%]2gd\"ddn%pqg*7@,2VLU`H4)]g]*!5jnE'k(3.5`/SE1-g(26kejY1(l_tA$kM3LX0NI*DCZgRX3`^i*p`4RZ!9_KSH<(Xb0Ci^%jiU&UbQMAn%7+>rJKDgamnkr-c'iB">/7L8RBVL8,h1Om2oV1e,W<58ElA[F!K`[/,sIS*Lnc/XR_j,d@q`>>D:@@gN[<K"$>dTu%!?lRNEMb7DOK6TpWs=6`12X^1N&p'U-P5+sDR#-#*_M5hUD>+`Ea99+Y+c4?X2=%K;sL_cV]ump2\<,/\h)K9<Jbjd.3U%9L%TkR%2q]fa<;qq'[F.MYK5kaOH(N#/Xp$:gaV`?Qd,4K$mG0EXXXNR00i%g9kYaAf*XL#Z!Us!L[%CTL0TND'#Ga0*Y)0G4^1P2$SRFZ(%!9E!eVWgk2"n@H47P2&+[G!;JP\%seHR]V**p8Ru$'5/Lh8]CRA85OEmU<=jC.Y$2/9VKRR/\RNDaC1("^s_@hgQJP(*Q7>+?hL[%c0aF<K@(hE6qh^%nq(7];uqFc*?hm/<EduZ!no#Tp7C2bO]u)<`GDn.o_a<OLXAj9I2]4b%>;8Tedtn53j=Y@iKfBj&ka$d:,*Y[%$)*bp<6E2e-(<_ar[9YeBg)d0]4#jp^XK^GO[b]79r*^J</^8Ql_%H7'&7`6m:;5!Hj[a4Qm1-!d@*DdBl05,aZ)+/dfcPe*(#]e%KMF)b#i2os,WMAf.[eUlLcK,t-5gPqB67nI6jhgYLZ\jG7iSef31)?Qld?r-oK$1C8,:<H+<sf5(i5OC&IPtQ8<so;/4R+E"6#M*%+;E%ZpL."[5km@"ig<cV1r7@c8iJrn;lKQODW$%Kr]E6.L8H9\OEV\HLBoXR&i%3]J>H'ZOq(:00JB=[cXe@c@,M2_XoUS9#IT^,%S2`<q*D[!c:K)p2N=3O*c$$A&_nMi>V'NJ=O<9+rONbt6ArSghKP-IqFHaX!Pf-o[QWGX:Gu/T9ZU1d/!0G6S,#.QG$q>9%!<tN*%K3QL&EP2r_\#Fc,\>pQEE0EdmAIn#pa8_@@a%$>N&k8\]'KHiU]W5EL!o^K*`\ET6^2P%t?+7m],Hluhato@UIVo]s4B[opL=]Y*%nC4Fk11G/MU#:,[$>C^^=Q<i,=>_X7&lK_4S#<8`*LkD=<YcX@&mp:lBcST((kf/2&S9sMQjB&>[YZrf<csn.,,]\rUjpk5DRm`"%4dQ]u(Ftfg,/(-6:#kg=]W6\']<\UX"4>NKO3f<O(ei]2YX$gF/4ejSF,T-^q2LMBD&`^H("68%%>:>u,$D!^;tl*N2*p)W^+\_\%9h1bWnIpC,&IL_!8i,hiN5nE@cNu/6aNabh^g&Zr.M![[d5H2")?fR[104R?,-afMg?a).&MntWXmp>ReD0OA'P?C-O46/&CkgS%%huiAc9755iM4H-RA]+%[,tQ4')Ipg'kNL>gK=9En)Qgu"=S1%=4J+]MXK[TJUfW<l&EDDK2D@/Ob93rfIU,TD^UNF(3nfr&?DI4B%bun]J*RPF=*;r9_gEUF]nA'U7>F@!qG%9`0H8unU]7NQj,>6Bl-0J%FqZI4Z;]8`+/_nO&>dRYWnFG.>-j\L&5Y(_`RC.$_.;;)T%J.W:?2OS+>PT_bm`$RStEjQ\TRj&hN<gr6p@9$4biD^06+u38)N/.$/iNp+7hNU]%#Mhk4q:\_E^NsB$?)WADP=pH315F\BNGE(2%7'FJ.EKYrHHN>lGTNYXl3BX)@+YUt^1gKI?g\?2#;D].JDotujM:#fC+'(t_I?r,J<.@o4gnsi5'\S%'&kM:n=onb7W^!#^Q]"Af%&6dX,?[VLj-_K6Yr:]F8iTg.!r9f?XY<(_fQ8+nWo%!:.qXF$QT=;`$Dr9C-4WHYtI=H<`Is?8:p>HgCs4qNV`b9r'qo.NX<tBLV%2fB0JJ+hQn(DlPtIWbO,Nb$fSZ^+mZpnnf(qXtr!@R@ch4ruq&qUO,cmj&"/<'KmK8`S-7+!,=WZLtEu^G":H`M9aLk[6d0bF6aN%"@dDD(bl@@E/]?)dL-^;L^aJk/JsIEfS<4"V,nKL1jHJkT4b/0T#3j%3)F["D=!c;-+_A1#i-j3KVmJmgrA[QG`K5i@o7t6[2g]5%'_gOOpMKDpZ8JZ+7nB-d$9LR[P;3\_g&r7`s$p3W?@_MOC+(J9fEEFjK:a)b_DR%3;QP/!'`)3'pc5o[H*JOt-A4Dank$lJG!mrV%VKm9d^;;hR!MRt1n\mY\Oc+pR&m"(F<jWLb]j@dRU5030-]8[>%fG+t3'[a?gpeMPC-Y=ZMeO\7'gtH>@9/^;3_.E9q;V#iKg$<>%LZc;oKd(@L.$:9^YP$D8_HA-fh&>aJ*=1hs]Yh^G]FmhnoHo["YKOXn.5?A5l0)&/'kI=WN-51T>QRH!>#++A<]Z:_Cst7O(c$Z-%/<,*GA.XWT/lMj=PBT9*lB*#Km;E'Wl\/-in_P!pF+I-=iH(tqi.5)90R,t7;M(_$\Y!Xdnc<#U81$0-oe&l"Umo,uDetOH]:_aI%fhS%Y6Z$!?:0#Ee#(p3F/fj3K,(i_-(-a[]D6']P/PYaa24K%J?.;<R`,p@i5L?:`CW7@e=3'@_JoL`m&3`^#_0B#<aTOF3MRTH<%TG(KDiTL!kCMVJ5gV&Z<29I:RW.%@Tc](VXVCeAW)?)E:dfq\X/*TQ_9K7+uea]D(-L@5<E@689a@*9b]tL8fS-Op*KD1<8_U_0P%YXefT^,H4Q'DJ1d8b@Son>B&hpqo>DNuAgUpbQBB%Xg=:LO\%gQSZo4UoMV2&kC?]GM`,-`G:?uBQPM?Q<LtnnK\-!&$8!U^la0C%F829W1INKR,\!>,=p#O$f6=g'Fd!CY_H-eai^+(lJ=Unkl8=/\.#HlfXG$8-5SP/la++.sMQ_XKKL89L::3JM5YBF5r[=^O86?2q%o3*'gs$Bf4[PU$(TF5@9)Ha61*1^q\FAEs\@'mlb6e?mOSt-HLfGNq\.?<V3asMfGb\.mO8\`Ycc3ObIqd>%.%N7A_ntA$LIeMcr%:HqY4r9i_<jnTG-]3kR.`CD"uH2ct$p"fGop$qIhS,;gGO,*=r)g$Vj]De/7S%I_Z_sQ:ME<"b]?\.i>eGRe=gXjJa5/4g\J,aJ3%hQ=NVW?4<L38V?^]'0M@hAdUIa1iWJrZAS]s6ffjpTna;T<\7;mIfl&kAU6u\m^'-n,ca=k3ppBmuQ*"aZP"DdI4gErJU[tp'Udl~>%AI9_PrivateDataEnd